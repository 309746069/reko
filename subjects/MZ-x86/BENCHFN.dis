void fn0800_0121()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_0121_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0800_0121_entry:
// DataOut: ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0121:
	selector ds_3 = Mem0[0x0800:0x01F8:selector]
	fn0800_01A5(ds_3)
	word16 sp_6
	selector ds_7
	selector cs_8
	word16 ax_9
	byte SZO_10
	byte C_11
	word16 si_12
	word16 cx_13
	byte D_14
	byte al_15
	byte SCZO_16
	byte ah_17
	byte Z_18
	word16 dx_19
	word16 bp_20
	selector ss_21
	word16 bx_22
	call SEQ(cs, Mem0[ds_3:0x05DC:word16]) (retsize: 2; depth: 4)
		uses: cs,ds_3,sp_4
		defs: ah_17,al_15,ax_9,bp_20,bx_22,C_11,cs_8,cx_13,D_14,ds_7,dx_19,SCZO_16,si_12,sp_6,ss_21,SZO_10,Z_18
	word16 ax_23 = 0x0000
	byte al_24 = 0x00
	byte ah_25 = 0x00
	word16 si_29 = 0x0000
	word16 cx_30 = 0x002F
// DataOut: ah al cx ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0137:
	al_24 = al_24 + Mem0[ds_7:si_29:byte]
	ah_25 = ah_25 + (al_24 <u 0x00)
	ax_23 = DPB(ax_23, ah_25, 8) (alias)
	si_29 = si_29 + 0x0001
	cx_30 = cx_30 - 0x0001
	branch cx_30 != 0x0000 l0800_0137
// DataOut: ah al ax cx ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid>

l0800_013F:
	byte al_48 = (byte) (ax_23 - 0x0D37)
	branch ax_23 == 0x0D37 l0800_014F
// DataOut: al ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid>

l0800_0145:
	fn0800_01DA(al_48, 0x0019, 0x002F, ds_7)
// DataOut: al sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid>

l0800_014F:
	msdos_terminate(Mem0[ss_21:sp_6 + 0x0002:byte])
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid> bx:0x0002



void fn0800_0162(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cs ds
// LiveOut:
// Trashed: ah al ax bh bl bx dh dl dx eax ebx edx es rax rbx rdx
// Preserved: ds sp
fn0800_0162_entry:
// DataOut: cs ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0162:
	word32 es_bx_7 = msdos_get_interrupt_vector(0x00)
	Mem10[ds:0x0074:word16] = (word16) es_bx_7
	Mem11[ds:0x0076:word16] = SLICE(es_bx_7, selector, 16)
	word32 es_bx_14 = msdos_get_interrupt_vector(0x04)
	Mem17[ds:0x0078:word16] = (word16) es_bx_14
	Mem18[ds:0x007A:word16] = SLICE(es_bx_14, selector, 16)
	word32 es_bx_21 = msdos_get_interrupt_vector(0x05)
	Mem24[ds:0x007C:word16] = (word16) es_bx_21
	Mem25[ds:0x007E:word16] = SLICE(es_bx_21, selector, 16)
	word32 es_bx_28 = msdos_get_interrupt_vector(0x06)
	Mem31[ds:0x0080:word16] = (word16) es_bx_28
	Mem32[ds:0x0082:word16] = SLICE(es_bx_28, selector, 16)
	msdos_set_interrupt_vector(0x00, SEQ(cs, 0x0158))
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_0162_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ax:0x2500 Sequence es:bx:<invalid> dx:0x0158 ds:ds -2(fp):ds



void fn0800_01A5(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: ah al ax dh dl ds dx eax edx rax rdx
// Preserved: ds sp
fn0800_01A5_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01A5:
	msdos_set_interrupt_vector(0x00, Mem0[ds:0x0074:segptr32])
	msdos_set_interrupt_vector(0x04, Mem0[ds:0x0078:segptr32])
	msdos_set_interrupt_vector(0x05, Mem0[ds:0x007C:segptr32])
	msdos_set_interrupt_vector(0x06, Mem0[ds:0x0080:segptr32])
	return
// DataOut: ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_01A5_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ax:0x2506 Sequence ds:dx:<invalid> ds:ds -2(fp):ds



word16 fn0800_01DA(byte al, word16 cx, word16 dx, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al cx ds dx
// LiveOut: bx
// Trashed: C ah ax bh bl bx eax ebx rax rbx
// Preserved: sp
fn0800_01DA_entry:
// DataOut: al cx ds dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_01DA:
	word16 ax_8
	msdos_write_file(0x0002, cx, ds_dx, out ax_8)
	return 0x0002
// DataOut: al bx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_01DA_exit:
// DataOut: bx
// DataOut (flags): 
// SymbolicIn: sp:fp ah:0x40 bx:0x0002



void fn0800_01E2(byte al, word16 si)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al si ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_01E2_entry:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01E2:
	selector ds_5 = Mem0[0x0800:0x01F8:selector]
	word16 bx_7 = fn0800_01DA(al, 0x001E, 0x0056, ds_5)
	fn0800_0121()
	Mem14[ds_5:bx_7 + si:byte] = Mem0[ds_5:bx_7 + si:byte] + 0x03
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l0800_01F8_thunk_fn0800_01FA:
	fn0800_01FA()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: -2(fp):0x0003

fn0800_01E2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: -2(fp):0x0003



void fn0800_01E9(byte al, word16 cx, word16 dx, word16 si)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al cx dx si ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_01E9_entry:
// DataOut: al cx dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01E9:
	selector ds_3 = Mem0[0x0800:0x01F8:selector]
	word16 bx_7 = fn0800_01DA(al, cx, dx, ds_3)
	fn0800_0121()
	Mem14[ds_3:bx_7 + si:byte] = Mem0[ds_3:bx_7 + si:byte] + 0x03
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l0800_01F8_thunk_fn0800_01FA:
	fn0800_01FA()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: -2(fp):0x0003

fn0800_01E9_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: -2(fp):0x0003



void fn0800_01FA()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
fn0800_01FA_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01FA:
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_01FA_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void fn0800_01FF()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
fn0800_01FF_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01FF:
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_01FF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void fn0800_0222()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
fn0800_0222_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0222:
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_0222_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void fn0800_0245()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
fn0800_0245_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0245:
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_0245_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void main(word16 bp, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ds ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: bp sp
main_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000E(16)

l0800_0265:
	word16 di_12
	word16 bx_13 = fn0800_0E4B(ds, 0x0194, out di_12)
	fn0800_16D4(bx_13, di_12, ds, 0x01B0)
	Mem30[ss:fp - 0x000C:word16] = Mem0[ss:fp - 0x0004:word16]
	Mem33[ss:fp - 0x000E:word16] = Mem30[ss:fp - 0x0006:word16]
	Mem36[ss:fp - 0x0010:word16] = 0x01B4
	word16 di_38
	fn0800_0E4B(ds, wArg00, out di_38)
	Mem42[ss:fp - 0x0008:word16] = 0x0000
	Mem43[ss:fp - 0x000A:word16] = 0x0001
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0002(0)

l0800_02A7:
	word16 dx_44 = Mem43[ss:fp - 0x0008:word16]
	word16 ax_45 = Mem43[ss:fp - 0x000A:word16]
	branch dx_44 < Mem43[ss:fp - 0x0004:word16] l0800_029C
// DataOut: ax bp ds sp ss
// DataOut (flags): SZO
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_02B2:
	branch dx_44 > Mem43[ss:fp - 0x0004:word16] l0800_02B9
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_02B4:
	branch ax_45 <=u Mem43[ss:fp - 0x0006:word16] l0800_029C
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_029C:
	fn0800_0245()
	word16 v14_52 = Mem43[ss:fp - 0x000A:word16] + 0x0001
	Mem53[ss:fp - 0x000A:word16] = v14_52
	Mem57[ss:fp - 0x0008:word16] = Mem53[ss:fp - 0x0008:word16] + (v14_52 <u 0x0000)
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_02B9:
	Mem63[ss:fp - 0x000C:word16] = 0x01CE
	word16 di_64
	fn0800_0E4B(ds, wArg00, out di_64)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp

main_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> di:<invalid> es:<invalid> bx:<invalid> bl:<invalid> bh:<invalid> ah:<invalid> ch:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp



word16 fn0800_02C5(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax eax rax
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_02C5_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_02C5:
	word16 si_17
	word16 si_11 = wArg02
	branch wArg02 < 0x0000 l0800_02E4
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_02E4:
	si_17 = -wArg02
	branch si_17 >u 0x0023 l0800_02D5
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02EB:
	Mem44[ds:0x01D8:word16] = 0xFFFF
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02D0:
	branch wArg02 <=u 0x0058 l0800_02D8
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02D5:
	si_11 = 0x0057
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02D8:
	Mem30[ds:0x01D8:word16] = si_11
	si_17 = (int16) Mem30[ds:si_11 + 0x01DA:byte]
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02F1:
	Mem19[ds:0x0094:word16] = si_17
// DataOut: ax di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02FB:
	return 0xFFFF
// DataOut: ax di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> al:0xFF ax:0xFFFF -4(fp):si -2(fp):bp

fn0800_02C5_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si al:0xFF ax:0xFFFF -4(fp):si -2(fp):bp



void fn0800_0301(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds ss
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0002(16)
// Terminates process
fn0800_0301_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0301:
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Stack +0002(16)

l0800_0310:
	word16 ax_21 = Mem0[ds:0x023E:word16]
	Mem23[ds:0x023E:word16] = Mem0[ds:0x023E:word16] - 0x0001
	branch ax_21 != 0x0000 l0800_0306
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 ax:<invalid> bx:<invalid> -2(fp):bp
// LocalsOut: Stack +0002(16)

l0800_0306:
	word16 sp_75
	word16 bp_76
	selector ss_77
	word16 ax_78
	byte SZO_80
	byte C_81
	byte Z_82
	word16 cx_84
	word16 bx_85
	byte SCZO_86
	call SEQ(cs, Mem23[ds:(Mem23[ds:0x023E:word16] << 0x0001) + 0x05E8:word16]) (retsize: 2; depth: 2)
		uses: ax_24,bp_18,bx_73,C_27,cs_14,cx_17,ds_15,SCZO_74,sp_19,ss_16,SZO_25,wLoc02_4,Z_26
		defs: ax_78,bp_76,bx_85,C_81,cs_83,cx_84,ds_79,SCZO_86,sp_75,ss_77,SZO_80,Z_82
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 ax:<invalid> bx:<invalid> -2(fp):bp
// LocalsOut: Stack +0002(16)

l0800_031B:
	word16 sp_28
	word16 bp_29
	selector ss_30
	word16 ax_31
	selector ds_32
	byte SZO_33
	byte C_34
	byte Z_35
	selector cs_36
	word16 cx_37
	word16 bx_38
	byte SCZO_39
	call SEQ(cs, Mem23[ds:0x0234:word16]) (retsize: 2; depth: 2)
		uses: ax_24,bp_18,bx_13,C_27,cs_14,cx_17,ds_15,SCZO_12,sp_19,ss_16,SZO_25,wLoc02_4,Z_26
		defs: ax_31,bp_29,bx_38,C_34,cs_36,cx_37,ds_32,SCZO_39,sp_28,ss_30,SZO_33,Z_35
	word16 sp_40
	word16 bp_41
	selector ss_42
	word16 ax_43
	selector ds_44
	byte SZO_45
	byte C_46
	byte Z_47
	selector cs_48
	word16 cx_49
	word16 bx_50
	byte SCZO_51
	call SEQ(cs_36, Mem23[ds_32:0x0236:word16]) (retsize: 2; depth: 2)
		uses: ax_31,bp_29,bx_38,C_34,cs_36,cx_37,ds_32,SCZO_39,sp_28,ss_30,SZO_33,wLoc02_4,Z_35
		defs: ax_43,bp_41,bx_50,C_46,cs_48,cx_49,ds_44,SCZO_51,sp_40,ss_42,SZO_45,Z_47
	word16 sp_52
	word16 bp_53
	selector ss_54
	word16 ax_55
	selector ds_56
	byte SZO_57
	byte C_58
	byte Z_59
	selector cs_60
	word16 cx_61
	word16 bx_62
	byte SCZO_63
	call SEQ(cs_48, Mem23[ds_44:0x0238:word16]) (retsize: 2; depth: 2)
		uses: ax_43,bp_41,bx_50,C_46,cs_48,cx_49,ds_44,SCZO_51,sp_40,ss_42,SZO_45,wLoc02_4,Z_47
		defs: ax_55,bp_53,bx_62,C_58,cs_60,cx_61,ds_56,SCZO_63,sp_52,ss_54,SZO_57,Z_59
	Mem67[ss_54:sp_52 - 0x0002:word16] = wArg02
	fn0800_0121()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 ax:<invalid> bx:<invalid> -2(fp):bp
// Terminates process

fn0800_0301_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: cx:<invalid> sp:sp + 0x0006 bp:<invalid> -2(fp):bp



void fn0800_0336(byte al, selector ds, word16 wArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl ds dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
// Stack args: Stack +0000(16)
fn0800_0336_entry:
// DataOut: al ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0000(16)

l0800_0336:
	selector es_44
	Mem3[0x0800:0x0330:word16] = wArg00
	Mem6[0x0800:0x0332:word16] = ds
	selector es_8 = Mem6[ds:0x0090:selector]
	word16 ax_13 = DPB(ax, Mem6[ds:0x0080:byte], 0)
	word16 si_23 = Mem6[ds:0x008A:word16]
	word16 cx_25 = 0x0001
	es_44 = es_8
	branch Mem6[ds:0x0092:byte] <u 0x03 l0800_0374
// DataOut: bp bx cx ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0363:
	es_44 = Mem6[ds:0x008C:selector]
	word16 di_70 = si_23 + 0x0002
	byte cl_71 = 0x7F
	word16 cx_72 = 0x007F
// DataOut: al bp bx cl cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:bx bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:0x0001
// LocalsOut: fp(16)

l0800_036D:
	branch cx_72 == 0x0000 l0800_036F
// DataOut: al bp bx cl cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_036D_1:
	cx_72 = cx_72 - 0x0001
	di_70 = di_96 + 0x0001
	cl_71 = (byte) cx_72 (alias)
	word16 di_96 = di_70
	branch 0x00 == Mem6[es_44:di_96:byte] l0800_036D
// DataOut: al bp bx cl cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_036F:
	branch cx_72 == 0x0000 l0800_03E7
// DataOut: al bp bx cl dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_036F_thunk_fn0800_03E7:
	fn0800_03E7(0x00, si_23 + 0x0002)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_0371:
	cx_25 = DPB(cx_72, cl_71 ^ 0x7F, 0) (alias)
// DataOut: bp bx cx dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_0374:
	word16 ax_51 = ax_13 + 0x0002 + cx_25
	byte al_53 = (byte) (ax_51 & 0xFFFE)
	word16 di_55 = fp - ((ax_51 & 0xFFFE) & 0xFFFE)
	branch di_55 <u 0x0000 l0800_03E7
// DataOut: al bp bx cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_0385_thunk_fn0800_03E7:
	fn0800_03E7(al_53, si_23 + 0x0002)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_0387:
	Mem65[ss:di_55 - 0x0002:word16] = cx_25
	word16 cx_66 = cx_25 - 0x0001
// DataOut: bp bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_0392_thunk_fn0800_0393:
	fn0800_0393(cx_66, 0x0081, ax_13 + 0x0001, es_8, si_23 + 0x0002, di_55, ss, es_44)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> es:ss si:<invalid> ah:<invalid> al:<invalid> ax:ss bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> ds:<invalid> cl:<invalid>

fn0800_0336_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> es:ss si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:<invalid> bx:<invalid> cx:<invalid> di:<invalid> ds:<invalid> cl:<invalid>



void fn0800_038D(word16 cx, word16 dx, word16 bx, word16 bp, word16 si, word16 di, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp bx cx di ds dx si ss
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl ds dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0800_038D_entry:
// DataOut: bp bx cx di ds dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_038D:
// DataOut: bp bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0392_thunk_fn0800_0393:
	fn0800_0393(cx - 0x0001, dx, bx, bp, si, di, ss, ds)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:ss es:ss cx:cx - 0x0001 -2(fp):cx

fn0800_038D_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> bx:<invalid> dx:<invalid> bp:<invalid> -2(fp):cx



void fn0800_0393(word16 cx, word16 dx, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp bx cx di ds dx es si ss
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl ds dx eax ebp ebx ecx edi edx esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0800_0393_entry:
// DataOut: bp bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(16)

l0800_0393:
	branch cx == 0x0000 l0800_0395
// DataOut: bp bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> si:<invalid> di:<invalid> cx:<invalid>
// LocalsOut: v3(16)

l0800_0395:
	Mem18[es:di:byte] = 0x00
	word16 di_19 = di + 0x0001
	word16 si_24 = dx
	word16 cx_27 = bx
	word16 ax_29 = cx
	byte al_30 = (byte) cx
	word16 dx_31 = cx
	word16 bx_32 = cx + 0x0001
// DataOut: ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 si:<invalid> di:<invalid> cx:<invalid>

l0800_03A3:
	byte CZ_47 = fn0800_03BF(ax_29, cx_27, dx_31, bx_32, si_24, di_19, es, bp, out ax_29, out cx_27, out dx_31, out bx_32, out si_24, out di_19)
	byte C_48 = CZ_47
	branch CZ_47 l0800_03AF
// DataOut: al ax bx cx di ds dx es si sp ss
// DataOut (flags): C
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03A8:
	branch C_48 l0800_03EA
// DataOut: al ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03EA:
	word16 cx_135 = Mem18[ss:v3:word16] + dx_31
	selector ds_99 = Mem18[0x0800:0x0332:selector]
	Mem100[ds_99:0x0084:word16] = bx_32
	word16 si_103 = v3 + 0x0002
	word16 bp_105 = v3 + 0x0002 - (bx_32 + 0x0001) * 0x0002
	branch bp_105 <u 0x0000 l0800_03E7
// DataOut: al bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03FF_thunk_fn0800_03E7:
	fn0800_03E7(al_30, v3 + 0x0002)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:v3 + 0x0002 al:<invalid> di:<invalid> ds:<invalid> si:v3 + 0x0002 cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>
// Terminates process

l0800_0401:
	Mem126[ds_99:0x0086:word16] = bp_105
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:v3 + 0x0002 al:<invalid> di:<invalid> ds:<invalid> si:v3 + 0x0002 cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_0407:
	branch cx_135 == 0x0000 l0800_0417
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_0409:
	Mem158[ss:bp_105:word16] = si_103
	bp_105 = bp_105 + 0x0002
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_040F:
	byte al_163 = Mem158[ds_99:si_103:byte]
	si_103 = si_103 + 0x0001
	cx_135 = cx_135 - 0x0001
	branch al_163 != 0x00 && cx_135 != 0x0000 l0800_040F
// DataOut: bp cx ds si ss
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_0415:
	branch al_163 == 0x00 l0800_0407
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_0417:
	Mem140[ss:bp_105:word16] = 0x0000
	word16 sp_141
	word16 cx_142
	selector ds_143
	word16 si_144
	selector es_145
	word16 di_146
	byte al_147
	byte SZO_148
	byte C_149
	word16 bp_150
	word16 dx_151
	word16 bx_152
	word16 ax_153
	byte CZ_154
	byte SCZO_155
	byte Z_156
	selector ss_157
	call Mem140[0x0800:0x0330:word16] (retsize: 4; depth: 4)
		uses: al_131,ax_137,bp_136,bx_102,C_139,cx_135,CZ_128,di_82,ds_99,dx_73,es,SCZO_129,si_134,sp_125,ss,SZO_138,Z_130
		defs: al_147,ax_153,bp_150,bx_152,C_149,cx_142,CZ_154,di_146,ds_143,dx_151,es_145,SCZO_155,si_144,sp_141,ss_157,SZO_148,Z_156
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

fn0800_0393_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> bp:<invalid>

l0800_03AA:
	byte CZ_90 = fn0800_03BF(ax_29, cx_27, dx_31, bx_32, si_24, di_19, es, bp, out ax_29, out cx_27, out dx_31, out bx_32, out si_24, out di_19)
	C_48 = CZ_90 (alias)
	branch CZ_90 l0800_03A8
// DataOut: al ax bx cx di ds dx es si sp ss
// DataOut (flags): C
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03AF:
	branch al_30 == 0x20 l0800_03BB
// DataOut: al ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03B3:
	branch al_30 == 0x0D l0800_03BB
// DataOut: al ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03B7:
	branch al_30 != 0x09 l0800_03A3
// DataOut: ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_03BB:
	al_30 = 0x00
	ax_29 = DPB(ax_29, 0x00, 0) (alias)
// DataOut: ax bx cx di ds dx es si sp ss
// DataOut (flags): 
// SymbolicIn: sp:v3 al:<invalid> di:<invalid> ds:bp si:<invalid> cx:<invalid> bx:<invalid> ax:<invalid> dx:<invalid>

l0800_0393_1:
	Mem11[es:di:byte] = Mem0[ds:si:byte]
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
// DataOut: bp bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:v3 si:<invalid> di:<invalid> cx:<invalid>
// LocalsOut: v3(16)



byte fn0800_03BF(word16 ax, word16 cx, word16 dx, word16 bx, word16 si, word16 di, selector es, selector ds, ptr16 & axOut, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bx cx di ds dx es si
// LiveOut: CZ al ax bx cx di dx si
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi rax rbx rcx rdi rdx rsi si sil
// Preserved: ah sp
fn0800_03BF_entry:
	*dxOut = dx
	*diOut = di
	*bxOut = bx
	*cxOut = cx
	*siOut = si
// DataOut: ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03BF:
	word16 ax_16 = ax
	byte al_4 = (byte) ax
	branch ax == 0x0000 l0800_03CA
// DataOut: ah al bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03C3:
	Mem78[es:di:byte] = al_4
	word16 dx_77
	*dxOut = dx + 0x0001
	word16 di_80
	*diOut = di + 0x0001
	ax_16 = DPB(ax, al_4, 0) (alias)
	branch al_4 != 0x00 l0800_03CA
// DataOut: ah bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:ax

l0800_03C9:
	word16 bx_86
	*bxOut = bx + 0x0001
// DataOut: ah bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:al

l0800_03CA:
	word16 ax_21
	*axOut = DPB(ax_16, 0x00, 0)
	byte CZ_26 = true
	branch cx == 0x0000 l0800_03E6
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:al bx:bx + 0x0001

l0800_03D1:
	byte al_46 = Mem0[ds:si:byte]
	word16 si_47 = si + 0x0001
	*siOut = si_47
	word16 cx_48 = cx - 0x0001
	*cxOut = cx_48
	word16 ax_50
	*axOut = DPB(ax_16, al_46 - 0x22, 0)
	CZ_26 = cond(al_46 - 0x22) (alias)
	branch al_46 == 0x22 l0800_03E6
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:0x00 ah:ah bx:bx + 0x0001

l0800_03D7:
	word16 ax_57
	*axOut = DPB(ax_16, al_46, 0)
	branch al_46 != 0x5C l0800_03E4
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:si + 0x0001 cx:cx - 0x0001 bx:bx + 0x0001

l0800_03DD:
	branch Mem0[ds:si + 0x0001:byte] != 0x22 l0800_03E4
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:si + 0x0001 cx:cx - 0x0001 bx:bx + 0x0001

l0800_03E2:
	word16 ax_73
	*axOut = DPB(ax_16, Mem0[ds:si + 0x0001:byte], 0)
	si_47 = si + 0x0002
	word16 cx_75
	*cxOut = cx - 0x0002
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:si + 0x0001 cx:cx - 0x0001 bx:bx + 0x0001

l0800_03E4:
	word16 si_64
	*siOut = si_47
	CZ_26 = false (alias)
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:<invalid> cx:<invalid> bx:bx + 0x0001

l0800_03E6:
	return CZ_26
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:<invalid> cx:<invalid> bx:bx + 0x0001

fn0800_03BF_exit:
// DataOut: al ax bx cx di dx si
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:<invalid> cx:<invalid> bx:bx + 0x0001



void fn0800_03E7(byte al, word16 si)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al si ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_03E7_entry:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03E7:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03E7_thunk_fn0800_01E2:
	fn0800_01E2(al, si)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

fn0800_03E7_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:



void fn0800_0421(word16 si, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds si ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esi rax rbx rcx rdi rdx rsi si sil
// Preserved: ds sp
fn0800_0421_entry:
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16)

l0800_0421:
	word16 cx_4 = Mem0[ds:0x008A:word16]
	word16 ax_7 = fn0800_0570(ds, cx_4)
	word16 cx_66 = cx_4
	word16 di_10 = ax_7
	byte al_12 = (byte) ax_7
	branch ax_7 == 0x0000 l0800_0454
// DataOut: al ax cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0430:
	selector ds_59 = Mem0[ds:0x008C:selector]
	si = 0x0000
// DataOut: ax cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> dx:<invalid> bx:<invalid> -2(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16)

l0800_043A:
	branch cx_66 == 0x0000 l0800_043C
// DataOut: ax cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:<invalid> si:<invalid> dx:<invalid> bx:<invalid> -4(fp):ds -2(fp):ds
// LocalsOut: fp(16) Local -0002(16)

l0800_043C:
	word16 ax_80 = fn0800_0570(ds, Mem0[ds:0x008E:word16])
	Mem85[ds:0x0088:word16] = ax_80
	word16 di_105 = ax_7
	word16 bx_101 = ax_80
	al_12 = (byte) ax_80 (alias)
	branch ax_80 != 0x0000 l0800_0457
// DataOut: al bx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:<invalid> si:<invalid> dx:<invalid> bx:<invalid> -4(fp):ds -2(fp):ds

l0800_0457:
	word16 cx_106 = 0xFFFF
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_045C:
	Mem100[ds:bx_101:word16] = di_105
	bx_101 = bx_101 + 0x0002
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0461:
	branch cx_106 == 0x0000 l0800_0463
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0461_1:
	di_105 = di_105 + 0x0001
	cx_106 = cx_106 - 0x0001
	branch 0x00 == Mem100[ds:di_105:byte] l0800_0461
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0463:
	branch Mem100[ds:di_105:byte] != 0x00 l0800_045C
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0468:
	Mem111[ds:bx_101:word16] = 0x0000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0454:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):<invalid>

l0800_0454_thunk_fn0800_01E2:
	fn0800_01E2(al_12, si)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):<invalid>

l0800_0454_thunk_fn0800_01E2:
	fn0800_01E2(al_12, si)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):<invalid>

fn0800_0421_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):<invalid>

l0800_043A_1:
	Mem68[ds:di_10:byte] = Mem0[ds_59:si:byte]
	si = si + 0x0001
	di_10 = di_10 + 0x0001
	cx_66 = cx_66 - 0x0001
// DataOut: ax cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:<invalid> si:<invalid> dx:<invalid> bx:<invalid> -4(fp):ds -2(fp):ds
// LocalsOut: fp(16) Local -0002(16)



void fn0800_0491(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_0491_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0491:
	word16 ax_16 = Mem0[ds:wArg02 + 0x0006:word16]
	Mem17[ds:0x062A:word16] = ax_16
	branch ax_16 != wArg02 l0800_04AB
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_04AB:
	word16 si_30 = Mem17[ds:wArg02 + 0x0004:word16]
	Mem32[ds:Mem17[ds:0x062A:word16] + 0x0004:word16] = si_30
	Mem34[ds:si_30 + 0x0006:word16] = Mem32[ds:0x062A:word16]
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04A3:
	Mem28[ds:0x062A:word16] = 0x0000
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04BB:
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> bx:<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_0491_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di ax:<invalid> si:si bx:<invalid> -6(fp):di -4(fp):si -2(fp):bp



word16 fn0800_04BF(selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax eax rax
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16)
fn0800_04BF_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16)

l0800_04BF:
	Mem19[ds:wArg02:word16] = Mem0[ds:wArg02:word16] - wArg04
	word16 si_21 = Mem19[ds:wArg02:word16] + wArg02
	Mem24[ds:si_21:word16] = wArg04 + 0x0001
	Mem25[ds:si_21 + 0x0002:word16] = wArg02
	branch Mem25[ds:0x0628:word16] != wArg02 l0800_04E6
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0004(16)

l0800_04E6:
	Mem43[ds:si_21 + wArg04 + 0x0002:word16] = si_21
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04E0:
	Mem39[ds:0x0628:word16] = si_21
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04EE:
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04F5:
	return si_21 + 0x0004
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_04BF_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di ax:<invalid> si:si -6(fp):di -4(fp):si -2(fp):bp



word16 fn0800_04F9(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_04F9_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_04F9:
	word16 ax_30
	word16 ax_21 = fn0800_0607(ds, wArg02 & 0xFFFF, 0x0000)
	branch ax_21 != 0xFFFF l0800_051B
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_051B:
	Mem42[ds:ax_21 + 0x0002:word16] = Mem0[ds:0x0628:word16]
	Mem45[ds:ax_21:word16] = wArg02 + 0x0001
	Mem46[ds:0x0628:word16] = ax_21
	ax_30 = Mem46[ds:0x0628:word16] + 0x0004
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0517:
	ax_30 = 0x0000
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0533:
	return ax_30
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp

fn0800_04F9_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:<invalid> cx:0x0000 si:si -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp



word16 fn0800_0536(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_0536_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0536:
	word16 ax_30
	word16 ax_21 = fn0800_0607(ds, wArg02 & 0xFFFF, 0x0000)
	branch ax_21 != 0xFFFF l0800_0558
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0558:
	Mem40[ds:0x062C:word16] = ax_21
	Mem41[ds:0x0628:word16] = ax_21
	Mem44[ds:ax_21:word16] = wArg02 + 0x0001
	ax_30 = ax_21 + 0x0004
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0554:
	ax_30 = 0x0000
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_056D:
	return ax_30
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp

fn0800_0536_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:<invalid> cx:0x0000 si:si -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp



word16 fn0800_0570(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_0570_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16)

l0800_0570:
	word16 ax_102
	branch wArg02 == 0x0000 l0800_0581
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16)

l0800_057C:
	branch wArg02 <=u 0xFFF4 l0800_0585
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0585:
	word16 ax_49 = wArg02 + 0x000B & 0xFFF8
	branch Mem0[ds:0x062C:word16] != 0x0000 l0800_059D
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_059D:
	word16 si_104 = Mem0[ds:0x062A:word16]
	branch si_104 == 0x0000 l0800_05D8
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05A7:
	branch Mem0[ds:si_104:word16] <u ax_49 + 0x0028 l0800_05BB
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05BB:
	branch Mem0[ds:si_104:word16] <u ax_49 l0800_05CF
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05CF:
	si_104 = Mem0[ds:si_104 + 0x0006:word16]
	branch si_104 != Mem0[ds:0x062A:word16] l0800_05A7
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05D8:
	ax_102 = fn0800_04F9(ds, ax_49)
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_05C1:
	fn0800_0491(ds, si_104)
	Mem100[ds:si_104:word16] = Mem0[ds:si_104:word16] + 0x0001
	ax_102 = si_104 + 0x0004
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_05B2:
	ax_102 = fn0800_04BF(ds, si_104, ax_49)
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0596:
	ax_102 = fn0800_0536(ds, ax_49)
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0581:
	ax_102 = 0x0000
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_05DF:
	return ax_102
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> si:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_0570_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di ax:<invalid> si:si dx:<invalid> cx:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp



void fn0800_05E3(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx rax rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_05E3_entry:
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_05E3:
	branch wArg02 >=u fp - 0x0102 l0800_05FA
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_05FA:
	Mem22[ds:0x0094:word16] = 0x0008
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:fp - 0x0102 -2(fp):bp

l0800_05F3:
	Mem17[ds:0x009E:word16] = wArg02
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:fp - 0x0102 -2(fp):bp

l0800_0605:
	return
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:fp - 0x0102 -2(fp):bp

fn0800_05E3_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:fp - 0x0102 -2(fp):bp



word16 fn0800_0607(selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16)
fn0800_0607_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16)

l0800_0607:
	word16 ax_31
	word16 ax_12 = wArg02 + Mem0[ds:0x009E:word16]
	ui32 dx_cx_18 = SEQ(wArg04 + (ax_12 <u 0x0000), ax_12 + 0x0100)
	word16 cx_22 = (word16) (dx_cx_18 + 0x00000100)
	branch SEQ(SLICE(dx_cx_18 + 0x00000100, word16, 16), cx_22) != 0x00000000 l0800_062E
// DataOut: ax cx ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0624:
	branch cx_22 >=u fp - 0x0002 l0800_062E
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

l0800_062E:
	Mem37[ds:0x0094:word16] = 0x0008
	ax_31 = 0xFFFF
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

l0800_0628:
	word16 v13_42 = Mem0[ds:0x009E:word16]
	Mem43[ds:0x009E:word16] = ax_12
	ax_31 = v13_42
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

l0800_0639:
	return ax_31
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

fn0800_0607_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp



void fn0800_063B(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_063B_entry:
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_063B:
	fn0800_05E3(ds, wArg02)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0647:
	return
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 cx:<invalid> ax:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):bp

fn0800_063B_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp cx:<invalid> ax:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):bp



word16 fn0800_065B(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_065B_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_065B:
	word16 ax_30
	word16 si_17 = Mem0[ds:wArg02:word16]
	word16 wLoc04_19 = si_17
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0040) == 0x0000 l0800_067B
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16) Stack +0002(16)

l0800_067B:
	word16 di_40 = Mem0[ds:wArg02 + 0x000A:word16]
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_068E:
	si_17 = si_17 - 0x0001
	branch si_17 != 0x0000 l0800_0683
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_0683:
	di_40 = di_60 + 0x0001
	word16 di_60 = di_40
	branch Mem0[ds:di_60:byte] != 0x0A l0800_068E
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_068B:
	wLoc04_19 = wLoc04_19 + 0x0001
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_0695:
	ax_30 = wLoc04_19
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0677:
	ax_30 = si_17
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_069A:
	return ax_30
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp

fn0800_065B_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> si:si ax:<invalid> di:di -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp



void fn0800_06A2(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)
fn0800_06A2_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0008(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06A2:
	branch fn0800_0DCD(ds, wArg02) == 0x0000 l0800_06B7
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0008(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06B7:
	branch wArg08 != 0x0001 l0800_06CD
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0008(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06BD:
	branch Mem0[ds:wArg02:word16] <= 0x0000 l0800_06CD
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0008(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06C2:
	wArg04 = wArg04 - (word16) ((int32) fn0800_065B(ds, wArg02))
	wArg06 = v16
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06CD:
	Mem64[ds:wArg02 + 0x0002:word16] = Mem0[ds:wArg02 + 0x0002:word16] & 0xFE5F
	Mem67[ds:wArg02:word16] = 0x0000
	Mem69[ds:wArg02 + 0x000A:word16] = Mem67[ds:wArg02 + 0x0008:word16]
	word16 ax_81 = (int16) Mem69[ds:wArg02 + 0x0004:byte]
	word16 dx_85
	word16 ax_86 = fn0800_0C28((byte) ax_81, ds, ax_81, wArg04, wArg06, (byte) wArg08, out dx_85)
	branch dx_85 != 0xFFFF l0800_06FF
// DataOut: ax di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> Sequence dx:ax:<invalid> al:<invalid> dx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06F5:
	branch ax_86 != 0xFFFF l0800_06FF
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:0x42 dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06FF:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:0x42 dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06FA:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:0x42 dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_0701:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06B2:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0703:
	return
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>

fn0800_06A2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>



void fn0800_075B(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: di si sp
fn0800_075B_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_075B:
	word16 di_16 = 0x0014
	word16 si_17 = 0x0344
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0778:
	di_16 = di_16 - 0x0001
	branch di_16 != 0x0000 l0800_0765
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_0765:
	branch (Mem0[ds:si_17 + 0x0000:word16] & 0x0300) != 0x0300 l0800_0775
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_0770:
	fn0800_0DCD(ds, si_17)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_0775:
	si_17 = si_17 + 0x0010
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_077F:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si

fn0800_075B_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp di:di si:si ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si



word16 fn0800_0782(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx es rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_0782_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0782:
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0200) == 0x0000 l0800_0793
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0790:
	fn0800_075B(ds)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0793:
	word16 ax_35
	word16 v10_16 = Mem0[ds:wArg02 + 0x0006:word16]
	word16 ax_19 = Mem0[ds:wArg02 + 0x0008:word16]
	Mem20[ds:wArg02 + 0x000A:word16] = ax_19
	word16 ax_27 = fn0800_09F7(ds, (int16) Mem20[ds:wArg02 + 0x0004:byte], ax_19, v10_16)
	Mem29[ds:wArg02:word16] = ax_27
	branch ax_27 <= 0x0000 l0800_07B9
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07B9:
	branch Mem29[ds:wArg02:word16] != 0x0000 l0800_07CC
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07CC:
	Mem63[ds:wArg02:word16] = 0x0000
	Mem65[ds:wArg02 + 0x0002:word16] = Mem63[ds:wArg02 + 0x0002:word16] | 0x0010
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07BE:
	Mem62[ds:wArg02 + 0x0002:word16] = Mem29[ds:wArg02 + 0x0002:word16] & 0xFE7F | 0x0020
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07D5:
	ax_35 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07AE:
	Mem44[ds:wArg02 + 0x0002:word16] = Mem29[ds:wArg02 + 0x0002:word16] & 0xFFDF
	ax_35 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07DA:
	return ax_35
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp

fn0800_0782_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp



void fn0800_07F2(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx es rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_07F2_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16) Stack +0002(16)

l0800_07F2:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_07FC:
	word16 v8_37 = Mem0[ds:wArg02:word16] - 0x0001
	Mem38[ds:wArg02:word16] = v8_37
	branch v8_37 < 0x0000 l0800_080E
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_080E:
	word16 v15_65 = Mem38[ds:wArg02:word16] + 0x0001
	Mem66[ds:wArg02:word16] = v15_65
	branch v15_65 < 0x0000 l0800_0819
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0812:
	branch (Mem66[ds:wArg02 + 0x0002:word16] & 0x0110) == 0x0000 l0800_0824
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0824:
	Mem90[ds:wArg02 + 0x0002:word16] = Mem66[ds:wArg02 + 0x0002:word16] | 0x0080
	branch Mem90[ds:wArg02 + 0x0006:word16] == 0x0000 l0800_0842
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0842:
	branch Mem90[ds:0x04AA:word16] != 0x0000 l0800_0881
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0849:
	branch 0x0342 != wArg02 l0800_0881
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0881:
	branch (Mem90[ds:wArg02 + 0x0002:word16] & 0x0200) == 0x0000 l0800_088B
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000E(16)

l0800_0888:
	fn0800_075B(ds)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000E(16)

l0800_088B:
	word16 ax_122 = (int16) Mem90[ds:wArg02 + 0x0004:byte]
	fn0800_0AB3((byte) ax_122, ds, ax_122, fp - 0x0003, 0x0001)
	branch 0xFFFE == 0x0000 l0800_08C9
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> ah:<invalid> bx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_08C9:
	branch bLoc03 != 0x0D l0800_08D6
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000E(16)

l0800_08CF:
	branch (Mem90[ds:wArg02 + 0x0002:word16] & 0x0040) == 0x0000 l0800_0881
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000E(16)

l0800_08D6:
	Mem156[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] & 0xFFDF
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08A3:
	branch fn0800_0D5F(ds, (int16) Mem90[ds:wArg02 + 0x0004:byte]) == 0x0001 l0800_08B8
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08B8:
	Mem150[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] & 0xFE7F | 0x0020
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:0xFF ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08B1:
	Mem142[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:0xFF ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08C4:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0850:
	branch fn0800_08F2((int16) Mem90[ds:wArg02 + 0x0004:byte]) != 0x0000 l0800_0862
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:0x0342 al:0x42 bx:<invalid> cx:<invalid> dx:<invalid> ah:0x03 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0)

l0800_085D:
	Mem207[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] & 0xFDFF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0)

l0800_0862:
	word16 ax_184
	branch (Mem90[ds:wArg02 + 0x0002:word16] & 0x0200) == 0x0000 l0800_0872
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -0008(16)

l0800_0872:
	ax_184 = 0x0000
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:0x0200 al:0x00 bx:<invalid> cx:<invalid> dx:<invalid> ah:0x02 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0200 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -0008(16)

l0800_086D:
	ax_184 = 0x0001
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:0x0200 al:0x00 bx:<invalid> cx:<invalid> dx:<invalid> ah:0x02 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0200 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -0008(16)

l0800_0874:
	fn0800_0904(ds, wArg02, 0x0000, ax_184, 0x0200)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:0x00 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0200 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_082F:
	branch fn0800_0782(ds, wArg02) == 0x0000 l0800_083D
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_083D:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0837:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0819:
	Mem71[ds:wArg02 + 0x0002:word16] = Mem66[ds:wArg02 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0800:
	Mem60[ds:wArg02 + 0x000A:word16] = Mem38[ds:wArg02 + 0x000A:word16] + 0x0001
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08E2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> bx:<invalid> al:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp

fn0800_07F2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si bx:<invalid> al:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp



word16 fn0800_08F2(word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_08F2_entry:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_08F2:
	word16 dx_8
	msdos_ioctl_get_device_info(wArg02, out dx_8)
	return dx_8 & 0x0080
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_08F2_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ax:dx & 0x0080 -2(fp):bp



void fn0800_0904(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)
fn0800_0904_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_0904:
	branch Mem0[ds:wArg02 + 0x000E:word16] != wArg02 l0800_0922
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0916:
	branch wArg06 > 0x0002 l0800_0922
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_091C:
	branch wArg08 <=u 0x7FFF l0800_0928
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0928:
	branch Mem0[ds:0x04AC:word16] != 0x0000 l0800_093E
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_092F:
	branch 0x0352 != wArg02 l0800_093E
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_093E:
	branch Mem0[ds:0x04AA:word16] != 0x0000 l0800_0952
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0945:
	branch 0x0342 != wArg02 l0800_0952
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_094C:
	Mem159[ds:0x04AA:word16] = 0x0001
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:0x0342 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0936:
	Mem163[ds:0x04AC:word16] = 0x0001
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:0x0352 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0952:
	branch Mem0[ds:wArg02:word16] == 0x0000 l0800_0966
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0957:
	fn0800_06A2(ds, wArg02, 0x0000, 0x0000, 0x0001)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0966:
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0004) == 0x0000 l0800_0974
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):0x0001 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_096D:
	fn0800_16AD(ds, Mem0[ds:wArg02 + 0x0008:word16])
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):0x0001 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0974:
	Mem76[ds:wArg02 + 0x0002:word16] = Mem0[ds:wArg02 + 0x0002:word16] & 0xFFF3
	Mem78[ds:wArg02 + 0x0006:word16] = 0x0000
	Mem81[ds:wArg02 + 0x0008:word16] = wArg02 + 0x0005
	Mem82[ds:wArg02 + 0x000A:word16] = wArg02 + 0x0005
	branch wArg06 == 0x0002 l0800_09CE
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_098F:
	branch false l0800_09CE
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0993:
	Mem100[ds:0x0234:word16] = 0x09D6
	branch wArg04 != 0x0000 l0800_09B7
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_099F:
	word16 ax_121 = fn0800_0570(ds, wArg08)
	wArg04 = ax_121
	branch ax_121 == 0x0000 l0800_09B2
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0004(16) Stack +0006(16)

l0800_09B2:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_09AB:
	Mem130[ds:wArg02 + 0x0002:word16] = Mem100[ds:wArg02 + 0x0002:word16] | 0x0004
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16) Stack +0004(16) Stack +0006(16)

l0800_09B7:
	Mem110[ds:wArg02 + 0x000A:word16] = wArg04
	Mem111[ds:wArg02 + 0x0008:word16] = wArg04
	Mem112[ds:wArg02 + 0x0006:word16] = wArg08
	branch wArg06 != 0x0001 l0800_09CE
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_09C9:
	Mem116[ds:wArg02 + 0x0002:word16] = Mem112[ds:wArg02 + 0x0002:word16] | 0x0008
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_09CE:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_0922:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_09D2:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>

fn0800_0904_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di si:si ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>



word16 fn0800_09F7(selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx es rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_09F7_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_09F7:
	word16 ax_101
	byte al_121 = (byte) (wArg06 + 0x0001)
	branch wArg06 <u 0xFFFF l0800_0A15
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A08:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x0200) == 0x0000 l0800_0A1A
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> -10(fp):di -8(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A1A:
	fn0800_0AB3(al_121, ds, wArg02, wArg04, wArg06)
	branch false l0800_0A42
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0006(16) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A35:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x8000) == 0x0000 l0800_0A48
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:0x00 si:<invalid> es:ds di:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0006(16) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A48:
	word16 cx_108 = 0xFFFF
	word16 si_109 = wArg04
	word16 di_114 = wArg04
// DataOut: bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:0x00 si:<invalid> es:ds di:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A55:
	al_121 = Mem0[ds:si_109:byte]
	si_109 = si_109 + 0x0001
	branch al_121 == 0x1A l0800_0A87
// DataOut: al bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> ah:<invalid> dx:<invalid> al:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A87:
	word16 cx_199 = -cx_108
	word16 ax_201 = 0x0000 - (cx_199 == 0x0000)
	word16 dx_211
	fn0800_0C28((byte) ax_201, ds, wArg02, cx_199, ax_201, 0x02, out dx_211)
	Mem217[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] | 0x0200
// DataOut: bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0A5A:
	branch al_121 == 0x0D l0800_0A63
// DataOut: al bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A63:
	cx_108 = cx_108 - 0x0001
	branch cx_108 != 0x0000 l0800_0A55
// DataOut: bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A65:
	fn0800_0AB3((byte) (fp - 0x0003), ds, wArg02, fp - 0x0003, 0x0001)
	Mem191[ds:di_114:byte] = bLoc03
	al_121 = bLoc03
	di_114 = di_114 + 0x0001
// DataOut: al bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A5E:
	Mem163[ds:di_114:byte] = al_121
	di_114 = di_114 + 0x0001
	cx_108 = cx_108 - 0x0001
	branch cx_108 != 0x0000 l0800_0A55
// DataOut: al bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A61:
// DataOut: al bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A7F:
	branch di_114 != wArg04 l0800_0A85
// DataOut: al bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A85:
// DataOut: bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0AA7:
	ax_101 = di_114 - wArg04
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):<invalid> -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0A83:
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A42:
	ax_101 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:0x00 si:<invalid> es:ds di:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0A15:
	ax_101 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> -10(fp):di -8(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0AAD:
	return ax_101
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> -20(fp):<invalid> -18(fp):<invalid> -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp

fn0800_09F7_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> bx:<invalid> di:di si:si ah:<invalid> cx:<invalid> dx:<invalid> es:ds al:<invalid> -20(fp):<invalid> -18(fp):<invalid> -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp



void fn0800_0AB3(byte al, selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_0AB3_entry:
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0AB3:
	word16 ax_17
	branch msdos_read_file(wArg02, wArg06, SEQ(ds, wArg04), out ax_17) l0800_0AC7
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0AC7:
	fn0800_02C5(ds, ax_17)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0AC5:
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0ACD:
	return
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> al:0xFF ax:0xFFFF -4(fp):ax -2(fp):bp

fn0800_0AB3_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> al:0xFF ax:0xFFFF -4(fp):ax -2(fp):bp



word16 fn0800_0ACF(selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_0ACF_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0ACF:
	word16 ax_149
	byte al_16 = (byte) (wArg06 + 0x0001)
	branch wArg06 >=u 0xFFFF l0800_0AE6
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0AE6:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x8000) == 0x0000 l0800_0B05
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0B05:
	Mem83[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0xFDFF
	word16 wLoc86_113 = wArg04
	word16 wLoc8A_110 = wArg06
	word16 si_105 = fp - 0x0084
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B91:
	branch wLoc8A_110 == 0x0000 l0800_0B9B
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(16) Stack +0002(16) Stack +0006(16)

l0800_0B9B:
	word16 di_165 = si_105 - (fp - 0x0084)
	branch false l0800_0BD7
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Stack +0002(16) Stack +0006(16)

l0800_0BA9:
	word16 ax_189 = fn0800_0BE2((byte) (fp - 0x0084), ds, wArg02, fp - 0x0084, di_165)
	branch ax_189 == di_165 l0800_0BD7
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> al:<invalid> dx:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -008C(0) Stack +0006(16)

l0800_0BD7:
	ax_149 = wArg06
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0BC0:
	branch ax_189 >=u 0x0000 l0800_0BCC
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -008C(16) Stack +0006(16)

l0800_0BCC:
	ax_149 = wArg06 + ax_189 - di_165
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0BC7:
	ax_149 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0BD5:
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0B98:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(16) Stack +0002(16) Stack +0006(16)

l0800_0B24:
	word16 v20_109 = wLoc8A_110 - 0x0001
	wLoc8A_110 = v20_109
	wLoc86_113 = wLoc86_113 + 0x0001
	byte al_114 = Mem83[ds:wLoc86_113:byte]
	branch al_114 != 0x0A l0800_0B3E
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -0087(8) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B3A:
	Mem160[ds:si_105:byte] = 0x0D
	si_105 = si_105 + 0x0001
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -0087(8) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B3E:
	Mem121[ds:si_105:byte] = al_114
	si_105 = si_105 + 0x0001
	branch si_105 - (fp - 0x0084) < 0x0080 l0800_0B91
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B53:
	word16 di_130 = si_105 - (fp - 0x0084)
	word16 ax_141 = fn0800_0BE2((byte) (fp - 0x0084), ds, wArg02, fp - 0x0084, di_130)
	branch ax_141 == di_130 l0800_0B8D
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:fp - 0x0084 bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Local -008C(0) Stack +0002(16) Stack +0006(16)

l0800_0B8D:
	si_105 = fp - 0x0084
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B72:
	branch ax_141 >=u 0x0000 l0800_0B7E
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -008A(16) Local -008C(16) Stack +0006(16)

l0800_0B7E:
	ax_149 = wArg06 - v20_109 + ax_141 - di_130
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0B79:
	ax_149 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0B8B:
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0AF3:
	ax_149 = fn0800_0BE2(al_16, ds, wArg02, wArg04, wArg06)
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0AE1:
	ax_149 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0BDC:
	return ax_149
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp

fn0800_0ACF_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> di:di si:si bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp



word16 fn0800_0BE2(byte al, selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_0BE2_entry:
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0BE2:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x0800) == 0x0000 l0800_0C02
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0BF2:
	word16 dx_82
	fn0800_0C28(0x00, ds, wArg02, 0x0000, 0x0000, 0x02, out dx_82)
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0C02:
	word16 ax_44
	word16 ax_38
	branch msdos_write_file(wArg02, wArg06, SEQ(ds, wArg04), out ax_38) l0800_0C20
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0002 -2(fp):bp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16)

l0800_0C20:
	ax_44 = fn0800_02C5(ds, ax_38)
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:0x40 cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0002 -2(fp):bp

l0800_0C11:
	Mem54[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] | 0x1000
	ax_44 = ax_38
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:0x40 cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0002 -2(fp):bp

l0800_0C26:
	return ax_44
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):<invalid> -2(fp):bp

fn0800_0BE2_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):<invalid> -2(fp):bp



word16 fn0800_0C28(byte al, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, byte bArg08, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds
// LiveOut: al ax dx
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(8)
fn0800_0C28_entry:
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(8)

l0800_0C28:
	Mem12[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0xFDFF
	word16 ax_18 = DPB(ax, bArg08, 0)
	word16 dx_23
	*dxOut = wArg04
	branch msdos_set_file_position(wArg02, SEQ(wArg06, wArg04), bArg08, SEQ(wArg04, ax_18)) l0800_0C4A
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0C4A:
	fn0800_02C5(ds, ax_18)
	word16 dx_44
	*dxOut = 0x0000
	ax_18 = 0xFFFF (alias)
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0C48:
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0C51:
	return ax_18
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> Sequence dx:ax:<invalid> ax:0xFFFF -4(fp):ax -2(fp):bp

fn0800_0C28_exit:
// DataOut: al ax dx
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> Sequence dx:ax:<invalid> ax:0xFFFF -4(fp):ax -2(fp):bp



void fn0800_0C53(selector ds, byte bArg02, byte bArg04, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di es si sp
// Stack args: Stack +0002(8) Stack +0004(8) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16)
fn0800_0C53_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(8) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16)

l0800_0C53:
	word16 di_119 = wArg08
	byte bl_25 = (byte) wArg06
	branch wArg06 >u 0x0024 l0800_0CC1
// DataOut: bl bx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(8) Stack +000A(16) Stack +000C(16)

l0800_0C69:
	branch bl_25 <u 0x02 l0800_0CC1
// DataOut: bl bx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(8) Stack +000A(16) Stack +000C(16)

l0800_0C6E:
	word16 ax_103 = wArg0A
	word16 cx_145 = wArg0C
	branch wArg0C >= 0x0000 l0800_0C89
// DataOut: ax bl bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(8)

l0800_0C78:
	branch bArg04 == 0x00 l0800_0C89
// DataOut: ax bl bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0C7E:
	Mem173[ds:wArg08:byte] = 0x2D
	ax_103 = -wArg0A
	di_119 = wArg08 + 0x0001
	cx_145 = -wArg0C - (ax_103 == 0x0000)
// DataOut: ax bl bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0C89:
	word16 si_104 = fp - 0x0024
	branch cx_145 == 0x0000 l0800_0C9D
// DataOut: ax bl bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0C8E:
	word32 dx_ax_152 = (uint32) (uint16) cx_145
	word32 dx_ax_158 = SEQ((uint16) (dx_ax_152 % wArg06), ax_103)
	Mem167[ds:si_104:byte] = (byte) (uint16) (dx_ax_158 % wArg06)
	word16 ax_155 = (uint16) (dx_ax_152 /u wArg06)
	cx_145 = ax_155
	ax_103 = (uint16) (dx_ax_158 /u wArg06)
	si_104 = si_104 + 0x0001
	branch ax_155 == 0x0000 l0800_0CA4
// DataOut: ax bl bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CA4:
	branch ax_103 != 0x0000 l0800_0C9D
// DataOut: ax bl bx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0C9D:
	word32 dx_ax_88 = (uint32) (uint16) ax_103
	Mem96[ds:si_104:byte] = (byte) (uint16) (dx_ax_88 % wArg06)
	ax_103 = (uint16) (dx_ax_88 /u wArg06)
	si_104 = si_104 + 0x0001
// DataOut: ax bl bx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CA8:
	word16 cx_113 = 0x0024 - fp + si_104
// DataOut: cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CB0:
	byte al_131
	si_104 = si_104 - 0x0001
	byte al_123 = Mem0[ds:si_104:byte]
	branch al_123 >=u 0x0A l0800_0CBB
// DataOut: al cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CBB:
	al_131 = al_123 - 0x0A + bArg02
// DataOut: al cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CB7:
	al_131 = al_123 + 0x30
// DataOut: al cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CBE:
	Mem133[ds:di_119:byte] = al_131
	di_119 = di_119 + 0x0001
	cx_113 = cx_113 - 0x0001
	branch cx_113 != 0x0000 l0800_0CB0
// DataOut: cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)

l0800_0CC1:
	Mem50[ds:di_119:byte] = 0x00
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16)

l0800_0CCA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0028 bp:fp - 0x0002 di:<invalid> es:es bx:<invalid> al:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp

fn0800_0C53_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di es:es bx:<invalid> al:<invalid> ax:<invalid> si:si cx:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp

l0800_0C9B:
// DataOut: ax bl bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Stack +0002(8)



word16 fn0800_0D5F(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_0D5F_entry:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16)

l0800_0D5F:
	word16 ax_131
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x0200) == 0x0000 l0800_0D78
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16)

l0800_0D78:
	word16 ax_103 = 0x4400
	word16 dx_52
	branch msdos_ioctl_get_device_info(wArg02, out dx_52) l0800_0DC3
// DataOut: ax bx dl ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0D82:
	branch (dl & 0x80) != 0x00 l0800_0DBF
// DataOut: bx ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4400 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0D87:
	ax_103 = 0x4201
	branch msdos_set_file_position(wArg02, 0x00000000, 0x01, 0x00004201) l0800_0DC3
// DataOut: ax bx ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4400 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0D92:
	ax_103 = 0x4202
	branch msdos_set_file_position(wArg02, 0x00000000, 0x02, 0x00004202) l0800_0DC3
// DataOut: ax bx cx ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4201 cx:0x0000 dx:0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0DA7:
	ax_103 = 0x4200
	branch msdos_set_file_position(wArg02, 0x00004201, 0x00, 0x42014200) l0800_0DC3
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4202 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0DC3:
	ax_131 = fn0800_02C5(ds, ax_103)
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:<invalid> cx:0x0000 dx:<invalid> -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DAE:
	branch false l0800_0DBF
// DataOut: ds si
// DataOut (flags): CZ
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DB3:
	branch false l0800_0DBA
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DB5:
	branch false l0800_0DBF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DBF:
	ax_131 = 0x0000
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:<invalid> cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DBA:
	ax_131 = 0x0001
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0D72:
	ax_131 = 0x0001
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0DC9:
	return ax_131
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:<invalid> cx:0x0000 dx:<invalid> al:0xFF -10(fp):0x4201 -8(fp):<invalid> -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp

fn0800_0D5F_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ax:<invalid> cx:0x0000 dx:<invalid> al:0xFF -10(fp):0x4201 -8(fp):<invalid> -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp



word16 fn0800_0DCD(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_0DCD_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0DCD:
	word16 ax_102
	branch Mem0[ds:wArg02 + 0x000E:word16] == wArg02 l0800_0DE1
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0DE1:
	branch Mem0[ds:wArg02:word16] < 0x0000 l0800_0E13
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E13:
	word16 di_71 = Mem0[ds:wArg02 + 0x0006:word16] + Mem0[ds:wArg02:word16]
	Mem74[ds:wArg02:word16] = Mem0[ds:wArg02:word16] - (di_71 + 0x0001)
	word16 ax_78 = Mem74[ds:wArg02 + 0x0008:word16]
	Mem79[ds:wArg02 + 0x000A:word16] = ax_78
	branch fn0800_0ACF(ds, (int16) Mem79[ds:wArg02 + 0x0004:byte], ax_78, di_71 + 0x0001) == di_71 + 0x0001 l0800_0E43
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E32:
	branch (Mem79[ds:wArg02 + 0x0002:word16] & 0x0200) != 0x0000 l0800_0E43
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E43:
	ax_102 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E39:
	Mem99[ds:wArg02 + 0x0002:word16] = Mem79[ds:wArg02 + 0x0002:word16] | 0x0010
	ax_102 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DE6:
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0008) != 0x0000 l0800_0DF9
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DED:
	branch Mem0[ds:wArg02 + 0x000A:word16] != wArg02 + 0x0005 l0800_0E0F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DF9:
	Mem57[ds:wArg02:word16] = 0x0000
	branch Mem57[ds:wArg02 + 0x000A:word16] != wArg02 + 0x0005 l0800_0E0F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E09:
	Mem64[ds:wArg02 + 0x000A:word16] = Mem57[ds:wArg02 + 0x0008:word16]
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E0F:
	ax_102 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DDC:
	ax_102 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E47:
	return ax_102
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_0DCD_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> di:di al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp



word16 fn0800_0E4B(selector ds, word16 wArg02, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds ss
// LiveOut: bx di
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esi rax rbx rcx rdi rdx rsi si sil
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_0E4B_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0E4B:
	word16 di_20
	word16 bx_21 = fn0800_1073(ds, fp + 0x0004, wArg02, out di_20)
// DataOut: bx di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0E62:
	return bx_21
// DataOut: bx di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> di:<invalid> si:<invalid> al:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> -10(fp):fp + 0x0004 -8(fp):<invalid> -6(fp):0x0352 -4(fp):0x0F81 -2(fp):bp

fn0800_0E4B_exit:
// DataOut: bx di
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> di:<invalid> si:<invalid> al:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> -10(fp):fp + 0x0004 -8(fp):<invalid> -6(fp):0x0352 -4(fp):0x0F81 -2(fp):bp



void fn0800_0E64(selector ds, byte bArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(8) Stack +0004(16)
fn0800_0E64_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(16)

l0800_0E64:
	Mem11[ds:wArg04:word16] = Mem0[ds:wArg04:word16] - 0x0001
	fn0800_0E7D(ds, (byte) (int16) bArg02, wArg04)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0E7B:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> al:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp

fn0800_0E64_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> al:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp



void fn0800_0E7D(selector ds, byte bArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(8) Stack +0004(16)
fn0800_0E7D_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(8) Stack +0004(16)

l0800_0E7D:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0E8D:
	word16 v9_30 = Mem0[ds:wArg04:word16] + 0x0001
	Mem31[ds:wArg04:word16] = v9_30
	branch v9_30 >= 0x0000 l0800_0EC7
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EC7:
	Mem87[ds:wArg04:word16] = Mem31[ds:wArg04:word16] - 0x0001
	branch (Mem87[ds:wArg04 + 0x0002:word16] & 0x0090) != 0x0000 l0800_0ED7
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16)

l0800_0ED0:
	branch (Mem87[ds:wArg04 + 0x0002:word16] & 0x0002) != 0x0000 l0800_0EE2
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16)

l0800_0EE2:
	Mem102[ds:wArg04 + 0x0002:word16] = Mem87[ds:wArg04 + 0x0002:word16] | 0x0100
	branch Mem102[ds:wArg04 + 0x0006:word16] == 0x0000 l0800_0F11
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16)

l0800_0F11:
	branch bArg02 != 0x0A l0800_0F36
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F17:
	branch (Mem102[ds:wArg04 + 0x0002:word16] & 0x0040) != 0x0000 l0800_0F36
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F1E:
	word16 ax_178 = (int16) Mem102[ds:wArg04 + 0x0004:byte]
	branch fn0800_0BE2((byte) ax_178, ds, ax_178, 0x04E0, 0x0001) != 0x0001 l0800_0F4E
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F36:
	word16 ax_160 = (int16) Mem102[ds:wArg04 + 0x0004:byte]
	branch fn0800_0BE2((byte) ax_160, ds, ax_160, fp + 0x0002, 0x0001) == 0x0001 l0800_0F5F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):0x04E0 -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F4E:
	branch (Mem102[ds:wArg04 + 0x0002:word16] & 0x0200) != 0x0000 l0800_0F5F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0001 -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F5F:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0001 -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0F55:
	Mem147[ds:wArg04 + 0x0002:word16] = Mem102[ds:wArg04 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0001 -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0EED:
	branch Mem102[ds:wArg04:word16] == 0x0000 l0800_0F02
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0F02:
	Mem122[ds:wArg04:word16] = 0xFFFF - Mem102[ds:wArg04 + 0x0006:word16]
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp

l0800_0EF2:
	branch fn0800_0DCD(ds, wArg04) == 0x0000 l0800_0F00
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0F00:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0F0C:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EFB:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0ED7:
	Mem93[ds:wArg04 + 0x0002:word16] = Mem87[ds:wArg04 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0E91:
	Mem52[ds:wArg04 + 0x000A:word16] = Mem31[ds:wArg04 + 0x000A:word16] + 0x0001
	Mem54[ds:Mem52[ds:wArg04 + 0x000A:word16] - 0x0001:byte] = bArg02
	branch (Mem54[ds:wArg04 + 0x0002:word16] & 0x0008) == 0x0000 l0800_0EBF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EA4:
	branch bArg02 == 0x0A l0800_0EB0
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EAA:
	branch bArg02 != 0x0D l0800_0EBF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EB0:
	branch fn0800_0DCD(ds, wArg04) == 0x0000 l0800_0EBF
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0EBF:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0EB9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0F66:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp

fn0800_0E7D_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si al:<invalid> bx:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp



void fn0800_1044()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1044_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1044:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E0:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1044_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>



void fn0800_1048(word16 di, selector es, selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di ds es
// LiveOut:
// Trashed: SCZDO al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx rax rbx rcx rdi rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_1048_entry:
// DataOut: di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_1048:
	byte dh_8 = SLICE(wArg02, byte, 8)
	Mem20[es:di:byte] = Mem0[ds:(uint16) (dh_8 >>u 0x04) + 0x04E9:byte]
	Mem27[es:di + 0x0001:byte] = Mem20[ds:(uint16) (dh_8 & 0x0F) + 0x04E9:byte]
	byte dl_9 = (byte) wArg02
	Mem32[es:di + 0x0002:byte] = Mem27[ds:(uint16) (dl_9 >>u 0x04) + 0x04E9:byte]
	Mem39[es:di + 0x0003:byte] = Mem32[ds:(uint16) (dl_9 & 0x0F) + 0x04E9:byte]
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_106F:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 dx:<invalid> cx:0x0F04 bx:0x04E9 al:<invalid> di:di + 0x000F -2(fp):bp

fn0800_1048_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp dx:<invalid> cx:0x0F04 bx:0x04E9 al:<invalid> di:di + 0x000F -2(fp):bp



word16 fn0800_1073(selector ds, word16 wArg02, word16 wArg04, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds ss
// LiveOut: bx di
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esi rax rbx rcx rdi rdx rsi si sil
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16)
fn0800_1073_entry:
// DataOut: bx ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16)

l0800_1073:
	byte bLoc57_111 = 0x50
// DataOut: bp bx ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0057(8) Stack +0002(16) Stack +0004(16)

l0800_10CD:
	word16 sp_17 = fp - 0x00A0
	word16 di_109 = fp - 0x0056
	word16 si_107 = wArg04
// DataOut: bp bx di ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x009E bp:fp - 0x0002 -158(fp):di -156(fp):si -90(fp):0x0000 -87(fp):0x50 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -0057(8) Stack +0002(16)

l0800_10DD:
	byte al_42 = Mem0[ds:si_107:byte]
	si_107 = si_107 + 0x0001
	byte al_103 = al_42
	ax = DPB(ax, al_42, 0) (alias)
	branch al_42 == 0x00 l0800_10F3
// DataOut: al bp bx di ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -160(fp):es -158(fp):di -156(fp):si -152(fp):fp - 0x0056 -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -0057(8) Stack +0002(16)

l0800_10F3:
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -160(fp):es -158(fp):di -156(fp):si -152(fp):fp - 0x0056 -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -0057(0)

l0800_10E2:
	branch al_42 == 0x25 l0800_10F6
// DataOut: al bp bx di ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -160(fp):es -158(fp):di -156(fp):si -152(fp):fp - 0x0056 -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -0057(8) Stack +0002(16)

l0800_10F6:
	al_103 = Mem0[ds:si_107:byte]
	ax = DPB(ax, al_103, 0) (alias)
	si_107 = si_107 + 0x0001
	branch al_103 == 0x25 l0800_10E6
// DataOut: al bp bx di ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -160(fp):es -158(fp):di -156(fp):si -152(fp):fp - 0x0056 -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -0057(8) Local -008C(16) Stack +0002(16)

l0800_10FF:
	byte ch_126 = 0x00
	byte bLoc8F_131 = 0x00
// DataOut: al bp ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -160(fp):es -158(fp):di -156(fp):si -152(fp):fp - 0x0056 -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1120:
	word16 ax_151 = DPB(ax, 0x00, 8)
	byte bl_155 = (byte) ax_151
	byte dl_153 = (byte) ax_151
	bx = DPB(ax_151, bl_155 - 0x20, 0) (alias)
	branch bl_155 >=u 0x80 l0800_1175
// DataOut: bp bx ch cl dl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ax:<invalid> es:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_112E:
	bx = DPB(ax_151, Mem0[ds:bx + 0x04F9:byte], 0) (alias)
	word16 ax_199 = bx
	branch bx <=u 0x0017 l0800_113C
// DataOut: ax bp bx ch cl dl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_113C:
	bx = bx << 0x0001
	switch (fp - 0x00A0) { l0800_1190 l0800_1178 l0800_11D1 l0800_1184 }
// DataOut: bp bx ch cl dl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1184:
	branch ch_126 >u 0x00 l0800_1175
// DataOut: bp bx ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1189:
// DataOut: bp ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11D1:
	ax_199 = Mem0[ds:wArg02:word16]
	wArg02 = wArg02 + 0x0002
	branch ch_126 >=u 0x02 l0800_11E8
// DataOut: bp bx ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11E8:
	branch ch_126 != 0x04 l0800_11CE
// DataOut: bp bx ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11CE:
// DataOut: bp bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -0098(16)

l0800_11ED:
	ch_126 = ch_126 + 0x01
// DataOut: bp ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11DF:
	ch_126 = 0x03
// DataOut: bp ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1178:
	branch ch_126 >u 0x00 l0800_1175
// DataOut: bp bx ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_117D:
// DataOut: bp ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1190:
	branch ch_126 >u 0x00 l0800_1175
// DataOut: bp bx ch cl dl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1175:
// DataOut: bp bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -0098(16)

l0800_1195:
	branch bLoc8F_131 == 0x2B l0800_11A0
// DataOut: bp ch cl dl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_119C:
	bLoc8F_131 = dl_153
// DataOut: bp ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_11A0:
// DataOut: bp ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_111F:
	ax = DPB(ax_199, Mem0[ds:si_107:byte], 0) (alias)
	si_107 = si_107 + 0x0001
// DataOut: al bp ch cl ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> ch:<invalid> es:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -008F(0) Local -0098(16) Local -009A(16) Stack +0002(16)

l0800_1139:
// DataOut: bp bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0) Local -008C(16) Local -0098(16)

l0800_1560:
	word16 si_169 = si_107
	byte al_171 = 0x25
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0)

l0800_156A:
	bx = fn0800_1099(al_171, fp - 0x0002, di_109, ds, out di_109)
	byte al_183 = Mem0[ds:si_169:byte]
	sp_17 = sp_17 + 0xFFFE
	si_169 = si_169 + 0x0001
	al_171 = al_183
	branch al_183 != 0x00 l0800_156A
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> es:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16) Local -0057(0)

l0800_1572:
	branch bLoc57_111 >= 0x50 l0800_157B
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16)

l0800_1578:
	byte spl_96
	word16 di_97
	bx = fn0800_10A1(fp - 0x0002, di_109, out spl_96, out di_97)
// DataOut: bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16)

l0800_157B:
	word16 sp_82 = sp_17 + 0x0002
	branch 0x0000 == 0x0000 l0800_1589
// DataOut: bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16)

l0800_1589:
// DataOut: bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16)

l0800_1582:
// DataOut: bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>
// LocalsOut: fp(16)

l0800_158E:
	word16 di_87
	*diOut = Mem0[ss:sp_82:word16]
	return bx
// DataOut: bx di ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>

fn0800_1073_exit:
// DataOut: bx di
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> bl:<invalid> ch:<invalid> -160(fp):es -158(fp):di -156(fp):si -154(fp):<invalid> -152(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -143(fp):<invalid> -142(fp):<invalid> -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp 2(fp):<invalid>

l0800_10E6:
	Mem108[ds:di_109:byte] = al_103
	byte v15_110 = bLoc57_111 - 0x01
	di_109 = di_109 + 0x0001
	bLoc57_111 = v15_110
	branch v15_110 > 0x00 l0800_10DD
// DataOut: bp bx di ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -160(fp):es -158(fp):di -156(fp):si -152(fp):fp - 0x0056 -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -0057(8) Stack +0002(16)

l0800_10EE:
	byte spl_113
	bx = fn0800_10A1(fp - 0x0002, di_109, out spl_113, out di_109)
// DataOut: bp bx di ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -160(fp):es -158(fp):di -156(fp):si -152(fp):fp - 0x0056 -140(fp):<invalid> -90(fp):0x0000 -87(fp):<invalid> -86(fp):<invalid> -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -0057(8) Stack +0002(16)



void fn0800_108C(word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di es
// LiveOut:
// Trashed: SCZO al ax ch cl cx eax ecx rax rcx
// Preserved: di sp
fn0800_108C_entry:
// DataOut: di es
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_108C:
	word16 cx_13 = 0xFFFF
// DataOut: cx di es
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1092:
	branch cx_13 == 0x0000 l0800_1094
// DataOut: cx di es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> al:0x00 di:<invalid> -2(fp):di

l0800_1092_1:
	di = di_29 + 0x0001
	cx_13 = cx_13 - 0x0001
	word16 di_29 = di
	branch 0x00 == Mem0[es:di_29:byte] l0800_1092
// DataOut: cx di es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> al:0x00 di:<invalid> -2(fp):di

l0800_1094:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> al:0x00 di:<invalid> -2(fp):di

fn0800_108C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> al:0x00 di:di -2(fp):di



word16 fn0800_1099(byte al, word16 bp, word16 di, selector ds, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al bp di ds ss
// LiveOut: bx di
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esp rax rbx rcx rdi rdx rsp sp spl
// Preserved: sp
fn0800_1099_entry:
// DataOut: al bp bx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1099:
	Mem3[ds:di:byte] = al
	byte v9_9 = Mem3[ss:bp - 0x0055:byte] - 0x01
	Mem10[ss:bp - 0x0055:byte] = v9_9
	word16 di_6
	*diOut = di + 0x0001
	branch v9_9 <= 0x00 l0800_10CC_in_fn0800_1099
// DataOut: bp bx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_109F_thunk_fn0800_10A1:
	byte spl_21
	word16 di_22
	return fn0800_10A1(bp, di + 0x0001, out spl_21, out di_22)
// DataOut: bp bx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp di:di + 0x0001

l0800_10CC_in_fn0800_1099:
	return bx
// DataOut: bp bx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp di:di + 0x0001

l0800_109F_thunk_fn0800_10A1:
	byte spl_16
	word16 di_17
	return fn0800_10A1(bp, di + 0x0001, out spl_16, out di_17)
// DataOut: bp bx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp di:di + 0x0001

fn0800_1099_exit:
// DataOut: bx di
// DataOut (flags): 
// SymbolicIn: sp:<invalid> di:<invalid> ax:<invalid> es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid>



word16 fn0800_10A1(word16 bp, word16 di, ptr16 & splOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp di ss
// LiveOut: bx di sp spl
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esp rax rbx rcx rdi rdx rsp sp spl
// Preserved:
fn0800_10A1_entry:
// DataOut: bp di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_10A1:
	word16 sp_31
	word16 bx_32
	selector ss_33
	word16 cx_34
	word16 dx_35
	selector es_36
	word16 bp_37
	word16 ax_38
	word16 di_39
	byte SCZO_40
	selector cs_41
	byte SZO_42
	byte C_43
	byte Z_44
	byte spl_45
	call SEQ(cs, Mem0[ss:bp + 0x000A:word16]) (retsize: 2; depth: 16)
		uses: ax_19,bp,bx,cs,cx,di_17,dx,es,SCZO_18,sp_27,spl_28,ss,wLoc02_4,wLoc04_7,wLoc06_10,wLoc08_13,wLoc0A_21,wLoc0C_23,wLoc0E_29
		defs: ax_38,bp_37,bx_32,C_43,cs_41,cx_34,di_39,dx_35,es_36,SCZO_40,sp_31,spl_45,ss_33,SZO_42,Z_44
	branch ax_38 != 0x0000 l0800_10BE
// DataOut: bp di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_10B9:
	Mem66[ss_33:bp_37 - 0x0002:word16] = 0x0001
// DataOut: bp di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> di:di - (bp - 0x0054) -14(fp):<invalid> -12(fp):di - (bp - 0x0054) -10(fp):bp - 0x0054 -8(fp):es -6(fp):dx -4(fp):cx -2(fp):bx

l0800_10BE:
	Mem50[ss_33:bp_37 - 0x0055:byte] = 0x50
	Mem52[ss_33:bp_37 - 0x0058:word16] = Mem50[ss_33:bp_37 - 0x0058:word16] + di_39
	word16 di_54
	*diOut = bp_37 - 0x0054
	word16 bx_61 = Mem52[ss_33:sp_31 + 0x0006:word16]
	byte spl_63
	*splOut = (byte) (sp_31 + 0x0008)
// DataOut: bp bx di ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> di:di - (bp - 0x0054) -14(fp):<invalid> -12(fp):di - (bp - 0x0054) -10(fp):bp - 0x0054 -8(fp):es -6(fp):dx -4(fp):cx -2(fp):bx

l0800_10CC:
	return bx_61
// DataOut: bp bx di ds si sp spl ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> di:bp - 0x0054 es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -14(fp):<invalid> -12(fp):di - (bp - 0x0054) -10(fp):bp - 0x0054 -8(fp):es -6(fp):dx -4(fp):cx -2(fp):bx

fn0800_10A1_exit:
// DataOut: bx di sp spl
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> di:bp - 0x0054 es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -14(fp):<invalid> -12(fp):di - (bp - 0x0054) -10(fp):bp - 0x0054 -8(fp):es -6(fp):dx -4(fp):cx -2(fp):bx



void fn0800_1596(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_1596_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_1596:
	branch Mem0[ds:0x062A:word16] == 0x0000 l0800_15C1
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_15C1:
	Mem34[ds:0x062A:word16] = wArg02
	Mem35[ds:wArg02 + 0x0004:word16] = wArg02
	Mem36[ds:wArg02 + 0x0006:word16] = wArg02
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15A5:
	word16 di_27 = Mem0[ds:Mem0[ds:0x062A:word16] + 0x0006:word16]
	Mem29[ds:Mem0[ds:0x062A:word16] + 0x0006:word16] = wArg02
	Mem30[ds:di_27 + 0x0004:word16] = wArg02
	Mem31[ds:wArg02 + 0x0006:word16] = di_27
	Mem33[ds:wArg02 + 0x0004:word16] = Mem31[ds:0x062A:word16]
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15CB:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> bx:<invalid> di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_1596_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si bx:<invalid> di:di ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp



void fn0800_15CF(selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx eax ebx ecx rax rbx rcx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16)
fn0800_15CF_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16)

l0800_15CF:
	Mem21[ds:wArg02:word16] = Mem0[ds:wArg02:word16] + Mem0[ds:wArg04:word16]
	branch Mem21[ds:0x0628:word16] != wArg04 l0800_15EE
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_15EE:
	Mem47[ds:Mem21[ds:wArg04:word16] + wArg04 + 0x0002:word16] = wArg02
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> di:<invalid> ax:<invalid> -8(fp):di -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15E8:
	Mem39[ds:0x0628:word16] = wArg02
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> di:<invalid> ax:<invalid> -8(fp):di -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15FB:
	fn0800_0491(ds, wArg04)
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> di:<invalid> ax:<invalid> bx:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp

fn0800_15CF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si di:di ax:<invalid> bx:<invalid> cx:<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp



void fn0800_1606(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: si sp
fn0800_1606_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1606:
	branch Mem0[ds:0x062C:word16] != Mem0[ds:0x0628:word16] l0800_1622
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1622:
	word16 si_32 = Mem0[ds:Mem0[ds:0x0628:word16] + 0x0002:word16]
	branch (Mem0[ds:si_32:word16] & 0x0001) != 0x0000 l0800_1651
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_1651:
	fn0800_063B(ds, Mem0[ds:0x0628:word16])
	Mem61[ds:0x0628:word16] = si_32
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> -2(fp):si

l0800_162F:
	fn0800_0491(ds, si_32)
	branch si_32 != Mem0[ds:0x062C:word16] l0800_1644
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_1644:
	Mem55[ds:0x0628:word16] = Mem0[ds:si_32 + 0x0002:word16]
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> cx:<invalid> -4(fp):<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_163A:
	Mem52[ds:0x0628:word16] = 0x0000
	Mem53[ds:0x062C:word16] = 0x0000
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> cx:<invalid> -4(fp):<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_164A:
	fn0800_063B(ds, si_32)
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> cx:<invalid> -4(fp):<invalid> -2(fp):si

l0800_1610:
	fn0800_063B(ds, Mem0[ds:0x062C:word16])
	Mem28[ds:0x0628:word16] = 0x0000
	Mem29[ds:0x062C:word16] = 0x0000
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> -2(fp):si

l0800_165D:
	return
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> cx:<invalid> bx:<invalid> si:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):si

fn0800_1606_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> cx:<invalid> si:si bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):si



void fn0800_165F(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx eax ebx ecx rax rbx rcx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_165F_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000C(16) Stack +0002(16)

l0800_165F:
	Mem18[ds:wArg02:word16] = Mem0[ds:wArg02:word16] - 0x0001
	word16 si_14 = wArg02
	word16 ax_20 = Mem18[ds:wArg02:word16] + wArg02
	word16 di_22 = Mem18[ds:wArg02 + 0x0002:word16]
	branch (Mem18[ds:di_22:word16] & 0x0001) != 0x0000 l0800_1690
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16) Local -000C(16)

l0800_167C:
	branch wArg02 == Mem18[ds:0x062C:word16] l0800_1690
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -000C(16)

l0800_1690:
	fn0800_1596(ds, wArg02)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_1682:
	Mem66[ds:di_22:word16] = Mem18[ds:di_22:word16] + Mem18[ds:wArg02:word16]
	Mem69[ds:ax_20 + 0x0002:word16] = di_22
	si_14 = di_22
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_1695:
	branch (Mem18[ds:ax_20:word16] & 0x0001) != 0x0000 l0800_16A7
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_169E:
	fn0800_15CF(ds, si_14, ax_20)
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_16A7:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp

fn0800_165F_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> di:di cx:<invalid> bx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp



void fn0800_16AD(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_16AD_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_16AD:
	branch wArg02 != 0x0000 l0800_16BA
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_16BA:
	branch wArg02 + 0xFFFC != Mem0[ds:0x0628:word16] l0800_16CC
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16CC:
	fn0800_165F(ds, wArg02 + 0xFFFC)
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16C7:
	fn0800_1606(ds)
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16B8:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16D1:
	return
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> bx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp

fn0800_16AD_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> cx:<invalid> bx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp



void fn0800_16D4(word16 bx, word16 di, selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx di ds ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_16D4_entry:
// DataOut: bx di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_16D4:
	fn0800_16F3(bx, di, ds, 0x0342, wArg02)
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_16F1:
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> si:<invalid> al:<invalid> cx:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -12(fp):0x07F2 -10(fp):0x1D65 -8(fp):0x0342 -6(fp):<invalid> -4(fp):fp + 0x0004 -2(fp):bp

fn0800_16D4_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> si:<invalid> al:<invalid> cx:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -12(fp):0x07F2 -10(fp):0x1D65 -8(fp):0x0342 -6(fp):<invalid> -4(fp):fp + 0x0004 -2(fp):bp



word16 fn0800_16F3(word16 bx, word16 di, selector ds, word16 wArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx di ds ss
// LiveOut: bp
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved:
// Stack args: Stack +0006(16) Stack +0008(16)
fn0800_16F3_entry:
// DataOut: bx di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0006(16) Stack +0008(16)

l0800_16F3:
	sp = fp
	sp = fp - 0x0002
	wLoc02 = bp
	bp = fp - 0x0002
	sp = fp - 0x002C
	SCZO = cond(fp - 0x002C)
	sp = fp - 0x002E
	wLoc2E = si
	sp = fp - 0x0030
	wLoc30 = di
	wLoc2A = 0x0000
	wLoc28 = 0x0000
// DataOut: bp bx di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0028(16) Stack +0006(16) Stack +0008(16)

l0800_1721:
	sp = fp - 0x0032
	wLoc32 = es
	D = false
	si = wArg08
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0030 bp:fp - 0x0002 -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):0x0000 -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1726:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	ax = DPB(ax, al, 0) (alias)
	SZO = cond(al)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0800_1788
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1788:
	bp = fn0800_1AEB(bp)
	return bp
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

l0800_172B:
	SCZO = cond(al - 0x25)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0800_178B
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_178B:
	wLoc24 = 0xFFFF
	bLoc2B = 0x00
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	ax = (int16) al
	wArg08 = si
	v34 = ax
	ax = di
	di = v34
	di = di | di
	SZO = cond(di)
	SO = SZO (alias)
	C = false
	branch Test(LT,SO) l0800_17E6
// DataOut: bp di ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

l0800_179E:
	bl = Mem0[ds:di + 0x055A:byte]
	bh = 0x00
	bx = DPB(bx, bh, 8) (alias)
	ax = bx
	al = (byte) ax (alias)
	SCZO = cond(ax - 0x0015)
	CZ = SCZO (alias)
	branch Test(ULE,CZ) l0800_17AE
// DataOut: ax bp di ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_17AE:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (di) { l0800_17E6 }
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:0x00 cx:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_17E6:
	bp = fn0800_1AEB(bp)
	return bp
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_17AB:
	bp = fn0800_1AEB(bp)
	return bp
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:0x00 cx:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_172F:
	ax = (int16) al
	v16 = ax
	ax = di
	di = v16
	v17 = wLoc28 + 0x0001
	wLoc28 = v17
	SZO = cond(v17)
	v18 = wArg06
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v18
	call SEQ(cs, Mem0[ss:bp + 0x0004:word16]) (retsize: 2; depth: 2)
		defs: al,ax,bh,bl,bp,bx,C,cs,cx,CZ,D,di,ds,es,S,SCZO,si,SO,sp,ss,SZO,Z
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = ax | ax
	al = (byte) ax (alias)
	SZO = cond(ax)
	SO = SZO (alias)
	C = false
	branch Test(LT,SO) l0800_1764
// DataOut: al ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_173F:
	di = di | di
	SZO = cond(di)
	S = SZO (alias)
	C = false
	branch Test(SG,S) l0800_1775
// DataOut: al ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1743:
	SCZO = cond(Mem0[ds:di + 0x055A:byte] - 0x01)
	Z = SCZO (alias)
	branch Test(NE,Z) l0800_1775
// DataOut: al ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1775:
	SCZO = cond(ax - di)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0800_1726
// DataOut: ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1779:
	v32 = wArg06
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v32
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call SEQ(cs, Mem0[ss:bp + 0x0006:word16]) (retsize: 2; depth: 2)
		defs: al,ax,bh,bl,bp,bx,C,cs,cx,CZ,D,di,ds,es,S,SCZO,si,SO,sp,ss,SZO,Z
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v33 = wLoc28 - 0x0001
	wLoc28 = v33
	SZO = cond(v33)
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

l0800_1782_thunk_fn0800_1AEB:
	bp = fn0800_1AEB(bp)
	return bp
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

l0800_174A:
	v23 = ax
	ax = bx
	al = (byte) ax (alias)
	bx = v23
	bl = (byte) bx (alias)
	bh = SLICE(bx, byte, 8) (alias)
	bl = bl | bl
	bx = DPB(bx, bl, 0) (alias)
	SZO = cond(bl)
	S = SZO (alias)
	C = false
	branch Test(SG,S) l0800_1767
// DataOut: ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_174F:
	SCZO = cond(Mem0[ds:bx + 0x055A:byte] - 0x01)
	Z = SCZO (alias)
	branch Test(NE,Z) l0800_1767
// DataOut: ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1767:
	v30 = wArg06
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v30
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	call SEQ(cs, Mem0[ss:bp + 0x0006:word16]) (retsize: 2; depth: 2)
		defs: al,ax,bh,bl,bp,bx,C,cs,cx,CZ,D,di,ds,es,S,SCZO,si,SO,sp,ss,SZO,Z
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v31 = wLoc28 - 0x0001
	wLoc28 = v31
	SZO = cond(v31)
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1756:
	v26 = wLoc28 + 0x0001
	wLoc28 = v26
	SZO = cond(v26)
	v27 = wArg06
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v27
	call SEQ(cs, Mem0[ss:bp + 0x0004:word16]) (retsize: 2; depth: 2)
		defs: al,ax,bh,bl,bp,bx,C,cs,cx,CZ,D,di,ds,es,S,SCZO,si,SO,sp,ss,SZO,Z
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = ax | ax
	al = (byte) ax (alias)
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l0800_174A
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1764:
	bp = fn0800_1AEB(bp)
	return bp
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

fn0800_16F3_exit:
// DataOut: bp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> si:<invalid> al:<invalid> ax:<invalid> cx:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_1AEB:
	Mem7[ss:v3 - 0x0002:word16] = Mem0[ss:bp + 0x0008:word16]
	Mem10[ss:v3 - 0x0004:word16] = 0xFFFF
	word16 sp_12
	word16 bp_13
	selector ss_14
	byte SCZO_15
	word16 si_16
	word16 di_17
	selector es_18
	byte D_19
	byte al_20
	selector ds_21
	byte SZO_22
	byte C_23
	byte Z_24
	word16 ax_25
	selector cs_26
	word16 cx_27
	byte SO_28
	byte S_29
	word16 bx_30
	byte bl_31
	byte bh_32
	byte CZ_33
	call SEQ(cs, Mem10[ss:bp + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ax_8,bp,cs,sp_9,ss
		defs: al_20,ax_25,bh_32,bl_31,bp_13,bx_30,C_23,cs_26,cx_27,CZ_33,D_19,di_17,ds_21,es_18,S_29,SCZO_15,si_16,SO_28,sp_12,ss_14,SZO_22,Z_24
	Mem41[ss:bp - 0x0028:word16] = Mem10[ss:bp - 0x0028:word16] - (Mem10[ss:bp - 0x0028:word16] <u 0x0001)
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> es:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_1AFF:
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> cx:<invalid> bp:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_1B8C:
	return Mem41[ss:bp:word16]
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> cx:<invalid> es:<invalid> bp:<invalid> si:<invalid> al:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

fn0800_1AEB_exit:
// DataOut: bp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> cx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> al:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>



void fn0800_1708(word16 bp, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ds ss
// LiveOut:
// Trashed: SCZO di dil edi es rdi
// Preserved: sp
fn0800_1708_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1708:
	branch (Mem0[ss:bp - 0x0029:byte] & 0x20) == 0x00 l0800_1718
// DataOut: bp di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1718:
	Mem29[ss:bp + 0x000C:word16] = Mem0[ss:bp + 0x000C:word16] + 0x0002
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp di:<invalid>

l0800_1711:
	Mem20[ss:bp + 0x000C:word16] = Mem0[ss:bp + 0x000C:word16] + 0x0004
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp di:<invalid>

fn0800_1708_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp di:<invalid> Sequence es:di:<invalid> es:ds -2(fp):ds



void fn0800_1898(word16 ax, word16 bp, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ds ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: sp
fn0800_1898_entry:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1898:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1898_thunk_fn0800_1B06:
	fn0800_1B06(ax, bp, ds)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1898_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> bl:<invalid> bh:<invalid>



void fn0800_18AF(word16 ax, word16 bp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: sp
fn0800_18AF_entry:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18AF:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18AF_thunk_fn0800_1B2C:
	fn0800_1B2C(ax, bp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_18AF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> ch:<invalid> al:<invalid> dl:<invalid> bl:<invalid> bh:<invalid> bx:<invalid>



void fn0800_18CF(word16 ax, word16 bp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: sp
fn0800_18CF_entry:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18CF:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18CF_thunk_fn0800_1B2C:
	fn0800_1B2C(ax, bp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_18CF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> ch:<invalid> al:<invalid> dl:<invalid> bl:<invalid> bh:<invalid> bx:<invalid>



void fn0800_196F(word16 ax, word16 bp, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ds ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: sp
fn0800_196F_entry:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_196F:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_196F_thunk_fn0800_1B06:
	fn0800_1B06(ax, bp, ds)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_196F_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> bl:<invalid> bh:<invalid>



word16 fn0800_1AEB(word16 bp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ss
// LiveOut: bp
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved:
fn0800_1AEB_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(16)

l0800_1AEB:
	Mem7[ss:v3 - 0x0002:word16] = Mem0[ss:bp + 0x0008:word16]
	Mem10[ss:v3 - 0x0004:word16] = 0xFFFF
	word16 sp_12
	word16 bp_13
	selector ss_14
	byte SCZO_15
	word16 si_16
	word16 di_17
	selector es_18
	byte D_19
	byte al_20
	selector ds_21
	byte SZO_22
	byte C_23
	byte Z_24
	word16 ax_25
	selector cs_26
	word16 cx_27
	byte SO_28
	byte S_29
	word16 bx_30
	byte bl_31
	byte bh_32
	byte CZ_33
	call SEQ(cs, Mem10[ss:bp + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ax_8,bp,cs,sp_9,ss
		defs: al_20,ax_25,bh_32,bl_31,bp_13,bx_30,C_23,cs_26,cx_27,CZ_33,D_19,di_17,ds_21,es_18,S_29,SCZO_15,si_16,SO_28,sp_12,ss_14,SZO_22,Z_24
	Mem41[ss:bp - 0x0028:word16] = Mem10[ss:bp - 0x0028:word16] - (Mem10[ss:bp - 0x0028:word16] <u 0x0001)
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> es:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_1AFF:
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> cx:<invalid> bp:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_1B8C:
	return Mem41[ss:bp:word16]
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> cx:<invalid> es:<invalid> bp:<invalid> si:<invalid> al:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

fn0800_1AEB_exit:
// DataOut: bp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> cx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> al:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>



void fn0800_1B06(word16 ax, word16 bp, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ds ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved:
fn0800_1B06_entry:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B06:
	Mem8[ss:bp - 0x0026:word16] = Mem0[ss:bp - 0x0026:word16] + 0x0001
	word16 sp_14
	byte SZO_17
	selector cs_18
	word16 cx_19
	word16 ax_20
	byte C_21
	byte al_22
	byte S_23
	word16 bx_24
	selector ds_25
	byte SCZO_26
	byte Z_27
	call SEQ(cs, Mem8[ss:bp + 0x0004:word16]) (retsize: 2; depth: 4)
		uses: bp_3,cs,sp_11,ss_2,SZO_9,wLoc02_12
		defs: al_22,ax_20,bp_15,bx_24,C_21,cs_18,cx_19,ds_25,S_23,SCZO_26,sp_14,ss_16,SZO_17,Z_27
	byte al_31 = (byte) ax_20
	branch ax_20 <= 0x0000 l0800_1B27
// DataOut: al bp ds sp ss
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>
// LocalsOut: fp(16)

l0800_1B27:
	branch ax_20 == 0x0000 l0800_1B21
// DataOut: bp sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>

l0800_1B29:
// DataOut: bp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>

l0800_1B2A_thunk_fn0800_1AEB:
	fn0800_1AEB(bp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>

l0800_1B14:
	word16 ax_70 = DPB(ax_20, al_31, 0)
	branch al_31 < 0x00 l0800_1B21
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>
// LocalsOut: fp(16)

l0800_1B18:
	branch Mem8[ds_25:ax_70 + 0x055A:byte] == 0x01 l0800_1B06
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>
// LocalsOut: fp(16)

l0800_1B21:
	word16 sp_55
	word16 bp_56
	selector ss_57
	byte SZO_58
	selector cs_59
	word16 cx_60
	word16 ax_61
	byte C_62
	byte al_63
	byte S_64
	word16 bx_65
	selector ds_66
	byte SCZO_67
	byte Z_68
	call Mem8[ss:sp_14 + 0x0002:word16] + 0x0003 (retsize: 4; depth: 4)
		uses: al_31,ax_30,bp_15,bx_24,C_35,cs_18,cx_53,ds_25,S_34,SCZO_54,sp_52,ss_16,SZO_32,wLoc02_12,Z_33
		defs: al_63,ax_61,bp_56,bx_65,C_62,cs_59,cx_60,ds_66,S_64,SCZO_67,sp_55,ss_57,SZO_58,Z_68
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>

fn0800_1B06_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> bl:<invalid> bh:<invalid> -2(fp):<invalid>



void fn0800_1B2C(word16 ax, word16 bp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0800_1B2C_entry:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B2C:
	word16 sp_1 = fp
	word16 dx_147 = 0x0000
	word16 cx_133 = 0x0004
	byte cl_118 = 0x04
// DataOut: ax bp cl cx dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1B31:
	word16 v8_30 = Mem0[ss:bp - 0x0022:word16] - 0x0001
	Mem31[ss:bp - 0x0022:word16] = v8_30
	branch v8_30 < 0x0000 l0800_1B7B
// DataOut: ax bp cl cx dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B7B:
// DataOut: bp cl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B36:
	word16 sp_89 = sp_1 - 0x0002
	Mem90[ss:sp_89:word16] = dx_147
	Mem92[ss:sp_89 - 0x0002:word16] = cx_133
	Mem94[ss:bp - 0x0026:word16] = Mem92[ss:bp - 0x0026:word16] + 0x0001
	Mem98[ss:sp_89 - 0x0004:word16] = Mem94[ss:bp + 0x0008:word16]
	word16 sp_99
	word16 dx_100
	byte SCZO_101
	word16 cx_102
	byte SZO_105
	byte SO_106
	word16 ax_108
	byte C_109
	byte cl_110
	byte ch_111
	byte al_112
	byte dl_113
	byte Z_114
	call SEQ(cs, Mem98[ss:bp + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: al_16,ax_19,bp_22,C_18,ch_24,cl_17,cs_20,cx_25,dl_26,dx_27,SCZO_28,SO_33,sp_97,ss_21,SZO_95,Z_15
		defs: al_112,ax_108,bp_103,C_109,ch_111,cl_110,cs_107,cx_102,dl_113,dx_100,SCZO_101,SO_106,sp_99,ss_104,SZO_105,Z_114
	word16 cx_117 = Mem98[ss:sp_99 + 0x0002:word16]
	cl_118 = (byte) cx_117 (alias)
	word16 dx_120 = Mem98[ss:sp_99 + 0x0004:word16]
	sp_1 = sp_99 + 0x0006
	byte al_124 = (byte) ax_108
	branch ax_108 <= 0x0000 l0800_1B7D
// DataOut: al ax bp cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B48:
	cl_118 = cl_118 - 0x01
	word16 cx_128 = DPB(cx_117, cl_118 - 0x01, 0)
	branch cl_118 < 0x01 l0800_1B7D
// DataOut: al ax bp cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B4C:
	byte ch_132 = al_124 - 0x30
	cx_133 = DPB(cx_128, al_124 - 0x30, 8) (alias)
	branch al_124 <u 0x30 l0800_1B7D
// DataOut: ax bp ch cl cx dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B53:
	branch al_124 <u 0x3A l0800_1B6F
// DataOut: ax bp ch cl cx dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x30 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B58:
	byte ch_149 = al_124 - 0x41
	word16 cx_150 = DPB(cx_128, al_124 - 0x41, 8)
	branch al_124 <u 0x41 l0800_1B7D
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x30 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B5D:
	branch al_124 <u 0x47 l0800_1B6C
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x41 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B62:
	ch_149 = al_124 - 0x61
	cx_150 = DPB(cx_128, al_124 - 0x61, 8) (alias)
	branch al_124 <u 0x61 l0800_1B7D
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x41 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B67:
	branch al_124 >=u 0x67 l0800_1B7D
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x61 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B7D:
	branch cl_118 == 0x04 l0800_1B88
// DataOut: bp sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B88:
// DataOut: bp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B89_thunk_fn0800_1AEB:
	fn0800_1AEB(bp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B82:
	word16 sp_70
	word16 dx_71
	byte SCZO_72
	word16 cx_73
	word16 bp_74
	selector ss_75
	byte SZO_76
	byte SO_77
	selector cs_78
	word16 ax_79
	byte C_80
	byte cl_81
	byte ch_82
	byte al_83
	byte dl_84
	byte Z_85
	call Mem31[ss:sp_1:word16] + 0x0003 (retsize: 4; depth: 4)
		uses: al_34,ax_37,bp_42,C_36,ch_44,cl_35,cs_38,cx_68,dl_46,dx_47,SCZO_69,SO_39,sp_67,ss_41,SZO_40,Z_49
		defs: al_83,ax_79,bp_74,C_80,ch_82,cl_81,cs_78,cx_73,dl_84,dx_71,SCZO_72,SO_77,sp_70,ss_75,SZO_76,Z_85
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

fn0800_1B2C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> ch:<invalid> al:<invalid> dl:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B6C:
	ch_132 = ch_149 + 0x0A
	cx_133 = DPB(cx_150, ch_132, 8) (alias)
// DataOut: ax bp ch cl cx dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B6F:
	dx_147 = DPB(dx_120 << 0x0004, (byte) (dx_120 << 0x0004) + ch_132, 0) (alias)
// DataOut: ax bp cl cx dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000



void fn0800_1B92()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1B92_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1B92:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E2:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1B92_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>



void fn0800_1B96()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1B96_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1B96:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E4:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1B96_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>



void fn0800_1B9A()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1B9A_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1B9A:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E6:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1B9A_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>



byte fn0800_1B9E(byte cl, byte bl)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bl cl
// LiveOut: C
// Trashed: SCZO bh bl bx ebx rbx
// Preserved: bx sp
fn0800_1B9E_entry:
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B9E:
	byte C_13
	byte bl_26 = bl - 0x30
	branch bl <u 0x30 l0800_1BC7
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1BA4:
	branch bl <=u 0x39 l0800_1BBB
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16)

l0800_1BA9:
	branch bl >u 0x5A l0800_1BB3
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16)

l0800_1BB3:
	bl_26 = bl - 0x57
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16)

l0800_1BAE:
	bl_26 = bl - 0x37
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16)

l0800_1BB6:
	branch bl_26 <=u 0x09 l0800_1BC7
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx
// LocalsOut: fp(16)

l0800_1BBB:
	branch bl_26 >=u cl l0800_1BC7
// DataOut: bl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx
// LocalsOut: fp(16)

l0800_1BC7:
	C_13 = true
// DataOut: cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx

l0800_1BBF:
	C_13 = false
// DataOut: cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx

l0800_1BC5:
// DataOut: cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp bl:<invalid> bx:bx bh:0x00 -2(fp):bx

l0800_1BCB:
	return C_13
// DataOut: cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp bl:<invalid> bx:bx bh:0x00 -2(fp):bx

fn0800_1B9E_exit:
// DataOut:
// DataOut (flags): C
// SymbolicIn: sp:fp bl:<invalid> bx:bx bh:0x00 -2(fp):bx



void fn0800_1BCC(word16 ax, word16 bx, selector ds, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C, word16 wArg0E)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bx ds ss
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esi rax rbx rcx rdi rdx rsi si sil
// Preserved: al bp sp
// Stack args: Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)
fn0800_1BCC_entry:
// DataOut: ax bx ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BCC:
	byte bLoc07_14 = 0x00
	word16 wLoc06_128 = 0x0000
	word16 wLoc04_124 = 0x0001
	word16 sp_132 = fp - 0x000E
// DataOut: ax bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BE6:
	selector ds_155
	word16 v9_28 = wLoc06_128 + 0x0001
	word16 sp_33 = sp_132 - 0x0002
	Mem34[ss:sp_33:word16] = wArg06
	wLoc06_128 = v9_28
	word16 sp_36
	word16 bp_37
	byte SCZO_39
	word16 si_40
	word16 di_41
	selector es_42
	byte SZO_43
	selector cs_44
	word16 cx_45
	word16 ax_46
	byte C_47
	byte SO_48
	byte al_49
	word16 bx_50
	byte bl_51
	byte Z_52
	selector ds_53
	byte CZ_54
	byte cl_55
	word16 dx_56
	byte dl_57
	byte dh_58
	byte ah_59
	call SEQ(cs, Mem34[ss:fp + 0x0002:word16]) (retsize: 2; depth: 2)
		uses: bLoc07_14,bp_5,cs,cx,di_20,es,SCZO_7,si,sp_33,ss_25,SZO_30,wLoc02_4,wLoc04_16,wLoc06_29,wLoc0A_10,wLoc0C_13,wLoc0E_19
		defs: ah_59,al_49,ax_46,bl_51,bp_37,bx_50,C_47,cl_55,cs_44,cx_45,CZ_54,dh_58,di_41,dl_57,ds_53,dx_56,es_42,SCZO_39,si_40,SO_48,sp_36,ss_38,SZO_43,Z_52
	sp_132 = sp_36 + 0x0002
	word16 ax_131 = ax_46
	byte al_66 = (byte) ax_46
	branch ax_46 < 0x0000 l0800_1C5A
// DataOut: al ax bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:(int16) al -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BF4:
	word16 ax_203 = (int16) al_66
	byte bl_212 = (byte) ax_203
	branch (bl_212 & 0x80) != 0x00 l0800_1C00
// DataOut: ax bl bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BFB:
	branch (Mem34[ds_53:ax_203 + di_41:byte] & 0x01) != 0x00 l0800_1BE6
// DataOut: ax bl bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:(int16) al -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C00:
	ax_131 = ax_203
	byte al_222 = (byte) ax_203
	word16 wArg0A_227 = wArg0A - 0x0001
	branch wArg0A < 0x0001 l0800_1C61
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:(int16) al -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C06:
	word16 bp_288
	selector cs_272
	branch al_222 == 0x2B l0800_1C11
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C0A:
	ds_155 = ds_53
	cs_272 = cs_44
	bp_288 = bp_37
	branch al_222 != 0x2D l0800_1C24
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C0E:
	bLoc07_14 = 0x01
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C11:
	wArg0A_227 = wArg0A - 0x0002
	branch wArg0A < 0x0002 l0800_1C61
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C16:
	Mem808[ss:sp_36:word16] = wArg06
	wLoc06_128 = v9_28 + 0x0001
	word16 sp_809
	byte SCZO_812
	word16 si_813
	word16 di_814
	selector es_815
	byte SZO_816
	word16 cx_818
	word16 ax_819
	byte C_820
	byte SO_821
	byte al_822
	word16 bx_823
	byte bl_824
	byte Z_825
	byte CZ_827
	byte cl_828
	word16 dx_829
	byte dl_830
	byte dh_831
	byte ah_832
	call SEQ(cs_44, Mem808[ss:bp_37 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_223,al_222,ax_219,bl_212,bLoc07_796,bp_37,bx_225,C_217,cl_55,cs_44,cx_60,CZ_54,dh_58,di_41,dl_57,ds_53,dx_56,es_42,SCZO_798,si_40,SO_802,sp_807,ss_38,SZO_805,wLoc02_4,wLoc04_16,wLoc06_804,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_797
		defs: ah_832,al_822,ax_819,bl_824,bp_810,bx_823,C_820,cl_828,cs_817,cx_818,CZ_827,dh_831,di_814,dl_830,ds_826,dx_829,es_815,SCZO_812,si_813,SO_821,sp_809,ss_811,SZO_816,Z_825
	sp_132 = sp_809 + 0x0002
	ax_131 = ax_819
	al_222 = (byte) ax_819 (alias)
	branch ax_819 < 0x0000 l0800_1C5A
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C5A:
	wLoc04_124 = 0xFFFF
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +0006(16) Stack +000C(16) Stack +000E(16)

l0800_1C24:
	word16 si_382
	word16 di_383
	word16 ax_388
	byte cl_297 = (byte) wArg08
	branch wArg08 == 0x0000 l0800_1C7B
// DataOut: al ax cl cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C7B:
	wArg08 = 0x000A
	branch al_222 != 0x30 l0800_1CA7
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C84:
	word16 v63_751 = wArg0A_227 - 0x0001
	wArg0A_227 = v63_751
	branch v63_751 < 0x0000 l0800_1C78
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C89:
	word16 sp_759 = sp_132 - 0x0002
	Mem760[ss:sp_759:word16] = wArg06
	wLoc06_128 = wLoc06_128 + 0x0001
	word16 sp_761
	byte SCZO_764
	selector es_767
	byte SZO_768
	word16 cx_770
	byte C_772
	byte SO_773
	byte al_774
	word16 bx_775
	byte bl_776
	byte Z_777
	byte CZ_779
	byte cl_780
	word16 dx_781
	byte dl_782
	byte dh_783
	byte ah_784
	call SEQ(cs_272, Mem760[ss:bp_288 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_280,al_279,ax_283,bl_270,bLoc07_266,bp_288,bx_286,C_284,cl_297,cs_272,cx_295,CZ_268,dh_277,di_293,dl_276,ds_269,dx_285,es_287,SCZO_748,si_290,SO_754,sp_759,ss_273,SZO_757,wLoc02_4,wLoc04_16,wLoc06_756,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_749
		defs: ah_784,al_774,ax_771,bl_776,bp_762,bx_775,C_772,cl_780,cs_769,cx_770,CZ_779,dh_783,di_766,dl_782,ds_778,dx_781,es_767,SCZO_764,si_765,SO_773,sp_761,ss_763,SZO_768,Z_777
	sp_132 = sp_761 + 0x0002
	wArg08 = 0x0008
	branch al_774 == 0x78 l0800_1CA0
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C9C:
	branch al_774 != 0x58 l0800_1CCD
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x0008 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CA0:
	wArg08 = 0x0010
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x0008 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C2D:
	branch wArg08 >u 0x0024 l0800_1C61
// DataOut: al ax cl di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C32:
	branch cl_297 <u 0x02 l0800_1C61
// DataOut: al ax cl di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C37:
	branch al_222 != 0x30 l0800_1CA7
// DataOut: al cl di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CA7:
	branch fn0800_1B9E(0x0A, (byte) ax_131) l0800_1C61
// DataOut: ax di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C61:
	wLoc04_124 = 0x0000
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 bl:<invalid> bh:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +0006(16) Stack +000C(16) Stack +000E(16)

l0800_1C66:
	word16 sp_134 = sp_132 - 0x0002
	Mem135[ss:sp_134:word16] = wArg06
	Mem137[ss:sp_134 - 0x0002:word16] = ax_131
	word16 sp_138
	word16 bp_139
	selector ss_140
	byte SCZO_141
	word16 si_142
	word16 di_143
	selector es_144
	byte SZO_145
	selector cs_146
	word16 cx_147
	word16 ax_148
	byte C_149
	byte SO_150
	byte al_151
	word16 bx_152
	byte bl_153
	byte Z_154
	byte CZ_156
	byte cl_157
	word16 dx_158
	byte dl_159
	byte dh_160
	byte ah_161
	call SEQ(cs_44, Mem137[ss:bp_37 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ah_67,al_66,ax_131,bl_51,bLoc07_121,bp_37,bx_50,C_71,cl_55,cs_44,cx_60,CZ_54,dh_58,di_41,dl_57,ds_53,dx_56,es_42,SCZO_39,si_40,SO_70,sp_136,ss_126,SZO_69,wLoc02_4,wLoc04_124,wLoc06_128,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_52
		defs: ah_161,al_151,ax_148,bl_153,bp_139,bx_152,C_149,cl_157,cs_146,cx_147,CZ_156,dh_160,di_143,dl_159,ds_155,dx_158,es_144,SCZO_141,si_142,SO_150,sp_138,ss_140,SZO_145,Z_154
	wLoc06_128 = wLoc06_128 - 0x0001
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 bl:<invalid> bh:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1CB1:
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:0x000A ax:<invalid> bx:<invalid> si:0x0000 bl:<invalid> bh:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C3B:
	branch cl_297 != 0x10 l0800_1CA5
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C40:
	word16 v31_707 = wArg0A_227 - 0x0001
	wArg0A_227 = v31_707
	branch v31_707 < 0x0000 l0800_1C78
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C78:
// DataOut: di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +000C(16) Stack +000E(16)

l0800_1C45:
	word16 sp_715 = sp_132 - 0x0002
	Mem716[ss:sp_715:word16] = wArg06
	wLoc06_128 = wLoc06_128 + 0x0001
	word16 sp_717
	byte SCZO_720
	selector es_723
	byte SZO_724
	word16 cx_726
	byte C_728
	byte SO_729
	byte al_730
	word16 bx_731
	byte bl_732
	byte Z_733
	byte CZ_735
	byte cl_736
	word16 dx_737
	byte dl_738
	byte dh_739
	byte ah_740
	call SEQ(cs_272, Mem716[ss:bp_288 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_280,al_279,ax_283,bl_270,bLoc07_266,bp_288,bx_286,C_702,cl_297,cs_272,cx_295,CZ_700,dh_277,di_293,dl_276,ds_269,dx_285,es_287,SCZO_705,si_290,SO_710,sp_715,ss_273,SZO_713,wLoc02_4,wLoc04_16,wLoc06_712,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_706
		defs: ah_740,al_730,ax_727,bl_732,bp_718,bx_731,C_728,cl_736,cs_725,cx_726,CZ_735,dh_739,di_722,dl_738,ds_734,dx_737,es_723,SCZO_720,si_721,SO_729,sp_717,ss_719,SZO_724,Z_733
	sp_132 = sp_717 + 0x0002
	branch al_730 == 0x78 l0800_1CA5
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C53:
	branch al_730 == 0x58 l0800_1CA5
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CA5:
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x0010 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C57:
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CCD:
	byte cl_429 = (byte) wArg08
	byte bl_433 = (byte) ax_388
	byte C_434 = fn0800_1B9E(cl_429, bl_433)
	word16 ax_436 = ax_388
	branch C_434 l0800_1CB4
// DataOut: ax di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CB4:
	int32 dx_ax_493 = wArg08 *u si_382
	cs_511 = cs_272
	bp_532 = bp_288
	branch SEQ(di_383, ax_388 + (word16) dx_ax_493) + dx_ax_493 != 0x00000000 l0800_1CEA
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CEA:
	selector cs_511
	word16 bp_532
	word16 v48_534 = wArg0A_227 - 0x0001
	wArg0A_227 = v48_534
	branch v48_534 < 0x0000 l0800_1D0F
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CEF:
	word16 sp_542 = sp_132 - 0x0002
	Mem543[ss:sp_542:word16] = wArg06
	wLoc06_128 = wLoc06_128 + 0x0001
	word16 sp_544
	byte SCZO_547
	word16 si_548
	word16 di_549
	selector es_550
	byte SZO_551
	word16 cx_553
	word16 ax_554
	byte C_555
	byte SO_556
	byte al_557
	word16 bx_558
	byte bl_559
	byte Z_560
	byte CZ_562
	byte cl_563
	word16 dx_564
	byte dl_565
	byte dh_566
	byte ah_567
	call SEQ(cs_511, Mem543[ss:bp_532 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_520,al_519,ax_524,bl_510,bLoc07_266,bp_532,bx_528,C_525,cl_507,cs_511,cx_513,CZ_508,dh_517,di_530,dl_516,ds_509,dx_526,es_529,SCZO_527,si_531,SO_537,sp_542,ss_512,SZO_540,wLoc02_4,wLoc04_16,wLoc06_539,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_523
		defs: ah_567,al_557,ax_554,bl_559,bp_545,bx_558,C_555,cl_563,cs_552,cx_553,CZ_562,dh_566,di_549,dl_565,ds_561,dx_564,es_550,SCZO_547,si_548,SO_556,sp_544,ss_546,SZO_551,Z_560
	sp_132 = sp_544 + 0x0002
	ax_436 = ax_554
	branch fn0800_1B9E((byte) wArg08, (byte) ax_554) l0800_1CD9
// DataOut: ax cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CD9:
	int32 dx_ax_589 = wArg08 *u si_548
	word16 ax_590 = (word16) dx_ax_589
	int32 dx_ax_599 = wArg08 *u di_549
	branch SLICE(dx_ax_599, byte, 16) + SLICE(dx_ax_599, byte, 24) + (SEQ(di_549, ax_554 + ax_590) + SEQ(SLICE(dx_ax_589, word16, 16), ax_590) <u 0x00000000) != 0x00 l0800_1D32
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1D32:
	wLoc04_124 = 0x0002
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1CBE:
	word16 v40_368 = wArg0A_227 - 0x0001
	wArg0A_227 = v40_368
	branch v40_368 < 0x0000 l0800_1D0F
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CC3:
	word16 sp_376 = sp_132 - 0x0002
	Mem377[ss:sp_376:word16] = wArg06
	wLoc06_128 = wLoc06_128 + 0x0001
	word16 sp_378
	byte SCZO_381
	selector es_384
	byte SZO_385
	word16 cx_387
	byte C_389
	byte SO_390
	byte al_391
	word16 bx_392
	byte bl_393
	byte Z_394
	byte CZ_396
	byte cl_397
	word16 dx_398
	byte dl_399
	byte dh_400
	byte ah_401
	call SEQ(cs_272, Mem377[ss:bp_288 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_354,al_353,ax_358,bl_344,bLoc07_266,bp_366,bx_362,C_359,cl_341,cs_345,cx_347,CZ_342,dh_351,di_364,dl_350,ds_343,dx_360,es_363,SCZO_361,si_365,SO_371,sp_376,ss_346,SZO_374,wLoc02_4,wLoc04_16,wLoc06_373,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_357
		defs: ah_401,al_391,ax_388,bl_393,bp_379,bx_392,C_389,cl_397,cs_386,cx_387,CZ_396,dh_400,di_383,dl_399,ds_395,dx_398,es_384,SCZO_381,si_382,SO_390,sp_378,ss_380,SZO_385,Z_394
	sp_132 = sp_378 + 0x0002
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CD7:
// DataOut: ax di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +000C(16) Stack +000E(16)

l0800_1D03:
	word16 sp_453 = sp_132 - 0x0002
	Mem454[ss:sp_453:word16] = wArg06
	Mem456[ss:sp_453 - 0x0002:word16] = ax_436
	word16 sp_457
	word16 bp_458
	selector ss_459
	byte SCZO_460
	word16 si_461
	word16 di_462
	selector es_463
	byte SZO_464
	selector cs_465
	word16 cx_466
	word16 ax_467
	byte C_468
	byte SO_469
	byte al_470
	word16 bx_471
	byte bl_472
	byte Z_473
	byte CZ_475
	byte cl_476
	word16 dx_477
	byte dl_478
	byte dh_479
	byte ah_480
	call SEQ(cs_272, Mem456[ss:bp_288 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ah_440,al_439,ax_450,bl_433,bLoc07_266,bp_425,bx_442,C_434,cl_429,cs_411,cx_427,CZ_408,dh_416,di_423,dl_415,ds_409,dx_419,es_422,SCZO_420,si_424,SO_410,sp_455,ss_445,SZO_414,wLoc02_4,wLoc04_16,wLoc06_446,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_417
		defs: ah_480,al_470,ax_467,bl_472,bp_458,bx_471,C_468,cl_476,cs_465,cx_466,CZ_475,dh_479,di_462,dl_478,ds_474,dx_477,es_463,SCZO_460,si_461,SO_469,sp_457,ss_459,SZO_464,Z_473
	wLoc06_128 = wLoc06_128 - 0x0001
// DataOut: di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +000C(16) Stack +000E(16)

l0800_1D0F:
	branch bLoc07_14 == 0x00 l0800_1D1F
// DataOut: ax ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1D18:
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1D1F:
	Mem107[ds_155:wArg0C:word16] = Mem34[ds_155:wArg0C:word16] + wLoc06_128
	Mem112[ds_155:wArg0E:word16] = wLoc04_124
// DataOut: sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> Sequence dx:ax:<invalid> bx:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> dl:<invalid> al:<invalid> ah:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16)

l0800_1D48:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> Sequence dx:ax:<invalid> bx:<invalid> es:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> dl:<invalid> al:<invalid> ah:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>

fn0800_1BCC_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:<invalid> cx:<invalid> ax:<invalid> Sequence dx:ax:<invalid> bx:<invalid> es:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> dl:<invalid> al:<invalid> ah:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>



void fn0800_1D4E(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_1D4E_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_1D4E:
	word16 dx_23
	fn0800_0C28(0x00, ds, wArg02, 0x0000, 0x0000, 0x01, out dx_23)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1D63:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0001 -2(fp):bp

fn0800_1D4E_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0001 -2(fp):bp



