void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
_init_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402168:
	word64 rax_4 = Mem0[0x0000000000619FF8:word64]
	branch rax_4 == 0x0000000000000000 l000000000040217D
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402178:
	word64 rsp_15
	byte SCZO_16
	word64 rax_17
	byte SZO_18
	byte C_19
	byte Z_20
	call __gmon_start__ (retsize: 8; depth: 16)
		uses: C_7,rax_4,rsp_2,SCZO,SZO_5,Z_6
		defs: C_19,rax_17,rsp_15,SCZO_16,SZO_18,Z_20
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l000000000040217D:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

_init_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn00000000004028C0(word64 rsi, word64 rdi, word64 r9, word64 r11, word64 r15, selector fs, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004028C0_entry:
// DataOut: edi fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004028C0:
	word64 rsp_33 = fn000000000040D6A0(Mem0[rsi:word64])
	word64 rsp_37
	word64 rdi_38
	word64 rsi_39
	word64 rbp_40
	word64 rbx_41
	word32 ebx_42
	word32 edi_43
	byte SCZO_44
	word64 rax_45
	selector fs_46
	word32 eax_47
	byte SZO_48
	byte C_49
	word32 esi_50
	word64 r8_51
	byte Z_52
	word64 r12_53
	word32 ecx_54
	word64 rcx_55
	word32 edx_56
	word64 rdx_57
	byte S_58
	word16 ax_59
	byte al_60
	word32 r8d_61
	word32 r14d_62
	word64 r14_63
	word32 r13d_64
	word64 r13_65
	word32 r12d_66
	byte CZ_67
	bcuiposr0 None_68
	word64 r9_69
	byte cl_70
	word64 r15_71
	word32 ebp_72
	word32 esp_73
	word32 r9d_74
	byte SO_75
	byte r13b_76
	word32 r15d_77
	byte r14b_78
	word64 r11_79
	word128 xmm0_80
	word128 xmm1_81
	word128 xmm2_82
	word128 xmm3_83
	byte sil_84
	byte bpl_85
	call setlocale (retsize: 8; depth: 8)
		uses: C_32,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_30,ebx_22,edi,esp_34,fs,qwLoc28_28,rax_29,rbp_16,rbx_21,rdi_36,rsi_35,rsp_33,SZO_31
		defs: al_60,ax_59,bpl_85,C_49,cl_70,CZ_67,eax_47,ebp_72,ebx_42,ecx_54,edi_43,edx_56,esi_50,esp_73,fs_46,None_68,r11_79,r12_53,r12d_66,r13_65,r13b_76,r13d_64,r14_63,r14b_78,r14d_62,r15_71,r15d_77,r8_51,r8d_61,r9_69,r9d_74,rax_45,rbp_40,rbx_41,rcx_55,rdi_38,rdx_57,rsi_39,rsp_37,S_58,SCZO_44,sil_84,SO_75,SZO_48,xmm0_80,xmm1_81,xmm2_82,xmm3_83,Z_52
	word64 rdi_89
	word64 rsi_90
	word64 rbp_91
	word64 rbx_92
	word32 ebx_93
	word32 edi_94
	byte SCZO_95
	word64 rax_96
	word32 eax_98
	byte SZO_99
	byte C_100
	word32 esi_101
	word64 r8_102
	byte Z_103
	word64 r12_104
	word32 ecx_105
	word64 rcx_106
	word32 edx_107
	word64 rdx_108
	byte S_109
	word16 ax_110
	byte al_111
	word32 r8d_112
	word32 r14d_113
	word64 r14_114
	word32 r13d_115
	word64 r13_116
	word32 r12d_117
	byte CZ_118
	bcuiposr0 None_119
	word64 r9_120
	byte cl_121
	word64 r15_122
	word32 ebp_123
	word32 esp_124
	word32 r9d_125
	byte SO_126
	byte r13b_127
	word32 r15d_128
	byte r14b_129
	word128 xmm0_131
	word128 xmm1_132
	word128 xmm2_133
	word128 xmm3_134
	byte sil_135
	byte bpl_136
	word64 rsp_238
	selector fs_1029
	word64 r11_1035
	call bindtextdomain (retsize: 8; depth: 8)
		uses: al_60,ax_59,bpl_85,C_49,cl_70,CZ_67,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_47,ebp_72,ebx_42,ecx_54,edi_43,edx_56,esi_50,esp_73,fs_46,None_68,qwLoc28_28,r11_79,r12_53,r12d_66,r13_65,r13b_76,r13d_64,r14_63,r14b_78,r14d_62,r15_71,r15d_77,r8_51,r8d_61,r9_69,r9d_74,rax_45,rbp_40,rbx_41,rcx_55,rdi_87,rdx_57,rsi_86,rsp_37,S_58,SCZO_44,sil_84,SO_75,SZO_48,xmm0_80,xmm1_81,xmm2_82,xmm3_83,Z_52
		defs: al_111,ax_110,bpl_136,C_100,cl_121,CZ_118,eax_98,ebp_123,ebx_93,ecx_105,edi_94,edx_107,esi_101,esp_124,fs_97,None_119,r11_130,r12_104,r12d_117,r13_116,r13b_127,r13d_115,r14_114,r14b_129,r14d_113,r15_122,r15d_128,r8_102,r8d_112,r9_120,r9d_125,rax_96,rbp_91,rbx_92,rcx_106,rdi_89,rdx_108,rsi_90,rsp_88,S_109,SCZO_95,sil_135,SO_126,SZO_99,xmm0_131,xmm1_132,xmm2_133,xmm3_134,Z_103
	textdomain(0x0000000000413800)
	Mem140[0x000000000061A580:word32] = 0x00000002
	word64 rax_141 = fn0000000000411EE0()
	Mem143[0x000000000061B030:word32] = 0x00000000
	Mem144[0x000000000061B0D0:byte] = 0x01
	Mem145[0x000000000061B180:word64] = rax_141
	word32 eax_148 = (word32) (uint64) Mem145[0x000000000061A56C:word32]
	Mem151[0x000000000061B190:word64] = 0x0000000000000000
	Mem152[0x000000000061B188:word64] = 0xFFFFFFFFFFFFFFFF
	Mem153[0x000000000061B0F0:byte] = 0x00
	branch eax_148 == 0x00000002 l0000000000403203
// DataOut: eax ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040297B:
	branch eax_148 == 0x00000003 l00000000004029AF
// DataOut: eax ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004029AF:
	Mem6420[0x000000000061B150:word32] = 0x00000000
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402980:
	word64 rax_6351 = (uint64) (eax_148 - 0x00000001)
	word32 eax_6353 = (word32) rax_6351
	branch eax_6353 == 0x00000000 l000000000040298A
// DataOut: eax ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040298A:
	word64 rdi_6360
	word64 rsi_6361
	word64 rbp_6362
	word64 rbx_6363
	word32 ebx_6364
	word32 edi_6365
	byte SCZO_6366
	word64 rax_6367
	word32 eax_6369
	byte SZO_6370
	byte C_6371
	word32 esi_6372
	word64 r8_6373
	byte Z_6374
	word64 r12_6375
	word32 ecx_6376
	word64 rcx_6377
	word32 edx_6378
	word64 rdx_6379
	byte S_6380
	word16 ax_6381
	byte al_6382
	word32 r8d_6383
	word32 r14d_6384
	word64 r14_6385
	word32 r13d_6386
	word64 r13_6387
	word32 r12d_6388
	byte CZ_6389
	bcuiposr0 None_6390
	word64 r9_6391
	byte cl_6392
	word64 r15_6393
	word32 ebp_6394
	word32 esp_6395
	word32 r9d_6396
	byte SO_6397
	byte r13b_6398
	word32 r15d_6399
	byte r14b_6400
	word128 xmm0_6402
	word128 xmm1_6403
	word128 xmm2_6404
	word128 xmm3_6405
	byte sil_6406
	byte bpl_6407
	call isatty (retsize: 8; depth: 8)
		uses: al_6355,ax_6354,bpl_136,C_100,cl_121,CZ_118,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_6353,ebp_123,ebx_93,ecx_105,edi_94,edx_107,esi_101,esp_124,fs_97,None_119,qwLoc04,qwLoc28_28,r11_130,r12_104,r12d_117,r13_116,r13b_127,r13d_115,r14_114,r14b_129,r14d_113,r15_122,r15d_128,r8_142,r8d_112,r9_120,r9d_125,rax_6351,rbp_91,rbx_92,rcx_106,rdi_6358,rdx_108,rsi_90,rsp_88,S_109,SCZO_6356,sil_135,SO_126,SZO_99,xmm0_131,xmm1_132,xmm2_133,xmm3_134,Z_6357
		defs: al_6382,ax_6381,bpl_6407,C_6371,cl_6392,CZ_6389,eax_6369,ebp_6394,ebx_6364,ecx_6376,edi_6365,edx_6378,esi_6372,esp_6395,fs_6368,None_6390,r11_6401,r12_6375,r12d_6388,r13_6387,r13b_6398,r13d_6386,r14_6385,r14b_6400,r14d_6384,r15_6393,r15d_6399,r8_6373,r8d_6383,r9_6391,r9d_6396,rax_6367,rbp_6362,rbx_6363,rcx_6377,rdi_6360,rdx_6379,rsi_6361,rsp_6359,S_6380,SCZO_6366,sil_6406,SO_6397,SZO_6370,xmm0_6402,xmm1_6403,xmm2_6404,xmm3_6405,Z_6374
	branch eax_6369 == 0x00000000 l00000000004037EC
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004037EC:
	Mem6413[0x000000000061B150:word32] = 0x00000001
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040299C:
	Mem6411[0x000000000061B150:word32] = 0x00000002
	Mem6412[0x000000000061B0F0:byte] = 0x01
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004029C5:
	Mem298[0x000000000061B14C:word32] = 0x00000000
	Mem299[0x000000000061B148:word32] = 0x00000000
	Mem300[0x000000000061B147:byte] = 0x00
	Mem301[0x000000000061B145:byte] = 0x00
	Mem302[0x000000000061B144:byte] = 0x00
	Mem303[0x000000000061B12C:word32] = 0x00000000
	Mem304[0x000000000061B114:byte] = 0x00
	Mem305[0x000000000061B110:word32] = 0x00000001
	Mem306[0x000000000061B10E:byte] = 0x00
	Mem307[0x000000000061B10D:byte] = 0x00
	Mem308[0x000000000061B108:word32] = 0x00000000
	Mem309[0x000000000061B100:word64] = 0x0000000000000000
	Mem310[0x000000000061B0F8:word64] = 0x0000000000000000
	Mem311[0x000000000061B17D:byte] = 0x00
	word64 rax_312 = getenv(0x000000000041382E)
	branch rax_312 == 0x0000000000000000 l0000000000402A7F
// DataOut: ebx fs r11 r15 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402A50:
	word64 rbp_6261
	word64 r12_6262
	word64 r13_6263
	word64 r14_6264
	word64 r15_6265
	word64 rax_6266 = fn0000000000409E50(0x0000000000000004, 0x0000000000416460, 0x0000000000416480, rax_312, out rsp_238, out rbp_6261, out r12_6262, out r13_6263, out r14_6264, out r15_6265)
	word32 eax_6268 = (word32) rax_6266
	byte al_6270 = (byte) rax_6266
	branch eax_6268 < 0x00000000 l0000000000403786
// DataOut: al ebx fs r11 r12 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000041382E rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403786:
	word64 r9_6283
	word64 r11_6284
	word64 r15_6285
	word32 ebx_6286 = fn000000000040E930(r12_6262, r11_1035, fs_1029, out r9_6283, out r11_6284, out r15_6285)
	dcgettext(0x0000000000000000, 0x0000000000415B00, 0x0000000000000005)
	word64 rdi_6301
	word64 rsi_6302
	word64 rbp_6303
	word64 rbx_6304
	word32 ebx_6305
	word32 edi_6306
	byte SCZO_6307
	word64 rax_6308
	word32 eax_6310
	byte SZO_6311
	byte C_6312
	word32 esi_6313
	word64 r8_6314
	byte Z_6315
	word64 r12_6316
	word32 ecx_6317
	word64 rcx_6318
	word32 edx_6319
	word64 rdx_6320
	byte S_6321
	word16 ax_6322
	byte al_6323
	word32 r8d_6324
	word32 r14d_6325
	word64 r14_6326
	word32 r13d_6327
	word64 r13_6328
	word32 r12d_6329
	byte CZ_6330
	bcuiposr0 None_6331
	word64 r9_6332
	byte cl_6333
	word64 r15_6334
	word32 ebp_6335
	word32 esp_6336
	word32 r9d_6337
	byte SO_6338
	byte r13b_6339
	word32 r15d_6340
	byte r14b_6341
	word128 xmm0_6343
	word128 xmm1_6344
	word128 xmm2_6345
	word128 xmm3_6346
	byte sil_6347
	byte bpl_6348
	call error (retsize: 8; depth: 8)
		uses: al_6270,ax_6269,bpl_257,C_6299,cl_268,CZ_289,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_6268,ebp_267,ebx_6286,ecx_275,edi_290,edx_279,esi_294,esp_266,fs_276,None_269,qwLoc04,qwLoc28_28,r11_6284,r12_6289,r12d_270,r13_6263,r13b_263,r13d_271,r14_6264,r14b_262,r14d_272,r15_6285,r15d_278,r8_284,r8d_273,r9_6283,r9d_265,rax_6297,rbp_6261,rbx_6287,rcx_6293,rdi_6296,rdx_6294,rsi_6295,rsp_6260,S_6272,SCZO_291,sil_293,SO_264,SZO_6298,xmm0_261,xmm1_260,xmm2_259,xmm3_258,Z_318
		defs: al_6323,ax_6322,bpl_6348,C_6312,cl_6333,CZ_6330,eax_6310,ebp_6335,ebx_6305,ecx_6317,edi_6306,edx_6319,esi_6313,esp_6336,fs_6309,None_6331,r11_6342,r12_6316,r12d_6329,r13_6328,r13b_6339,r13d_6327,r14_6326,r14b_6341,r14d_6325,r15_6334,r15d_6340,r8_6314,r8d_6324,r9_6332,r9d_6337,rax_6308,rbp_6303,rbx_6304,rcx_6318,rdi_6301,rdx_6320,rsi_6302,rsp_6300,S_6321,SCZO_6307,sil_6347,SO_6338,SZO_6311,xmm0_6343,xmm1_6344,xmm2_6345,xmm3_6346,Z_6315
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402A6F:
	fn000000000040E640((word32) (uint64) Mem311[DPB(rax_6266, (int16) al_6270, 0) * 0x0000000000000004 + 0x00416460:word32], 0x0000000000000000)
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402A7F:
	Mem365[0x000000000061B0C8:word64] = 0x0000000000000050
	word64 rax_366 = getenv(0x000000000041383C)
	Mem373[rsp_238 + 0x0000000000000020:word64] = rsp_238 + 0x0000000000000040
	branch rax_366 == 0x0000000000000000 l0000000000402AB1
// DataOut: ebx fs r11 r12 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:(int16) al r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402AA6:
	branch Mem373[rax_366:byte] != 0x00 l00000000004037B8
// DataOut: ebx fs r11 r12 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C esi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004037B8:
	word32 ebx_6169
	word64 rsp_6170
	word64 r9_6171
	word64 r12_6172
	word64 r15_6173
	word32 eax_6174 = fn0000000000410E90(0x00000000, 0x0000000000000000, rax_366, 0x0000000000000000, out ebx_6169, out rsp_6170, out r9_6171, out r12_6172, out r15_6173)
	branch eax_6174 != 0x00000000 l0000000000403A93
// DataOut: ebx fs r11 r12 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C esi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004037D2:
	word64 rax_6247 = Mem373[rsp_6170 + 0x0000000000000040:word64]
	branch rax_6247 == 0x0000000000000000 l0000000000403A93
// DataOut: ebx fs r11 r12 r15 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A93:
	word64 r9_6181
	word64 r11_6182
	word64 r15_6183
	word32 ebx_6184 = fn000000000040E930(r12_6172, r11_1035, fs_1029, out r9_6181, out r11_6182, out r15_6183)
	dcgettext(0x0000000000000000, 0x0000000000415B48, 0x0000000000000005)
	word64 rsp_6198
	word64 rdi_6199
	word64 rsi_6200
	word64 rbp_6201
	word64 rbx_6202
	word32 ebx_6203
	word32 edi_6204
	byte SCZO_6205
	word64 rax_6206
	selector fs_6207
	word32 eax_6208
	byte SZO_6209
	byte C_6210
	word32 esi_6211
	word64 r8_6212
	byte Z_6213
	word64 r12_6214
	word32 ecx_6215
	word64 rcx_6216
	word32 edx_6217
	word64 rdx_6218
	byte S_6219
	word16 ax_6220
	byte al_6221
	word32 r8d_6222
	word32 r14d_6223
	word64 r14_6224
	word32 r13d_6225
	word64 r13_6226
	word32 r12d_6227
	byte CZ_6228
	bcuiposr0 None_6229
	word64 r9_6230
	byte cl_6231
	word64 r15_6232
	word32 ebp_6233
	word32 esp_6234
	word32 r9d_6235
	byte SO_6236
	byte r13b_6237
	word32 r15d_6238
	byte r14b_6239
	word64 r11_6240
	word128 xmm0_6241
	word128 xmm1_6242
	word128 xmm2_6243
	word128 xmm3_6244
	byte sil_6245
	byte bpl_6246
	call error (retsize: 8; depth: 8)
		uses: al_363,ax_356,bpl_321,C_6197,cl_332,CZ_352,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_6174,ebp_331,ebx_6184,ecx_338,edi_353,edx_6163,esi_360,esp_330,fs_339,None_333,qwLoc04,qwLoc28_28,r11_6182,r12_6187,r12d_368,r13_348,r13b_327,r13d_334,r14_349,r14b_326,r14d_335,r15_6183,r15d_341,r8_6161,r8d_336,r9_6181,r9d_329,rax_6195,rbp_346,rbx_6185,rcx_6191,rdi_6194,rdx_6192,rsi_6193,rsp_6170,S_337,SCZO_6159,sil_359,SO_328,SZO_6196,xmm0_325,xmm1_324,xmm2_323,xmm3_322,Z_6176
		defs: al_6221,ax_6220,bpl_6246,C_6210,cl_6231,CZ_6228,eax_6208,ebp_6233,ebx_6203,ecx_6215,edi_6204,edx_6217,esi_6211,esp_6234,fs_6207,None_6229,r11_6240,r12_6214,r12d_6227,r13_6226,r13b_6237,r13d_6225,r14_6224,r14b_6239,r14d_6223,r15_6232,r15d_6238,r8_6212,r8d_6222,r9_6230,r9d_6235,rax_6206,rbp_6201,rbx_6202,rcx_6216,rdi_6199,rdx_6218,rsi_6200,rsp_6198,S_6219,SCZO_6205,sil_6245,SO_6236,SZO_6209,xmm0_6241,xmm1_6242,xmm2_6243,xmm3_6244,Z_6213
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004037E0:
	Mem6255[0x000000000061B0C8:word64] = rax_6247
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402AB1:
	word64 rdi_383
	word64 rsi_384
	word64 rbp_385
	word64 rbx_386
	word32 ebx_387
	word32 edi_388
	byte SCZO_389
	word64 rax_390
	selector fs_391
	word32 eax_392
	byte SZO_393
	byte C_394
	word32 esi_395
	word64 r8_396
	byte Z_397
	word64 r12_398
	word32 ecx_399
	word64 rcx_400
	word32 edx_401
	word64 rdx_402
	byte S_403
	word16 ax_404
	byte al_405
	word32 r8d_406
	word32 r14d_407
	word64 r14_408
	word32 r13d_409
	word64 r13_410
	word32 r12d_411
	byte CZ_412
	bcuiposr0 None_413
	word64 r9_414
	byte cl_415
	word64 r15_416
	word32 ebp_417
	word32 esp_418
	word32 r9d_419
	byte SO_420
	byte r13b_421
	word32 r15d_422
	byte r14b_423
	word64 r11_424
	word128 xmm0_425
	word128 xmm1_426
	word128 xmm2_427
	word128 xmm3_428
	byte sil_429
	byte bpl_430
	word64 rsp_382
	call ioctl (retsize: 8; depth: 8)
		uses: al_363,ax_356,bpl_321,C_379,cl_332,CZ_352,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_355,ebp_331,ebx_343,ecx_338,edi_353,edx_342,esi_360,esp_330,fs_339,None_333,qwLoc28_28,r11_345,r12_367,r12d_368,r13_348,r13b_327,r13d_334,r14_349,r14b_326,r14d_335,r15_350,r15d_341,r8_347,r8d_336,r9_344,r9d_329,rax_377,rbp_346,rbx_340,rcx_361,rdi_381,rdx_376,rsi_380,rsp_374,S_337,SCZO_357,sil_359,SO_328,SZO_378,xmm0_325,xmm1_324,xmm2_323,xmm3_322,Z_371
		defs: al_405,ax_404,bpl_430,C_394,cl_415,CZ_412,eax_392,ebp_417,ebx_387,ecx_399,edi_388,edx_401,esi_395,esp_418,fs_391,None_413,r11_424,r12_398,r12d_411,r13_410,r13b_421,r13d_409,r14_408,r14b_423,r14d_407,r15_416,r15d_422,r8_396,r8d_406,r9_414,r9d_419,rax_390,rbp_385,rbx_386,rcx_400,rdi_383,rdx_402,rsi_384,rsp_382,S_403,SCZO_389,sil_429,SO_420,SZO_393,xmm0_425,xmm1_426,xmm2_427,xmm3_428,Z_397
	branch 0x00000001 == 0x00000000 l0000000000402ADD
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402ACC:
	word32 eax_6150 = (word32) Mem373[rsp_382 + 0x0000000000000042:word16]
	word64 rax_6151 = DPB(rax_390, eax_6150, 0)
	branch (word16) eax_6150 == 0x0000 l0000000000402ADD
// DataOut: ebx fs r11 r15 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402AD6:
	Mem6158[0x000000000061B0C8:word64] = rax_6151
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402ADD:
	word64 rax_434 = getenv(0x0000000000413844)
	Mem443[0x000000000061B0D8:word64] = 0x0000000000000008
	branch rax_434 == 0x0000000000000000 l0000000000402B22
// DataOut: eax ebx fs r11 r15 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402AFA:
	word32 ebx_6064
	word64 r9_6066
	word64 r12_6067
	word64 r15_6068
	branch fn0000000000410E90(0x00000000, 0x0000000000000000, rax_434, 0x0000000000000000, out ebx_6064, out rsp_382, out r9_6066, out r12_6067, out r15_6068) != 0x00000000 l00000000004041BB
// DataOut: ebx fs r11 r12 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413844 rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00413844 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004041BB:
	word64 r9_6080
	word64 r11_6081
	word64 r15_6082
	word32 ebx_6083 = fn000000000040E930(r12_6067, r11_424, fs_391, out r9_6080, out r11_6081, out r15_6082)
	dcgettext(0x0000000000000000, 0x0000000000415B88, 0x0000000000000005)
	word64 rdi_6102
	word64 rsi_6103
	word64 rbp_6104
	word64 rbx_6105
	word32 ebx_6106
	word32 edi_6107
	byte SCZO_6108
	word64 rax_6109
	selector fs_6110
	word32 eax_6111
	byte SZO_6112
	byte C_6113
	word32 esi_6114
	word64 r8_6115
	byte Z_6116
	word64 r12_6117
	word32 ecx_6118
	word64 rcx_6119
	word32 edx_6120
	word64 rdx_6121
	byte S_6122
	word16 ax_6123
	byte al_6124
	word32 r8d_6125
	word32 r14d_6126
	word64 r14_6127
	word32 r13d_6128
	word64 r13_6129
	word32 r12d_6130
	byte CZ_6131
	bcuiposr0 None_6132
	word64 r9_6133
	byte cl_6134
	word64 r15_6135
	word32 ebp_6136
	word32 esp_6137
	word32 r9d_6138
	byte SO_6139
	byte r13b_6140
	word32 r15d_6141
	byte r14b_6142
	word64 r11_6143
	word128 xmm0_6144
	word128 xmm1_6145
	word128 xmm2_6146
	word128 xmm3_6147
	byte sil_6148
	byte bpl_6149
	call error (retsize: 8; depth: 8)
		uses: al_6098,ax_6097,bpl_430,C_6100,cl_415,CZ_412,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_6096,ebp_417,ebx_6083,ecx_399,edi_388,edx_6059,esi_395,esp_418,fs_391,None_413,qwLoc04,qwLoc28_28,r11_6081,r12_6086,r12d_411,r13_410,r13b_421,r13d_409,r14_408,r14b_423,r14d_407,r15_6082,r15d_422,r8_6057,r8d_406,r9_6080,r9d_419,rax_6094,rbp_385,rbx_6084,rcx_6090,rdi_6093,rdx_6091,rsi_6092,rsp_6065,S_403,SCZO_431,sil_429,SO_420,SZO_6099,xmm0_425,xmm1_426,xmm2_427,xmm3_428,Z_6071
		defs: al_6124,ax_6123,bpl_6149,C_6113,cl_6134,CZ_6131,eax_6111,ebp_6136,ebx_6106,ecx_6118,edi_6107,edx_6120,esi_6114,esp_6137,fs_6110,None_6132,r11_6143,r12_6117,r12d_6130,r13_6129,r13b_6140,r13d_6128,r14_6127,r14b_6142,r14d_6126,r15_6135,r15d_6141,r8_6115,r8d_6125,r9_6133,r9d_6138,rax_6109,rbp_6104,rbx_6105,rcx_6119,rdi_6102,rdx_6121,rsi_6103,rsp_6101,S_6122,SCZO_6108,sil_6148,SO_6139,SZO_6112,xmm0_6144,xmm1_6145,xmm2_6146,xmm3_6147,Z_6116
// DataOut: eax ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402B16:
	Mem6078[0x000000000061B0D8:word64] = Mem443[rsp_382 + 0x0000000000000040:word64]
// DataOut: eax ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r14:<invalid> r15:<invalid> r13:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402B22:
	Mem464[rsp_382 + 0x0000000000000038:word32] = 0xFFFFFFFF
	word64 rdi_466
	word64 rsi_467
	word64 rbp_468
	word64 rbx_469
	word32 ebx_470
	word32 edi_471
	byte SCZO_472
	word64 rax_473
	word32 eax_475
	byte SZO_476
	byte C_477
	word32 esi_478
	byte Z_480
	word64 r12_481
	word32 ecx_482
	word64 rcx_483
	word32 edx_484
	word64 rdx_485
	byte S_486
	word16 ax_487
	byte al_488
	word32 r8d_489
	word32 r14d_490
	word32 r13d_492
	word32 r12d_494
	byte CZ_495
	bcuiposr0 None_496
	byte cl_498
	word32 ebp_500
	word32 esp_501
	word32 r9d_502
	byte SO_503
	byte r13b_504
	word32 r15d_505
	byte r14b_506
	byte sil_512
	word64 r13_493
	byte bpl_1010
	word128 xmm3_1011
	word128 xmm2_1012
	word128 xmm1_1013
	word128 xmm0_1014
	word64 r9_1034
	word64 r8_1037
	word64 r15_1041
	word64 r14_1040
	call getopt_long (retsize: 8; depth: 8)
		uses: al_438,ax_437,bpl_430,C_456,cl_415,CZ_412,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_436,ebp_417,ebx_444,ecx_399,edi_388,edx_401,esi_395,esp_418,fs_391,None_413,qwLoc28_28,r11_424,r12_454,r12d_411,r13_451,r13b_453,r13d_452,r14_448,r14b_450,r14d_449,r15_416,r15d_422,r8_457,r8d_458,r9_414,r9d_419,rax_447,rbp_445,rbx_386,rcx_459,rdi_463,rdx_460,rsi_462,rsp_446,S_403,SCZO_431,sil_429,SO_420,SZO_455,xmm0_425,xmm1_426,xmm2_427,xmm3_428,Z_440
		defs: al_488,ax_487,bpl_513,C_477,cl_498,CZ_495,eax_475,ebp_500,ebx_470,ecx_482,edi_471,edx_484,esi_478,esp_501,fs_474,None_496,r11_507,r12_481,r12d_494,r13_493,r13b_504,r13d_492,r14_491,r14b_506,r14d_490,r15_499,r15d_505,r8_479,r8d_489,r9_497,r9d_502,rax_473,rbp_468,rbx_469,rcx_483,rdi_466,rdx_485,rsi_467,rsp_465,S_486,SCZO_472,sil_512,SO_503,SZO_476,xmm0_508,xmm1_509,xmm2_510,xmm3_511,Z_480
	branch eax_475 == 0xFFFFFFFF l000000000040321E
// DataOut: eax ebx fs r11 r13 r13b r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040321E:
	branch Mem464[0x000000000061B138:word64] == 0x0000000000000000 l000000000040398A
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040398A:
	r8_1037 = fn000000000040C810(0x000000000061B138, getenv(0x00000000004138E1), r8_1037, out r9_1034, out r13_493, out r14_1040, out r15_1041)
	branch r15_1041 == 0x0000000000000000 l0000000000404531
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404531:
	branch getenv(0x00000000004138E4) != 0x0000000000000000 l00000000004039B2
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404544:
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:0x004138E4 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004039B2:
	Mem6048[0x000000000061B134:word32] = (word32) (uint64) Mem464[0x000000000061B140:word32]
	Mem6050[0x000000000061A560:word64] = Mem6048[0x000000000061B138:word64]
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004039CC:
	branch r14b_506 == 0x00 l000000000040322C
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004039D5:
	Mem6040[0x000000000061B140:word32] = 0x00000000
	Mem6041[0x000000000061B138:word64] = 0x0000000000000400
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040322C:
	word64 rdx_661 = Mem464[0x000000000061B0C8:word64]
	word64 rax_6012 = 0x0000000000000001
	branch rdx_661 >u 0x0000000000000002 l00000000004037FB
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004037FB:
	rax_6012 = (uint64) ((uint128) (uint64) rdx_661 /u 0x0000000000000003)
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> rcx:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:0x01 r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403242:
	Mem679[0x000000000061B020:word64] = rax_6012
	word32 ebx_680
	word64 rsp_681
	word64 rbp_682
	word64 r12_683
	word64 rax_684 = fn000000000040E600(0x0000000000000000, r8_1037, r11_1035, out ebx_680, out rsp_681, out rbp_682, out r12_683)
	Mem686[0x000000000061B0E8:word64] = rax_684
	branch fn000000000040E630(rax_684) == 0x00000005 l000000000040426C
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040426C:
	fn000000000040E650(0x00000001, 0x00000020, Mem686[0x000000000061B0E8:word64])
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403268:
	word64 rax_695 = (uint64) Mem686[0x000000000061B12C:word32]
	branch (word32) rax_695 <=u 0x00000001 l00000000004032A9
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403273:
	r14_1040 = r8_1037 + 0x00000000004138ED
	byte al_5975 = (byte) (word32) Mem686[rax_695 + 0x00000000004138ED:byte]
	branch al_5975 == 0x00 l00000000004032A9
// DataOut: al fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403289:
	r14_1040 = r14_1040 + 0x0000000000000001
	al_5975 = (byte) (word32) Mem686[fn000000000040E650(0x00000001, (int32) al_5975, Mem686[0x000000000061B0E8:word64]):byte] (alias)
	branch al_5975 != 0x00 l0000000000403289
// DataOut: al fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> esi:<invalid> sil:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004032A9:
	word64 rsp_1042
	word32 ebx_1033
	word64 rbp_1036
	word64 r12_1135
	word64 rax_716 = fn000000000040E600(0x0000000000000000, r8_1037, r11_1035, out ebx_1033, out rsp_1042, out rbp_1036, out r12_1135)
	Mem722[0x000000000061B0E0:word64] = rax_716
	word64 rsi_1049 = fn000000000040E650(0x00000001, 0x0000003A, rax_716)
	branch Mem722[0x000000000061B130:byte] == 0x00 l00000000004032E2
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004032D2:
	branch Mem722[0x000000000061B150:word32] == 0x00000000 l00000000004032E2
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004032DB:
	Mem5966[0x000000000061B130:byte] = 0x00
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004032E2:
	word64 rax_5728 = (uint64) ((word32) (uint64) Mem722[0x000000000061B14C:word32] - 0x00000001)
	branch (word32) rax_5728 <=u 0x00000001 l0000000000403965
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403965:
	branch r13b_504 != 0x00 l00000000004032F4
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040396E:
	branch Mem722[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040397B:
	Mem5963[0x000000000061B148:word32] = 0x00000004
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004032F4:
	branch Mem722[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040380D:
	byte Z_5712 = cond(r12_1135)
	branch r12_1135 == 0x0000000000000000 l00000000004045C6
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045C6:
	word64 rax_5935 = getenv(0x00000000004138F5)
	r12_1135 = rax_5935
	Z_5712 = cond(rax_5935) (alias)
	rax_5728 = 0x0000000000413827
	branch rax_5935 != 0x0000000000000000 l00000000004045DF
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045DB_1:
	r12_1135 = 0x0000000000413827
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:0x27 r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045DF:
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:0x27 r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403816:
	rbp_1036 = 0x0000000000000006
	bpl_1010 = 0x06 (alias)
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040383E:
	word64 rsi_5751 = r12_1135
	word64 rdi_5754 = r14_1040
	word64 rcx_5756 = r13_493
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403847:
	branch rcx_5756 == 0x0000000000000000 l0000000000403849
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403847_1:
	Z_5712 = cond(Mem722[rsi_6421:byte] - Mem722[rdi_6422:byte]) (alias)
	rsi_5751 = rsi_6421 + 0x0000000000000001
	rdi_5754 = rdi_6422 + 0x0000000000000001
	rcx_5756 = rcx_5756 - 0x0000000000000001
	word64 rsi_6421 = rsi_5751
	word64 rdi_6422 = rdi_5754
	branch Mem722[rsi_6421:byte] != Mem722[rdi_6422:byte] l0000000000403847
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403849:
	branch Z_5712 l0000000000403828
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403828:
	rax_5728 = fn000000000040AB70(rax_5728, out rsi_1049)
	branch (byte) rax_5728 == 0x00 l0000000000403301
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040383A:
	r12_1135 = r12_1135 + 0x0000000000000006
	Z_5712 = cond(r12_1135) (alias)
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x00000002 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040384B:
	branch Mem722[r12_1135:byte] == 0x2B l00000000004043D9
// DataOut: ebx fs r11 r12 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403856:
	word64 r12_5797
	word64 r13_5798
	word64 rax_5801 = fn0000000000409E50(0x0000000000000004, 0x00000000004136F0, 0x0000000000413700, r12_1135, out rsp_1042, out rbp_1036, out r12_5797, out r13_5798, out r14_1040, out r15_1041)
	branch rax_5801 < 0x0000000000000000 l0000000000404564
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404564:
	word64 rbp_5852
	word64 r9_5853
	word64 r15_5855
	fn0000000000409F80(rax_5801, 0x000000000041391D, r11_1035, fs_1029, out rsp_238, out rbp_5852, out r9_5853, out r11_1035, out r15_5855)
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413928, 0x0000000000000005), Mem722[0x000000000061A650:word64])
	word64 rbx_5866 = 0x0000000000413700
// DataOut: fs r11 r15 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040459C:
	branch Mem722[rbx_5866:word64] == 0x0000000000000000 l00000000004031D6
// DataOut: fs r11 r15 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ax:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004031D6:
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415BF8, 0x0000000000000005), Mem722[0x000000000061A650:word64])
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ax:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045A8:
	__fprintf_chk(Mem722[0x000000000061A650:word64], 0x0000000000000001, 0x000000000041393E)
	rbx_5866 = rbx_5866 + 0x0000000000000008
// DataOut: fs r11 r15 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ax:<invalid> r10:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403876:
	branch rax_5801 == 0x0000000000000001 l0000000000404549
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404549:
	Mem5846[0x000000000061A3D8:word64] = 0x0000000000413966
	Mem5847[0x000000000061A3D0:word64] = 0x0000000000413966
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403880:
	branch rax_5801 <= 0x0000000000000001 l0000000000404465
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404465:
	branch rax_5801 != 0x0000000000000000 l00000000004038A8
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040446E:
	Mem5844[0x000000000061A3D8:word64] = 0x000000000041394E
	Mem5845[0x000000000061A3D0:word64] = 0x000000000041394E
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403886:
	branch rax_5801 == 0x0000000000000002 l00000000004045F3
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045F3:
	Mem5839[0x000000000061A3D0:word64] = 0x0000000000413975
	Mem5840[0x000000000061A3D8:word64] = 0x0000000000413969
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403890:
	branch rax_5801 != 0x0000000000000003 l00000000004038A8
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403896:
	word64 rsi_5821
	branch (byte) fn000000000040AB70(rax_5801, out rsi_5821) != 0x00 l000000000040460E
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040460E:
	word64 rax_5830 = dcgettext(0x0000000000000000, Mem722[0x000000000061A3D0:word64], 0x0000000000000002)
	word64 rsi_5831 = Mem722[0x000000000061A3D8:word64]
	Mem5836[0x000000000061A3D0:word64] = rax_5830
	Mem5838[0x000000000061A3D8:word64] = dcgettext(0x0000000000000000, rsi_5831, 0x0000000000000002)
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:0x00 esi:0x00413700 r15:<invalid> ecx:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 edx:0x004136F0 cl:0x04 r10:<invalid> r12d:<invalid> dx:0x36F0 dl:0xF0 edi:0x00000002 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403301:
	word64 r12_1399 = (uint64) Mem722[0x000000000061A620:word32]
	word32 r12d_1400 = (word32) r12_1399
	branch Mem722[0x000000000061B129:byte] != 0x00 l0000000000403AC5
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403AC5:
	word64 rax_5090 = getenv(0x000000000041397F)
	Mem5098[rsp_1042 + 0x0000000000000038:word64] = rax_5090
	branch rax_5090 == 0x0000000000000000 l0000000000403AE2
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403AD9:
	branch Mem5098[rax_5090:byte] != 0x00 l00000000004044FA
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044FA:
	Mem5643[rsp_1042 + 0x0000000000000030:word16] = 0x3F3F
	Mem5644[rsp_1042 + 0x0000000000000032:byte] = 0x00
	word64 rsp_5649
	word64 rbp_5650
	word64 rsi_5651
	word64 rdi_5652
	word64 rax_5653 = fn0000000000410E30(rax_5090, out rsp_5649, out rbp_5650, out rsi_5651, out rdi_5652)
	Mem5657[0x000000000061B118:word64] = rax_5653
	Mem5658[rsp_5649 + 0x0000000000000040:word64] = rax_5653
	branch false l0000000000402985
// DataOut: edx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000404528:
	word64 rsp_5662
	word64 rdi_5663
	word64 rsi_5664
	word64 rbp_5665
	word64 rbx_5666
	word32 ebx_5667
	word32 edi_5668
	byte SCZO_5669
	word64 rax_5670
	selector fs_5671
	word32 eax_5672
	byte SZO_5673
	byte C_5674
	word32 esi_5675
	word64 r8_5676
	byte Z_5677
	word64 r12_5678
	word32 ecx_5679
	word64 rcx_5680
	word32 edx_5681
	word64 rdx_5682
	byte S_5683
	word16 ax_5684
	byte al_5685
	word32 r8d_5686
	word32 r14d_5687
	word64 r14_5688
	word32 r13d_5689
	word64 r13_5690
	word32 r12d_5691
	byte CZ_5692
	bcuiposr0 None_5693
	word64 r9_5694
	byte cl_5695
	word64 r15_5696
	word32 ebp_5697
	word32 esp_5698
	word32 r9d_5699
	byte SO_5700
	byte r13b_5701
	word32 r15d_5702
	byte r14b_5703
	word64 r11_5704
	word128 xmm0_5705
	word128 xmm1_5706
	word128 xmm2_5707
	word128 xmm3_5708
	byte sil_5709
	byte bpl_5710
	call Mem5658[0x0000000000412BC8:word32] (retsize: 4; depth: 4)
		uses: al_5094,ax_5093,bpl_1351,C_5648,cl_1362,CZ_5660,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_5092,ebp_1361,ebx_1373,ecx_1368,edi_1383,edx_5655,esi_1389,esp_1360,fs_1369,None_1363,qwLoc04,qwLoc28_28,r11_1375,r12_1399,r12d_1400,r13_5645,r13b_1357,r13d_5646,r14_1379,r14b_1356,r14d_1365,r15_1380,r15d_1371,r8_1377,r8d_1366,r9_1374,r9d_1359,rax_5661,rbp_5650,rbx_1370,rcx_1390,rdi_5652,rdx_5654,rsi_5651,rsp_5649,S_1367,SCZO_5659,sil_1388,SO_1358,SZO_5647,xmm0_1355,xmm1_1354,xmm2_1353,xmm3_1352,Z_5641
		defs: al_5685,ax_5684,bpl_5710,C_5674,cl_5695,CZ_5692,eax_5672,ebp_5697,ebx_5667,ecx_5679,edi_5668,edx_5681,esi_5675,esp_5698,fs_5671,None_5693,r11_5704,r12_5678,r12d_5691,r13_5690,r13b_5701,r13d_5689,r14_5688,r14b_5703,r14d_5687,r15_5696,r15d_5702,r8_5676,r8d_5686,r9_5694,r9d_5699,rax_5670,rbp_5665,rbx_5666,rcx_5680,rdi_5663,rdx_5682,rsi_5664,rsp_5662,S_5683,SCZO_5669,sil_5709,SO_5700,SZO_5673,xmm0_5705,xmm1_5706,xmm2_5707,xmm3_5708,Z_5677
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000403AE2:
	branch Mem5098[0x000000000061B129:byte] == 0x00 l0000000000403315
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403AEF:
	word64 rsi_5103
	word32 eax_5104 = fn0000000000404CD0(0x0000000D, out rsi_5103)
	byte al_5108 = (byte) eax_5104
	branch al_5108 != 0x00 l0000000000403B2B
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403AFD:
	word64 rsi_5615
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_5615) == 0x00 l0000000000403B14
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000D r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B0B:
	branch Mem5098[0x000000000061B198:byte] != 0x00 l0000000000403B2B
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000E r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B14:
	word64 rsi_5627
	branch (byte) fn0000000000404CD0(0x0000000C, out rsi_5627) == 0x00 l0000000000403B32
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000E r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B22:
	branch Mem5098[0x000000000061B150:word32] != 0x00000000 l0000000000403B32
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000C r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B2B:
	Mem5612[0x000000000061B115:byte] = 0x01
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B32:
	word64 rsp_5114
	word64 rdi_5115
	word64 rbx_5118
	word32 edi_5120
	byte SCZO_5121
	word64 rax_5122
	word32 eax_5124
	byte SZO_5125
	byte C_5126
	word32 esi_5127
	byte Z_5129
	word64 r12_5130
	word32 ecx_5131
	word64 rcx_5132
	word32 edx_5133
	word64 rdx_5134
	byte S_5135
	word16 ax_5136
	byte al_5137
	word32 r8d_5138
	word32 r14d_5139
	word32 r13d_5141
	word64 r13_5142
	byte CZ_5144
	bcuiposr0 None_5145
	byte cl_5147
	word32 ebp_5149
	word32 esp_5150
	word32 r9d_5151
	byte SO_5152
	byte r13b_5153
	word32 r15d_5154
	byte r14b_5155
	byte sil_5161
	call tcgetpgrp (retsize: 8; depth: 8)
		uses: al_5108,ax_5107,bpl_1351,C_5111,cl_1362,CZ_1382,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_5104,ebp_1361,ebx_1373,ecx_1368,edi_5102,edx_1372,esi_1389,esp_1360,fs_1369,None_1363,qwLoc04,qwLoc28_28,r11_1375,r12_1399,r12d_1400,r13_1378,r13b_1357,r13d_1364,r14_1379,r14b_1356,r14d_1365,r15_1380,r15d_1371,r8_1377,r8d_1366,r9_1374,r9d_1359,rax_5105,rbp_1376,rbx_1370,rcx_1390,rdi_5113,rdx_1391,rsi_5103,rsp_1381,S_1367,SCZO_5099,sil_1388,SO_1358,SZO_5109,xmm0_1355,xmm1_1354,xmm2_1353,xmm3_1352,Z_5110
		defs: al_5137,ax_5136,bpl_5162,C_5126,cl_5147,CZ_5144,eax_5124,ebp_5149,ebx_5119,ecx_5131,edi_5120,edx_5133,esi_5127,esp_5150,fs_5123,None_5145,r11_5156,r12_5130,r12d_5143,r13_5142,r13b_5153,r13d_5141,r14_5140,r14b_5155,r14d_5139,r15_5148,r15d_5154,r8_5128,r8d_5138,r9_5146,r9d_5151,rax_5122,rbp_5117,rbx_5118,rcx_5132,rdi_5115,rdx_5134,rsi_5116,rsp_5114,S_5135,SCZO_5121,sil_5161,SO_5152,SZO_5125,xmm0_5157,xmm1_5158,xmm2_5159,xmm3_5160,Z_5129
	branch eax_5124 < 0x00000000 l0000000000403315
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B44:
	word64 rsp_5172
	word64 rdi_5173
	word64 rsi_5174
	word64 rbp_5175
	word64 rbx_5176
	word32 ebx_5177
	word32 edi_5178
	byte SCZO_5179
	word64 rax_5180
	selector fs_5181
	word32 eax_5182
	byte SZO_5183
	byte C_5184
	word32 esi_5185
	word64 r8_5186
	byte Z_5187
	word64 r12_5188
	word32 ecx_5189
	word64 rcx_5190
	word32 edx_5191
	word64 rdx_5192
	byte S_5193
	word16 ax_5194
	byte al_5195
	word32 r8d_5196
	word32 r14d_5197
	word64 r14_5198
	word32 r13d_5199
	word64 r13_5200
	word32 r12d_5201
	byte CZ_5202
	bcuiposr0 None_5203
	word64 r9_5204
	byte cl_5205
	word64 r15_5206
	word32 ebp_5207
	word32 esp_5208
	word32 r9d_5209
	byte SO_5210
	byte r13b_5211
	word32 r15d_5212
	byte r14b_5213
	word64 r11_5214
	word128 xmm0_5215
	word128 xmm1_5216
	word128 xmm2_5217
	word128 xmm3_5218
	byte sil_5219
	byte bpl_5220
	call sigemptyset (retsize: 8; depth: 8)
		uses: al_5137,ax_5136,bpl_5162,C_5171,cl_5147,CZ_5144,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_5124,ebp_5149,ebx_5119,ecx_5131,edi_5120,edx_5133,esi_5127,esp_5150,fs_5123,None_5145,qwLoc04,qwLoc28_28,r11_5156,r12_5130,r12d_5143,r13_5167,r13b_5169,r13d_5168,r14_5140,r14b_5155,r14d_5139,r15_5148,r15d_5154,r8_5128,r8d_5138,r9_5146,r9d_5151,rax_5122,rbp_5117,rbx_5118,rcx_5132,rdi_5166,rdx_5134,rsi_5116,rsp_5114,S_5164,SCZO_5121,sil_5161,SO_5152,SZO_5170,xmm0_5157,xmm1_5158,xmm2_5159,xmm3_5160,Z_5129
		defs: al_5195,ax_5194,bpl_5220,C_5184,cl_5205,CZ_5202,eax_5182,ebp_5207,ebx_5177,ecx_5189,edi_5178,edx_5191,esi_5185,esp_5208,fs_5181,None_5203,r11_5214,r12_5188,r12d_5201,r13_5200,r13b_5211,r13d_5199,r14_5198,r14b_5213,r14d_5197,r15_5206,r15d_5212,r8_5186,r8d_5196,r9_5204,r9d_5209,rax_5180,rbp_5175,rbx_5176,rcx_5190,rdi_5173,rdx_5192,rsi_5174,rsp_5172,S_5193,SCZO_5179,sil_5219,SO_5210,SZO_5183,xmm0_5215,xmm1_5216,xmm2_5217,xmm3_5218,Z_5187
// DataOut: eax ebx fs r11 r12d r13 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B51:
	word64 rdi_5234
	word64 rsi_5235
	word64 rbp_5236
	word64 rbx_5237
	word32 ebx_5238
	word32 edi_5239
	byte SCZO_5240
	word64 rax_5241
	selector fs_5242
	word32 eax_5243
	byte SZO_5244
	byte C_5245
	word32 esi_5246
	word64 r8_5247
	byte Z_5248
	word64 r12_5249
	word32 ecx_5250
	word64 rcx_5251
	word32 edx_5252
	word64 rdx_5253
	byte S_5254
	word16 ax_5255
	byte al_5256
	word32 r8d_5257
	word32 r14d_5258
	word64 r14_5259
	word32 r13d_5260
	word32 r12d_5262
	byte CZ_5263
	bcuiposr0 None_5264
	word64 r9_5265
	byte cl_5266
	word64 r15_5267
	word32 ebp_5268
	word32 esp_5269
	word32 r9d_5270
	byte SO_5271
	byte r13b_5272
	word32 r15d_5273
	byte r14b_5274
	word64 r11_5275
	word128 xmm0_5276
	word128 xmm1_5277
	word128 xmm2_5278
	word128 xmm3_5279
	byte sil_5280
	byte bpl_5281
	word64 r13_5261
	word64 rsp_5233
	call sigaction (retsize: 8; depth: 8)
		uses: al_5195,ax_5194,bpl_5220,C_5231,cl_5205,CZ_5202,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_5182,ebp_5207,ebx_5177,ecx_5189,edi_5178,edx_5191,esi_5185,esp_5208,fs_5181,None_5203,qwLoc04,qwLoc28_28,r11_5214,r12_5188,r12d_5201,r13_5221,r13b_5211,r13d_5199,r14_5224,r14b_5226,r14d_5225,r15_5206,r15d_5212,r8_5186,r8d_5196,r9_5204,r9d_5209,rax_5223,rbp_5175,rbx_5176,rcx_5190,rdi_5232,rdx_5227,rsi_5229,rsp_5222,S_5193,SCZO_5179,sil_5219,SO_5210,SZO_5230,xmm0_5215,xmm1_5216,xmm2_5217,xmm3_5218,Z_5187
		defs: al_5256,ax_5255,bpl_5281,C_5245,cl_5266,CZ_5263,eax_5243,ebp_5268,ebx_5238,ecx_5250,edi_5239,edx_5252,esi_5246,esp_5269,fs_5242,None_5264,r11_5275,r12_5249,r12d_5262,r13_5261,r13b_5272,r13d_5260,r14_5259,r14b_5274,r14d_5258,r15_5267,r15d_5273,r8_5247,r8d_5257,r9_5265,r9d_5270,rax_5241,rbp_5236,rbx_5237,rcx_5251,rdi_5234,rdx_5253,rsi_5235,rsp_5233,S_5254,SCZO_5240,sil_5280,SO_5271,SZO_5244,xmm0_5276,xmm1_5277,xmm2_5278,xmm3_5279,Z_5248
	branch Mem5098[rsp_5233 + 0x0000000000000040:word64] == 0x0000000000000001 l0000000000403B7C
// DataOut: eax ebx fs r11 r12d r13 r14 r14d r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B6F:
	word64 rdi_5552
	word64 rsi_5553
	word64 rbp_5554
	word64 rbx_5555
	word32 ebx_5556
	word32 edi_5557
	byte SCZO_5558
	word64 rax_5559
	selector fs_5560
	word32 eax_5561
	byte SZO_5562
	byte C_5563
	word32 esi_5564
	word64 r8_5565
	byte Z_5566
	word64 r12_5567
	word32 ecx_5568
	word64 rcx_5569
	word32 edx_5570
	word64 rdx_5571
	byte S_5572
	word16 ax_5573
	byte al_5574
	word32 r8d_5575
	word32 r14d_5576
	word64 r14_5577
	word32 r13d_5578
	word32 r12d_5580
	byte CZ_5581
	bcuiposr0 None_5582
	word64 r9_5583
	byte cl_5584
	word64 r15_5585
	word32 ebp_5586
	word32 esp_5587
	word32 r9d_5588
	byte SO_5589
	byte r13b_5590
	word32 r15d_5591
	byte r14b_5592
	word64 r11_5593
	word128 xmm0_5594
	word128 xmm1_5595
	word128 xmm2_5596
	word128 xmm3_5597
	byte sil_5598
	byte bpl_5599
	call sigaddset (retsize: 8; depth: 8)
		uses: al_5256,ax_5255,bpl_5281,C_5245,cl_5266,CZ_5263,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_5243,ebp_5268,ebx_5238,ecx_5250,edi_5239,edx_5252,esi_5246,esp_5269,fs_5242,None_5264,qwLoc04,qwLoc28_28,r11_5275,r12_5249,r12d_5262,r13_5261,r13b_5272,r13d_5260,r14_5259,r14b_5274,r14d_5258,r15_5267,r15d_5273,r8_5247,r8d_5257,r9_5265,r9d_5270,rax_5241,rbp_5236,rbx_5237,rcx_5251,rdi_5550,rdx_5253,rsi_5549,rsp_5233,S_5254,SCZO_5282,sil_5280,SO_5271,SZO_5244,xmm0_5276,xmm1_5277,xmm2_5278,xmm3_5279,Z_5283
		defs: al_5574,ax_5573,bpl_5599,C_5563,cl_5584,CZ_5581,eax_5561,ebp_5586,ebx_5556,ecx_5568,edi_5557,edx_5570,esi_5564,esp_5587,fs_5560,None_5582,r11_5593,r12_5567,r12d_5580,r13_5579,r13b_5590,r13d_5578,r14_5577,r14b_5592,r14d_5576,r15_5585,r15d_5591,r8_5565,r8d_5575,r9_5583,r9d_5588,rax_5559,rbp_5554,rbx_5555,rcx_5569,rdi_5552,rdx_5571,rsi_5553,rsp_5551,S_5572,SCZO_5558,sil_5598,SO_5589,SZO_5562,xmm0_5594,xmm1_5595,xmm2_5596,xmm3_5597,Z_5566
// DataOut: eax ebx fs r11 r12d r13 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B7C:
	branch r13_5261 != 0xFFFFFFFFFFFFFFD4 l0000000000403B51
// DataOut: eax ebx fs r11 r12d r13 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B86:
	word64 rdi_5334 = rsp_5233 + 0x0000000000000048
	word64 rsi_5336 = 0x000000000061B040
	word64 rcx_5339 = 0x0000000000000020
// DataOut: eax ebx fs r11 r12d r14 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B95:
	branch rcx_5339 == 0x0000000000000000 l0000000000403B97
// DataOut: eax ebx fs r11 r12d r14 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B97:
	Mem5360[rsp_5233 + 0x00000000000000C8:word32] = 0x10000000
// DataOut: eax ebx fs r11 r12d r13 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BAB:
	word64 rsp_5375
	word64 rdi_5376
	word64 rbx_5379
	word32 edi_5381
	byte SCZO_5382
	word64 rax_5383
	word32 eax_5385
	byte SZO_5386
	byte C_5387
	word32 esi_5388
	byte Z_5390
	word64 r12_5391
	word32 ecx_5392
	word64 rcx_5393
	word32 edx_5394
	word64 rdx_5395
	byte S_5396
	word16 ax_5397
	byte al_5398
	word32 r8d_5399
	word32 r14d_5400
	word32 r13d_5402
	byte CZ_5405
	bcuiposr0 None_5406
	byte cl_5408
	word32 ebp_5410
	word32 esp_5411
	word32 r9d_5412
	byte SO_5413
	byte r13b_5414
	word32 r15d_5415
	byte r14b_5416
	byte sil_5422
	word64 r13_5403
	call sigismember (retsize: 8; depth: 8)
		uses: al_5325,ax_5318,bpl_5284,C_5365,cl_5342,CZ_5315,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_5317,ebp_5293,ebx_5305,ecx_5343,edi_5344,edx_5304,esi_5374,esp_5292,fs_5301,None_5295,qwLoc04,qwLoc28_28,r11_5307,r12_5310,r12d_5296,r13_5367,r13b_5361,r13d_5363,r14_5312,r14b_5289,r14d_5297,r15_5369,r15d_5370,r8_5309,r8d_5298,r9_5306,r9d_5291,rax_5324,rbp_5308,rbx_5302,rcx_5348,rdi_5371,rdx_5323,rsi_5372,rsp_5314,S_5299,SCZO_5332,sil_5373,SO_5290,SZO_5364,xmm0_5288,xmm1_5287,xmm2_5286,xmm3_5285,Z_5333
		defs: al_5398,ax_5397,bpl_5423,C_5387,cl_5408,CZ_5405,eax_5385,ebp_5410,ebx_5380,ecx_5392,edi_5381,edx_5394,esi_5388,esp_5411,fs_5384,None_5406,r11_5417,r12_5391,r12d_5404,r13_5403,r13b_5414,r13d_5402,r14_5401,r14b_5416,r14d_5400,r15_5409,r15d_5415,r8_5389,r8d_5399,r9_5407,r9d_5412,rax_5383,rbp_5378,rbx_5379,rcx_5393,rdi_5376,rdx_5395,rsi_5377,rsp_5375,S_5396,SCZO_5382,sil_5422,SO_5413,SZO_5386,xmm0_5418,xmm1_5419,xmm2_5420,xmm3_5421,Z_5390
	branch eax_5385 == 0x00000000 l0000000000403BE4
// DataOut: eax ebx fs r11 r12d r13 r14 r15 r15d r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BC3:
	word64 rax_5483 = 0x00000000004057F0
	branch r15d_5415 == 0x00000014 l0000000000403BD5
// DataOut: eax ebx fs r11 r12d r13 r14 r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BD1_1:
	rax_5483 = r14_1040
// DataOut: eax ebx fs r11 r12d r13 r14 r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x00000000004057F0 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x004057F0 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:0xF0 r13b:<invalid> r15:<invalid> ax:0x57F0 r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BD5:
	Mem5494[rsp_5375 + 0x0000000000000040:word64] = rax_5483
	word64 rsp_5495
	word64 rdi_5496
	word64 rbx_5499
	word32 edi_5501
	byte SCZO_5502
	word64 rax_5503
	word32 eax_5505
	byte SZO_5506
	byte C_5507
	word32 esi_5508
	byte Z_5510
	word64 r12_5511
	word32 ecx_5512
	word64 rcx_5513
	word32 edx_5514
	word64 rdx_5515
	byte S_5516
	word16 ax_5517
	byte al_5518
	word32 r8d_5519
	word32 r14d_5520
	word32 r13d_5522
	byte CZ_5525
	bcuiposr0 None_5526
	byte cl_5528
	word32 ebp_5530
	word32 esp_5531
	word32 r9d_5532
	byte SO_5533
	byte r13b_5534
	word32 r15d_5535
	byte r14b_5536
	byte sil_5542
	call sigaction (retsize: 8; depth: 8)
		uses: al_5487,ax_5486,bpl_5423,C_5493,cl_5408,CZ_5405,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_5485,ebp_5410,ebx_5380,ecx_5392,edi_5381,edx_5394,esi_5480,esp_5411,fs_5384,None_5406,qwLoc04,qwLoc28_28,r11_5417,r12_5391,r12d_5404,r13_5403,r13b_5414,r13d_5402,r14_5401,r14b_5416,r14d_5400,r15_5409,r15d_5415,r8_5389,r8d_5399,r9_5407,r9d_5412,rax_5488,rbp_5378,rbx_5379,rcx_5393,rdi_5489,rdx_5490,rsi_5478,rsp_5375,S_5396,SCZO_5481,sil_5479,SO_5413,SZO_5492,xmm0_5418,xmm1_5419,xmm2_5420,xmm3_5421,Z_5482
		defs: al_5518,ax_5517,bpl_5543,C_5507,cl_5528,CZ_5525,eax_5505,ebp_5530,ebx_5500,ecx_5512,edi_5501,edx_5514,esi_5508,esp_5531,fs_5504,None_5526,r11_5537,r12_5511,r12d_5524,r13_5523,r13b_5534,r13d_5522,r14_5521,r14b_5536,r14d_5520,r15_5529,r15d_5535,r8_5509,r8d_5519,r9_5527,r9d_5532,rax_5503,rbp_5498,rbx_5499,rcx_5513,rdi_5496,rdx_5515,rsi_5497,rsp_5495,S_5516,SCZO_5502,sil_5542,SO_5533,SZO_5506,xmm0_5538,xmm1_5539,xmm2_5540,xmm3_5541,Z_5510
// DataOut: eax ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BE4:
	branch r13_5403 != 0xFFFFFFFFFFFFFFD4 l0000000000403BAB
// DataOut: eax ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403BEE:
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403B95_1:
	Mem5351[rdi_5334:word32] = Mem5098[rsi_5336:word32]
	rsi_5336 = rsi_5336 + 0x0000000000000004
	rdi_5334 = rdi_5334 + 0x0000000000000004
	rcx_5339 = rcx_5339 - 0x0000000000000001
// DataOut: eax ebx fs r11 r12d r14 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403315:
	branch Mem722[0x000000000061B110:word32] == 0x00000001 l0000000000403A39
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A39:
	word32 eax_5063 = 0x00000002
	branch Mem722[0x000000000061B10D:byte] != 0x00 l0000000000403A5F
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A47:
	branch Mem722[0x000000000061B12C:word32] == 0x00000003 l0000000000403A5F
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x02 edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A50:
	eax_5063 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond(Mem722[0x000000000061B150:word32] - 0x00000001)) & 0xFFFFFFFE) + 0x00000004) (alias)
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x02 edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A5F:
	Mem5074[0x000000000061B110:word32] = eax_5063
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403322:
	word32 eax_1492
	branch Mem722[0x000000000061B10E:byte] != 0x00 l00000000004039EF
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004039EF:
	word64 r8_4983
	word64 r14_4986
	word64 rax_4992 = fn000000000040B400(0x0000000000404990, 0x0000000000404980, 0x0000000000000000, 0x000000000000001E, r8_1037, r11_1035, xmm0_1014, xmm1_1013, xmm2_1012, xmm3_1011, out rsp_1042, out rbp_1036, out r8_4983, out r9_1034, out r12_1135, out r14_4986, out r15_1041, out xmm0_1014, out xmm1_1013, out xmm2_1012, out xmm3_1011)
	Mem5000[0x000000000061B1C8:word64] = rax_4992
	eax_1492 = (word32) rax_4992 (alias)
	branch rax_4992 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r11 r12 r12d r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403A1B:
	word64 rsp_5010
	word64 rdi_5011
	word64 rbx_5014
	word32 edi_5016
	byte SCZO_5017
	word64 rax_5018
	word32 eax_5020
	byte SZO_5021
	byte C_5022
	word32 esi_5023
	byte Z_5025
	word64 r12_5026
	word32 ecx_5027
	word64 rcx_5028
	word32 edx_5029
	word64 rdx_5030
	byte S_5031
	word16 ax_5032
	byte al_5033
	word32 r8d_5034
	word32 r14d_5035
	word32 r13d_5037
	word64 r13_5038
	byte CZ_5040
	bcuiposr0 None_5041
	byte cl_5043
	word32 ebp_5045
	word32 esp_5046
	word32 r9d_5047
	byte SO_5048
	byte r13b_5049
	word32 r15d_5050
	byte r14b_5051
	byte sil_5057
	call _obstack_begin (retsize: 8; depth: 8)
		uses: al_4996,ax_4995,bpl_1401,C_5008,cl_1412,CZ_1434,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_4994,ebp_1411,ebx_1424,ecx_1419,edi_1435,edx_1423,esi_5006,esp_1410,fs_1420,None_1413,qwLoc04,qwLoc28_28,r11_1426,r12_4985,r12d_1414,r13_1430,r13b_1407,r13d_1415,r14_4986,r14b_1406,r14d_1416,r15_4987,r15d_1422,r8_4983,r8d_1417,r9_4984,r9d_1409,rax_5001,rbp_4982,rbx_1421,rcx_5002,rdi_5009,rdx_5003,rsi_5004,rsp_4981,S_1418,SCZO_1457,sil_5005,SO_1408,SZO_5007,xmm0_4988,xmm1_4989,xmm2_4990,xmm3_4991,Z_4998
		defs: al_5033,ax_5032,bpl_5058,C_5022,cl_5043,CZ_5040,eax_5020,ebp_5045,ebx_5015,ecx_5027,edi_5016,edx_5029,esi_5023,esp_5046,fs_5019,None_5041,r11_5052,r12_5026,r12d_5039,r13_5038,r13b_5049,r13d_5037,r14_5036,r14b_5051,r14d_5035,r15_5044,r15d_5050,r8_5024,r8d_5034,r9_5042,r9d_5047,rax_5018,rbp_5013,rbx_5014,rcx_5028,rdi_5011,rdx_5030,rsi_5012,rsp_5010,S_5031,SCZO_5017,sil_5057,SO_5048,SZO_5021,xmm0_5053,xmm1_5054,xmm2_5055,xmm3_5056,Z_5025
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFF r12:<invalid> rdx:<invalid> eax:0x004049D0 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:0x00000000AAAAAAAB r15d:<invalid> ax:0x49D0 r11:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0xD0 edx:0x00404980 cl:0x90 r10:<invalid> ecx:0x00404990 r12d:<invalid> dx:0x4980 dl:0x80 edi:0x0000001E r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040332F:
	byte al_1563
	word32 eax_1554 = (word32) (uint64) Mem722[0x000000000061B148:word32]
	branch eax_1554 == 0x00000004 l000000000040377A
// DataOut: eax ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040333E:
	branch eax_1554 == 0x00000002 l000000000040377A
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403347:
	branch Mem722[0x000000000061B150:word32] == 0x00000000 l000000000040377A
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403354:
	branch Mem722[0x000000000061B17D:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403361:
	branch Mem722[0x000000000061B144:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040377A:
	Mem4951[0x000000000061B0C1:byte] = 0x01
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040336E:
	Mem4962[0x000000000061B0C1:byte] = 0x00
	al_1563 = 0x01 (alias)
	branch Mem722[0x000000000061B10E:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403383:
	branch Mem4962[0x000000000061B129:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x01 edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040338C:
	branch Mem4962[0x000000000061B12C:word32] != 0x00000000 l00000000004033A0
// DataOut: al ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x01 edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403395:
	branch Mem4962[0x000000000061B10C:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:0x01 edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040339E:
	al_1563 = 0x00 (alias)
// DataOut: al ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004033A0:
	Mem1565[0x000000000061B0C0:byte] = al_1563
	Mem1567[0x000000000061B0C0:byte] = Mem1565[0x000000000061B0C0:byte] & 0x01
	branch Mem1567[0x000000000061B130:byte] == 0x00 l00000000004033E8
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004033B6:
	word64 rsp_4833
	word64 rdi_4834
	word64 rsi_4835
	word64 rbp_4836
	word64 rbx_4837
	word32 ebx_4838
	word32 edi_4839
	byte SCZO_4840
	word64 rax_4841
	selector fs_4842
	word32 eax_4843
	byte SZO_4844
	byte C_4845
	word32 esi_4846
	word64 r8_4847
	byte Z_4848
	word64 r12_4849
	word32 ecx_4850
	word64 rcx_4851
	word32 edx_4852
	word64 rdx_4853
	byte S_4854
	word16 ax_4855
	byte al_4856
	word32 r8d_4857
	word32 r14d_4858
	word64 r14_4859
	word32 r13d_4860
	word64 r13_4861
	word32 r12d_4862
	byte CZ_4863
	bcuiposr0 None_4864
	word64 r9_4865
	byte cl_4866
	word64 r15_4867
	word32 ebp_4868
	word32 esp_4869
	word32 r9d_4870
	byte SO_4871
	byte r13b_4872
	word32 r15d_4873
	byte r14b_4874
	word64 r11_4875
	word128 xmm0_4876
	word128 xmm1_4877
	word128 xmm2_4878
	word128 xmm3_4879
	byte sil_4880
	byte bpl_4881
	call _obstack_begin (retsize: 8; depth: 8)
		uses: al_1563,ax_1561,bpl_1509,C_4831,cl_1520,CZ_1542,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_1560,ebp_1519,ebx_1532,ecx_1527,edi_1543,edx_1531,esi_1546,esp_1518,fs_1528,None_1521,qwLoc04,qwLoc28_28,r11_1534,r12_1537,r12d_1522,r13_1538,r13b_1515,r13d_1523,r14_1539,r14b_1514,r14d_1524,r15_1540,r15d_1530,r8_1536,r8d_1525,r9_1533,r9d_1517,rax_4826,rbp_1535,rbx_1529,rcx_4827,rdi_4832,rdx_4828,rsi_4829,rsp_1541,S_1526,SCZO_1569,sil_1545,SO_1516,SZO_4830,xmm0_1513,xmm1_1512,xmm2_1511,xmm3_1510,Z_1570
		defs: al_4856,ax_4855,bpl_4881,C_4845,cl_4866,CZ_4863,eax_4843,ebp_4868,ebx_4838,ecx_4850,edi_4839,edx_4852,esi_4846,esp_4869,fs_4842,None_4864,r11_4875,r12_4849,r12d_4862,r13_4861,r13b_4872,r13d_4860,r14_4859,r14b_4874,r14d_4858,r15_4867,r15d_4873,r8_4847,r8d_4857,r9_4865,r9d_4870,rax_4841,rbp_4836,rbx_4837,rcx_4851,rdi_4834,rdx_4853,rsi_4835,rsp_4833,S_4854,SCZO_4840,sil_4880,SO_4871,SZO_4844,xmm0_4876,xmm1_4877,xmm2_4878,xmm3_4879,Z_4848
	word64 rsp_4891
	word64 rdi_4892
	word64 rbx_4895
	word32 edi_4897
	byte SCZO_4898
	word64 rax_4899
	word32 eax_4901
	byte SZO_4902
	byte C_4903
	word32 esi_4904
	byte Z_4906
	word64 r12_4907
	word32 ecx_4908
	word64 rcx_4909
	word32 edx_4910
	word64 rdx_4911
	byte S_4912
	word16 ax_4913
	byte al_4914
	word32 r8d_4915
	word32 r14d_4916
	word32 r13d_4918
	word64 r13_4919
	byte CZ_4921
	bcuiposr0 None_4922
	byte cl_4924
	word32 ebp_4926
	word32 esp_4927
	word32 r9d_4928
	byte SO_4929
	byte r13b_4930
	word32 r15d_4931
	byte r14b_4932
	byte sil_4938
	call _obstack_begin (retsize: 8; depth: 8)
		uses: al_4856,ax_4855,bpl_4881,C_4889,cl_4866,CZ_4863,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_4843,ebp_4868,ebx_4838,ecx_4850,edi_4839,edx_4852,esi_4887,esp_4869,fs_4842,None_4864,qwLoc04,qwLoc28_28,r11_4875,r12_4849,r12d_4862,r13_4861,r13b_4872,r13d_4860,r14_4859,r14b_4874,r14d_4858,r15_4867,r15d_4873,r8_4847,r8d_4857,r9_4865,r9d_4870,rax_4882,rbp_4836,rbx_4837,rcx_4883,rdi_4890,rdx_4884,rsi_4885,rsp_4833,S_4854,SCZO_4840,sil_4886,SO_4871,SZO_4888,xmm0_4876,xmm1_4877,xmm2_4878,xmm3_4879,Z_4848
		defs: al_4914,ax_4913,bpl_4939,C_4903,cl_4924,CZ_4921,eax_4901,ebp_4926,ebx_4896,ecx_4908,edi_4897,edx_4910,esi_4904,esp_4927,fs_4900,None_4922,r11_4933,r12_4907,r12d_4920,r13_4919,r13b_4930,r13d_4918,r14_4917,r14b_4932,r14d_4916,r15_4925,r15d_4931,r8_4905,r8d_4915,r9_4923,r9d_4928,rax_4899,rbp_4894,rbx_4895,rcx_4909,rdi_4892,rdx_4911,rsi_4893,rsp_4891,S_4912,SCZO_4898,sil_4938,SO_4929,SZO_4902,xmm0_4934,xmm1_4935,xmm2_4936,xmm3_4937,Z_4906
// DataOut: ebx fs r11 r12d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004033E8:
	word64 rsp_1640
	word64 rsi_1641
	Mem1615[0x000000000061B1B8:word64] = 0x0000000000000064
	word64 rsp_1619
	word64 rax_1620 = fn0000000000410C40(rsi_1049, 0x0000000000004B00, out rsp_1619)
	Mem1621[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem1622[0x000000000061B1C0:word64] = rax_1620
	fn0000000000404DD0()
	word32 r13d_1617 = (word32) (uint64) ((word32) (uint64) ebx_1033 - r12d_1400)
	branch r13d_1617 <= 0x00000000 l00000000004042A0
// DataOut: fs r11 r12d r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042A0:
	branch Mem1622[0x000000000061B10D:byte] == 0x00 l00000000004043A5
// DataOut: fs r11 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004043A5:
	word64 rbp_4820
	word64 r12_4822
	word64 r13_4823
	rsp_1640 = fn0000000000404D20(0x00000001, 0x0000000000000000, 0x0000000000413990, r11_1035, out rbp_4820, out rsi_1641, out r12_4822, out r13_4823)
// DataOut: bpl fs r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042AD:
	word32 ebx_4800
	word64 rbp_4802
	word64 r12_4807
	word64 r13_4808
	word64 r14_4809
	fn0000000000407EA0(0x0000000000416919, 0x00000001, rbp_1036, 0x0000000000000003, 0x0000000000413990, r8_1037, r11_1035, r14_1040, r15_1041, fs_1029, out ebx_4800, out rsp_1640, out rbp_4802, out rsi_1641, out r8_1037, out r9_1034, out r11_1035, out r12_4807, out r13_4808, out r14_4809, out r15_1041)
// DataOut: bpl fs r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403423:
	word64 rbp_4755 = rbp_1036 + (int64) r12d_1400 * 0x0000000000000008
// DataOut: fs r11 r12d r14 r15 r8 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040342B:
	word64 rbp_4773 = rbp_4755 + 0x0000000000000008
	word32 ebx_4777
	word64 r12_4784
	word64 r13_4785
	fn0000000000407EA0(0x0000000000416919, 0x00000001, rbp_4773, 0x0000000000000000, Mem1622[rbp_4755:word64], r8_1037, r11_1035, r14_1040, r15_1041, fs_1029, out ebx_4777, out rsp_1640, out rbp_4755, out rsi_1641, out r8_1037, out r9_1034, out r11_1035, out r12_4784, out r13_4785, out r14_1040, out r15_1041)
	r12d_1400 = (word32) (uint64) (r12d_1400 + 0x00000001) (alias)
	bpl_1010 = (byte) rbp_4773 (alias)
	branch ebx_4777 > r12d_1400 l000000000040342B
// DataOut: bpl fs r11 r12d r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040344D:
	word64 r13_1681
	branch Mem1622[0x000000000061B1B0:word64] != 0x0000000000000000 l0000000000404200
// DataOut: bpl fs r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404200:
	word64 rbp_4592
	word64 rsi_4593
	word64 r12_4595
	word64 r14_4597
	rsp_1640 = fn0000000000404E80(rsi_1641, r11_1035, r15_1041, out rbp_4592, out rsi_4593, out r8_1037, out r12_4595, out r13_1681, out r14_4597, out r15_1041)
	branch Mem1622[0x000000000061B10D:byte] == 0x00 l0000000000404454
// DataOut: bpl fs r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404454:
	word64 rbp_4748
	word64 rsi_4749
	rsp_1640 = fn0000000000405090(0x01, 0x0000000000000000, r11_1035, out rbp_4748, out rsi_4749, out r13_1681, out r15_1041)
// DataOut: bpl fs r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404212:
	branch Mem1622[0x000000000061B1B0:word64] == 0x0000000000000000 l000000000040345B
// DataOut: bpl fs r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404220:
	fn00000000004079F0(out rsp_1640)
	branch Mem1622[0x000000000061B190:word64] == 0x0000000000000000 l00000000004044B5
// DataOut: bpl eax fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044B5:
	Mem4741[rsp_1640 + 0x0000000000000018:word64] = 0x0000000000000000
// DataOut: bpl eax fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404233:
	word64 rdi_4624 = Mem1622[0x000000000061A610:word64]
	word64 rax_4626 = Mem1622[rdi_4624 + 0x0000000000000028:word64]
	branch rax_4626 >=u Mem1622[rdi_4624 + 0x0000000000000030:word64] l00000000004044A3
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044A3:
	word64 rdi_4693
	word64 rsi_4694
	word64 rbp_4695
	word64 rbx_4696
	word32 ebx_4697
	word32 edi_4698
	byte SCZO_4699
	word64 rax_4700
	selector fs_4701
	word32 eax_4702
	byte SZO_4703
	byte C_4704
	word32 esi_4705
	byte Z_4707
	word64 r12_4708
	word32 ecx_4709
	word64 rcx_4710
	word32 edx_4711
	word64 rdx_4712
	byte S_4713
	word16 ax_4714
	byte al_4715
	word32 r8d_4716
	word32 r14d_4717
	word64 r14_4718
	word32 r13d_4719
	word32 r12d_4721
	byte CZ_4722
	bcuiposr0 None_4723
	byte cl_4725
	word32 ebp_4727
	word32 esp_4728
	word32 r9d_4729
	byte SO_4730
	byte r13b_4731
	word32 r15d_4732
	byte r14b_4733
	byte sil_4739
	call __overflow (retsize: 8; depth: 8)
		uses: al_4630,ax_4629,bpl_1626,C_4632,cl_1582,CZ_1601,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_4628,ebp_1628,ebx_1631,ecx_1588,edi_4625,edx_1630,esi_4691,esp_4603,fs_1589,None_1583,qwLoc04,qwLoc28_28,r11_1633,r12_4595,r12d_1629,r13_4605,r13b_1577,r13d_1617,r14_4597,r14b_1576,r14d_1585,r15_4606,r15d_1591,r8_4594,r8d_1586,r9_1632,r9d_1579,rax_4626,rbp_4604,rbx_1590,rcx_1644,rdi_4624,rdx_1645,rsi_4689,rsp_4616,S_1587,SCZO_4631,sil_4690,SO_1578,SZO_4612,xmm0_1575,xmm1_1574,xmm2_1573,xmm3_1572,Z_4623
		defs: al_4715,ax_4714,bpl_4740,C_4704,cl_4725,CZ_4722,eax_4702,ebp_4727,ebx_4697,ecx_4709,edi_4698,edx_4711,esi_4705,esp_4728,fs_4701,None_4723,r11_4734,r12_4708,r12d_4721,r13_4720,r13b_4731,r13d_4719,r14_4718,r14b_4733,r14d_4717,r15_4726,r15d_4732,r8_4706,r8d_4716,r9_4724,r9d_4729,rax_4700,rbp_4695,rbx_4696,rcx_4710,rdi_4693,rdx_4712,rsi_4694,rsp_4692,S_4713,SCZO_4699,sil_4739,SO_4730,SZO_4703,xmm0_4735,xmm1_4736,xmm2_4737,xmm3_4738,Z_4707
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404248:
	Mem4687[rdi_4624 + 0x0000000000000028:word64] = rax_4626 + 0x0000000000000001
	Mem4688[rax_4626:byte] = 0x0A
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404253:
	word64 rax_4677 = Mem1622[0x000000000061B190:word64]
	Mem4683[0x000000000061B018:word64] = Mem1622[0x000000000061B018:word64] + 0x0000000000000001
	Mem4685[rsp_1640 + 0x0000000000000018:word64] = rax_4677
// DataOut: bpl eax fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040345B:
	word64 rax_4575 = Mem1622[0x000000000061B190:word64]
	Mem4585[rsp_1640 + 0x0000000000000018:word64] = rax_4575
	r13_1681 = (uint64) (r13d_1617 - 0x00000001)
	branch (word32) r13_1681 > 0x00000000 l00000000004034D2
// DataOut: bpl eax fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040346D:
// DataOut: bpl eax fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404385:
	branch rax_4575 == 0x0000000000000000 l00000000004034D2
// DataOut: bpl eax fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040438E:
	branch Mem4585[rax_4575 + 0x0000000000000018:word64] != 0x0000000000000000 l00000000004034D2
// DataOut: bpl eax fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404399:
	Mem4591[0x000000000061B0D0:byte] = 0x00
// DataOut: bpl eax fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034D2:
	branch Mem1622[rsp_1640 + 0x0000000000000018:word64] == 0x0000000000000000 l00000000004040B5
// DataOut: bpl eax fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040B5:
	branch Mem1622[0x000000000061B129:byte] == 0x00 l0000000000404152
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040C2:
	branch Mem1622[0x000000000061B128:byte] == 0x00 l00000000004040ED
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040CB:
	branch Mem1622[0x000000000061A3E0:word64] == 0x0000000000000002 l00000000004042CB
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042CB:
	branch memcmp(Mem1622[0x000000000061A3E8:word64], 0x00000000004139E1, 0x0000000000000002) != 0x00000000 l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042E9:
	branch Mem1622[0x000000000061A3F0:word64] != 0x0000000000000001 l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r8:<invalid> r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0002 ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004042F7:
	branch Mem1622[Mem1622[0x000000000061A3F8:word64]:byte] != 0x6D l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r8:<invalid> r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0002 ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404307:
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r8:<invalid> r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0002 ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040D9:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004040ED:
	word64 rsp_4240
	word64 rdi_4241
	word64 rsi_4242
	word64 rbp_4243
	word64 rbx_4244
	word32 ebx_4245
	word32 edi_4246
	byte SCZO_4247
	word64 rax_4248
	selector fs_4249
	word32 eax_4250
	byte SZO_4251
	byte C_4252
	word32 esi_4253
	word64 r8_4254
	byte Z_4255
	word64 r12_4256
	word32 ecx_4257
	word64 rcx_4258
	word32 edx_4259
	word64 rdx_4260
	byte S_4261
	word16 ax_4262
	byte al_4263
	word32 r8d_4264
	word32 r14d_4265
	word64 r14_4266
	word32 r13d_4267
	word64 r13_4268
	word32 r12d_4269
	byte CZ_4270
	bcuiposr0 None_4271
	word64 r9_4272
	byte cl_4273
	word64 r15_4274
	word32 ebp_4275
	word32 esp_4276
	word32 r9d_4277
	byte SO_4278
	byte r13b_4279
	word32 r15d_4280
	byte r14b_4281
	word64 r11_4282
	word128 xmm0_4283
	word128 xmm1_4284
	word128 xmm2_4285
	word128 xmm3_4286
	byte sil_4287
	byte bpl_4288
	call fflush_unlocked (retsize: 8; depth: 8)
		uses: al_1696,ax_1689,bpl_1652,C_1699,cl_1663,CZ_1685,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_1688,ebp_1662,ebx_4239,ecx_1670,edi_1686,edx_1674,esi_1692,esp_1661,fs_1671,None_1664,qwLoc04,qwLoc28_28,r11_1677,r12_1680,r12d_1665,r13_1681,r13b_1658,r13d_1666,r14_1682,r14b_1657,r14d_1667,r15_1683,r15d_1673,r8_1679,r8d_1668,r9_1676,r9d_1660,rax_1695,rbp_1678,rbx_4238,rcx_1693,rdi_4237,rdx_1694,rsi_1690,rsp_1684,S_1669,SCZO_4234,sil_1691,SO_1659,SZO_1698,xmm0_1656,xmm1_1655,xmm2_1654,xmm3_1653,Z_4235
		defs: al_4263,ax_4262,bpl_4288,C_4252,cl_4273,CZ_4270,eax_4250,ebp_4275,ebx_4245,ecx_4257,edi_4246,edx_4259,esi_4253,esp_4276,fs_4249,None_4271,r11_4282,r12_4256,r12d_4269,r13_4268,r13b_4279,r13d_4267,r14_4266,r14b_4281,r14d_4265,r15_4274,r15d_4280,r8_4254,r8d_4264,r9_4272,r9d_4277,rax_4248,rbp_4243,rbx_4244,rcx_4258,rdi_4241,rdx_4260,rsi_4242,rsp_4240,S_4261,SCZO_4247,sil_4287,SO_4278,SZO_4251,xmm0_4283,xmm1_4284,xmm2_4285,xmm3_4286,Z_4255
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040410D:
	word64 rsp_4296
	word64 rdi_4297
	word64 rsi_4298
	word64 rbp_4299
	word64 rbx_4300
	word32 ebx_4301
	word32 edi_4302
	byte SCZO_4303
	word64 rax_4304
	selector fs_4305
	word32 eax_4306
	byte SZO_4307
	byte C_4308
	word32 esi_4309
	word64 r8_4310
	byte Z_4311
	word64 r12_4312
	word32 ecx_4313
	word64 rcx_4314
	word32 edx_4315
	word64 rdx_4316
	byte S_4317
	word16 ax_4318
	byte al_4319
	word32 r8d_4320
	word32 r14d_4321
	word64 r14_4322
	word32 r13d_4323
	word32 r12d_4325
	byte CZ_4326
	bcuiposr0 None_4327
	word64 r9_4328
	byte cl_4329
	word32 ebp_4331
	word32 esp_4332
	word32 r9d_4333
	byte SO_4334
	byte r13b_4335
	word32 r15d_4336
	byte r14b_4337
	word64 r11_4338
	word128 xmm0_4339
	word128 xmm1_4340
	word128 xmm2_4341
	word128 xmm3_4342
	byte sil_4343
	byte bpl_4344
	call sigismember (retsize: 8; depth: 8)
		uses: al_4263,ax_4262,bpl_4293,C_4252,cl_4273,CZ_4270,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_4250,ebp_4292,ebx_4245,ecx_4257,edi_4246,edx_4259,esi_4253,esp_4276,fs_4249,None_4271,qwLoc04,qwLoc28_28,r11_4282,r12_4256,r12d_4269,r13_4268,r13b_4279,r13d_4267,r14_4266,r14b_4281,r14d_4265,r15_4274,r15d_4280,r8_4254,r8d_4264,r9_4272,r9d_4277,rax_4248,rbp_4291,rbx_4289,rcx_4258,rdi_4294,rdx_4260,rsi_4295,rsp_4240,S_4261,SCZO_4247,sil_4287,SO_4278,SZO_4251,xmm0_4283,xmm1_4284,xmm2_4285,xmm3_4286,Z_4255
		defs: al_4319,ax_4318,bpl_4344,C_4308,cl_4329,CZ_4326,eax_4306,ebp_4331,ebx_4301,ecx_4313,edi_4302,edx_4315,esi_4309,esp_4332,fs_4305,None_4327,r11_4338,r12_4312,r12d_4325,r13_4324,r13b_4335,r13d_4323,r14_4322,r14b_4337,r14d_4321,r15_4330,r15d_4336,r8_4310,r8d_4320,r9_4328,r9d_4333,rax_4304,rbp_4299,rbx_4300,rcx_4314,rdi_4297,rdx_4316,rsi_4298,rsp_4296,S_4317,SCZO_4303,sil_4343,SO_4334,SZO_4307,xmm0_4339,xmm1_4340,xmm2_4341,xmm3_4342,Z_4311
	branch eax_4306 == 0x00000000 l0000000000404100
// DataOut: eax ebp r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040411F:
	signal((uint64) ebp_4331, 0x0000000000000000)
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404100:
	branch rbx_4300 == 0xFFFFFFFFFFBED314 l000000000040412A
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040412A:
	word64 rbx_4361 = (uint64) Mem1622[0x000000000061B034:word32]
	word32 ebx_4362 = (word32) rbx_4361
	branch ebx_4362 == 0x00000000 l0000000000404143
// DataOut: ebx r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404134:
	word64 rsp_4465
	word64 rdi_4466
	word64 rsi_4467
	word64 rbp_4468
	word64 rbx_4469
	word32 ebx_4470
	word32 edi_4471
	byte SCZO_4472
	word64 rax_4473
	selector fs_4474
	word32 eax_4475
	byte SZO_4476
	byte C_4477
	word32 esi_4478
	word64 r8_4479
	byte Z_4480
	word64 r12_4481
	word32 ecx_4482
	word64 rcx_4483
	word32 edx_4484
	word64 rdx_4485
	byte S_4486
	word16 ax_4487
	byte al_4488
	word32 r8d_4489
	word32 r14d_4490
	word64 r14_4491
	word32 r13d_4492
	word32 r12d_4494
	byte CZ_4495
	bcuiposr0 None_4496
	word64 r9_4497
	byte cl_4498
	word32 ebp_4500
	word32 esp_4501
	word32 r9d_4502
	byte SO_4503
	byte r13b_4504
	word32 r15d_4505
	byte r14b_4506
	word64 r11_4507
	word128 xmm0_4508
	word128 xmm1_4509
	word128 xmm2_4510
	word128 xmm3_4511
	byte sil_4512
	byte bpl_4513
	call raise (retsize: 8; depth: 8)
		uses: al_4353,ax_4350,bpl_4344,C_4365,cl_4329,CZ_4326,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_4349,ebp_4331,ebx_4362,ecx_4313,edi_4302,edx_4315,esi_4309,esp_4332,fs_4305,None_4327,qwLoc04,qwLoc28_28,r11_4338,r12_4312,r12d_4325,r13_4324,r13b_4335,r13d_4323,r14_4322,r14b_4337,r14d_4321,r15_4330,r15d_4336,r8_4310,r8d_4320,r9_4328,r9d_4333,rax_4352,rbp_4299,rbx_4361,rcx_4314,rdi_4464,rdx_4316,rsi_4351,rsp_4296,S_4317,SCZO_4359,sil_4343,SO_4334,SZO_4363,xmm0_4339,xmm1_4340,xmm2_4341,xmm3_4342,Z_4364
		defs: al_4488,ax_4487,bpl_4513,C_4477,cl_4498,CZ_4495,eax_4475,ebp_4500,ebx_4470,ecx_4482,edi_4471,edx_4484,esi_4478,esp_4501,fs_4474,None_4496,r11_4507,r12_4481,r12d_4494,r13_4493,r13b_4504,r13d_4492,r14_4491,r14b_4506,r14d_4490,r15_4499,r15d_4505,r8_4479,r8d_4489,r9_4497,r9d_4502,rax_4473,rbp_4468,rbx_4469,rcx_4483,rdi_4466,rdx_4485,rsi_4467,rsp_4465,S_4486,SCZO_4472,sil_4512,SO_4503,SZO_4476,xmm0_4508,xmm1_4509,xmm2_4510,xmm3_4511,Z_4480
	branch (word32) (uint64) (ebx_4470 - 0x00000001) != 0x00000000 l0000000000404134
// DataOut: ebx r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404143:
	word64 rdi_4410 = (uint64) Mem1622[0x000000000061B038:word32]
	word32 edi_4411 = (word32) rdi_4410
	branch edi_4411 == 0x00000000 l0000000000404152
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040414D:
	word64 rsp_4415
	word64 rdi_4416
	word64 rsi_4417
	word64 rbp_4418
	word64 rbx_4419
	word32 ebx_4420
	word32 edi_4421
	byte SCZO_4422
	word64 rax_4423
	selector fs_4424
	word32 eax_4425
	byte SZO_4426
	byte C_4427
	word32 esi_4428
	word64 r8_4429
	byte Z_4430
	word64 r12_4431
	word32 ecx_4432
	word64 rcx_4433
	word32 edx_4434
	word64 rdx_4435
	byte S_4436
	word16 ax_4437
	byte al_4438
	word32 r8d_4439
	word32 r14d_4440
	word64 r14_4441
	word32 r13d_4442
	word32 r12d_4444
	byte CZ_4445
	bcuiposr0 None_4446
	word64 r9_4447
	byte cl_4448
	word32 ebp_4450
	word32 esp_4451
	word32 r9d_4452
	byte SO_4453
	byte r13b_4454
	word32 r15d_4455
	byte r14b_4456
	word64 r11_4457
	word128 xmm0_4458
	word128 xmm1_4459
	word128 xmm2_4460
	word128 xmm3_4461
	byte sil_4462
	byte bpl_4463
	call raise (retsize: 8; depth: 8)
		uses: al_4409,ax_4401,bpl_4366,C_4414,cl_4377,CZ_4399,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_4400,ebp_4376,ebx_4389,ecx_4384,edi_4411,edx_4388,esi_4405,esp_4375,fs_4385,None_4378,qwLoc04,qwLoc28_28,r11_4391,r12_4394,r12d_4379,r13_4395,r13b_4372,r13d_4380,r14_4396,r14b_4371,r14d_4381,r15_4397,r15d_4387,r8_4393,r8d_4382,r9_4390,r9d_4374,rax_4408,rbp_4392,rbx_4386,rcx_4406,rdi_4410,rdx_4407,rsi_4403,rsp_4398,S_4383,SCZO_4402,sil_4404,SO_4373,SZO_4412,xmm0_4370,xmm1_4369,xmm2_4368,xmm3_4367,Z_4413
		defs: al_4438,ax_4437,bpl_4463,C_4427,cl_4448,CZ_4445,eax_4425,ebp_4450,ebx_4420,ecx_4432,edi_4421,edx_4434,esi_4428,esp_4451,fs_4424,None_4446,r11_4457,r12_4431,r12d_4444,r13_4443,r13b_4454,r13d_4442,r14_4441,r14b_4456,r14d_4440,r15_4449,r15d_4455,r8_4429,r8d_4439,r9_4447,r9d_4452,rax_4423,rbp_4418,rbx_4419,rcx_4433,rdi_4416,rdx_4435,rsi_4417,rsp_4415,S_4436,SCZO_4422,sil_4462,SO_4453,SZO_4426,xmm0_4458,xmm1_4459,xmm2_4460,xmm3_4461,Z_4430
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404152:
	branch Mem1622[0x000000000061B130:byte] != 0x00 l000000000040430C
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040430C:
	fn0000000000405630(0x000000000061AFC0, 0x00000000004139E4, qwLoc04)
	fn0000000000405630(0x000000000061AF60, 0x00000000004139EE, qwLoc04)
	fn000000000040E630(Mem1622[0x000000000061B0E8:word64])
	__printf_chk(0x0000000000000001, 0x0000000000415D40)
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040415F:
	word64 rbx_4199 = Mem1622[0x000000000061B1C8:word64]
	branch rbx_4199 == 0x0000000000000000 l00000000004041F5
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040416F:
	branch fn000000000040AFB0(rbx_4199) == 0x0000000000000000 l00000000004041ED
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004041ED:
	fn000000000040B640(rbx_4199, r13_1681, r15_1041, qwLoc04)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004041F5:
	exit((uint64) Mem1622[0x000000000061B030:word32])
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040417C:
	__assert_fail(0x0000000000415D68, 0x0000000000413736, 0x00000000000005DC, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004034DE:
	word64 rcx_1702 = Mem1622[rsp_1640 + 0x0000000000000018:word64]
	Mem1706[0x000000000061B190:word64] = Mem1622[rcx_1702 + 0x0000000000000018:word64]
	branch Mem1622[0x000000000061B1C8:word64] == 0x0000000000000000 l0000000000403FB5
// DataOut: bpl fs r11 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403FB5:
// DataOut: fs r11 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034FC:
	word64 r14_3984 = Mem1706[r9_1034:word64]
	branch r14_3984 == 0x0000000000000000 l0000000000403FC2
// DataOut: bpl fs r11 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403FC2:
	word64 rax_3990 = Mem1706[0x000000000061AF18:word64]
	word32 edx_3996 = (word32) (rax_3990 - Mem1706[0x000000000061AF10:word64])
	branch edx_3996 <=u 0x0000000F l00000000004044C3
// DataOut: bpl fs r11 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044C3:
	__assert_fail(0x0000000000415C58, 0x0000000000413736, 0x00000000000003D5, 0x0000000000412C38)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000403FDC:
	word64 rdx_4001 = Mem1706[0x000000000061AF20:word64] - rax_3990
	branch rdx_4001 >= 0xFFFFFFFFFFFFFFF0 l0000000000404002
// DataOut: bpl fs r11 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403FEC:
	word64 rdi_4081
	word64 rsi_4082
	word64 rbp_4083
	word64 rbx_4084
	word32 ebx_4085
	word32 edi_4086
	byte SCZO_4087
	word64 rax_4088
	selector fs_4089
	word32 eax_4090
	byte SZO_4091
	byte C_4092
	word32 esi_4093
	byte Z_4095
	word64 r12_4096
	word32 ecx_4097
	word64 rcx_4098
	word32 edx_4099
	word64 rdx_4100
	byte S_4101
	word16 ax_4102
	byte al_4103
	word32 r8d_4104
	word32 r14d_4105
	word64 r14_4106
	word32 r13d_4107
	word64 r13_4108
	word32 r12d_4109
	byte CZ_4110
	bcuiposr0 None_4111
	word64 r9_4112
	byte cl_4113
	word64 r15_4114
	word32 ebp_4115
	word32 esp_4116
	word32 r9d_4117
	byte SO_4118
	byte r13b_4119
	word32 r15d_4120
	byte r14b_4121
	byte sil_4127
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_3993,ax_3992,bpl_1652,C_3989,cl_1663,CZ_3999,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_3991,ebp_1662,ebx_1675,ecx_1670,edi_1686,edx_3996,esi_1692,esp_1661,fs_1671,None_1664,qwLoc28_28,r11_1677,r12_1680,r12d_1665,r13_1681,r13b_1658,r13d_1666,r14_3984,r14b_3986,r14d_3985,r15_1683,r15d_1673,r8_1679,r8d_1668,r9_1676,r9d_1660,rax_3990,rbp_1678,rbx_1672,rcx_1702,rdi_4079,rdx_4001,rsi_4078,rsp_1684,S_1669,SCZO_4003,sil_1691,SO_4004,SZO_3987,xmm0_1656,xmm1_1655,xmm2_1654,xmm3_1653,Z_3988
		defs: al_4103,ax_4102,bpl_4128,C_4092,cl_4113,CZ_4110,eax_4090,ebp_4115,ebx_4085,ecx_4097,edi_4086,edx_4099,esi_4093,esp_4116,fs_4089,None_4111,r11_4122,r12_4096,r12d_4109,r13_4108,r13b_4119,r13d_4107,r14_4106,r14b_4121,r14d_4105,r15_4114,r15d_4120,r8_4094,r8d_4104,r9_4112,r9d_4117,rax_4088,rbp_4083,rbx_4084,rcx_4098,rdi_4081,rdx_4100,rsi_4082,rsp_4080,S_4101,SCZO_4087,sil_4127,SO_4118,SZO_4091,xmm0_4123,xmm1_4124,xmm2_4125,xmm3_4126,Z_4095
	rax_3990 = Mem1706[0x000000000061AF18:word64]
// DataOut: bpl fs r11 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404002:
	word64 rsi_4041 = Mem1706[rsp_1640 + 0x0000000000000020:word64]
	word64 rdi_4044 = Mem1706[0x000000000061B1C8:word64]
	Mem4045[0x000000000061AF18:word64] = rax_3990 - 0x0000000000000010
	word64 rax_4047 = Mem4045[rax_3990 - 0x0000000000000008:word64]
	Mem4048[rsp_1640 + 0x0000000000000040:word64] = Mem4045[rax_3990 - 0x0000000000000010:word64]
	Mem4049[rsp_1640 + 0x0000000000000048:word64] = rax_4047
	word64 rsi_4052
	word64 rax_4061 = fn000000000040BB90(rax_4047, bpl_1010, rsi_4041, rdi_4044, r8_1037, r11_1035, xmm0_1014, xmm1_1013, xmm2_1012, xmm3_1011, out rsp_1640, out bpl_1010, out rsi_4052, out r8_1037, out r9_1034, out r13_1681, out r15_1041, out xmm0_1014, out xmm1_1013, out xmm2_1012, out xmm3_1011)
	branch rax_4061 == 0x0000000000000000 l0000000000404287
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404287:
	__assert_fail(0x0000000000413992, 0x0000000000413736, 0x000000000000059D, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000404039:
	free(rax_4061)
	word64 rbx_4070 = Mem4049[rsp_1640 + 0x0000000000000018:word64]
	free(Mem4049[rbx_4070:word64])
	free(Mem4049[rbx_4070 + 0x0000000000000008:word64])
	free(rbx_4070)
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403508:
	word32 ecx_1760 = (word32) Mem1706[Mem1706[rsp_1640 + 0x0000000000000018:word64] + 0x0000000000000010:byte]
	byte cl_1761 = (byte) ecx_1760
	Mem1764[rsp_1640 + 0x000000000000002F:byte] = cl_1761
	word64 rax_1765 = __errno_location()
	Mem1771[rax_1765:word32] = 0x00000000
	word64 rsp_1774
	word64 rdi_1775
	word64 rsi_1776
	word64 rbp_1777
	word32 edi_1780
	byte SCZO_1781
	word64 rax_1782
	word32 eax_1784
	byte SZO_1785
	byte C_1786
	word32 esi_1787
	word64 r8_1788
	byte Z_1789
	word32 ecx_1791
	word64 rcx_1792
	word32 edx_1793
	word64 rdx_1794
	byte S_1795
	word16 ax_1796
	byte al_1797
	word32 r8d_1798
	word32 r14d_1799
	word32 r13d_1801
	word64 r13_1802
	word32 r12d_1803
	byte CZ_1804
	bcuiposr0 None_1805
	word64 r9_1806
	byte cl_1807
	word64 r15_1808
	word32 ebp_1809
	word32 esp_1810
	word32 r9d_1811
	byte SO_1812
	byte r13b_1813
	word32 r15d_1814
	byte r14b_1815
	byte sil_1821
	word64 rbx_1778
	word64 r14_1800
	call opendir (retsize: 8; depth: 8)
		uses: al_1769,ax_1768,bpl_1652,C_1699,cl_1761,CZ_1685,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_1767,ebp_1662,ebx_1763,ecx_1760,edi_1686,edx_1674,esi_1692,esp_1661,fs_1671,None_1664,qwLoc28_28,r11_1677,r12_1772,r12d_1773,r13_1681,r13b_1658,r13d_1666,r14_1758,r14b_1657,r14d_1667,r15_1683,r15d_1673,r8_1679,r8d_1668,r9_1676,r9d_1660,rax_1765,rbp_1678,rbx_1762,rcx_1702,rdi_1770,rdx_1694,rsi_1690,rsp_1684,S_1669,SCZO_1703,sil_1691,SO_1659,SZO_1698,xmm0_1656,xmm1_1655,xmm2_1654,xmm3_1653,Z_1704
		defs: al_1797,ax_1796,bpl_1822,C_1786,cl_1807,CZ_1804,eax_1784,ebp_1809,ebx_1779,ecx_1791,edi_1780,edx_1793,esi_1787,esp_1810,fs_1783,None_1805,r11_1816,r12_1790,r12d_1803,r13_1802,r13b_1813,r13d_1801,r14_1800,r14b_1815,r14d_1799,r15_1808,r15d_1814,r8_1788,r8d_1798,r9_1806,r9d_1811,rax_1782,rbp_1777,rbx_1778,rcx_1792,rdi_1775,rdx_1794,rsi_1776,rsp_1774,S_1795,SCZO_1781,sil_1821,SO_1812,SZO_1785,xmm0_1817,xmm1_1818,xmm2_1819,xmm3_1820,Z_1789
	branch rax_1782 == 0x0000000000000000 l0000000000404195
// DataOut: eax ebx fs r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404195:
	dcgettext(0x0000000000000000, 0x0000000000413998, 0x0000000000000005)
	word64 rbp_3973
	word64 rsi_3974
	word64 rdi_3975
	word64 r12_3979
	word64 r14_3981
	fn0000000000405810(r14_1800, (word32) Mem1771[rsp_1774 + 0x000000000000002F:byte], r11_1035, fs_1029, out rsp_1640, out rbp_3973, out rsi_3974, out rdi_3975, out r8_1037, out r9_1034, out r11_1035, out r12_3979, out r13_1681, out r14_3981, out r15_1041)
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040353B:
	branch Mem1771[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004035FF
// DataOut: eax ebx fs r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403549:
	byte al_3473
	word64 rsi_3467
	word64 rsp_3460
	word64 r14_3458
	word64 r8_3455
	word128 xmm0_3432
	word128 xmm1_3431
	word128 xmm2_3430
	word128 xmm3_3429
	word64 rsp_3374
	word64 rdi_3375
	word64 rsi_3376
	word64 rbp_3377
	word64 rbx_3378
	word32 ebx_3379
	word32 edi_3380
	byte SCZO_3381
	word64 rax_3382
	selector fs_3383
	word32 eax_3384
	byte SZO_3385
	byte C_3386
	word32 esi_3387
	word64 r8_3388
	byte Z_3389
	word64 r12_3390
	word32 ecx_3391
	word64 rcx_3392
	word32 edx_3393
	word64 rdx_3394
	byte S_3395
	word16 ax_3396
	byte al_3397
	word32 r8d_3398
	word32 r14d_3399
	word64 r14_3400
	word32 r13d_3401
	word64 r13_3402
	word32 r12d_3403
	byte CZ_3404
	bcuiposr0 None_3405
	word64 r9_3406
	byte cl_3407
	word64 r15_3408
	word32 ebp_3409
	word32 esp_3410
	word32 r9d_3411
	byte SO_3412
	byte r13b_3413
	word32 r15d_3414
	byte r14b_3415
	word64 r11_3416
	word128 xmm0_3417
	word128 xmm1_3418
	word128 xmm2_3419
	word128 xmm3_3420
	byte sil_3421
	byte bpl_3422
	call dirfd (retsize: 8; depth: 8)
		uses: al_1797,ax_1796,bpl_1822,C_1825,cl_1807,CZ_1804,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_1784,ebp_1809,ebx_1779,ecx_1791,edi_1780,edx_1793,esi_1787,esp_1810,fs_1783,None_1805,qwLoc28_28,r11_1816,r12_1790,r12d_1803,r13_1826,r13b_1828,r13d_1827,r14_1800,r14b_1815,r14d_1799,r15_1808,r15d_1814,r8_1788,r8d_1798,r9_1806,r9d_1811,rax_1782,rbp_1777,rbx_1778,rcx_1792,rdi_3373,rdx_1794,rsi_1776,rsp_1774,S_1795,SCZO_1882,sil_1821,SO_1812,SZO_1823,xmm0_1817,xmm1_1818,xmm2_1819,xmm3_1820,Z_1883
		defs: al_3397,ax_3396,bpl_3422,C_3386,cl_3407,CZ_3404,eax_3384,ebp_3409,ebx_3379,ecx_3391,edi_3380,edx_3393,esi_3387,esp_3410,fs_3383,None_3405,r11_3416,r12_3390,r12d_3403,r13_3402,r13b_3413,r13d_3401,r14_3400,r14b_3415,r14d_3399,r15_3408,r15d_3414,r8_3388,r8d_3398,r9_3406,r9d_3411,rax_3382,rbp_3377,rbx_3378,rcx_3392,rdi_3375,rdx_3394,rsi_3376,rsp_3374,S_3395,SCZO_3381,sil_3421,SO_3412,SZO_3385,xmm0_3417,xmm1_3418,xmm2_3419,xmm3_3420,Z_3389
	branch eax_3384 < 0x00000000 l0000000000403E95
// DataOut: eax fs r11 r14 r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E95:
	word64 rdi_3906
	word64 rbp_3908
	word32 ebx_3910
	word32 edi_3911
	byte SCZO_3912
	word64 rax_3913
	word32 eax_3915
	byte SZO_3916
	byte C_3917
	word32 esi_3918
	byte Z_3920
	word64 r12_3921
	word32 ecx_3922
	word64 rcx_3923
	word32 edx_3924
	word64 rdx_3925
	byte S_3926
	word16 ax_3927
	byte al_3928
	word32 r8d_3929
	word32 r14d_3930
	word32 r13d_3932
	word64 r13_3933
	word32 r12d_3934
	byte CZ_3935
	bcuiposr0 None_3936
	word64 r9_3937
	byte cl_3938
	word64 r15_3939
	word32 ebp_3940
	word32 esp_3941
	word32 r9d_3942
	byte SO_3943
	byte r13b_3944
	word32 r15d_3945
	byte r14b_3946
	byte sil_3952
	byte bpl_3953
	call __xstat (retsize: 8; depth: 8)
		uses: al_3397,ax_3396,bpl_3422,C_3425,cl_3407,CZ_3404,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_3384,ebp_3409,ebx_3379,ecx_3391,edi_3380,edx_3393,esi_3903,esp_3410,fs_3383,None_3405,qwLoc28_28,r11_3416,r12_3390,r12d_3403,r13_3402,r13b_3413,r13d_3401,r14_3400,r14b_3415,r14d_3399,r15_3408,r15d_3414,r8_3388,r8d_3398,r9_3406,r9d_3411,rax_3382,rbp_3377,rbx_3378,rcx_3392,rdi_3904,rdx_3426,rsi_3901,rsp_3374,S_3424,SCZO_3381,sil_3902,SO_3412,SZO_3423,xmm0_3417,xmm1_3418,xmm2_3419,xmm3_3420,Z_3389
		defs: al_3928,ax_3927,bpl_3953,C_3917,cl_3938,CZ_3935,eax_3915,ebp_3940,ebx_3910,ecx_3922,edi_3911,edx_3924,esi_3918,esp_3941,fs_3914,None_3936,r11_3947,r12_3921,r12d_3934,r13_3933,r13b_3944,r13d_3932,r14_3931,r14b_3946,r14d_3930,r15_3939,r15d_3945,r8_3919,r8d_3929,r9_3937,r9d_3942,rax_3913,rbp_3908,rbx_3909,rcx_3923,rdi_3906,rdx_3925,rsi_3907,rsp_3905,S_3926,SCZO_3912,sil_3952,SO_3943,SZO_3916,xmm0_3948,xmm1_3949,xmm2_3950,xmm3_3951,Z_3920
	al_3473 = (byte) (uint64) (eax_3915 >>u 0x0000001F) (alias)
// DataOut: al fs r11 r14 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040355E:
	word64 rdi_3847
	word64 rbp_3849
	word32 ebx_3851
	word32 edi_3852
	byte SCZO_3853
	word64 rax_3854
	word32 eax_3856
	byte SZO_3857
	byte C_3858
	word32 esi_3859
	byte Z_3861
	word64 r12_3862
	word32 ecx_3863
	word64 rcx_3864
	word32 edx_3865
	word64 rdx_3866
	byte S_3867
	word16 ax_3868
	byte al_3869
	word32 r8d_3870
	word32 r14d_3871
	word32 r13d_3873
	word64 r13_3874
	word32 r12d_3875
	byte CZ_3876
	bcuiposr0 None_3877
	word64 r9_3878
	byte cl_3879
	word64 r15_3880
	word32 ebp_3881
	word32 esp_3882
	word32 r9d_3883
	byte SO_3884
	byte r13b_3885
	word32 r15d_3886
	byte r14b_3887
	byte sil_3893
	byte bpl_3894
	call __fxstat (retsize: 8; depth: 8)
		uses: al_3397,ax_3396,bpl_3422,C_3425,cl_3407,CZ_3404,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_3384,ebp_3409,ebx_3379,ecx_3391,edi_3380,edx_3393,esi_3844,esp_3410,fs_3383,None_3405,qwLoc28_28,r11_3416,r12_3390,r12d_3403,r13_3402,r13b_3413,r13d_3401,r14_3400,r14b_3415,r14d_3399,r15_3408,r15d_3414,r8_3388,r8d_3398,r9_3406,r9d_3411,rax_3382,rbp_3377,rbx_3378,rcx_3392,rdi_3845,rdx_3426,rsi_3842,rsp_3374,S_3424,SCZO_3381,sil_3843,SO_3412,SZO_3423,xmm0_3417,xmm1_3418,xmm2_3419,xmm3_3420,Z_3389
		defs: al_3869,ax_3868,bpl_3894,C_3858,cl_3879,CZ_3876,eax_3856,ebp_3881,ebx_3851,ecx_3863,edi_3852,edx_3865,esi_3859,esp_3882,fs_3855,None_3877,r11_3888,r12_3862,r12d_3875,r13_3874,r13b_3885,r13d_3873,r14_3872,r14b_3887,r14d_3871,r15_3880,r15d_3886,r8_3860,r8d_3870,r9_3878,r9d_3883,rax_3854,rbp_3849,rbx_3850,rcx_3864,rdi_3847,rdx_3866,rsi_3848,rsp_3846,S_3867,SCZO_3853,sil_3893,SO_3884,SZO_3857,xmm0_3889,xmm1_3890,xmm2_3891,xmm3_3892,Z_3861
	al_3473 = (byte) (uint64) (eax_3856 >>u 0x0000001F) (alias)
// DataOut: al fs r11 r14 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040356D:
	branch al_3473 != 0x00 l0000000000403478
// DataOut: fs r11 r14 r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403478:
	word64 rax_3773 = dcgettext(0x0000000000000000, 0x0000000000415CE8, 0x0000000000000005)
	word32 edi_3774 = (word32) Mem1771[rsp_3460 + 0x000000000000002F:byte]
	word64 rsp_3780
	word64 rbp_3781
	word64 rsi_3782
	word64 rdi_3783
	word64 r8_3784
	word64 r9_3785
	word64 r11_3786
	word64 r12_3787
	word64 r13_3788
	word64 r14_3789
	word64 r15_3790
	word32 eax_3791 = fn0000000000405810(r14_3458, edi_3774, r11_1035, fs_1029, out rsp_3780, out rbp_3781, out rsi_3782, out rdi_3783, out r8_3784, out r9_3785, out r11_3786, out r12_3787, out r13_3788, out r14_3789, out r15_3790)
	word64 rdi_3794
	word64 rsi_3795
	word64 rbp_3796
	word64 rbx_3797
	word32 ebx_3798
	word32 edi_3799
	byte SCZO_3800
	word64 rax_3801
	selector fs_3802
	word32 eax_3803
	byte SZO_3804
	byte C_3805
	word32 esi_3806
	byte Z_3808
	word64 r12_3809
	word32 ecx_3810
	word64 rcx_3811
	word32 edx_3812
	word64 rdx_3813
	byte S_3814
	word16 ax_3815
	byte al_3816
	word32 r8d_3817
	word32 r14d_3818
	word64 r14_3819
	word32 r13d_3820
	word32 r12d_3822
	byte CZ_3823
	bcuiposr0 None_3824
	byte cl_3826
	word32 ebp_3828
	word32 esp_3829
	word32 r9d_3830
	byte SO_3831
	byte r13b_3832
	word32 r15d_3833
	byte r14b_3834
	byte sil_3840
	call closedir (retsize: 8; depth: 8)
		uses: al_3473,ax_3465,bpl_3428,C_3772,cl_3439,CZ_3461,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_3791,ebp_3438,ebx_3451,ecx_3446,edi_3774,edx_3450,esi_3779,esp_3437,fs_3447,None_3440,qwLoc28_28,r11_3786,r12_3787,r12d_3441,r13_3788,r13b_3434,r13d_3442,r14_3789,r14b_3433,r14d_3443,r15_3790,r15d_3449,r8_3784,r8d_3444,r9_3785,r9d_3436,rax_3773,rbp_3781,rbx_3448,rcx_3470,rdi_3792,rdx_3776,rsi_3782,rsp_3780,S_3445,SCZO_3466,sil_3778,SO_3435,SZO_3771,xmm0_3432,xmm1_3431,xmm2_3430,xmm3_3429,Z_3476
		defs: al_3816,ax_3815,bpl_3841,C_3805,cl_3826,CZ_3823,eax_3803,ebp_3828,ebx_3798,ecx_3810,edi_3799,edx_3812,esi_3806,esp_3829,fs_3802,None_3824,r11_3835,r12_3809,r12d_3822,r13_3821,r13b_3832,r13d_3820,r14_3819,r14b_3834,r14d_3818,r15_3827,r15d_3833,r8_3807,r8d_3817,r9_3825,r9d_3830,rax_3801,rbp_3796,rbx_3797,rcx_3811,rdi_3794,rdx_3813,rsi_3795,rsp_3793,S_3814,SCZO_3800,sil_3840,SO_3831,SZO_3804,xmm0_3836,xmm1_3837,xmm2_3838,xmm3_3839,Z_3808
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403575:
	word64 rdx_3479 = Mem1771[rsp_3460 + 0x0000000000000040:word64]
	Mem3481[rsp_3460 + 0x0000000000000010:word64] = Mem1771[rsp_3460 + 0x0000000000000048:word64]
	Mem3482[rsp_3460 + 0x0000000000000008:word64] = rdx_3479
	word64 rsp_3483
	word64 rax_3484 = fn0000000000410C40(rsi_3467, 0x0000000000000010, out rsp_3483)
	word64 rcx_3485 = Mem3482[rsp_3483 + 0x0000000000000010:word64]
	word64 rdx_3486 = Mem3482[rsp_3483 + 0x0000000000000008:word64]
	word64 rdi_3490 = Mem3482[0x000000000061B1C8:word64]
	Mem3494[rax_3484:word64] = rcx_3485
	Mem3495[rax_3484 + 0x0000000000000008:word64] = rdx_3486
	word64 rsi_3499
	word64 r8_3500
	word64 r13_3503
	word64 rax_3510 = fn000000000040BB50(rax_3484, rax_3484, rax_3484, rdi_3490, r8_3455, r11_1035, xmm0_3432, xmm1_3431, xmm2_3430, xmm3_3429, out ebx_1033, out rsp_1042, out rbp_1036, out rsi_3499, out r8_3500, out r9_1034, out r12_1135, out r13_3503, out r14_1800, out r15_1041, out xmm0_1014, out xmm1_1013, out xmm2_1012, out xmm3_1011)
	bpl_1010 = (byte) rax_3484 (alias)
	eax_1492 = (word32) rax_3510 (alias)
	branch rax_3510 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004043BB:
	fn0000000000410E50()
	r8_1037 = Mem722[0x000000000061A640:word64]
	fn00000000004112D0(0x0000000000413080, (word32) (uint64) Mem722[rsp_1042 + 0x0000000000000038:word32], (word32) (uint64) eax_1492)
// DataOut: ebx fs r11 r12 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r15d:<invalid> ax:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r8b:<invalid> r8d:<invalid> r14d:<invalid> r14b:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004043D9:
	word64 r13_1190
	word64 r12_1150 = r12_1135 + 0x0000000000000001
	word64 rax_1154 = strchr(r12_1150, 0x000000000000000A)
	r14_1040 = rax_1154
	branch rax_1154 == 0x0000000000000000 l000000000040444F
// DataOut: ebx fs r11 r12 r12d r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040444F:
	r13_1190 = r12_1150
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> r8:<invalid> rdx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004043F2:
	r13_1190 = r8_1037 + 0x0000000000000001
	word64 rsi_1215 = 0x000000000000000A
	branch strchr(r13_1190, 0x000000000000000A) == 0x0000000000000000 l0000000000404438
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> r8:<invalid> rdx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404408:
	word64 rbx_1274
	word64 rbp_1275
	word64 r8_1276
	word64 r9_1277
	word64 r11_1278
	word64 r12_1279
	word64 r13_1280
	word64 r14_1281
	word64 r15_1282
	fn000000000040EC10(r12_1150, r11_1035, fs_1029, out rbx_1274, out rbp_1275, out r8_1276, out r9_1277, out r11_1278, out r12_1279, out r13_1280, out r14_1281, out r15_1282)
	dcgettext(0x0000000000000000, 0x0000000000413900, 0x0000000000000005)
	word64 rdi_1300
	word64 rbx_1303
	word32 edi_1305
	byte SCZO_1306
	word64 rax_1307
	word32 eax_1309
	byte SZO_1310
	byte C_1311
	word32 esi_1312
	byte Z_1314
	word32 ecx_1316
	word64 rcx_1317
	word32 edx_1318
	word64 rdx_1319
	byte S_1320
	word16 ax_1321
	byte al_1322
	word32 r8d_1323
	word32 r14d_1324
	word32 r13d_1326
	word32 r12d_1328
	byte CZ_1329
	bcuiposr0 None_1330
	byte cl_1332
	word32 ebp_1334
	word32 esp_1335
	word32 r9d_1336
	byte SO_1337
	byte r13b_1338
	word32 r15d_1339
	byte r14b_1340
	byte sil_1346
	call error (retsize: 8; depth: 8)
		uses: al_1149,ax_1143,bpl_1110,C_1298,cl_1120,CZ_1139,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_1142,ebp_1119,ebx_1130,ecx_1125,edi_1140,edx_1129,esi_1294,esp_1118,fs_1126,None_1121,qwLoc28_28,r11_1278,r12_1279,r12d_1151,r13_1280,r13b_1214,r13d_1213,r14_1281,r14b_1160,r14d_1159,r15_1285,r15d_1286,r8_1276,r8d_1123,r9_1277,r9d_1117,rax_1296,rbp_1275,rbx_1274,rcx_1290,rdi_1295,rdx_1291,rsi_1292,rsp_1138,S_1124,SCZO_1144,sil_1293,SO_1116,SZO_1297,xmm0_1114,xmm1_1113,xmm2_1112,xmm3_1111,Z_1221
		defs: al_1322,ax_1321,bpl_1347,C_1311,cl_1332,CZ_1329,eax_1309,ebp_1334,ebx_1304,ecx_1316,edi_1305,edx_1318,esi_1312,esp_1335,fs_1308,None_1330,r11_1341,r12_1315,r12d_1328,r13_1327,r13b_1338,r13d_1326,r14_1325,r14b_1340,r14d_1324,r15_1333,r15d_1339,r8_1313,r8d_1323,r9_1331,r9d_1336,rax_1307,rbp_1302,rbx_1303,rcx_1317,rdi_1300,rdx_1319,rsi_1301,rsp_1299,S_1320,SCZO_1306,sil_1346,SO_1337,SZO_1310,xmm0_1342,xmm1_1343,xmm2_1344,xmm3_1345,Z_1314
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsp:<invalid> rbp:0x0000000000000006 rbx:<invalid> r8:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:0x00000006 bpl:0x06 al:<invalid> edx:0x00000001 ecx:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404438:
	Mem1272[rsi_1215:byte] = 0x00
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> ecx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040443C:
	Mem1210[0x000000000061A3D0:word64] = r12_1150
	Mem1211[0x000000000061A3D8:word64] = r13_1190
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> ecx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004038A8:
	branch strstr(Mem722[0x000000000061A3D0:word64], 0x0000000000413766) == 0x0000000000000000 l0000000000404484
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404484:
	rsi_1049 = 0x0000000000413766
	branch strstr(Mem722[0x000000000061A3D8:word64], 0x0000000000413766) != 0x0000000000000000 l00000000004038C2
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040449E:
// DataOut: ebx fs r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004038C2:
	Mem788[0x000000000061A748:word64] = 0x0000000000000005
// DataOut: ebx fs r11 r12d r13 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x06 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004038CD:
	r14_1040 = Mem788[0x000000000061A748:word64]
	Mem837[0x000000000061A748:word64] = 0x0000000000000000
	rsp_1042 = 0x000000000002000E
// DataOut: ebx fs r11 r12d r13 r14 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004038EB:
	Mem845[rsp_1042 + 0x0000000000000040:word64] = r14_1040
	word64 rsp_846
	word64 rdi_847
	word64 rsi_848
	word64 rbp_849
	word64 rbx_850
	word32 edi_852
	byte SCZO_853
	word64 rax_854
	word32 eax_856
	byte SZO_857
	byte C_858
	word32 esi_859
	word64 r8_860
	byte Z_861
	word64 r12_862
	word32 ecx_863
	word64 rcx_864
	word32 edx_865
	word64 rdx_866
	byte S_867
	word16 ax_868
	byte al_869
	word32 r8d_870
	word32 r14d_871
	word64 r14_872
	word32 r13d_873
	word64 r13_874
	word32 r12d_875
	byte CZ_876
	bcuiposr0 None_877
	word64 r9_878
	byte cl_879
	word64 r15_880
	word32 ebp_881
	word32 esp_882
	word32 r9d_883
	byte SO_884
	byte r13b_885
	word32 r15d_886
	byte r14b_887
	byte sil_893
	call nl_langinfo (retsize: 8; depth: 8)
		uses: al_829,ax_820,bpl_789,C_832,cl_798,CZ_816,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_819,ebp_797,ebx_809,ecx_804,edi_817,edx_808,esi_825,esp_839,fs_805,None_799,qwLoc28_28,r11_811,r12_813,r12d_840,r13_814,r13b_794,r13d_801,r14_841,r14b_835,r14d_834,r15_815,r15d_807,r8_812,r8d_802,r9_810,r9d_796,rax_828,rbp_836,rbx_806,rcx_826,rdi_844,rdx_827,rsi_823,rsp_842,S_803,SCZO_821,sil_824,SO_795,SZO_831,xmm0_793,xmm1_792,xmm2_791,xmm3_790,Z_822
		defs: al_869,ax_868,bpl_894,C_858,cl_879,CZ_876,eax_856,ebp_881,ebx_851,ecx_863,edi_852,edx_865,esi_859,esp_882,fs_855,None_877,r11_888,r12_862,r12d_875,r13_874,r13b_885,r13d_873,r14_872,r14b_887,r14d_871,r15_880,r15d_886,r8_860,r8d_870,r9_878,r9d_883,rax_854,rbp_849,rbx_850,rcx_864,rdi_847,rdx_866,rsi_848,rsp_846,S_867,SCZO_853,sil_893,SO_884,SZO_857,xmm0_889,xmm1_890,xmm2_891,xmm3_892,Z_861
	word64 rcx_895 = Mem845[rsp_846 + 0x0000000000000020:word64]
	r9_1034 = 0x0000000000000000
	r8_1037 = 0x0000000000000000
	word32 r12d_909
	word64 r13_910
	rsp_1042 = fn000000000040CDC0(rcx_895, 0x00000000000000A1, r13_874, rax_854, 0x00000000, 0x00000000, out rbp_1036, out rsi_1049, out r12d_909, out r13_910, out r14_1040, out r15_1041)
	branch false l0000000000404356
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404356:
	Mem1009[0x000000000061A748:word64] = 0x0000000000000000
// DataOut: ebx fs r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040391F:
	word64 rax_1004 = Mem845[rsp_1042 + 0x0000000000000040:word64]
	branch Mem845[0x000000000061A748:word64] <u rax_1004 l0000000000403933
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040392B_1:
	rax_1004 = Mem845[0x000000000061A748:word64]
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403933:
	Mem998[0x000000000061A748:word64] = rax_1004
	branch (word32) (uint64) (r12d_909 + 0x00000001) != 0x0002001A l00000000004038EB
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040394E:
	branch rax_1004 <u r14_1040 l00000000004038CD
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403957:
	branch rax_1004 != 0x0000000000000000 l0000000000403301
// DataOut: ebx fs r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403960:
// DataOut: ebx fs r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404361:
	dcgettext(0x0000000000000000, 0x0000000000415C30, 0x0000000000000005)
	word64 rdi_931
	word64 rbx_934
	word32 edi_936
	byte SCZO_937
	word64 rax_938
	word32 eax_940
	byte SZO_941
	byte C_942
	word32 esi_943
	byte Z_945
	word64 r12_946
	word32 ecx_947
	word64 rcx_948
	word32 edx_949
	word64 rdx_950
	byte S_951
	word16 ax_952
	byte al_953
	word32 r8d_954
	word32 r14d_955
	word32 r13d_957
	word64 r13_958
	word32 r12d_959
	byte CZ_960
	bcuiposr0 None_961
	byte cl_963
	word32 ebp_965
	word32 esp_966
	word32 r9d_967
	byte SO_968
	byte r13b_969
	word32 r15d_970
	byte r14b_971
	byte sil_977
	call error (retsize: 8; depth: 8)
		uses: al_869,ax_868,bpl_894,C_929,cl_879,CZ_916,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_856,ebp_881,ebx_851,ecx_863,edi_852,edx_865,esi_924,esp_914,fs_855,None_877,qwLoc28_28,r11_888,r12_862,r12d_909,r13_910,r13b_885,r13d_873,r14_911,r14b_887,r14d_871,r15_912,r15d_886,r8_898,r8d_899,r9_896,r9d_897,rax_927,rbp_907,rbx_850,rcx_895,rdi_926,rdx_925,rsi_922,rsp_913,S_867,SCZO_915,sil_923,SO_884,SZO_928,xmm0_889,xmm1_890,xmm2_891,xmm3_892,Z_861
		defs: al_953,ax_952,bpl_978,C_942,cl_963,CZ_960,eax_940,ebp_965,ebx_935,ecx_947,edi_936,edx_949,esi_943,esp_966,fs_939,None_961,r11_972,r12_946,r12d_959,r13_958,r13b_969,r13d_957,r14_956,r14b_971,r14d_955,r15_964,r15d_970,r8_944,r8d_954,r9_962,r9d_967,rax_938,rbp_933,rbx_934,rcx_948,rdi_931,rdx_950,rsi_932,rsp_930,S_951,SCZO_937,sil_977,SO_968,SZO_941,xmm0_973,xmm1_974,xmm2_975,xmm3_976,Z_945
// DataOut: ebx fs r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rbx:<invalid> ebp:0x0061A760 eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:0x60 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004035BF:
	branch rbp_1036 != rax_3510 l0000000000403EE2
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403EE2:
	free(rbp_1036)
	word64 rsp_3644
	word64 rbp_3645
	word64 r8_3646
	word64 r9_3647
	word64 r11_3648
	word64 r12_3649
	word64 r13_3650
	word64 r14_3651
	word64 r15_3652
	fn000000000040EAB0(r14_1800, r11_1035, fs_1029, out rsp_3644, out rbp_3645, out r8_3646, out r9_3647, out r11_3648, out r12_3649, out r13_3650, out r14_3651, out r15_3652)
	dcgettext(0x0000000000000000, 0x0000000000415D10, 0x0000000000000005)
	word64 rsp_3668
	word64 rdi_3669
	word64 rsi_3670
	word64 rbp_3671
	word64 rbx_3672
	word32 ebx_3673
	word32 edi_3674
	byte SCZO_3675
	word64 rax_3676
	selector fs_3677
	word32 eax_3678
	byte SZO_3679
	byte C_3680
	word32 esi_3681
	word64 r8_3682
	byte Z_3683
	word64 r12_3684
	word32 ecx_3685
	word64 rcx_3686
	word32 edx_3687
	word64 rdx_3688
	byte S_3689
	word16 ax_3690
	byte al_3691
	word32 r8d_3692
	word32 r14d_3693
	word64 r14_3694
	word32 r13d_3695
	word64 r13_3696
	word32 r12d_3697
	byte CZ_3698
	bcuiposr0 None_3699
	word64 r9_3700
	byte cl_3701
	word64 r15_3702
	word32 ebp_3703
	word32 esp_3704
	word32 r9d_3705
	byte SO_3706
	byte r13b_3707
	word32 r15d_3708
	byte r14b_3709
	word64 r11_3710
	word128 xmm0_3711
	word128 xmm1_3712
	word128 xmm2_3713
	word128 xmm3_3714
	byte sil_3715
	byte bpl_3716
	call error (retsize: 8; depth: 8)
		uses: al_3514,ax_3513,bpl_3493,C_3667,cl_3439,CZ_3461,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_3512,ebp_3492,ebx_3496,ecx_3446,edi_3462,edx_3450,esi_3663,esp_3437,fs_3447,None_3440,qwLoc28_28,r11_3648,r12_3649,r12d_3441,r13_3650,r13b_3434,r13d_3442,r14_3651,r14b_3433,r14d_3443,r15_3652,r15d_3449,r8_3646,r8d_3444,r9_3647,r9d_3436,rax_3665,rbp_3645,rbx_3655,rcx_3659,rdi_3664,rdx_3660,rsi_3661,rsp_3644,S_3445,SCZO_3518,sil_3662,SO_3435,SZO_3666,xmm0_3506,xmm1_3507,xmm2_3508,xmm3_3509,Z_3519
		defs: al_3691,ax_3690,bpl_3716,C_3680,cl_3701,CZ_3698,eax_3678,ebp_3703,ebx_3673,ecx_3685,edi_3674,edx_3687,esi_3681,esp_3704,fs_3677,None_3699,r11_3710,r12_3684,r12d_3697,r13_3696,r13b_3707,r13d_3695,r14_3694,r14b_3709,r14d_3693,r15_3702,r15d_3708,r8_3682,r8d_3692,r9_3700,r9d_3705,rax_3676,rbp_3671,rbx_3672,rcx_3686,rdi_3669,rdx_3688,rsi_3670,rsp_3668,S_3689,SCZO_3675,sil_3715,SO_3706,SZO_3679,xmm0_3711,xmm1_3712,xmm2_3713,xmm3_3714,Z_3683
	word64 rdi_3719
	word64 rsi_3720
	word64 rbp_3721
	word64 rbx_3722
	word32 ebx_3723
	word32 edi_3724
	byte SCZO_3725
	word64 rax_3726
	selector fs_3727
	word32 eax_3728
	byte SZO_3729
	byte C_3730
	word32 esi_3731
	byte Z_3733
	word64 r12_3734
	word32 ecx_3735
	word64 rcx_3736
	word32 edx_3737
	word64 rdx_3738
	byte S_3739
	word16 ax_3740
	byte al_3741
	word32 r8d_3742
	word32 r14d_3743
	word64 r14_3744
	word32 r13d_3745
	word32 r12d_3747
	byte CZ_3748
	bcuiposr0 None_3749
	byte cl_3751
	word32 ebp_3753
	word32 esp_3754
	word32 r9d_3755
	byte SO_3756
	byte r13b_3757
	word32 r15d_3758
	byte r14b_3759
	byte sil_3765
	call closedir (retsize: 8; depth: 8)
		uses: al_3691,ax_3690,bpl_3716,C_3680,cl_3701,CZ_3698,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_3678,ebp_3703,ebx_3673,ecx_3685,edi_3674,edx_3687,esi_3681,esp_3704,fs_3677,None_3699,qwLoc28_28,r11_3710,r12_3684,r12d_3697,r13_3696,r13b_3707,r13d_3695,r14_3694,r14b_3709,r14d_3693,r15_3702,r15d_3708,r8_3682,r8d_3692,r9_3700,r9d_3705,rax_3676,rbp_3671,rbx_3672,rcx_3686,rdi_3717,rdx_3688,rsi_3670,rsp_3668,S_3689,SCZO_3675,sil_3715,SO_3706,SZO_3679,xmm0_3711,xmm1_3712,xmm2_3713,xmm3_3714,Z_3683
		defs: al_3741,ax_3740,bpl_3766,C_3730,cl_3751,CZ_3748,eax_3728,ebp_3753,ebx_3723,ecx_3735,edi_3724,edx_3737,esi_3731,esp_3754,fs_3727,None_3749,r11_3760,r12_3734,r12d_3747,r13_3746,r13b_3757,r13d_3745,r14_3744,r14b_3759,r14d_3743,r15_3752,r15d_3758,r8_3732,r8d_3742,r9_3750,r9d_3755,rax_3726,rbp_3721,rbx_3722,rcx_3736,rdi_3719,rdx_3738,rsi_3720,rsp_3718,S_3739,SCZO_3725,sil_3765,SO_3756,SZO_3729,xmm0_3761,xmm1_3762,xmm2_3763,xmm3_3764,Z_3733
	Mem3767[0x000000000061B030:word32] = 0x00000002
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004035C8:
	word64 rax_3520 = Mem3495[0x000000000061AF18:word64]
	word64 rdx_3525 = Mem3495[0x000000000061AF20:word64] - rax_3520
	branch rdx_3525 <= 0x000000000000000F l0000000000404064
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000404064:
	word64 rdi_3589
	word64 rsi_3590
	word64 rbp_3591
	word32 edi_3594
	byte SCZO_3595
	word64 rax_3596
	word32 eax_3598
	byte SZO_3599
	byte C_3600
	word32 esi_3601
	word64 r8_3602
	byte Z_3603
	word32 ecx_3605
	word64 rcx_3606
	word32 edx_3607
	word64 rdx_3608
	byte S_3609
	word16 ax_3610
	byte al_3611
	word32 r8d_3612
	word32 r14d_3613
	word32 r13d_3615
	word64 r13_3616
	word32 r12d_3617
	byte CZ_3618
	bcuiposr0 None_3619
	word64 r9_3620
	byte cl_3621
	word64 r15_3622
	word32 ebp_3623
	word32 esp_3624
	word32 r9d_3625
	byte SO_3626
	byte r13b_3627
	word32 r15d_3628
	byte r14b_3629
	word128 xmm0_3631
	word128 xmm1_3632
	word128 xmm2_3633
	word128 xmm3_3634
	byte sil_3635
	byte bpl_3636
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_3523,ax_3522,bpl_3493,C_3517,cl_3439,CZ_3461,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_3521,ebp_3492,ebx_3496,ecx_3446,edi_3462,edx_3450,esi_3586,esp_3437,fs_3447,None_3440,qwLoc28_28,r11_3453,r12_3502,r12d_3441,r13_3503,r13b_3434,r13d_3442,r14_3504,r14b_3433,r14d_3443,r15_3505,r15d_3449,r8_3500,r8d_3444,r9_3501,r9d_3436,rax_3520,rbp_3498,rbx_3448,rcx_3485,rdi_3587,rdx_3525,rsi_3584,rsp_3497,S_3445,SCZO_3527,sil_3585,SO_3435,SZO_3528,xmm0_3506,xmm1_3507,xmm2_3508,xmm3_3509,Z_3519
		defs: al_3611,ax_3610,bpl_3636,C_3600,cl_3621,CZ_3618,eax_3598,ebp_3623,ebx_3593,ecx_3605,edi_3594,edx_3607,esi_3601,esp_3624,fs_3597,None_3619,r11_3630,r12_3604,r12d_3617,r13_3616,r13b_3627,r13d_3615,r14_3614,r14b_3629,r14d_3613,r15_3622,r15d_3628,r8_3602,r8d_3612,r9_3620,r9d_3625,rax_3596,rbp_3591,rbx_3592,rcx_3606,rdi_3589,rdx_3608,rsi_3590,rsp_3588,S_3609,SCZO_3595,sil_3635,SO_3626,SZO_3599,xmm0_3631,xmm1_3632,xmm2_3633,xmm3_3634,Z_3603
	rax_3520 = Mem3495[0x000000000061AF18:word64]
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:0x00000000FFFFFFFE r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004035E3:
	Mem3579[0x000000000061AF18:word64] = rax_3520 + 0x0000000000000010
	Mem3581[rax_3520 + 0x0000000000000008:word64] = Mem3579[rsp_1042 + 0x0000000000000040:word64]
	Mem3583[rax_3520:word64] = Mem3581[rsp_1042 + 0x0000000000000048:word64]
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004035FF:
	branch Mem1771[0x000000000061B10E:byte] != 0x00 l0000000000403615
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403608:
	branch Mem1771[0x000000000061B0D0:byte] == 0x00 l00000000004036D6
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403615:
	branch Mem1771[0x000000000061A3C0:byte] != 0x00 l0000000000403646
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040361E:
	word64 rdi_3258 = Mem1771[0x000000000061A610:word64]
	word64 rax_3260 = Mem1771[rdi_3258 + 0x0000000000000028:word64]
	branch rax_3260 >=u Mem1771[rdi_3258 + 0x0000000000000030:word64] l00000000004045E4
// DataOut: ebx fs r11 r14 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004045E4:
	word64 rsp_3322
	word64 rdi_3323
	word64 rsi_3324
	word64 rbp_3325
	word32 edi_3328
	byte SCZO_3329
	word64 rax_3330
	word32 eax_3332
	byte SZO_3333
	byte C_3334
	word32 esi_3335
	word64 r8_3336
	byte Z_3337
	word64 r12_3338
	word32 ecx_3339
	word64 rcx_3340
	word32 edx_3341
	word64 rdx_3342
	byte S_3343
	word16 ax_3344
	byte al_3345
	word32 r8d_3346
	word32 r14d_3347
	word32 r13d_3349
	word64 r13_3350
	word32 r12d_3351
	byte CZ_3352
	bcuiposr0 None_3353
	word64 r9_3354
	byte cl_3355
	word64 r15_3356
	word32 ebp_3357
	word32 esp_3358
	word32 r9d_3359
	byte SO_3360
	byte r13b_3361
	word32 r15d_3362
	byte r14b_3363
	word128 xmm0_3365
	word128 xmm1_3366
	word128 xmm2_3367
	word128 xmm3_3368
	byte sil_3369
	byte bpl_3370
	call __overflow (retsize: 8; depth: 8)
		uses: al_3264,ax_3263,bpl_1884,C_3266,cl_1895,CZ_1917,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_3262,ebp_1894,ebx_1907,ecx_1902,edi_3259,edx_1906,esi_1924,esp_1893,fs_1903,None_1896,qwLoc28_28,r11_1909,r12_1912,r12d_1897,r13_1913,r13b_1890,r13d_1898,r14_1914,r14b_1889,r14d_1899,r15_1915,r15d_1905,r8_1911,r8d_1900,r9_1908,r9d_1892,rax_3260,rbp_1910,rbx_1904,rcx_1925,rdi_3258,rdx_1926,rsi_3321,rsp_1916,S_1901,SCZO_3265,sil_1923,SO_1891,SZO_1930,xmm0_1888,xmm1_1887,xmm2_1886,xmm3_1885,Z_2781
		defs: al_3345,ax_3344,bpl_3370,C_3334,cl_3355,CZ_3352,eax_3332,ebp_3357,ebx_3327,ecx_3339,edi_3328,edx_3341,esi_3335,esp_3358,fs_3331,None_3353,r11_3364,r12_3338,r12d_3351,r13_3350,r13b_3361,r13d_3349,r14_3348,r14b_3363,r14d_3347,r15_3356,r15d_3362,r8_3336,r8d_3346,r9_3354,r9d_3359,rax_3330,rbp_3325,rbx_3326,rcx_3340,rdi_3323,rdx_3342,rsi_3324,rsp_3322,S_3343,SCZO_3329,sil_3369,SO_3360,SZO_3333,xmm0_3365,xmm1_3366,xmm2_3367,xmm3_3368,Z_3337
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403633:
	Mem3319[rdi_3258 + 0x0000000000000028:word64] = rax_3260 + 0x0000000000000001
	Mem3320[rax_3260:byte] = 0x0A
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040363E:
	Mem3316[0x000000000061B018:word64] = Mem1771[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403646:
	Mem2832[0x000000000061A3C0:byte] = 0x00
	branch Mem1771[0x000000000061B130:byte] != 0x00 l0000000000403F2E
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403F2E:
	word64 rsp_3088
	word64 rdi_3089
	word64 rsi_3090
	word64 rbp_3091
	word32 edi_3094
	byte SCZO_3095
	word64 rax_3096
	word32 eax_3098
	byte SZO_3099
	byte C_3100
	word32 esi_3101
	word64 r8_3102
	byte Z_3103
	word64 r12_3104
	word32 ecx_3105
	word64 rcx_3106
	word32 edx_3107
	word64 rdx_3108
	byte S_3109
	word16 ax_3110
	byte al_3111
	word32 r8d_3112
	word32 r14d_3113
	word32 r13d_3115
	word64 r13_3116
	word32 r12d_3117
	byte CZ_3118
	bcuiposr0 None_3119
	word64 r9_3120
	byte cl_3121
	word64 r15_3122
	word32 ebp_3123
	word32 esp_3124
	word32 r9d_3125
	byte SO_3126
	byte r13b_3127
	word32 r15d_3128
	byte r14b_3129
	word128 xmm0_3131
	word128 xmm1_3132
	word128 xmm2_3133
	word128 xmm3_3134
	byte sil_3135
	byte bpl_3136
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_2826,ax_2819,bpl_2782,C_2829,cl_2793,CZ_2815,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_2818,ebp_2792,ebx_2805,ecx_2800,edi_2816,edx_2804,esi_2822,esp_2791,fs_2801,None_2794,qwLoc28_28,r11_2807,r12_2810,r12d_2795,r13_2811,r13b_2788,r13d_2796,r14_2812,r14b_2787,r14d_2797,r15_2813,r15d_2803,r8_2809,r8d_2798,r9_2806,r9d_2790,rax_2825,rbp_2808,rbx_2802,rcx_3084,rdi_3087,rdx_3085,rsi_3086,rsp_2814,S_2799,SCZO_2830,sil_2821,SO_2789,SZO_2828,xmm0_2786,xmm1_2785,xmm2_2784,xmm3_2783,Z_2831
		defs: al_3111,ax_3110,bpl_3136,C_3100,cl_3121,CZ_3118,eax_3098,ebp_3123,ebx_3093,ecx_3105,edi_3094,edx_3107,esi_3101,esp_3124,fs_3097,None_3119,r11_3130,r12_3104,r12d_3117,r13_3116,r13b_3127,r13d_3115,r14_3114,r14b_3129,r14d_3113,r15_3122,r15d_3128,r8_3102,r8d_3112,r9_3120,r9d_3125,rax_3096,rbp_3091,rbx_3092,rcx_3106,rdi_3089,rdx_3108,rsi_3090,rsp_3088,S_3109,SCZO_3095,sil_3135,SO_3126,SZO_3099,xmm0_3131,xmm1_3132,xmm2_3133,xmm3_3134,Z_3103
	Mem3138[0x000000000061B018:word64] = Mem2832[0x000000000061B018:word64] + 0x0000000000000002
	branch Mem3138[0x000000000061B130:byte] == 0x00 l000000000040365A
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403F5E:
	word64 rax_3141 = Mem3138[0x000000000061AF78:word64]
	branch Mem3138[0x000000000061AF80:word64] <u rax_3141 + 0x0000000000000008 l000000000040407F
// DataOut: ebx fs r11 r14 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040407F:
	word64 rsp_3204
	word64 rdi_3205
	word64 rsi_3206
	word64 rbp_3207
	word32 edi_3210
	byte SCZO_3211
	word64 rax_3212
	word32 eax_3214
	byte SZO_3215
	byte C_3216
	word32 esi_3217
	word64 r8_3218
	byte Z_3219
	word64 r12_3220
	word32 ecx_3221
	word64 rcx_3222
	word32 edx_3223
	word64 rdx_3224
	byte S_3225
	word16 ax_3226
	byte al_3227
	word32 r8d_3228
	word32 r14d_3229
	word32 r13d_3231
	word64 r13_3232
	word32 r12d_3233
	byte CZ_3234
	bcuiposr0 None_3235
	word64 r9_3236
	byte cl_3237
	word64 r15_3238
	word32 ebp_3239
	word32 esp_3240
	word32 r9d_3241
	byte SO_3242
	byte r13b_3243
	word32 r15d_3244
	byte r14b_3245
	word128 xmm0_3247
	word128 xmm1_3248
	word128 xmm2_3249
	word128 xmm3_3250
	byte sil_3251
	byte bpl_3252
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_3144,ax_3143,bpl_3136,C_3148,cl_3121,CZ_3118,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_3142,ebp_3123,ebx_3093,ecx_3105,edi_3094,edx_3107,esi_3101,esp_3124,fs_3097,None_3119,qwLoc28_28,r11_3130,r12_3104,r12d_3117,r13_3116,r13b_3127,r13d_3115,r14_3114,r14b_3129,r14d_3113,r15_3122,r15d_3128,r8_3102,r8d_3112,r9_3120,r9d_3125,rax_3141,rbp_3091,rbx_3092,rcx_3106,rdi_3203,rdx_3145,rsi_3202,rsp_3088,S_3109,SCZO_3147,sil_3135,SO_3126,SZO_3099,xmm0_3131,xmm1_3132,xmm2_3133,xmm3_3134,Z_3140
		defs: al_3227,ax_3226,bpl_3252,C_3216,cl_3237,CZ_3234,eax_3214,ebp_3239,ebx_3209,ecx_3221,edi_3210,edx_3223,esi_3217,esp_3240,fs_3213,None_3235,r11_3246,r12_3220,r12d_3233,r13_3232,r13b_3243,r13d_3231,r14_3230,r14b_3245,r14d_3229,r15_3238,r15d_3244,r8_3218,r8d_3228,r9_3236,r9d_3241,rax_3212,rbp_3207,rbx_3208,rcx_3222,rdi_3205,rdx_3224,rsi_3206,rsp_3204,S_3225,SCZO_3211,sil_3251,SO_3242,SZO_3215,xmm0_3247,xmm1_3248,xmm2_3249,xmm3_3250,Z_3219
	rax_3141 = Mem3138[0x000000000061AF78:word64]
// DataOut: ebx fs r11 r14 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403F76:
	Mem3198[rax_3141:word64] = Mem3138[0x000000000061B018:word64]
	Mem3200[0x000000000061AF78:word64] = Mem3198[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: ebx fs r11 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040365A:
	word64 rdx_2879 = Mem2832[0x000000000061B0E0:word64]
	branch rbx_1778 != 0x0000000000000000 l000000000040366F
// DataOut: ebx fs r11 r14 rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040366B_1:
	rbx_1778 = r14_1800
	ebx_1033 = (word32) r14_1800 (alias)
// DataOut: ebx fs r11 rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040366F:
	word64 rbx_2889
	word64 rsp_2890
	word64 rbp_2891
	word64 rsi_2892
	word32 edi_2893
	word64 r8_2894
	word64 r9_2895
	word64 r11_2896
	word64 r12_2897
	word64 r13_2898
	word64 r14_2899
	word64 r15_2900
	word64 rax_2901 = fn00000000004052D0(rdx_2879, ebx_1033, rbx_1778, r11_1035, fs_1029, out rbx_2889, out rsp_2890, out rbp_2891, out rsi_2892, out edi_2893, out r8_2894, out r9_2895, out r11_2896, out r12_2897, out r13_2898, out r14_2899, out r15_2900)
	Mem2903[0x000000000061B018:word64] = Mem2832[0x000000000061B018:word64] + rax_2901
	branch Mem2903[0x000000000061B130:byte] == 0x00 l00000000004036B3
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403689:
	word64 rax_2965 = Mem2903[0x000000000061AF78:word64]
	branch Mem2903[0x000000000061AF80:word64] <u rax_2965 + 0x0000000000000008 l000000000040409A
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040409A:
	word64 rsp_3028
	word64 rdi_3029
	word64 rsi_3030
	word64 rbp_3031
	word64 rbx_3032
	word32 ebx_3033
	word32 edi_3034
	byte SCZO_3035
	word64 rax_3036
	selector fs_3037
	word32 eax_3038
	byte SZO_3039
	byte C_3040
	word32 esi_3041
	word64 r8_3042
	byte Z_3043
	word64 r12_3044
	word32 ecx_3045
	word64 rcx_3046
	word32 edx_3047
	word64 rdx_3048
	byte S_3049
	word16 ax_3050
	byte al_3051
	word32 r8d_3052
	word32 r14d_3053
	word64 r14_3054
	word32 r13d_3055
	word64 r13_3056
	word32 r12d_3057
	byte CZ_3058
	bcuiposr0 None_3059
	word64 r9_3060
	byte cl_3061
	word64 r15_3062
	word32 ebp_3063
	word32 esp_3064
	word32 r9d_3065
	byte SO_3066
	byte r13b_3067
	word32 r15d_3068
	byte r14b_3069
	word64 r11_3070
	word128 xmm0_3071
	word128 xmm1_3072
	word128 xmm2_3073
	word128 xmm3_3074
	byte sil_3075
	byte bpl_3076
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_2968,ax_2967,bpl_2833,C_2972,cl_2844,CZ_2865,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_2966,ebp_2843,ebx_2884,ecx_2851,edi_2893,edx_2880,esi_2872,esp_2842,fs_2852,None_2845,qwLoc28_28,r11_2896,r12_2897,r12d_2846,r13_2898,r13b_2839,r13d_2847,r14_2899,r14b_2838,r14d_2848,r15_2900,r15d_2854,r8_2894,r8d_2849,r9_2895,r9d_2841,rax_2965,rbp_2891,rbx_2889,rcx_2885,rdi_3027,rdx_2969,rsi_3026,rsp_2890,S_2850,SCZO_2971,sil_2871,SO_2840,SZO_2886,xmm0_2837,xmm1_2836,xmm2_2835,xmm3_2834,Z_2905
		defs: al_3051,ax_3050,bpl_3076,C_3040,cl_3061,CZ_3058,eax_3038,ebp_3063,ebx_3033,ecx_3045,edi_3034,edx_3047,esi_3041,esp_3064,fs_3037,None_3059,r11_3070,r12_3044,r12d_3057,r13_3056,r13b_3067,r13d_3055,r14_3054,r14b_3069,r14d_3053,r15_3062,r15d_3068,r8_3042,r8d_3052,r9_3060,r9d_3065,rax_3036,rbp_3031,rbx_3032,rcx_3046,rdi_3029,rdx_3048,rsi_3030,rsp_3028,S_3049,SCZO_3035,sil_3075,SO_3066,SZO_3039,xmm0_3071,xmm1_3072,xmm2_3073,xmm3_3074,Z_3043
	rax_2965 = Mem2903[0x000000000061AF78:word64]
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004036A1:
	Mem3022[rax_2965:word64] = Mem2903[0x000000000061B018:word64]
	Mem3024[0x000000000061AF78:word64] = Mem3022[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004036B3:
	word64 rsp_2913
	word64 rdi_2914
	word64 rsi_2915
	word64 rbp_2916
	word64 rbx_2917
	word32 ebx_2918
	word32 edi_2919
	byte SCZO_2920
	word64 rax_2921
	selector fs_2922
	word32 eax_2923
	byte SZO_2924
	byte C_2925
	word32 esi_2926
	word64 r8_2927
	byte Z_2928
	word32 ecx_2930
	word64 rcx_2931
	word32 edx_2932
	word64 rdx_2933
	byte S_2934
	word16 ax_2935
	byte al_2936
	word32 r8d_2937
	word32 r14d_2938
	word64 r14_2939
	word32 r13d_2940
	word64 r13_2941
	word32 r12d_2942
	byte CZ_2943
	bcuiposr0 None_2944
	word64 r9_2945
	byte cl_2946
	word64 r15_2947
	word32 ebp_2948
	word32 esp_2949
	word32 r9d_2950
	byte SO_2951
	byte r13b_2952
	word32 r15d_2953
	byte r14b_2954
	word64 r11_2955
	word128 xmm0_2956
	word128 xmm1_2957
	word128 xmm2_2958
	word128 xmm3_2959
	byte sil_2960
	byte bpl_2961
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_2875,ax_2868,bpl_2833,C_2887,cl_2844,CZ_2865,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_2867,ebp_2843,ebx_2884,ecx_2851,edi_2893,edx_2880,esi_2911,esp_2842,fs_2852,None_2845,qwLoc28_28,r11_2896,r12_2897,r12d_2846,r13_2898,r13b_2839,r13d_2847,r14_2899,r14b_2838,r14d_2848,r15_2900,r15d_2854,r8_2894,r8d_2849,r9_2895,r9d_2841,rax_2901,rbp_2891,rbx_2889,rcx_2907,rdi_2912,rdx_2908,rsi_2909,rsp_2890,S_2850,SCZO_2904,sil_2910,SO_2840,SZO_2886,xmm0_2837,xmm1_2836,xmm2_2835,xmm3_2834,Z_2905
		defs: al_2936,ax_2935,bpl_2961,C_2925,cl_2946,CZ_2943,eax_2923,ebp_2948,ebx_2918,ecx_2930,edi_2919,edx_2932,esi_2926,esp_2949,fs_2922,None_2944,r11_2955,r12_2929,r12d_2942,r13_2941,r13b_2952,r13d_2940,r14_2939,r14b_2954,r14d_2938,r15_2947,r15d_2953,r8_2927,r8d_2937,r9_2945,r9d_2950,rax_2921,rbp_2916,rbx_2917,rcx_2931,rdi_2914,rdx_2933,rsi_2915,rsp_2913,S_2934,SCZO_2920,sil_2960,SO_2951,SZO_2924,xmm0_2956,xmm1_2957,xmm2_2958,xmm3_2959,Z_2928
	Mem2963[0x000000000061B018:word64] = Mem2903[0x000000000061B018:word64] + 0x0000000000000002
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r10:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004036D6:
	word64 rsp_1979 = fn0000000000404DD0()
	word32 eax_1981 = (word32) Mem1771[rsp_1979 + 0x000000000000002F:byte]
	Mem1986[rsp_1979 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem1987[rsp_1979 + 0x0000000000000010:word32] = eax_1981
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004036F0:
	Mem1991[r12_1135:word32] = 0x00000000
	word64 rsp_1994
	word64 rsi_1996
	word64 rbp_1997
	word64 rbx_1998
	word32 ebx_1999
	word32 edi_2000
	byte SCZO_2001
	word64 rax_2002
	selector fs_2003
	word32 eax_2004
	byte SZO_2005
	byte C_2006
	word32 esi_2007
	word64 r8_2008
	byte Z_2009
	word32 ecx_2011
	word64 rcx_2012
	word32 edx_2013
	word64 rdx_2014
	byte S_2015
	word16 ax_2016
	byte al_2017
	word32 r8d_2018
	word32 r14d_2019
	word64 r14_2020
	word32 r13d_2021
	word64 r13_2022
	word32 r12d_2023
	byte CZ_2024
	bcuiposr0 None_2025
	word64 r9_2026
	byte cl_2027
	word64 r15_2028
	word32 ebp_2029
	word32 esp_2030
	word32 r9d_2031
	byte SO_2032
	byte r13b_2033
	word32 r15d_2034
	byte r14b_2035
	word64 r11_2036
	word128 xmm0_2037
	word128 xmm1_2038
	word128 xmm2_2039
	word128 xmm3_2040
	byte sil_2041
	byte bpl_2042
	word64 rdi_1995
	call readdir (retsize: 8; depth: 8)
		uses: al_1985,ax_1984,bpl_1934,C_1978,cl_1944,CZ_1965,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_1981,ebp_1943,ebx_1956,ecx_1951,edi_1993,edx_1955,esi_1972,esp_1980,fs_1952,None_1945,qwLoc28_28,r11_1958,r12_1988,r12d_1946,r13_1989,r13b_1940,r13d_1947,r14_1963,r14b_1939,r14d_1948,r15_1964,r15d_1954,r8_1960,r8d_1949,r9_1957,r9d_1942,rax_1982,rbp_1959,rbx_1953,rcx_1973,rdi_1992,rdx_1974,rsi_1970,rsp_1979,S_1950,SCZO_1968,sil_1971,SO_1941,SZO_1977,xmm0_1938,xmm1_1937,xmm2_1936,xmm3_1935,Z_1969
		defs: al_2017,ax_2016,bpl_2042,C_2006,cl_2027,CZ_2024,eax_2004,ebp_2029,ebx_1999,ecx_2011,edi_2000,edx_2013,esi_2007,esp_2030,fs_2003,None_2025,r11_2036,r12_2010,r12d_2023,r13_2022,r13b_2033,r13d_2021,r14_2020,r14b_2035,r14d_2019,r15_2028,r15d_2034,r8_2008,r8d_2018,r9_2026,r9d_2031,rax_2002,rbp_1997,rbx_1998,rcx_2012,rdi_1995,rdx_2014,rsi_1996,rsp_1994,S_2015,SCZO_2001,sil_2041,SO_2032,SZO_2005,xmm0_2037,xmm1_2038,xmm2_2039,xmm3_2040,Z_2009
	branch rax_2002 == 0x0000000000000000 l0000000000403CC0
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403CC0:
	word64 rdx_2220 = (uint64) Mem1991[r12_1135:word32]
	word32 edx_2221 = (word32) rdx_2220
	branch edx_2221 == 0x00000000 l0000000000403CF3
// DataOut: eax fs r11 r14 r15 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403CC8:
	dcgettext(0x0000000000000000, 0x00000000004139B1, 0x0000000000000005)
	word64 rsp_2762
	word64 rbp_2763
	word64 rsi_2764
	word64 rdi_2765
	word64 r8_2766
	word64 r9_2767
	word64 r11_2768
	word64 r13_2770
	word64 r14_2771
	word64 r15_2772
	fn0000000000405810(r14_2020, (word32) (uint64) Mem1991[rsp_1994 + 0x0000000000000010:word32], r11_2036, fs_2003, out rsp_2762, out rbp_2763, out rsi_2764, out rdi_2765, out r8_2766, out r9_2767, out r11_2768, out r12_1135, out r13_2770, out r14_2771, out r15_2772)
	branch Mem1991[r12_1135:word32] == 0x0000004B l0000000000403770
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403CF3:
	word64 rsp_2229
	word64 rdi_2230
	word64 rbp_2232
	word64 rbx_2233
	word32 ebx_2234
	word32 edi_2235
	byte SCZO_2236
	word64 rax_2237
	word32 eax_2239
	byte SZO_2240
	byte C_2241
	word32 esi_2242
	word64 r8_2243
	byte Z_2244
	word64 r12_2245
	word32 ecx_2246
	word64 rcx_2247
	word32 edx_2248
	word64 rdx_2249
	byte S_2250
	word16 ax_2251
	byte al_2252
	word32 r8d_2253
	word32 r14d_2254
	word64 r14_2255
	word32 r13d_2256
	word64 r13_2257
	word32 r12d_2258
	byte CZ_2259
	bcuiposr0 None_2260
	byte cl_2262
	word32 ebp_2264
	word32 esp_2265
	word32 r9d_2266
	byte SO_2267
	byte r13b_2268
	word32 r15d_2269
	byte r14b_2270
	byte sil_2276
	word64 r15_2263
	word64 rsi_2231
	selector fs_2238
	call closedir (retsize: 8; depth: 8)
		uses: al_2017,ax_2016,bpl_2048,C_2225,cl_2027,CZ_2024,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_2004,ebp_2047,ebx_1999,ecx_2011,edi_2000,edx_2221,esi_2007,esp_2030,fs_2003,None_2025,qwLoc28_28,r11_2036,r12_2010,r12d_2023,r13_2226,r13b_2033,r13d_2021,r14_2020,r14b_2035,r14d_2019,r15_2028,r15d_2034,r8_2008,r8d_2018,r9_2026,r9d_2031,rax_2002,rbp_2046,rbx_1998,rcx_2012,rdi_2228,rdx_2220,rsi_1996,rsp_1994,S_2015,SCZO_2001,sil_2041,SO_2032,SZO_2223,xmm0_2037,xmm1_2038,xmm2_2039,xmm3_2040,Z_2224
		defs: al_2252,ax_2251,bpl_2277,C_2241,cl_2262,CZ_2259,eax_2239,ebp_2264,ebx_2234,ecx_2246,edi_2235,edx_2248,esi_2242,esp_2265,fs_2238,None_2260,r11_2271,r12_2245,r12d_2258,r13_2257,r13b_2268,r13d_2256,r14_2255,r14b_2270,r14d_2254,r15_2263,r15d_2269,r8_2243,r8d_2253,r9_2261,r9d_2266,rax_2237,rbp_2232,rbx_2233,rcx_2247,rdi_2230,rdx_2249,rsi_2231,rsp_2229,S_2250,SCZO_2236,sil_2276,SO_2267,SZO_2240,xmm0_2272,xmm1_2273,xmm2_2274,xmm3_2275,Z_2244
	branch eax_2239 != 0x00000000 l0000000000403EBC
// DataOut: fs r11 r14 r15 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403EBC:
	dcgettext(0x0000000000000000, 0x00000000004139C6, 0x0000000000000005)
	word64 rsp_2738
	word64 rbp_2739
	word64 rdi_2741
	word64 r8_2742
	word64 r12_2745
	word64 r13_2746
	word64 r14_2747
	fn0000000000405810(r14_2255, (word32) Mem1991[rsp_2229 + 0x000000000000002F:byte], r11_1035, fs_2238, out rsp_2738, out rbp_2739, out rsi_2231, out rdi_2741, out r8_2742, out r9_1034, out r11_1035, out r12_2745, out r13_2746, out r14_2747, out r15_2263)
// DataOut: fs r11 r15 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D03:
	word64 rsi_2295
	word64 r12_2297
	word64 r14_2299
	word64 rbp_2294
	rsp_1640 = fn0000000000404E80(rsi_2231, r11_1035, r15_2263, out rbp_2294, out rsi_2295, out r8_1037, out r12_2297, out r13_1681, out r14_2299, out r15_1041)
	branch Mem1991[0x000000000061B10E:byte] != 0x00 l0000000000403EAA
// DataOut: bpl fs r11 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403EAA:
	word64 rsi_2721
	rsp_1640 = fn0000000000405090((byte) (word32) Mem1991[rsp_1640 + 0x000000000000002F:byte], r14_2299, r11_1035, out rbp_2294, out rsi_2721, out r13_1681, out r15_1041)
// DataOut: bpl fs r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D15:
	word64 rax_2314 = (uint64) Mem1991[0x000000000061B150:word32]
	word32 eax_2315 = (word32) rax_2314
	branch eax_2315 == 0x00000000 l0000000000403D2C
// DataOut: bpl fs r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D1F:
	branch Mem1991[0x000000000061B144:byte] == 0x00 l0000000000403E00
// DataOut: bpl fs r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D2C:
	branch Mem1991[0x000000000061B130:byte] != 0x00 l0000000000403F8D
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403F8D:
	word64 rdi_2663
	word64 rsi_2664
	word64 rbx_2666
	word32 ebx_2667
	word32 edi_2668
	byte SCZO_2669
	word64 rax_2670
	word32 eax_2672
	byte SZO_2673
	byte C_2674
	word32 esi_2675
	word64 r8_2676
	byte Z_2677
	word64 r12_2678
	word32 ecx_2679
	word64 rcx_2680
	word32 edx_2681
	word64 rdx_2682
	byte S_2683
	word16 ax_2684
	byte al_2685
	word32 r8d_2686
	word32 r14d_2687
	word64 r14_2688
	word32 r13d_2689
	word64 r13_2690
	word32 r12d_2691
	byte CZ_2692
	bcuiposr0 None_2693
	word64 r9_2694
	byte cl_2695
	word64 r15_2696
	word32 ebp_2697
	word32 esp_2698
	word32 r9d_2699
	byte SO_2700
	byte r13b_2701
	word32 r15d_2702
	byte r14b_2703
	word64 r11_2704
	byte sil_2709
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_2252,ax_2251,bpl_2277,C_2318,cl_2262,CZ_2259,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_2315,ebp_2264,ebx_2234,ecx_2246,edi_2284,edx_2248,esi_2312,esp_2305,fs_2238,None_2260,qwLoc28_28,r11_2282,r12_2297,r12d_2258,r13_2307,r13b_2268,r13d_2256,r14_2299,r14b_2270,r14d_2254,r15_2308,r15d_2269,r8_2296,r8d_2253,r9_2281,r9d_2266,rax_2314,rbp_2306,rbx_2233,rcx_2658,rdi_2661,rdx_2659,rsi_2660,rsp_2309,S_2250,SCZO_2371,sil_2311,SO_2267,SZO_2316,xmm0_2272,xmm1_2273,xmm2_2274,xmm3_2275,Z_2372
		defs: al_2685,ax_2684,bpl_2710,C_2674,cl_2695,CZ_2692,eax_2672,ebp_2697,ebx_2667,ecx_2679,edi_2668,edx_2681,esi_2675,esp_2698,fs_2671,None_2693,r11_2704,r12_2678,r12d_2691,r13_2690,r13b_2701,r13d_2689,r14_2688,r14b_2703,r14d_2687,r15_2696,r15d_2702,r8_2676,r8d_2686,r9_2694,r9d_2699,rax_2670,rbp_2665,rbx_2666,rcx_2680,rdi_2663,rdx_2682,rsi_2664,rsp_2662,S_2683,SCZO_2669,sil_2709,SO_2700,SZO_2673,xmm0_2705,xmm1_2706,xmm2_2707,xmm3_2708,Z_2677
	Mem2712[0x000000000061B018:word64] = Mem1991[0x000000000061B018:word64] + 0x0000000000000002
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D39:
	word64 rax_2414 = dcgettext(0x0000000000000000, 0x00000000004139DB, 0x0000000000000005)
	fputs_unlocked(rax_2414, Mem1991[0x000000000061A610:word64])
	word64 rax_2421 = DPB(rax_2414, strlen(rax_2414), 0)
	word64 rdi_2422 = Mem1991[0x000000000061A610:word64]
	Mem2425[0x000000000061B018:word64] = Mem1991[0x000000000061B018:word64] + rax_2421
	word64 rax_2426 = Mem2425[rdi_2422 + 0x0000000000000028:word64]
	branch rax_2426 >=u Mem2425[rdi_2422 + 0x0000000000000030:word64] l00000000004044EB
// DataOut: fs rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044EB:
	word64 rdi_2610
	word64 rsi_2611
	word64 rbx_2613
	word32 ebx_2614
	word32 edi_2615
	byte SCZO_2616
	word64 rax_2617
	word32 eax_2619
	byte SZO_2620
	byte C_2621
	word32 esi_2622
	word64 r8_2623
	byte Z_2624
	word64 r12_2625
	word32 ecx_2626
	word64 rcx_2627
	word32 edx_2628
	word64 rdx_2629
	byte S_2630
	word16 ax_2631
	byte al_2632
	word32 r8d_2633
	word32 r14d_2634
	word64 r14_2635
	word32 r13d_2636
	word64 r13_2637
	word32 r12d_2638
	byte CZ_2639
	bcuiposr0 None_2640
	word64 r9_2641
	byte cl_2642
	word64 r15_2643
	word32 ebp_2644
	word32 esp_2645
	word32 r9d_2646
	byte SO_2647
	byte r13b_2648
	word32 r15d_2649
	byte r14b_2650
	word64 r11_2651
	byte sil_2656
	call __overflow (retsize: 8; depth: 8)
		uses: al_2430,ax_2429,bpl_2373,C_2432,cl_2384,CZ_2405,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_2428,ebp_2383,ebx_2395,ecx_2391,edi_2423,edx_2394,esi_2408,esp_2382,fs_2392,None_2385,qwLoc28_28,r11_2397,r12_2400,r12d_2386,r13_2401,r13b_2379,r13d_2387,r14_2402,r14b_2378,r14d_2388,r15_2403,r15d_2393,r8_2399,r8d_2389,r9_2396,r9d_2381,rax_2426,rbp_2398,rbx_2416,rcx_2409,rdi_2422,rdx_2411,rsi_2608,rsp_2404,S_2390,SCZO_2431,sil_2407,SO_2380,SZO_2410,xmm0_2377,xmm1_2376,xmm2_2375,xmm3_2374,Z_2406
		defs: al_2632,ax_2631,bpl_2657,C_2621,cl_2642,CZ_2639,eax_2619,ebp_2644,ebx_2614,ecx_2626,edi_2615,edx_2628,esi_2622,esp_2645,fs_2618,None_2640,r11_2651,r12_2625,r12d_2638,r13_2637,r13b_2648,r13d_2636,r14_2635,r14b_2650,r14d_2634,r15_2643,r15d_2649,r8_2623,r8d_2633,r9_2641,r9d_2646,rax_2617,rbp_2612,rbx_2613,rcx_2627,rdi_2610,rdx_2629,rsi_2611,rsp_2609,S_2630,SCZO_2616,sil_2656,SO_2647,SZO_2620,xmm0_2652,xmm1_2653,xmm2_2654,xmm3_2655,Z_2624
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D80:
	Mem2606[rdi_2422 + 0x0000000000000028:word64] = rax_2426 + 0x0000000000000001
	Mem2607[rax_2426:byte] = 0x20
// DataOut: fs rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403D8B:
	word64 rdx_2462 = (uint64) Mem2425[0x000000000061B140:word32]
	word64 r8_2460 = Mem2425[0x000000000061B138:word64]
	word64 rdi_2465 = Mem2425[rsp_1640 + 0x0000000000000008:word64]
	Mem2468[0x000000000061B018:word64] = Mem2425[0x000000000061B018:word64] + 0x0000000000000001
	word32 edx_2463 = (word32) rdx_2462
	word64 rbp_2471
	word32 r14d_2476
	word64 rax_2478 = fn000000000040BD70(0x0000000000000200, edx_2463, rbp_2294, rsp_1640 + 0x00000000000000E0, rdi_2465, r8_2460, fs_2238, out rsp_1640, out rbp_2471, out r8_1037, out r9_1034, out r11_1035, out r13_1681, out r14d_2476, out r15_1041)
	fputs_unlocked(rax_2478, Mem2468[0x000000000061A610:word64])
	word64 rax_2487 = DPB(rax_2478, strlen(rax_2478), 0)
	word64 rdi_2488 = Mem2468[0x000000000061A610:word64]
	Mem2491[0x000000000061B018:word64] = Mem2468[0x000000000061B018:word64] + rax_2487
	word64 rax_2492 = Mem2491[rdi_2488 + 0x0000000000000028:word64]
	branch rax_2492 >=u Mem2491[rdi_2488 + 0x0000000000000030:word64] l00000000004044DC
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004044DC:
	word64 rdi_2557
	word64 rsi_2558
	word64 rbp_2559
	word64 rbx_2560
	word32 ebx_2561
	word32 edi_2562
	byte SCZO_2563
	word64 rax_2564
	selector fs_2565
	word32 eax_2566
	byte SZO_2567
	byte C_2568
	word32 esi_2569
	byte Z_2571
	word64 r12_2572
	word32 ecx_2573
	word64 rcx_2574
	word32 edx_2575
	word64 rdx_2576
	byte S_2577
	word16 ax_2578
	byte al_2579
	word32 r8d_2580
	word32 r14d_2581
	word64 r14_2582
	word32 r13d_2583
	word32 r12d_2585
	byte CZ_2586
	bcuiposr0 None_2587
	byte cl_2589
	word32 ebp_2591
	word32 esp_2592
	word32 r9d_2593
	byte SO_2594
	byte r13b_2595
	word32 r15d_2596
	byte r14b_2597
	byte sil_2603
	call __overflow (retsize: 8; depth: 8)
		uses: al_2496,ax_2495,bpl_2433,C_2498,cl_2444,CZ_2457,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_15,dwLoc18_19,eax_2494,ebp_2443,ebx_2452,ecx_2449,edi_2489,edx_2463,esi_2555,esp_2442,fs_2450,None_2445,qwLoc28_28,r11_2474,r12_2454,r12d_2446,r13_2475,r13b_2439,r13d_2447,r14_2455,r14b_2438,r14d_2476,r15_2477,r15d_2451,r8_2472,r8d_2461,r9_2473,r9d_2441,rax_2492,rbp_2471,rbx_2482,rcx_2466,rdi_2488,rdx_2462,rsi_2553,rsp_2470,S_2448,SCZO_2497,sil_2554,SO_2440,SZO_2459,xmm0_2437,xmm1_2436,xmm2_2435,xmm3_2434,Z_2458
		defs: al_2579,ax_2578,bpl_2604,C_2568,cl_2589,CZ_2586,eax_2566,ebp_2591,ebx_2561,ecx_2573,edi_2562,edx_2575,esi_2569,esp_2592,fs_2565,None_2587,r11_2598,r12_2572,r12d_2585,r13_2584,r13b_2595,r13d_2583,r14_2582,r14b_2597,r14d_2581,r15_2590,r15d_2596,r8_2570,r8d_2580,r9_2588,r9d_2593,rax_2564,rbp_2559,rbx_2560,rcx_2574,rdi_2557,rdx_2576,rsi_2558,rsp_2556,S_2577,SCZO_2563,sil_2603,SO_2594,SZO_2567,xmm0_2599,xmm1_2600,xmm2_2601,xmm3_2602,Z_2571
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403DED:
	Mem2551[rdi_2488 + 0x0000000000000028:word64] = rax_2492 + 0x0000000000000001
	Mem2552[rax_2492:byte] = 0x0A
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403DF8:
	Mem2548[0x000000000061B018:word64] = Mem2491[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E00:
	branch Mem1991[0x000000000061B1B0:word64] == 0x0000000000000000 l00000000004034A1
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E0E:
	fn00000000004079F0(out rsp_1640)
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034A1:
	word64 rbx_1877 = Mem1771[rsp_1640 + 0x0000000000000018:word64]
	free(Mem1771[rbx_1877:word64])
	free(Mem1771[rbx_1877 + 0x0000000000000008:word64])
	free(rbx_1877)
	Mem1881[0x000000000061B0D0:byte] = 0x01
// DataOut: bpl fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004034C6:
	Mem1757[rsp_1640 + 0x0000000000000018:word64] = Mem1706[0x000000000061B190:word64]
// DataOut: bpl eax fs r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040370C:
	word32 eax_2083 = (word32) (uint64) Mem1991[0x000000000061B108:word32]
	branch eax_2083 == 0x00000002 l0000000000403C78
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040371F:
	branch Mem1991[rax_2002 + 0x0000000000000013:byte] == 0x2E l0000000000403C58
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C58:
	branch eax_2083 == 0x00000000 l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C60:
	branch Mem1991[rax_2002 + 0x0000000000000014 + (uint64) (Mem1991[rax_2002 + 0x0000000000000014:byte] == 0x2E):byte] == 0x00 l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C74:
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:Test(EQ,Z) dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403729:
	branch eax_2083 != 0x00000000 l0000000000403C78
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403731:
	word64 r15_2189 = Mem1991[0x000000000061B0F8:word64]
	branch r15_2189 != 0x0000000000000000 l0000000000403755
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403755:
	rdi_1995 = Mem1991[rdi_1995:word64]
	branch fnmatch(rdi_1995, rax_2002 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403748
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403748:
	r15_2189 = Mem1991[r15_2189 + 0x0000000000000008:word64]
	branch r15_2189 == 0x0000000000000000 l0000000000403C78
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:0x0004 r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403769:
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:0x0004 r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040373D:
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C78:
	word64 r15_2096 = Mem1991[0x000000000061B100:word64]
	branch r15_2096 != 0x0000000000000000 l0000000000403C9D
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C9D:
	rdi_1995 = Mem1991[rdi_1995:word64]
	branch fnmatch(rdi_1995, rax_2002 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403C90
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C90:
	r15_2096 = Mem1991[r15_2096 + 0x0000000000000008:word64]
	branch r15_2096 == 0x0000000000000000 l0000000000403E20
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:0x0004 r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403CB1:
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:0x0004 r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403C84:
// DataOut: fs r11 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E20:
	word64 rax_2113 = (uint64) ((word32) Mem1991[rax_2002 + 0x0000000000000012:byte] - 0x00000001)
	word64 rsi_2110 = 0x0000000000000000
	byte al_2117 = (byte) rax_2113
	branch al_2117 >u 0x0D l0000000000403E37
// DataOut: al esi fs r11 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E2D:
	rsi_2110 = (uint64) Mem1991[DPB(rax_2113, (word32) al_2117, 0) * 0x0000000000000004 + 0x00412C00:word32]
// DataOut: esi fs r11 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E37:
	word32 ebx_2130
	word64 rsp_2131
	word64 rbp_2132
	word64 rsi_2133
	word64 r8_2134
	word64 r9_2135
	word64 r11_2136
	word64 r13_2138
	word64 r14_2139
	word64 r15_2140
	word64 rax_2141 = fn0000000000407EA0(r14_2020, 0x00000000, rax_2002, rsi_2110, rax_2002 + 0x0000000000000013, r8_2008, r11_2036, r14_2020, r15_2096, fs_2003, out ebx_2130, out rsp_2131, out rbp_2132, out rsi_2133, out r8_2134, out r9_2135, out r11_2136, out r12_1135, out r13_2138, out r14_2139, out r15_2140)
	Mem2143[rsp_2131 + 0x0000000000000008:word64] = Mem1991[rsp_2131 + 0x0000000000000008:word64] + rax_2141
	branch Mem2143[0x000000000061B150:word32] != 0x00000001 l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> r14d:<invalid> r14b:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> r10:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E56:
	branch Mem2143[0x000000000061B148:word32] != 0xFFFFFFFF l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14b:<invalid> ebx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E63:
	branch Mem2143[0x000000000061B144:byte] != 0x00 l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14b:<invalid> ebx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E70:
	branch Mem2143[0x000000000061B10E:byte] != 0x00 l0000000000403770
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14b:<invalid> ebx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403E7D:
	word64 rbp_2152
	word64 rsi_2153
	word64 r8_2154
	word64 r13_2156
	word64 r14_2157
	word64 r15_2158
	fn0000000000404E80(rsi_2133, r11_2136, r15_2140, out rbp_2152, out rsi_2153, out r8_2154, out r12_1135, out r13_2156, out r14_2157, out r15_2158)
	word64 rsp_2160
	fn00000000004079F0(out rsp_2160)
	fn0000000000404DD0()
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r14b:<invalid> ebx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403770:
	word64 rsp_2072
	word64 rsi_2073
	fn0000000000406490(out rsp_2072, out rsi_2073)
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r14b:<invalid> ebx:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402B5A:
	branch (word32) (uint64) (eax_475 + 0x00000083) >u 0x00000112 l00000000004031F9
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004031F9:
	fn0000000000409750(0x00000002)
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> bpl:0x06 r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000403203:
	Mem256[0x000000000061B150:word32] = 0x00000002
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> r8:0x0000000000000000 rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000402B6A:
	return
// DataOut: r11 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn00000000004028C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> sil:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402DFF:
	word64 rsi_620
	word32 eax_612 = (word32) (uint64) Mem464[0x000000000061A56C:word32]
	branch eax_612 == 0x00000001 l0000000000403BF3
// DataOut: eax r11 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000403BF3:
	rsi_620 = 0x0000000000413807
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402E15:
	rsi_620 = 0x000000000041380F
	branch eax_612 == 0x00000002 l0000000000402E26
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402E22_1:
	rsi_620 = 0x000000000041380E
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x000000000041380E rsi:0x000000000041380F r8:<invalid> r12:<invalid> rdx:<invalid> eax:0x0041380E r14:<invalid> r13:<invalid> rcx:<invalid> ax:0x380E r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:0x0041380F ecx:<invalid> sil:0x0F cl:<invalid> al:0x0E r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402E26:
	word64 rdi_623 = Mem464[0x000000000061A610:word64]
	Mem624[rsp_238:word64] = 0x0000000000000000
	fn0000000000410B30(0x00, 0x00000000004137FC, rsi_620, rdi_623, r11_1035)
	exit(0x0000000000000000)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402985:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> r12:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> r10:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> -896(fp):fp - 0x0000000000000360 -872(fp):0xFFFFFFFF -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000404890(word64 rdx, word64 qwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdx
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(64)
// Terminates process
fn0000000000404890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000404890_entry:
// DataOut: rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404890:
	__align(fp + 0x0000000000000008)
	__libc_start_main(0x00000000004028C0, qwArg00, fp + 0x0000000000000008, 0x0000000000411E60, 0x0000000000411ED0, rdx, DPB(qwArg00, fp + 0x0000000000000004, 0))
	__hlt()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004048C0(word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi esp r8 r8b r8d r8w rax rdi rsp sp spl
// Preserved: rbp
fn00000000004048C0_entry:
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048C0:
	branch false l00000000004048D7
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048D7:
	branch 0x0000000000000000 == 0x0000000000000000 l00000000004048D5
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:0x000000000061A5FF r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004048E1:
	word64 rsp_43
	word32 eax_44
	word64 rax_45
	word64 rbp_46
	word64 r8_47
	byte SCZO_48
	byte CZ_49
	byte SZO_50
	byte C_51
	byte Z_52
	word32 edi_53
	word64 rdi_54
	call eax (retsize: 4;)
		uses: C_39,CZ_9,dwLoc04_5,eax,edi,qwLoc04,r8_7,rax_36,rbp_40,rdi_42,rsp_41,SCZO_8,SZO_37,Z_38
		defs: C_51,CZ_49,eax_44,edi_53,r8_47,rax_45,rbp_46,rdi_54,rsp_43,SCZO_48,SZO_50,Z_52
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:0x0000000000000000 r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

l00000000004048D5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:<invalid> r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

fn00000000004048C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rax:<invalid> r8:<invalid> rbp:rbp rdi:<invalid> -4(fp):rbp



void fn00000000004049E0(word64 rcx, byte dl, word64 r13, word64 r14, word64 r15, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r13 r14 r15 rcx
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx eax ebp ecx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64)
fn00000000004049E0_entry:
// DataOut: dl r13 r14 r15 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l00000000004049E0:
	word64 r8_103 = Mem0[r14:word64]
	word64 rax_106 = 0x0000000000000000
	word32 eax_211 = 0x00000000
	word64 r9_105 = Mem0[r15:word64]
	word64 r10_104 = 0x0000000000000000
	word64 r11_117 = 0x0000000000000000
	word32 r11d_118 = 0x00000000
	byte r11b_119 = 0x00
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A06:
	byte al_267
	byte SZO_161
	byte al_100
	word32 eax_145
	branch eax_211 == 0x00000002 l0000000000404A59
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A59:
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000030) <=u 0x07 l0000000000404A50
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A50:
	r11d_118 = rax_106 - 0x0000000000000030 + r11_117 * 0x0000000000000008
	r11_117 = DPB(r11_117, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
	r8_103 = r8_103 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A0B:
	branch eax_211 <=u 0x00000002 l0000000000404B20
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B20:
	branch eax_211 != 0x00000001 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A11:
	branch eax_211 == 0x00000003 l0000000000404AE0
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AE0:
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	byte cl_383 = (byte) (rax_106 - 0x0000000000000030)
	branch cl_383 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AF0:
	r14 = 0x0000000000000001 << cl_383
	word32 r14d_400 = (word32) r14
	branch (r14d_400 & 0x007E0000) != 0x00000000 l0000000000404B78
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B78:
	word64 r11_423 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000037 + r11_423
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_423, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	cl_383 = (byte) (rax_106 - 0x0000000000000030) (alias)
	branch cl_383 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B95:
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AFF:
	branch (r14 & 0x0000000000000000) != 0x0000000000000000 l0000000000404AD0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AD0:
	word64 r11_416 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000057 + r11_416
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_416, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B04:
	branch (r14d_400 & 0x000003FF) == 0x00000000 l0000000000404A65
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A65:
	Mem350[r9_105:byte] = r11b_119
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B11:
	word64 r11_410 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000030 + r11_410
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_410, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A1A:
	branch eax_211 != 0x00000004 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A22:
	eax_145 = (word32) Mem0[rax_106:byte]
	rax_106 = DPB(rax_106, eax_145, 0) (alias)
	al_267 = (byte) eax_145 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000040) <=u 0x3E l0000000000404AA0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A2E:
	branch al_267 == 0x3F l0000000000404CB0
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CB0:
	Mem329[rcx:byte] = 0x7F
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A70:
	word32 eax_298 = (word32) Mem0[rax_106:byte]
	al_100 = (byte) eax_298 (alias)
	rax_106 = DPB(rax_106, eax_298, 0) (alias)
	SZO_161 = cond(al_100 - 0x3D) (alias)
	branch al_100 == 0x3D l0000000000404ABA
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A78:
	branch SZO_161 l0000000000404B40
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B40:
	branch al_100 == 0x00 l0000000000404B48
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B44:
	branch al_100 != 0x3A l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B48:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A7E:
	branch al_100 == 0x5C l0000000000404CA0
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CA0:
	r8_103 = r8_103 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B29:
	word32 eax_200 = (word32) Mem0[rax_106:byte]
	byte al_202 = (byte) eax_200
	branch al_202 >u 0x78 l0000000000404C90
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404C90:
	r11_117 = (uint64) eax_200
	r11d_118 = (word32) r11_117 (alias)
	r11b_119 = (byte) r11_117 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BD0:
	Mem231[r9_105:byte] = r11b_119
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
	rax_106 = 0x0000000000000000
	eax_211 = 0x00000000 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B35:
	rcx = DPB(rcx, (word32) al_202, 0) (alias)
	switch (rcx) { l0000000000404BF0 }
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BF0:
	rax_106 = 0x0000000000000006
	eax_211 = 0x00000006 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:(word32) al r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BB0:
	r8_103 = r8_103 + 0x0000000000000001
	branch eax_211 <=u 0x00000004 l0000000000404A06
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BBD:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B4D:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A86:
	branch al_100 != 0x5E l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A8E:
	eax_145 = (word32) Mem0[rax_106:byte]
	rax_106 = DPB(rax_106, eax_145, 0) (alias)
	r8_103 = r8_103 + 0x0000000000000001
	al_267 = (byte) eax_145 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000040) >u 0x3E l0000000000404A2E
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A9E:
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AA0:
	word64 rax_149 = (uint64) (eax_145 & 0x0000001F)
	Mem154[rcx:byte] = (byte) rax_149
	word32 eax_155 = (word32) Mem154[rax_149:byte]
	al_100 = (byte) eax_155 (alias)
	r8_103 = r8_103 + 0x0000000000000001
	r10_104 = r10_104 + 0x0000000000000001
	rax_106 = DPB(rax_149, eax_155, 0) (alias)
	r9_105 = r9_105 + 0x0000000000000001
	SZO_161 = cond(al_100 - 0x3D) (alias)
	branch al_100 != 0x3D l0000000000404A78
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404ABA:
	branch dl == 0x00 l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B60:
	Mem109[rcx:byte] = al_100
	r8_103 = r8_103 + 0x0000000000000001
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AC2:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A36:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A38:
	Mem76[r15:word64] = r9_105
	Mem77[r14:word64] = r8_103
	Mem78[r13:word64] = r10_104
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi

fn00000000004049E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:SLICE(rsi, word64, 32) + 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:fp - 0x0000000000000004 rbx:rbx eax:<invalid> ecx:<invalid> rsi:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi



word32 fn0000000000404CD0(word32 edi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000404CD0_entry:
// DataOut: ebx edi fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CD0:
	word64 rdi_3 = (uint64) edi
	word32 eax_33 = 0x00000000
	word64 rdx_9 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E0:word64]
	word64 rsi_10 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E8:word64]
	*rsiOut = rsi_10
	branch rdx_9 == 0x0000000000000000 l0000000000404CFC
// DataOut: al eax ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CEB:
	branch rdx_9 == 0x0000000000000001 l0000000000404D10
// DataOut: ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D10:
	return (word32) (Mem0[rsi_10:byte] != 0x30)
// DataOut: al eax ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404CF1:
	byte Z_42 = cond(rdx_9 - 0x0000000000000002)
	eax_33 = 0x00000001 (alias)
	branch rdx_9 == 0x0000000000000002 l0000000000404D00
// DataOut: al eax ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D00:
	word64 rdi_46 = 0x0000000000413733
	word64 rcx_48 = 0x0000000000000002
// DataOut: ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000001 rdx:<invalid> rsi:<invalid>

l0000000000404D0A:
	branch rcx_48 == 0x0000000000000000 l0000000000404D0C
// DataOut: ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0A_1:
	Z_42 = cond(Mem0[rsi_85:byte] - Mem0[rdi_86:byte]) (alias)
	*rsiOut = rsi_85 + 0x0000000000000001
	rdi_46 = rdi_86 + 0x0000000000000001
	rcx_48 = rcx_48 - 0x0000000000000001
	word64 rsi_85 = rsi_10
	word64 rdi_86 = rdi_46
	branch Mem0[rsi_85:byte] != Mem0[rdi_86:byte] l0000000000404D0A
// DataOut: ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0C:
	return DPB(0x00000001, Z_42, 0)
// DataOut: al eax ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404CFC:
	return eax_33
// DataOut: al eax ebx fs r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

fn0000000000404CD0_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:Test(NE,Z) rcx:<invalid>



word64 fn0000000000404D20(word32 edx, word64 rsi, word64 rdi, word64 r11, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx r11 rdi rsi
// LiveOut: bpl r12 r13 r13d rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404D20_entry:
	*rsiOut = rsi
// DataOut: dl edx fs r11 r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D20:
	word64 r13_6 = (uint64) edx
	*r13Out = r13_6
	byte r13b_8 = (byte) r13_6
	word64 r12_13
	*r12Out = rsi
	word64 rbp_17 = rdi
	word64 rsp_24
	word64 rax_25 = fn0000000000410C40(rsi, 0x0000000000000020, out rsp_24)
	word64 rax_27 = 0x0000000000000000
	branch rsi == 0x0000000000000000 l0000000000404D4F
// DataOut: fs r11 r12 r13 r13b r13d r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404D47:
	word64 rsi_78
	word64 rdi_79
	rax_27 = fn0000000000410E30(rsi, out rsp_24, out rbp_17, out rsi_78, out rdi_79)
// DataOut: fs r11 r12 r13 r13b r13d r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D4F:
	Mem37[rax_25 + 0x0000000000000008:word64] = rax_27
	word64 rax_38 = 0x0000000000000000
	branch rbp_17 == 0x0000000000000000 l0000000000404D62
// DataOut: fs r11 r12 r13 r13b r13d r14d r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D5A:
	word64 rbp_70
	word64 rsi_71
	word64 rdi_72
	rax_38 = fn0000000000410E30(rbp_17, out rsp_24, out rbp_70, out rsi_71, out rdi_72)
// DataOut: fs r11 r12 r13 r13b r13d r14d r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D62:
	Mem48[rax_25:word64] = rax_38
	word64 rax_49 = Mem48[0x000000000061B190:word64]
	Mem50[r11 + 0x0000000000000010:byte] = r13b_8
	Mem52[0x000000000061B190:word64] = rax_25
	Mem53[rax_25 + 0x0000000000000018:word64] = rax_49
	word64 rsp_60 = Mem53[rsp_24 + 0x0000000000000018:word64]
	word64 rbp_62
	*rbpOut = Mem53[rsp_60 + 0x0000000000000008:word64]
	return rsp_60 + 0x0000000000000010
// DataOut: bpl fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn0000000000404D20_exit:
// DataOut: bpl r12 r13 r13d rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn0000000000404D90(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO di dil edi esp rdi rsp sp spl
// Preserved: rbx
fn0000000000404D90_entry:
// DataOut: fs r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D90:
	free(Mem0[rdi:word64])
	free(Mem0[rdi + 0x0000000000000008:word64])
	word64 rdi_10 = Mem0[rdi + 0x00000000000000A8:word64]
	branch rdi_10 == 0x000000000061A56A l0000000000404DC0
// DataOut: fs r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DC0:
	return fp + 0x0000000000000004
// DataOut: fs r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

l0000000000404DB5:
	word64 rsp_21
	word64 rbx_22
	word64 rdi_23
	byte SCZO_24
	byte Z_25
	call freecon (retsize: 8;)
		uses: dwLoc04_4,qwLoc04,rbx_19,rdi_10,rsp_20,SCZO_11,Z_12
		defs: rbx_22,rdi_23,rsp_21,SCZO_24,Z_25
	return rsp_21
// DataOut: fs r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

fn0000000000404D90_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> -4(fp):rbx



word64 fn0000000000404DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bx di dil eax ebx edi esp rax rbx rdi rsp sp spl
// Preserved: rbx
fn0000000000404DD0_entry:
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DD0:
	word64 rsp_18 = fp - 0x0000000000000004
	word64 rbx_33 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000404DFD
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DDD:
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> -4(fp):rbx

l0000000000404DE0:
	rbx_33 = rbx_33 + 0x0000000000000001
	rsp_18 = fn0000000000404D90(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_33 * 0x0000000000000008:word64])
	branch Mem0[0x000000000061B1B0:word64] >u rbx_33 l0000000000404DE0
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx

l0000000000404DFD:
	Mem19[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem20[0x000000000061B17C:byte] = 0x00
	Mem21[0x000000000061B178:word32] = 0x00000000
	Mem22[0x000000000061B174:word32] = 0x00000000
	Mem23[0x000000000061B170:word32] = 0x00000000
	Mem24[0x000000000061B168:word32] = 0x00000000
	Mem25[0x000000000061B164:word32] = 0x00000000
	Mem26[0x000000000061B160:word32] = 0x00000000
	Mem27[0x000000000061B16C:word32] = 0x00000000
	Mem28[0x000000000061B15C:word32] = 0x00000000
	Mem29[0x000000000061B158:word32] = 0x00000000
	Mem30[0x000000000061B154:word32] = 0x00000000
	return rsp_18 + 0x0000000000000008
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx

fn0000000000404DD0_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx



word64 fn0000000000404E80(word64 rsi, word64 r11, word64 r15, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 rsi
// LiveOut: bpl r12 r13 r13d r14 r15 r8 rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404E80_entry:
	*r8Out = r8
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
	*rsiOut = rsi
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404E80:
	word64 rbx_10 = Mem0[0x000000000061B1B0:word64]
	word64 rsp_117 = fp - 0x0000000000000010
	word64 rbp_12 = rbx_10
	*rbpOut = rbp_12
	word64 rax_14 = (rbx_10 >>u 0x0000000000000001) + rbx_10
	branch rax_14 >u Mem0[0x000000000061B1A0:word64] l0000000000404F98
// DataOut: al bpl eax fs r11 r12 r13 r13d r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404F98:
	word64 rdi_264 = Mem0[0x000000000061B1A8:word64]
	free(rdi_264)
	word64 r8_266 = 0x00000000AAAAAAAA
	*r8Out = r8_266
	branch rbx_10 >u rax_14 l0000000000404FF8
// DataOut: bpl fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FF8:
	fn0000000000410E50()
	word64 rsi_282 = Mem0[rsi:word64]
	*rsiOut = rsi_282
	strcmp(Mem0[rdi_264:word64], rsi_282)
	return fp - 0x0000000000000010
// DataOut: bpl fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404FB3:
	word64 rax_274 = fn0000000000410C40(rsi, rbx_10 * 0x0000000000000018, out rsp_117)
	rbp_12 = Mem0[0x000000000061B1B0:word64]
	Mem276[0x000000000061B1A8:word64] = rax_274
	Mem281[0x000000000061B1A0:word64] = rbp_12 * 0x0000000000000003
// DataOut: al eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404EA6:
	branch rbp_12 == 0x0000000000000000 l0000000000404ED3
// DataOut: al eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EAB:
	word64 rax_245 = Mem0[0x000000000061B1A8:word64]
	word64 rdx_249 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_251 = rax_245 + rbp_12 * 0x0000000000000008
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EC0:
	Mem255[rax_245:word64] = rdx_249
	rax_245 = rax_245 + 0x0000000000000008
	rdx_249 = rdx_249 + 192
	branch rax_245 != rcx_251 l0000000000404EC0
// DataOut: al eax fs r11 r12 r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404ED3:
	branch Mem0[0x000000000061B148:word32] == 0xFFFFFFFF l0000000000404F8C
// DataOut: al eax fs r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404EE0:
	word64 rsi_167
	word32 ecx_160
	word64 rdi_155
	word64 rbp_126
	word64 rbx_127
	byte SCZO_128
	word64 rax_129
	byte CZ_130
	byte SZO_131
	byte C_132
	byte Z_133
	word64 rdx_134
	word64 rcx_135
	word32 edi_136
	word64 rdi_137
	word32 eax_138
	word32 r8d_139
	word64 rsi_141
	word32 ecx_142
	word32 edx_143
	word16 ax_144
	byte al_145
	word32 esi_146
	word64 r11_147
	word64 r15_148
	word64 r12_149
	word64 r13_150
	word64 r14_151
	word64 r8_140
	call _setjmp (retsize: 8; depth: 8)
		uses: al_79,ax_80,C_72,CZ_58,dwLoc04_4,dwLoc08_7,eax_82,ecx_78,edi_60,edx_81,esi,r11,r12,r13,r14,r15,r8_64,r8d_63,rax_83,rbp_68,rbx_10,rcx_77,rdi_124,rdx_84,rsi,rsp_69,SCZO_85,SZO_70,Z_86
		defs: al_145,ax_144,C_132,CZ_130,eax_138,ecx_142,edi_136,edx_143,esi_146,r11_147,r12_149,r13_150,r14_151,r15_148,r8_140,r8d_139,rax_129,rbp_126,rbx_127,rcx_135,rdi_137,rdx_134,rsi_141,rsp_125,SCZO_128,SZO_131,Z_133
	branch eax_138 == 0x00000000 l0000000000404F40
// DataOut: al fs r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404F40:
	ecx_160 = (word32) (uint64) Mem0[0x000000000061B148:word32] (alias)
	rsi_167 = Mem0[0x000000000061B1B0:word64]
	rdi_155 = Mem0[0x000000000061B1A8:word64]
// DataOut: al ecx edi fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EEE:
	r8_140 = (uint64) Mem0[0x000000000061B148:word32]
	word32 r8d_196 = (word32) r8_140
	branch r8d_196 == 0x00000003 l0000000000404FDF
// DataOut: fs r11 r15 r8d r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FDF:
	__assert_fail(0x000000000041373F, 0x0000000000413736, 0x0000000000000DDB, 0x0000000000412C95)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EFF:
	rsi_167 = Mem0[0x000000000061B1B0:word64]
	rdi_155 = Mem0[0x000000000061B1A8:word64]
	branch rsi_167 == 0x0000000000000000 l0000000000404F33
// DataOut: edi fs r11 r15 r8d r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F12:
	word64 rdx_216 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_218 = rdi_155 + rsi_167 * 0x0000000000000008
	word64 rax_220 = rdi_155
// DataOut: edi fs r11 r15 r8d r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F20:
	Mem226[rax_220:word64] = rdx_216
	rax_220 = rax_220 + 0x0000000000000008
	rdx_216 = rdx_216 + 192
	branch rax_220 != rcx_218 l0000000000404F20
// DataOut: edi fs r11 r15 r8d r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F33:
	ecx_160 = (word32) (uint64) r8d_196 (alias)
// DataOut: al ecx edi fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F54:
	branch ecx_160 != 0x00000004 l0000000000404F60
// DataOut: al ecx edi edx fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F59_1:
// DataOut: al ecx edi edx fs r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F60:
	word64 r8_177 = DPB(r8_140, (word32) Mem0[0x000000000061B10C:byte], 0)
	*r8Out = r8_177
	word64 r12_187
	word64 r13_188
	word64 r14_189
	word64 r15_190
	word64 rsi_191
	*rsiOut = fn000000000040D690(rsi_167, rdi_155, r8_177, r11_147, r15_148, out r12_187, out r13_188, out r14_189, out r15_190)
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F8C:
	word64 rsp_118 = rsp_117 + 0x0000000000000008
	word64 rbp_122
	*rbpOut = Mem0[rsp_118 + 0x0000000000000008:word64]
	return rsp_118 + 0x0000000000000010
// DataOut: bpl fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> eax:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000404E80_exit:
// DataOut: bpl r12 r13 r13d r14 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsi:<invalid> rdi:<invalid> eax:<invalid> rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000405090(byte sil, word64 rdi, word64 r11, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 rdi sil
// LiveOut: bpl r13 r13d r15 rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405090_entry:
	*r15Out = r15
// DataOut: fs r11 r15 r8 r9 rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405090:
	word32 r14d_109 = (word32) sil
	word64 r13_116
	*r13Out = rdi
	word64 rsp_121 = fp - 0x0000000000000020
	branch rdi == 0x0000000000000000 l00000000004050C0
// DataOut: fs r11 r13 r13d r14d r15 r8 r9 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004050AA:
	branch Mem0[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004050C0
// DataOut: fs r11 r13 r13d r14d r15 r8 r9 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050B4:
	word64 rbp_275
	word64 rsi_276
	word64 r12_277
	rsp_121 = fn0000000000404D20(0x00000000, rdi, 0x0000000000000000, r11, out rbp_275, out rsi_276, out r12_277, out r13_116)
// DataOut: fs r11 r13 r13d r14d r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050C0:
	word64 rbx_43 = Mem0[0x000000000061B1B0:word64]
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rbp:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405108:
	branch rbx_43 == 0x0000000000000000 l00000000004051A8
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051A8:
	word64 rdx_208
	word64 rdi_194 = Mem0[0x000000000061B1B0:word64]
	branch rdi_194 == 0x0000000000000000 l00000000004051F7
// DataOut: fs r11 r13 r13d r15 r8 r9 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051F7:
	rdx_208 = 0x0000000000000000
// DataOut: fs r11 r13 r13d r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051B4:
	word64 rsi_231 = Mem0[0x000000000061B1A8:word64]
	rdx_208 = 0x0000000000000000
	word64 rax_236 = 0x0000000000000000
// DataOut: fs r11 r13 r13d r15 r8 r9 rax rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051C0:
	word64 rcx_243 = Mem0[rsi_231 + rax_236 * 0x0000000000000008:word64]
	Mem246[rsi_231 + rdx_208 * 0x0000000000000008:word64] = rcx_243
	rax_236 = rax_236 + 0x0000000000000001
	rdx_208 = rdx_208 + DPB(rcx_243, (word32) (Mem0[rcx_243 + 0x00000000000000A0:word32] != 0x00000009), 0)
	branch rax_236 != rdi_194 l00000000004051C0
// DataOut: fs r11 r13 r13d r15 r8 r9 rax rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051E1:
	Mem211[0x000000000061B1B0:word64] = rdx_208
	word64 rsp_218 = Mem211[rsp_121 + 0x0000000000000018:word64]
	word64 rbp_220
	*rbpOut = Mem211[rsp_218 + 0x0000000000000008:word64]
	word64 rsi_222
	*rsiOut = Mem211[rsp_218 + 0x0000000000000010:word64]
	return rsp_218 + 0x0000000000000020
// DataOut: bpl fs r11 r13 r13d r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000405090_exit:
// DataOut: bpl r13 r13d r15 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405111:
	word64 rbp_71 = Mem0[Mem0[0x000000000061B1A8:word64]:word64]
	word32 eax_73 = (word32) (uint64) Mem0[rbp_71 + 0x00000000000000A0:word32]
	branch eax_73 == 0x00000009 l000000000040512C
// DataOut: eax fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405127:
	branch eax_73 != 0x00000003 l0000000000405100
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040512C:
	word64 rbp_114
	word64 r15_102 = Mem0[r13_116:word64]
	*r15Out = r15_102
	branch r13_116 == 0x0000000000000000 l00000000004050E2
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405135:
	word64 rsi_143
	word64 rax_144 = fn000000000040A390(r15_102, out rsi_143)
	branch Mem0[rax_144:byte] != 0x2E l00000000004050D8
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rax rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405142:
	byte al_186 = (byte) (word32) Mem0[rax_144 + 0x0000000000000001 + (uint64) (Mem0[rax_144 + 0x0000000000000001:byte] == 0x2E):byte]
	branch al_186 == 0x2F l0000000000405100
// DataOut: al fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405154:
	branch al_186 == 0x00 l0000000000405100
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405158:
// DataOut: fs r11 r13 r14d r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050D8:
	branch Mem0[r15_102:byte] != 0x2F l0000000000405160
// DataOut: fs r11 r13 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405160:
	word64 rbp_163
	word64 rax_165 = fn000000000040A610(0x0000000000000000, r15_102, r13_116, out rbp_163, out r14d_109)
	word64 rsi_172
	word64 r12_173
	rsp_121 = fn0000000000404D20((word32) (uint64) r14d_109, Mem0[rbp_163 + 0x0000000000000008:word64], rax_165, r11, out rbp_114, out rsi_172, out r12_173, out r13_116)
	free(rax_165)
	word64 r15_167
	*r15Out = rax_165
	branch Mem0[rbp_114 + 0x00000000000000A0:word32] != 0x00000009 l0000000000405100
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050E2:
	word64 rsi_135
	word64 r12_136
	rsp_121 = fn0000000000404D20((word32) (uint64) r14d_109, Mem0[rbp_71 + 0x0000000000000008:word64], r15_102, r11, out rbp_114, out rsi_135, out r12_136, out r13_116)
	branch Mem0[rbp_114 + 0x00000000000000A0:word32] == 0x00000009 l0000000000405194
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405194:
	rsp_121 = fn0000000000404D90(rbp_114)
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050FE:
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405100:
	rbx_43 = rbx_43 - 0x0000000000000001
// DataOut: fs r11 r12 r13 r13d r14d r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000405200(word64 rsi, word64 rdi, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405200_entry:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405200:
	word64 rbp_143 = rsi
	word64 rbx_109 = rdi
	branch rdi <u rsi l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040526B:
	word64 rcx_137 = Mem0[0x000000000061B0D8:word64]
	branch rcx_137 != 0x0000000000000000 l0000000000405220
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405220:
	word64 rsi_114 = rbx_109 + 0x0000000000000001
	branch (uint64) ((uint128) (uint64) rbp_143 /u rcx_137) <=u (uint64) ((uint128) ((uint64) rsi_114) /u rcx_137) l00000000004052A8
// DataOut: rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052A8:
	rbx_109 = rsi_114
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040523C:
	word64 rdi_128 = Mem0[0x000000000061A610:word64]
	word64 rax_129 = Mem0[rdi_128 + 0x0000000000000028:word64]
	branch rax_129 >=u Mem0[rdi_128 + 0x0000000000000030:word64] l00000000004052B9
// DataOut: rax rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052B9:
	word64 rsp_158
	word64 rsi_160
	word64 rdi_162
	byte SCZO_163
	byte C_164
	word64 rcx_165
	byte SZO_166
	byte Z_167
	word64 rdx_168
	word64 rax_169
	byte CZ_170
	word32 esi_171
	word32 edx_172
	call __overflow (retsize: 8; depth: 24)
		uses: C_132,CZ_127,dwLoc04_4,dwLoc08_9,edx_45,esi_115,qwLoc08,rax_129,rbp_54,rbx_53,rcx_57,rdi_128,rdx_124,rsi_157,rsp_55,SCZO_131,SZO_58,Z_59
		defs: C_164,CZ_170,edx_172,esi_171,rax_169,rbp_159,rbx_161,rcx_165,rdi_162,rdx_168,rsi_160,rsp_158,SCZO_163,SZO_166,Z_167
	rcx_137 = Mem0[0x000000000061B0D8:word64]
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040524D:
	Mem155[rdi_128 + 0x0000000000000028:word64] = rax_129 + 0x0000000000000001
	Mem156[rax_129:byte] = 0x09
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405258:
	rbx_109 = rbx_109 + rcx_137 - (uint64) ((uint128) ((uint64) rbx_109) % rcx_137)
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405277:
	rbx_109 = rbx_109 + 0x0000000000000001
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040527B:
	word64 rdi_82 = Mem0[0x000000000061A610:word64]
	word64 rdx_83 = Mem0[rdi_82 + 0x0000000000000028:word64]
	branch rdx_83 >=u Mem0[rdi_82 + 0x0000000000000030:word64] l00000000004052AD
// DataOut: rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052AD:
	word64 rsp_94
	word64 rsi_96
	word64 rdi_98
	byte SCZO_99
	byte C_100
	word64 rcx_101
	byte SZO_102
	byte Z_103
	word64 rdx_104
	word64 rax_105
	byte CZ_106
	word32 esi_107
	word32 edx_108
	call __overflow (retsize: 8; depth: 24)
		uses: C_87,CZ_80,dwLoc04_4,dwLoc08_9,edx_85,esi_77,qwLoc08,rax_79,rbp_54,rbx_81,rcx_57,rdi_82,rdx_83,rsi_93,rsp_55,SCZO_86,SZO_58,Z_59
		defs: C_100,CZ_106,edx_108,esi_107,rax_105,rbp_95,rbx_97,rcx_101,rdi_98,rdx_104,rsi_96,rsp_94,SCZO_99,SZO_102,Z_103
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405266:
	branch rbp_143 <=u rbx_109 l000000000040529C
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040528C:
	Mem91[rdi_82 + 0x0000000000000028:word64] = rdx_83 + 0x0000000000000001
	Mem92[rdx_83:byte] = 0x20
	branch rbp_143 >u rbx_109 l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405211:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:rdi -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040529C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004052D0(word64 rdx, word32 ebx, word64 rsi, word64 r11, selector fs, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx fs r11 rdx rsi
// LiveOut: edi r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004052D0_entry:
// DataOut: ebx fs r11 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004052D0:
	word32 ebp_8 = (word32) (fp - 0x0000000000000004)
	word64 r9_50
	word64 r11_51
	word64 r13_53
	word64 r14_54
	word64 r15_55
	word64 r12_106
	word64 r8_105
	word64 rdi_116
	word64 rbp_118
	word64 rsp_120
	word64 rsi_114
	word64 rax_56 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, ebx, ebp_8, 0x0000000000002000, fp + 0xFFFFFFFFFFFFDFBC, rdx, r11, fs, out rsp_120, out rbp_118, out rsi_114, out rdi_116, out r8_105, out r9_50, out r11_51, out r12_106, out r13_53, out r14_54, out r15_55)
	Mem65[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = rbp_118 + 0xFFFFFFFFFFFFDFC0
	word64 rbx_112 = rax_56
	word32 ebx_58 = (word32) rax_56
	branch rax_56 >u 0x0000000000001FFF l0000000000405590
// DataOut: ebp ebx esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405590:
	Mem872[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = rsp_120 - (rax_56 + 0x000000000000001F & 0xFFFFFFFFFFFFFFF0) + 0x000000000000000F
	Mem874[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = Mem872[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] & 0xFFFFFFFFFFFFFFF0
	word64 r9_884
	word64 r11_885
	word64 r13_887
	word64 r14_888
	word64 r15_889
	fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, r14_54, ebx_58, ebp_8, rax_56 + 0x0000000000000001, Mem874[rbp_118 + 0xFFFFFFFFFFFFDF98:word64], r13_53, r11_51, fs, out rsp_120, out rbp_118, out rsi_114, out rdi_116, out r8_105, out r9_884, out r11_885, out r12_106, out r13_887, out r14_888, out r15_889)
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):fp + 0xFFFFFFFFFFFFDFBC -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405343:
	branch Mem65[0x000000000061B0F0:byte] != 0x00 l0000000000405412
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405412:
	word64 rdx_444
	word64 r14_447
	word64 r13_448
	word32 esi_449
	byte SCZO_451
	word64 rcx_452
	word32 eax_455
	byte SZO_456
	byte C_457
	byte CZ_458
	byte Z_459
	word32 edx_460
	word64 r12_461
	word32 r12d_462
	word16 dx_463
	word64 r15_464
	byte al_465
	byte SO_466
	byte dl_467
	word32 edi_468
	byte S_469
	word32 ecx_470
	byte cl_471
	word16 ax_472
	word32 ebx_473
	word64 r11_474
	word64 r9_475
	word32 ebp_476
	word64 rax_453
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_79,ax_80,C_76,cl,CZ_64,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx,eax_78,ebp_8,ebx_58,ecx,edi_84,edx,esi_82,fs,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_67,r12_74,r12d,r13_70,r14_71,r15_68,r8_73,r9_66,rax_77,rbp_85,rbx_57,rcx_69,rdi_83,rdx_72,rsi_81,rsp_86,S,SCZO_87,SO,SZO_75,Z_88
		defs: al_465,ax_472,C_457,cl_471,CZ_458,dl_467,dx_463,eax_455,ebp_476,ebx_473,ecx_470,edi_468,edx_460,esi_449,fs_454,r11_474,r12_461,r12d_462,r13_448,r14_447,r15_464,r8_443,r9_475,rax_453,rbp_442,rbx_450,rcx_452,rdi_445,rdx_444,rsi_446,rsp_441,S_469,SCZO_451,SO_466,SZO_456,Z_459
	branch rax_453 <=u 0x0000000000000001 l00000000004055D1
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055D1:
	word64 r14_763 = Mem65[r13_448 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_763
	word64 r12_764 = r14_763 + rbx_112
	branch r14_763 >=u r12_764 l0000000000405602
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055E1:
	word64 rdx_807
	word64 r14_810
	word64 r13_811
	word32 esi_812
	byte SCZO_814
	word64 rcx_815
	word64 rax_816
	word32 eax_818
	byte SZO_819
	byte C_820
	byte CZ_821
	byte Z_822
	word32 edx_823
	word64 r12_824
	word32 r12d_825
	word16 dx_826
	word64 r15_827
	byte al_828
	byte SO_829
	byte dl_830
	word32 edi_831
	byte S_832
	word32 ecx_833
	byte cl_834
	word16 ax_835
	word32 ebx_836
	word64 r11_837
	word64 r9_838
	word32 ebp_839
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_465,ax_472,C_767,cl_471,CZ_478,dl_467,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_463,eax_455,ebp_476,ebx_473,ecx_470,edi_468,edx_460,esi_449,fs_454,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_474,r12_764,r12d_765,r13_448,r14_763,r15_464,r8_443,r9_475,rax_453,rbp_442,rbx_450,rcx_452,rdi_445,rdx_444,rsi_446,rsp_441,S_469,SCZO_766,SO_466,SZO_456,Z_459
		defs: al_828,ax_835,C_820,cl_834,CZ_821,dl_830,dx_826,eax_818,ebp_839,ebx_836,ecx_833,edi_831,edx_823,esi_812,fs_817,r11_837,r12_824,r12d_825,r13_811,r14_810,r15_827,r8_806,r9_838,rax_816,rbp_805,rbx_813,rcx_815,rdi_808,rdx_807,rsi_809,rsp_804,S_832,SCZO_814,SO_829,SZO_819,Z_822
	word64 rdx_840 = r14_810
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055E9:
	rsi_114 = DPB(rsi_114, (word32) Mem65[rdx_840:byte], 0) (alias)
	branch (Mem65[Mem65[rax_816:word64] + 0x0000000000000001 + rsi_114 * 0x0000000000000002:byte] & 0x40) != 0x00 l00000000004055F9
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055F6:
	Mem862[rdx_840:byte] = 0x3F
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055F9:
	rdx_840 = rdx_840 + 0x0000000000000001
	branch rdx_840 != r12_824 l00000000004055E9
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405602:
	*r12Out = rbx_112
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405421:
	word64 r15_479 = Mem65[r13_448 + 0xFFFFFFFFFFFFDF98:word64]
	*r15Out = r15_479
	word64 r13_480 = r15_479 + rbx_112
	*r13Out = r13_480
	branch r15_479 >=u r13_480 l0000000000405612
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405612:
	rbx_112 = 0x0000000000000000
	*r12Out = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405435:
	word64 rbx_483 = r15_479
	r12_106 = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405440:
	word32 eax_520 = (word32) Mem65[rdi_116:byte]
	rax_453 = DPB(rax_453, eax_520, 0) (alias)
	byte al_522 = (byte) eax_520
	branch al_522 > 0x3F l0000000000405520
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405520:
	branch al_522 < 0x41 l0000000000405460
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405528:
	branch al_522 <= 0x5F l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040552C:
	branch (byte) (rax_453 - 0x0000000000000061) >u 0x1D l0000000000405460
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040544C:
	branch al_522 >= 0x25 l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405454:
	branch (byte) (rax_453 - 0x0000000000000020) <=u 0x03 l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405538:
	Mem736[rbx_483:byte] = al_522
	r15_479 = r15_479 + 0x0000000000000001
	*r15Out = r15_479
	r12_106 = r12_106 + 0x0000000000000001
	*r12Out = r12_106
	rbx_483 = rbx_483 + 0x0000000000000001
	branch r15_479 <u r13_480 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040554F:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405460:
	Mem569[rbp_118 + 0xFFFFFFFFFFFFDFB0:word64] = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r13 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405470:
	word64 rdx_584
	word64 r14_587
	word32 esi_589
	word64 rbx_590
	byte SCZO_591
	word64 rcx_592
	word32 eax_595
	byte SZO_596
	byte C_597
	byte CZ_598
	byte Z_599
	word32 edx_600
	word64 r12_601
	word32 r12d_602
	word16 dx_603
	word64 r15_604
	byte al_605
	byte SO_606
	byte dl_607
	word32 edi_608
	byte S_609
	word32 ecx_610
	byte cl_611
	word16 ax_612
	word32 ebx_613
	word64 r11_614
	word64 r9_615
	word32 ebp_616
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_522,ax_523,C_509,cl_491,CZ_566,dl_563,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_497,eax_520,ebp_518,ebx_512,ecx_492,edi_576,edx_565,esi_580,fs_500,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_490,r12_506,r12d_507,r13_571,r14_503,r15_570,r8_505,r9_489,rax_521,rbp_572,rbx_511,rcx_574,rdi_575,rdx_577,rsi_579,rsp_519,S_493,SCZO_578,SO_564,SZO_568,Z_508
		defs: al_605,ax_612,C_597,cl_611,CZ_598,dl_607,dx_603,eax_595,ebp_616,ebx_613,ecx_610,edi_608,edx_600,esi_589,fs_594,r11_614,r12_601,r12d_602,r13_588,r14_587,r15_604,r8_583,r9_615,rax_593,rbp_582,rbx_590,rcx_592,rdi_585,rdx_584,rsi_586,rsp_581,S_609,SCZO_591,SO_606,SZO_596,Z_599
	word64 r14_619 = rax_453
	*r14Out = r14_619
	branch rax_453 == 0xFFFFFFFFFFFFFFFF l0000000000405551
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405551:
	Mem723[rbx_590:byte] = 0x3F
	r15_479 = r15_604 + 0x0000000000000001
	*r15Out = r15_479
	r12_106 = r12_601 + 0x0000000000000001
	*r12Out = r12_106
	rbx_483 = rbx_590 + 0x0000000000000001
	branch r15_604 + 0x0000000000000001 <u r13_480 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405569:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405499:
	branch rax_453 == 0xFFFFFFFFFFFFFFFE l000000000040556B
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040556B:
	Mem715[rbx_590:byte] = 0x3F
	r15_479 = r13_480
	*r15Out = r15_479
	r12_106 = r12_601 + 0x0000000000000001
	*r12Out = r12_106
	rbx_483 = rbx_590 + 0x0000000000000001
	branch r13_480 <u r13_480 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405582:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054A3:
	word64 rdi_622 = (uint64) Mem569[rbp_118 + 0xFFFFFFFFFFFFDFAC:word32]
	branch rax_453 != 0x0000000000000000 l00000000004054B5
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054B1_1:
	r14_619 = 0x0000000000000001
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054B5:
	word32 eax_629 = wcwidth(rdi_622)
	branch eax_629 < 0x00000000 l0000000000405510
// DataOut: al eax ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405510:
	Mem706[rbx_590:byte] = 0x3F
// DataOut: eax ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054BE:
	word64 rsi_679 = r15_604 + r14_619
	word64 rdx_681 = rbx_590
	r15_685 = r15_604
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054C8:
	word64 r15_685
	rdx_681 = rdx_681 + 0x0000000000000001
	Mem696[rdx_681 - 0x0000000000000001:byte] = (byte) (word32) Mem569[rdi_622 - 0x0000000000000001:byte]
	r15_685 = r15_685 + 0x0000000000000001
	branch r15_685 != rsi_679 l00000000004054C8
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054DD:
// DataOut: eax ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054E5:
	word64 rdx_641
	word64 r14_644
	word32 esi_646
	byte SCZO_648
	word64 rcx_649
	word32 eax_652
	byte SZO_653
	byte C_654
	byte CZ_655
	byte Z_656
	word32 edx_657
	word32 r12d_659
	word16 dx_660
	byte al_662
	byte SO_663
	byte dl_664
	word32 edi_665
	byte S_666
	word32 ecx_667
	byte cl_668
	word16 ax_669
	word32 ebx_670
	word64 r11_671
	word64 r9_672
	word32 ebp_673
	call mbsinit (retsize: 8; depth: 8)
		uses: al_631,ax_632,C_635,cl_611,CZ_598,dl_607,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_603,eax_629,ebp_616,ebx_613,ecx_610,edi_637,edx_600,esi_589,fs_594,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_614,r12_601,r12d_602,r13_588,r14_628,r15_604,r8_583,r9_615,rax_630,rbp_582,rbx_590,rcx_592,rdi_636,rdx_584,rsi_586,rsp_581,S_634,SCZO_620,SO_606,SZO_633,Z_625
		defs: al_662,ax_669,C_654,cl_668,CZ_655,dl_664,dx_660,eax_652,ebp_673,ebx_670,ecx_667,edi_665,edx_657,esi_646,fs_651,r11_671,r12_658,r12d_659,r13_645,r14_644,r15_661,r8_640,r9_672,rax_650,rbp_639,rbx_647,rcx_649,rdi_642,rdx_641,rsi_643,rsp_638,S_666,SCZO_648,SO_663,SZO_653,Z_656
	branch eax_652 == 0x00000000 l0000000000405470
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054F9:
	branch r15_479 <u r13_480 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405502:
	rbx_112 = rbx_483 - Mem65[rbp_118 + 0xFFFFFFFFFFFFDF98:word64]
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405350:
	branch Mem65[rbp_118 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l0000000000405379
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040535A:
	word64 rdx_312
	word64 r14_315
	word64 r13_316
	word32 esi_317
	byte SCZO_319
	word64 rcx_320
	word64 rax_321
	word32 eax_323
	byte SZO_324
	byte C_325
	byte CZ_326
	byte Z_327
	word32 edx_328
	word64 r12_329
	word32 r12d_330
	word16 dx_331
	word64 r15_332
	byte al_333
	byte SO_334
	byte dl_335
	word32 edi_336
	byte S_337
	word32 ecx_338
	byte cl_339
	word16 ax_340
	word32 ebx_341
	word64 r11_342
	word64 r9_343
	word32 ebp_344
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_79,ax_80,C_76,cl,CZ_64,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx,eax_78,ebp_8,ebx_58,ecx,edi_84,edx,esi_82,fs,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_67,r12_74,r12d,r13_70,r14_71,r15_68,r8_73,r9_66,rax_77,rbp_85,rbx_57,rcx_69,rdi_83,rdx_72,rsi_81,rsp_86,S,SCZO_299,SO,SZO_75,Z_300
		defs: al_333,ax_340,C_325,cl_339,CZ_326,dl_335,dx_331,eax_323,ebp_344,ebx_341,ecx_338,edi_336,edx_328,esi_317,fs_322,r11_342,r12_329,r12d_330,r13_316,r14_315,r15_332,r8_311,r9_343,rax_321,rbp_310,rbx_318,rcx_320,rdi_313,rdx_312,rsi_314,rsp_309,S_337,SCZO_319,SO_334,SZO_324,Z_327
	branch rax_321 <=u 0x0000000000000001 l00000000004053CD
// DataOut: ebp esp fs r11 r11d r13 r15 r15b r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053CD:
	word64 r14_368 = Mem65[r13_316 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_368
	word64 r13_369 = r14_368 + rbx_112
	*r13Out = r13_369
	branch r14_368 >=u r13_369 l000000000040560A
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040560A:
	*r12Out = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053E1:
	word64 r14_378
	word64 r13_379
	word32 esi_380
	byte SCZO_382
	word64 rcx_383
	word64 rax_384
	word32 eax_386
	byte SZO_387
	byte C_388
	byte CZ_389
	byte Z_390
	word32 edx_391
	word64 r12_392
	word32 r12d_393
	word16 dx_394
	word64 r15_395
	byte al_396
	byte SO_397
	byte dl_398
	word32 edi_399
	byte S_400
	word32 ecx_401
	byte cl_402
	word16 ax_403
	word32 ebx_404
	word64 r11_405
	word64 r9_406
	word32 ebp_407
	word64 rdx_375
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_333,ax_340,C_371,cl_339,CZ_346,dl_335,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_331,eax_323,ebp_344,ebx_341,ecx_338,edi_336,edx_328,esi_317,fs_322,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_342,r12_329,r12d_330,r13_369,r14_368,r15_332,r8_311,r9_343,rax_321,rbp_310,rbx_318,rcx_320,rdi_313,rdx_312,rsi_314,rsp_309,S_337,SCZO_370,SO_334,SZO_324,Z_327
		defs: al_396,ax_403,C_388,cl_402,CZ_389,dl_398,dx_394,eax_386,ebp_407,ebx_404,ecx_401,edi_399,edx_391,esi_380,fs_385,r11_405,r12_392,r12d_393,r13_379,r14_378,r15_395,r8_374,r9_406,rax_384,rbp_373,rbx_381,rcx_383,rdi_376,rdx_375,rsi_377,rsp_372,S_400,SCZO_382,SO_397,SZO_387,Z_390
	r12_106 = 0x0000000000000000
	word64 rcx_412 = Mem65[rax_384:word64]
	word64 rax_415 = r14_378
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053F0:
	rdx_375 = DPB(rdx_375, (word32) Mem65[rax_415:byte], 0) (alias)
	r12_106 = r12_106 - 0xFF - (((word16) ((word32) Mem65[rcx_412 + rdx_375 * 0x0000000000000002:word16]) & 0x4000) <u 0x0001)
	*r12Out = r12_106
	rax_415 = rax_415 + 0x0000000000000001
	branch rax_415 != r13_379 l00000000004053F0
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040540D:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405365:
	word32 ebx_355
	word64 r12_360
	word64 r13_361
	word64 r14_362
	word64 r15_363
	*r12Out = (int64) (word32) fn000000000040D240(0x00000000, rbx_112, Mem65[rbp_118 + 0xFFFFFFFFFFFFDF98:word64], fs, out ebx_355, out rsp_120, out rbp_118, out rsi_114, out rdi_116, out r12_360, out r13_361, out r14_362, out r15_363)
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405379:
	word64 rcx_121 = Mem65[rbp_118 + 0xFFFFFFFFFFFFDF88:word64]
	branch rcx_121 == 0x0000000000000000 l0000000000405399
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405385:
	word64 rdx_266
	word64 r14_269
	word64 r13_270
	word32 esi_271
	byte SCZO_273
	word64 rcx_274
	word64 rax_275
	word32 eax_277
	byte SZO_278
	byte C_279
	byte CZ_280
	byte Z_281
	word32 edx_282
	word32 r12d_284
	word16 dx_285
	word64 r15_286
	byte al_287
	byte SO_288
	byte dl_289
	word32 edi_290
	byte S_291
	word32 ecx_292
	byte cl_293
	word16 ax_294
	word32 ebx_295
	word64 r11_296
	word64 r9_297
	word32 ebp_298
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_110,ax_111,C_124,cl_91,CZ_99,dl_94,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_97,eax_109,ebp_119,ebx_113,ecx_92,edi_259,edx_98,esi_262,fs_100,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_90,r12_106,r12d_107,r13_102,r14_103,r15_96,r8_105,r9_89,rax_108,rbp_118,rbx_112,rcx_121,rdi_258,rdx_260,rsi_261,rsp_120,S_93,SCZO_101,SO_95,SZO_122,Z_123
		defs: al_287,ax_294,C_279,cl_293,CZ_280,dl_289,dx_285,eax_277,ebp_298,ebx_295,ecx_292,edi_290,edx_282,esi_271,fs_276,r11_296,r12_283,r12d_284,r13_270,r14_269,r15_286,r8_265,r9_297,rax_275,rbp_264,rbx_272,rcx_274,rdi_267,rdx_266,rsi_268,rsp_263,S_291,SCZO_273,SO_288,SZO_278,Z_281
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405399:
	branch Mem65[rbp_118 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l00000000004053A8
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053A5:
	Mem257[r8_105:word64] = r12_106
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053A8:
	word64 rbx_166 = Mem65[rbp_118 - 0x0000000000000038:word64] ^ Mem65[fs:0x00000028:word64]
	branch rbx_166 != 0x0000000000000000 l000000000040561C
// DataOut: ebp ebx esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040561C:
	__stack_chk_fail()
	word64 rsp_219 = rsp_120 - 0x0000000000000004
	Mem220[rsp_219:word32] = rsp_120
	Mem222[rsp_219 - 0x0000000000000004:word32] = rbp_118
	Mem224[rsp_219 - 0x0000000000000008:word32] = rbx_166
	word64 rax_225 = Mem224[rsi_114 + 0x0000000000000018:word64]
	word64 rbp_229 = Mem224[rsi_114 + 0x0000000000000010:word64]
	word64 r12_234 = (uint64) ((word32) (rax_225 - rbp_229) >>u 0x00000003)
	*r12Out = r12_234
	branch r12_234 == 0x0000000000000000 l00000000004056DB
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_248
	word64 rsp_249
	word64 rbp_250
	word64 rsi_251
	word32 edi_252
	return fn000000000040564F(rax_225, rbp_229, rsi_114, rdi_116, r12_234, out rbx_248, out rsp_249, out rbp_250, out rsi_251, out edi_252)
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_239
	word64 rsp_240
	word64 rbp_241
	word64 rsi_242
	word32 edi_243
	return fn000000000040564F(rax_225, rbp_229, rsi_114, rdi_116, r12_234, out rbx_239, out rsp_240, out rbp_241, out rsi_242, out edi_243)
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053BE:
	word64 rsp_201 = rbp_118 - 0x0000000000000028
	word64 rsp_205 = Mem65[rsp_201 + 0x0000000000000008:word64]
	word64 rbx_202
	*rbxOut = Mem65[rsp_201:word64]
	word64 rsi_209
	*rsiOut = Mem65[rsp_205 + 0x0000000000000010:word64]
	word32 edi_213
	*ediOut = (word32) Mem65[rsp_205 + 0x0000000000000018:word64]
	word64 rbp_215
	*rbpOut = Mem65[rsp_205 + 0x0000000000000020:word64]
	word64 rsp_217
	*rspOut = rsp_205 + 0x0000000000000028
	return rbx_112
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

fn00000000004052D0_exit:
// DataOut: edi r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> eax:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp



void fn0000000000405630(word64 rsi, word64 rdi, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn0000000000405630_entry:
// DataOut: r13 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l0000000000405630:
	word64 rax_13 = Mem0[rsi + 0x0000000000000018:word64]
	word64 rbp_14 = Mem0[rsi + 0x0000000000000010:word64]
	word64 r12_18 = (uint64) ((word32) (rax_13 - rbp_14) >>u 0x00000003)
	branch r12_18 == 0x0000000000000000 l00000000004056DB_in_fn0000000000405630
// DataOut: r12 r13 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056DB_in_fn0000000000405630:
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_30
	word64 rsp_31
	word64 rbp_32
	word64 rsi_33
	word32 edi_34
	fn000000000040564F(rax_13, rbp_14, rsi, rdi, r12_18, out rbx_30, out rsp_31, out rbp_32, out rsi_33, out edi_34)
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040564F(word64 rax, word64 rbp, word64 rsi, word64 rdi, word64 r12, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r12 rax rbp rdi rsi
// LiveOut: edi rax rbp rbx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040564F_entry:
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l000000000040564F:
	branch rax == rbp l00000000004056E6
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004056E6:
	Mem117[rsi + 0x0000000000000050:byte] = Mem0[rsi + 0x0000000000000050:byte] | 0x02
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3

l0000000000405658:
	word64 rcx_10 = (int64) Mem0[rsi + 0x0000000000000030:word32]
	word32 edx_18 = (word32) (uint64) ~(word32) (uint64) (word32) rcx_10
	word64 rcx_15 = Mem0[rsi + 0x0000000000000020:word64]
	word64 rdx_20 = (int64) edx_18 & rax + rcx_10
	word64 rax_21 = Mem0[rsi + 0x0000000000000008:word64]
	Mem23[rsi + 0x0000000000000018:word64] = rdx_20
	branch rdx_20 - rax_21 > rcx_15 - rax_21 l00000000004056E0
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3

l00000000004056E0:
	Mem115[rsi + 0x0000000000000018:word64] = rcx_15
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid>

l0000000000405683:
	Mem33[rsi + 0x0000000000000010:word64] = Mem23[rsi + 0x0000000000000018:word64]
	fputs_unlocked(rdi, Mem33[0x000000000061A610:word64])
	word64 rbx_29 = 0x0000000000000000
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid>

l00000000004056A0:
	__printf_chk(0x0000000000000001, 0x0000000000413759)
	word64 rsi_40
	*rsiOut = 0x0000000000413759
	rbx_29 = rbx_29 + 0x0000000000000001
	branch r12 >u rbx_29 l00000000004056A0
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> eax:<invalid> rdi:0x0000000000000001

l00000000004056BF:
	word64 rdi_48 = Mem33[0x000000000061A610:word64]
	word32 edi_49 = (word32) rdi_48
	*ediOut = edi_49
	word64 rax_50 = Mem33[rdi_48 + 0x0000000000000028:word64]
	branch rax_50 >=u Mem33[rdi_48 + 0x0000000000000030:word64] l00000000004056EF
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:0x0000000000000001

l00000000004056EF:
	word64 rsp_96
	word64 rax_97
	word64 rbp_98
	byte SCZO_99
	byte Z_100
	word64 rsi_101
	word64 rcx_102
	word32 ecx_103
	word64 rdx_104
	word32 edx_105
	byte SZO_106
	byte C_107
	word64 rbx_108
	word32 ebx_109
	word64 rdi_110
	word32 eax_111
	word64 r12_112
	byte CZ_113
	word32 edi_114
	call __overflow (retsize: 8; depth: 8)
		uses: C_53,CZ_47,eax_51,ebx_89,ecx_16,edi_49,edx_18,r12,rax_50,rbp_91,rbx_88,rcx_15,rdi_48,rdx_38,rsi_95,rsp_94,SCZO_52,SZO_31,Z_5
		defs: C_107,CZ_113,eax_111,ebx_109,ecx_103,edi_114,edx_105,r12_112,rax_97,rbp_98,rbx_108,rcx_102,rdi_110,rdx_104,rsi_101,rsp_96,SCZO_99,SZO_106,Z_100
	return rax_97
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

l00000000004056D0:
	Mem79[rdi_48 + 0x0000000000000028:word64] = rax_50 + 0x0000000000000001
	Mem80[rax_50:byte] = 0x0A
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

l00000000004056DB:
	word64 rbx_81
	*rbxOut = Mem80[v3:word64]
	word64 rbp_84
	*rbpOut = Mem80[v3 + 0x0000000000000008:word64]
	word64 rsp_87
	*rspOut = Mem80[v3 + 0x0000000000000010:word64] + 0x0000000000000008
	return rax_50
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid>

fn000000000040564F_exit:
// DataOut: edi rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rbp:<invalid>



word64 fn0000000000405700(word32 edx, word64 rdi, selector fs, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi
// LiveOut: r12 r13d r14 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405700_entry:
	*r13dOut = r13d
	*r14Out = r14
	*r12Out = r12
// DataOut: edx fs r11 r11d r12 r13d r14 r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405700:
	word64 rbp_104
	word32 ebx_12 = (word32) (uint64) edx
	word64 rsp_105 = fp - 0x0000000000000010
	branch rdi == 0x0000000000000000 l0000000000405780
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405780:
	__printf_chk(0x0000000000000001, 0x000000000041375E)
	rbp_104 = (int64) ebx_12
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi rbx:(uint64) edx -8(fp):rbx -4(fp):rbp

l0000000000405710:
	word32 ebx_58
	word64 rbp_60
	word64 rsi_61
	word64 r12_62
	word64 r13_63
	word64 r14_64
	word64 r15_65
	word32 eax_67 = (word32) fn000000000040D420(0x00000000, rdi, fs, qwLoc18, out ebx_58, out rsp_105, out rbp_60, out rsi_61, out r12_62, out r13_63, out r14_64, out r15_65)
	word64 rsi_68 = Mem0[0x000000000061A610:word64]
	word32 ebx_100 = (word32) (uint64) (ebx_58 - eax_67)
	branch ebx_100 >= 0x00000000 l0000000000405728
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi rbx:(uint64) edx -8(fp):rbx -4(fp):rbp

l0000000000405725_1:
	ebx_100 = 0x00000000
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 eax:0x00000000 rdx:<invalid> rdi:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405728:
	fputs_unlocked(rbp_60, rsi_68)
	rbp_104 = (int64) ebx_100 + (uint64) strlen(rbp_60)
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 ebx:<invalid> eax:0x00000000 rdx:<invalid> rdi:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405740:
	word64 rdi_106 = Mem0[0x000000000061A610:word64]
	word64 rcx_108 = Mem0[rdi_106 + 0x0000000000000028:word64]
	branch rcx_108 >=u Mem0[rdi_106 + 0x0000000000000030:word64] l0000000000405799
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405799:
	word64 rdi_142
	word64 rbx_143
	word32 edx_145
	byte SCZO_146
	byte SZO_147
	byte C_148
	byte Z_149
	word32 esi_150
	word64 rsi_151
	word32 eax_152
	word64 rax_153
	byte S_154
	word64 rcx_155
	word32 edi_156
	word64 rdx_157
	selector fs_158
	word64 r12_159
	word32 r13d_160
	word64 r14_161
	word64 r13_162
	word64 r15_163
	call __overflow (retsize: 8; depth: 8)
		uses: C_110,dwLoc04_4,dwLoc08_9,eax_94,ebx_100,edi_107,edx_98,esi_96,fs_92,qwLoc18,r12_91,r13_88,r13d_90,r14_89,r15_87,rax_102,rbp_104,rbx_103,rcx_108,rdi_106,rdx_99,rsi_139,rsp_105,S_93,SCZO_109,SZO_97,Z_101
		defs: C_148,eax_152,ebx_144,edi_156,edx_145,esi_150,fs_158,r12_159,r13_162,r13d_160,r14_161,r15_163,rax_153,rbp_141,rbx_143,rcx_155,rdi_142,rdx_157,rsi_151,rsp_140,S_154,SCZO_146,SZO_147,Z_149
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405751:
	Mem137[rdi_106 + 0x0000000000000028:word64] = rcx_108 + 0x0000000000000001
	Mem138[rcx_108:byte] = 0x20
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040575C:
	ebx_100 = (word32) (uint64) (ebx_100 - 0x00000001) (alias)
	branch ebx_100 != 0xFFFFFFFF l0000000000405740
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405764:
	Mem41[0x000000000061B018:word64] = rbp_104 + 0x0000000000000001 + Mem0[0x000000000061B018:word64]
	word64 rsp_42 = rsp_105 + 0x0000000000000008
	word64 rbp_46
	*rbpOut = Mem41[rsp_42 + 0x0000000000000008:word64]
	return rsp_42 + 0x0000000000000010
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405700_exit:
// DataOut: r12 r13d r14 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004057B0(byte dl, word64 rsi, word32 edi, word64 r8, word64 r12, selector fs, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edi esi fs r12 r8 rsi
// LiveOut: r12 r13d r14 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004057B0_entry:
// DataOut: dl edi esi fs r11 r11d r12 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057B0:
	word64 rax_20 = 0x0000000000413764
	branch dl == 0x00 l00000000004057CB
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004057C0:
	rax_20 = 0x0000000000000000
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004057E0
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rax:0x0000000000413764 rbx:(uint64) edi -4(fp):rbx

l00000000004057E0:
	word64 rsp_54
	word64 rbp_55
	word64 r12_56
	rax_20 = fn000000000040C9B0(rsi, edi, r8, r12, out rsp_54, out rbp_55, out r12_56)
	esi = (word32) (uint64) Mem0[rsp_54 + 0x000000000000000C:word32] (alias)
// DataOut: esi fs r11 r11d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rax:<invalid> rbx:(uint64) edi -4(fp):rbx

l00000000004057CB:
	word32 edx_30 = (word32) (uint64) esi
// DataOut: edx fs r11 r11d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> -8(fp):esi -4(fp):rbx

l00000000004057D8_thunk_fn0000000000405700:
	word64 rbp_38
	word64 r12_39
	word32 r13d_40
	word64 r14_41
	return fn0000000000405700(edx_30, rax_20, fs, out rbp_38, out r12_39, out r13d_40, out r14_41)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rdx:(uint64) esi rsi:<invalid> rdi:<invalid> rbp:<invalid> r12:<invalid> eax:<invalid> -8(fp):esi -4(fp):rbx

fn00000000004057B0_exit:
// DataOut: r12 r13d r14 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> eax:<invalid> ebx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> -8(fp):esi -4(fp):rbx



word32 fn0000000000405810(word64 rdx, word32 edi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 rdx
// LiveOut: bpl eax ebp r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405810_entry:
// DataOut: edi fs r11 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405810:
	word64 rsp_21
	word64 rbp_22
	word64 r8_23
	word64 r9_24
	word64 r11_25
	word64 r12_26
	word64 r13_27
	word64 r14_28
	word64 r15_29
	word64 rbx_30 = fn000000000040EAB0(rdx, r11, fs, out rsp_21, out rbp_22, out r8_23, out r9_24, out r11_25, out r12_26, out r13_27, out r14_28, out r15_29)
	__errno_location()
	word64 rsp_45
	word32 r12d_46
	word32 edi_47
	word64 r12_48
	word64 rdi_49
	word64 rdx_50
	word64 rbp_51
	word64 rbx_52
	word64 rsi_53
	word64 rax_54
	word32 esi_55
	byte SZO_56
	byte C_57
	word64 rcx_59
	byte r12b_60
	byte Z_61
	word64 r11_62
	selector fs_63
	word64 r8_64
	word64 r9_65
	word64 r13_66
	word64 r14_67
	word64 r15_68
	word32 eax_104
	call error (retsize: 8; depth: 8)
		uses: C_42,dwLoc04_4,dwLoc08_13,dwLoc0C_16,eax_40,edi_38,esi_36,fs,r11_25,r12_26,r12b_8,r12d_7,r13_27,r14_28,r15_29,r8_23,r9_24,rax_39,rbp_32,rbx_30,rcx_43,rdi_37,rdx_44,rsi_35,rsp_21,SZO_41
		defs: C_57,eax_58,edi_47,esi_55,fs_63,r11_62,r12_48,r12b_60,r12d_46,r13_66,r14_67,r15_68,r8_64,r9_65,rax_54,rbp_51,rbx_52,rcx_59,rdi_49,rdx_50,rsi_53,rsp_45,SZO_56,Z_61
	branch r12b_60 == 0x00 l0000000000405850
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405850:
	eax_104 = (word32) (uint64) Mem0[0x000000000061B030:word32] (alias)
	branch eax_104 != 0x00000000 l000000000040584A
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040585A:
	word64 rbp_110
	*rbpOut = Mem0[rsp_45 + 0x0000000000000008:word64]
	Mem112[0x000000000061B030:word32] = 0x00000001
	word64 rsp_114
	*rspOut = Mem112[rsp_45 + 0x0000000000000010:word64] + 0x0000000000000008
	return eax_104
// DataOut: bpl eax ebp fs r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000405840:
	Mem102[0x000000000061B030:word32] = 0x00000002
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040584A:
	word64 rbp_98
	*rbpOut = Mem0[rsp_45 + 0x0000000000000008:word64]
	word64 rsp_101
	*rspOut = Mem0[rsp_45 + 0x0000000000000010:word64] + 0x0000000000000008
	return eax_104
// DataOut: bpl eax ebp fs r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405810_exit:
// DataOut: bpl eax ebp r11 r12 r12d r13 r13d r14 r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word32 fn0000000000405C20(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx eax ecx esi rax rcx rsi si sil
// Preserved: rsp
fn0000000000405C20_entry:
	*rsiOut = rsi
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C20:
	byte cl_129
	word32 eax_107
	branch dil == 0x00 l0000000000405C40
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C40:
	eax_107 = 0x00000000 (alias)
	branch edx == 0x00000005 l0000000000405C3E
// DataOut: al dil eax edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C47:
	cl_129 = (byte) (uint64) (DPB(ecx, edx == 0x00000009, 0) | (word32) (edx == 0x00000003)) (alias)
// DataOut: cl dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C25:
	word32 eax_102 = (word32) (uint64) ((word32) (uint64) esi & 0x0000F000)
	branch eax_102 != 0x00008000 l0000000000405CA0
// DataOut: dil eax edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405CA0:
	cl_129 = eax_102 == 0x00004000
// DataOut: cl dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C55:
	eax_107 = 0x0000002F (alias)
	branch cl_129 != 0x00 l0000000000405C3E
// DataOut: al dil eax edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid>

l0000000000405C5E:
	branch Mem0[0x000000000061B12C:word32] == 0x00000001 l0000000000405CF0
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CF0:
	return 0x00000000
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C6B:
	word32 eax_53
	branch dil == 0x00 l0000000000405CC0
// DataOut: edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CC0:
	eax_107 = 0x00000040 (alias)
	branch edx == 0x00000006 l0000000000405C3E
// DataOut: al eax edi edx fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CCE:
	eax_107 = 0x0000007C (alias)
	branch edx == 0x00000001 l0000000000405C3E
// DataOut: al eax edi edx fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid>

l0000000000405CDC:
	eax_53 = DPB(0x0000007C, edx == 0x00000007, 0) (alias)
// DataOut: eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid>

l0000000000405C70:
	word64 rsi_61 = (uint64) (esi & 0x0000F000)
	*rsiOut = rsi_61
	word32 esi_62 = (word32) rsi_61
	eax_107 = 0x00000040 (alias)
	branch esi_62 == 0x0000A000 l0000000000405C3E
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C83:
	eax_107 = 0x0000007C (alias)
	branch esi_62 == 0x00001000 l0000000000405C3E
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid> rsi:<invalid>

l0000000000405C90:
	eax_53 = DPB(0x0000007C, esi_62 == 0x0000C000, 0) (alias)
// DataOut: eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid> rsi:<invalid>

l0000000000405CE2:
	return (word32) (uint64) ((word32) (uint64) -eax_53 & 0x0000003D)
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid> rsi:<invalid>

l0000000000405C33:
	eax_107 = 0x00000000 (alias)
	branch Mem0[0x000000000061B12C:word32] == 0x00000003 l0000000000405CB0
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405CB0:
	word64 rsi_114 = (uint64) (esi & 0x00000049)
	*rsiOut = rsi_114
	return (word32) (uint64) ((word32) (uint64) ~(word32) (uint64) (0x00000000 - cond((word32) rsi_114 - 0x00000001)) & 0x0000002A)
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C3E:
	return eax_107
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> rsi:<invalid>

fn0000000000405C20_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid>



byte fn0000000000405D00(word32 edx, word32 esi, byte dil, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al rdi rsi rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D00_entry:
// DataOut: dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D00:
	word32 edi_6 = (word32) dil
	word64 rsi_12
	word32 eax_13 = fn0000000000405C20(edx, esi, (byte) edi_6, out rsi_12)
	word64 rbx_18 = (uint64) eax_13
	word64 rdi_8
	*rdiOut = DPB(rdi, edi_6, 0)
	byte bl_20 = (byte) rbx_18
	branch (byte) eax_13 == 0x00 l0000000000405D33
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D10:
	word64 rdi_49 = Mem0[0x000000000061A610:word64]
	*rdiOut = rdi_49
	word64 rax_52 = Mem0[rdi_49 + 0x0000000000000028:word64]
	branch rax_52 >=u Mem0[rdi_49 + 0x0000000000000030:word64] l0000000000405D3A
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:(word32) dil rbx:(uint64) eax rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D3A:
	word64 rsp_82
	word64 rbx_83
	word32 edi_84
	byte dil_85
	byte al_86
	byte SZO_87
	byte C_88
	word32 ebx_89
	word32 eax_90
	byte Z_91
	word64 rdi_92
	word64 rax_93
	byte SCZO_94
	word64 rdx_95
	word32 esi_97
	word32 edx_98
	word64 rsi_99
	call __overflow (retsize: 8; depth: 12)
		uses: al_53,bl_20,C_56,dil_51,dwLoc04_4,eax_54,ebx_19,edi_50,edx,esi_80,qwLoc04,rax_52,rbx_18,rdi_49,rdx,rsi_81,rsp_2,SCZO_55,SZO_15,Z_16
		defs: al_86,bl_96,C_88,dil_85,eax_90,ebx_89,edi_84,edx_98,esi_97,rax_93,rbx_83,rdi_92,rdx_95,rsi_99,rsp_82,SCZO_94,SZO_87,Z_91
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D21:
	Mem78[rdi_49 + 0x0000000000000028:word64] = rax_52 + 0x0000000000000001
	Mem79[rax_52:byte] = bl_20
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D2B:
	Mem75[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D33:
	word64 rsp_44
	*rspOut = fp + 0x0000000000000004
	return bl_20 != 0x00
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx

fn0000000000405D00_exit:
// DataOut: al rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 edi:<invalid> rbx:rbx al:Test(NE,Z) rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> rcx:<invalid> -4(fp):rbx



word64 fn0000000000405D50(word64 rdi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r12b r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D50_entry:
	*r12bOut = r12b
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D50:
	word64 rbp_194 = rdi
	word64 rbx_10 = 0x0000000000000000
	word32 ebx_11 = 0x00000000
	word64 rax_17 = 0x0000000000000000
	branch Mem0[0x000000000061B114:byte] == 0x00 l0000000000405D92
// DataOut: ebx fs r11 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D7A:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405EA0
// DataOut: fs r11 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405EA0:
	word64 r14_239
	word64 rax_240 = fn000000000040CD70(fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000018:word64], out r14_239)
	rax_17 = DPB(rax_240, strlen(rax_240), 0) (alias)
	rbx_10 = rax_17 + 0x0000000000000001
	ebx_11 = (word32) (rax_17 + 0x0000000000000001) (alias)
// DataOut: ebx fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D87:
	word64 rbx_233 = (int64) Mem0[0x000000000061B178:word32]
	rbx_10 = rbx_233 + 0x0000000000000001
	ebx_11 = (word32) (rbx_233 + 0x0000000000000001) (alias)
// DataOut: ebx fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D92:
	branch Mem0[0x000000000061B144:byte] == 0x00 l0000000000405DB6
// DataOut: ebx fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 eax:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D9B:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E58
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 eax:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E58:
	rax_17 = 0x0000000000000002
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000405DB3
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 eax:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E6A:
	word64 rsp_215
	word64 r8_217
	word64 r9_218
	word64 r13_220
	word32 r14d_221
	word64 r15_222
	word64 rax_223 = fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rdi, fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out rsp_215, out rbp_194, out r8_217, out r9_218, out r11, out r13_220, out r14d_221, out r15_222)
	rax_17 = DPB(rax_223, strlen(rax_223), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:0x0000000000000002 rdi:<invalid> rsi:fp - 0x00000000000002B0 eax:0x00000002 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DA8:
	rax_17 = (int64) Mem0[0x000000000061B174:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 eax:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB3:
	rbx_10 = rbx_10 + rax_17
	ebx_11 = (word32) rbx_10 (alias)
// DataOut: ebx fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB6:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000405DD6
// DataOut: ebx fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DBF:
	word64 rax_159
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E40
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E40:
	rax_159 = DPB(rax_17, strlen(Mem0[rbp_194 + 0x00000000000000A8:word64]), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DC8:
	rax_159 = (int64) Mem0[0x000000000061B16C:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD3:
	ebx_11 = (word32) (rbx_10 + rax_159) (alias)
// DataOut: ebx fs r11 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD6:
	word64 rbx_74
	word64 rsp_75
	word64 rbp_76
	word64 r8_79
	word64 r9_80
	word64 r11_81
	word64 r12_82
	word64 r13_83
	word64 r14_84
	word64 r15_85
	word32 edi_138
	word64 rsi_145
	fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_11, Mem0[rbp_194:word64], r11, fs, out rbx_74, out rsp_75, out rbp_76, out rsi_145, out edi_138, out r8_79, out r9_80, out r11_81, out r12_82, out r13_83, out r14_84, out r15_85)
	word64 rax_87 = (uint64) Mem0[0x000000000061B12C:word32]
	word64 rbx_102 = rbx_74 + Mem0[rsp_75 + 0x0000000000000008:word64]
	branch (word32) rax_87 == 0x00000000 l0000000000405E1C
// DataOut: edi fs r11 r11d r12b r14 r14d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DFC:
	edi_138 = (word32) Mem0[rbp_76 + 0x00000000000000B0:byte]
	rbx_102 = rbx_102 + DPB(rax_87, (word32) ((byte) fn0000000000405C20((word32) ((uint64) Mem0[rbp_76 + 0x00000000000000A0:word32]), (word32) ((uint64) Mem0[rbp_76 + 0x0000000000000028:word32]), (byte) edi_138, out rsi_145) != 0x00), 0)
// DataOut: edi fs r11 r11d r12b r14 r14d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ecx:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E1C:
	branch (Mem0[rsp_75 + 0x00000000000002A8:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000405EBF
// DataOut: edi fs r11 r11d r12b r14 r14d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EBF:
	__stack_chk_fail()
// DataOut: edi fs r11 r11d r14 r14d r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EC4_thunk_fn0000000000405ED0:
	word64 rsp_131
	word64 rbp_132
	word64 r9_133
	byte r12b_134
	return fn0000000000405ED0(rbp_76, rsi_145, edi_138, r8_79, r11_81, r14_84, fs, out rsp_131, out rbp_132, out r9_133, out r12b_134)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E36:
	word64 rbp_128
	*rbpOut = Mem0[rsp_75 + 0x00000000000002C0:word64]
	word64 rsp_129
	*rspOut = rsp_75 + 0x00000000000002C8
	return rbx_102
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405D50_exit:
// DataOut: r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r12:<invalid> r8:<invalid> cl:<invalid> edx:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> dl:<invalid> r9:<invalid> sil:<invalid> r15:<invalid> r10:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000405ED0(word64 rbp, word64 rsi, word32 edi, word64 r8, word64 r11, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r11d r14 r14d r8 rbp rsi
// LiveOut: r12b r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405ED0_entry:
	*r9Out = r9
// DataOut: edi fs r11 r11d r14 r14d r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405ED0:
	word64 r12_21 = (uint64) edi
	word64 rdx_6 = Mem0[0x000000000061B1B0:word64]
	word64 rax_8 = Mem0[0x000000000061B020:word64]
	byte r12b_23
	*r12bOut = (byte) r12_21
	word64 rsp_117 = fp - 0x0000000000000014
	word64 rbx_124 = rdx_6
	branch rax_8 >u rdx_6 l0000000000405EF3
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405EEF_1:
	rbx_124 = rax_8
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405EF3:
	word64 rsi_326
	word64 rax_321
	word64 r8_316
	branch rbx_124 <=u Mem0[0x000000000061A660:word64] l00000000004060C8
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060C8:
	rax_321 = 0x0000000000000000
	r8_316 = rdx_6
	rsi_326 = Mem0[0x000000000061B028:word64]
	branch rbx_124 == 0x0000000000000000 l0000000000406004
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060DD:
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F00:
	word64 rdi_355 = Mem0[0x000000000061B028:word64]
	word32 edi_356 = (word32) rdi_355
	branch rbx_124 <u rax_8 >>u 0x0000000000000001 l0000000000406170
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406170:
	r8 = 0x0000000055555555
	branch rbx_124 >u rax_8 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040617F:
	rbp = rbx_124 * 0x0000000000000002
	word64 rsp_499
	Mem502[0x000000000061B028:word64] = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rbp + rbx_124 << 0x0000000000000004, rdi_355, out rsp_499, out r8)
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r8:0x0000000055555555 -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F16:
	branch rax_8 >u rax_8 >>u 0x0000000000000001 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F29:
	word64 rsp_484
	word64 rax_486 = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rax_8 * 0x0000000000000018, rdi_355, out rsp_484, out r8)
	rbp = Mem0[0x000000000061B020:word64]
	Mem489[0x000000000061B028:word64] = rax_486
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:0x00000000AAAAAAAA -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F44:
	word64 rax_398 = Mem0[0x000000000061A660:word64]
	word64 rdi_401 = rbp - rax_398
	rsi = rbp + 0x0000000000000001 + rax_398
	edi_356 = (word32) rdi_401 (alias)
	word64 rcx_404 = rsi *s rdi_401
	branch rbp >u rsi l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F66:
	word64 rax_414 = (uint64) ((uint128) (uint64) rcx_404 /u rdi_401)
	branch rsi != rax_414 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F77:
	r8 = 0x00000000FFFFFFFF
	branch rcx_404 >>u 0x0000000000000001 >u rax_414 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040619D:
	fn0000000000410E50()
// DataOut: edi fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// Terminates process

l00000000004061A2_thunk_fn00000000004061B0:
	word64 rsp_380
	word64 rbp_381
	word64 rsi_382
	word64 r8_383
	word64 r9_384
	word64 r12_385
	word64 r14_386
	word64 r15_387
	return fn00000000004061B0(rbx_124, rbp, rsi, edi_356, r8, r11d, r12_21, r14, fs, out rsp_380, out rbp_381, out rsi_382, out r8_383, out r9_384, out r12_385, out r14_386, out r15_387)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F8D:
	word64 rax_427 = fn0000000000410C40(rsi, (rcx_404 >>u 0x0000000000000001) * 0x0000000000000008, out rsp_117)
	word64 rcx_431 = Mem0[0x000000000061A660:word64]
	branch rbp <=u rcx_431 l0000000000405FE4
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FA6:
	word64 rsi_451 = Mem0[0x000000000061B028:word64]
	word64 rcx_454 = rcx_431 * 0x0000000000000008 + 0x00000008
	word64 rdx_456 = rsi_451 + (rcx_431 * 0x0000000000000003) * 0x0000000000000008 + 0x0000000000000010
	word64 rsi_459 = rsi_451 + (rbp * 0x0000000000000003) * 0x0000000000000008
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FD0:
	Mem463[rdx_456 + 0x0000000000000000:word64] = rax_427
	rdx_456 = rdx_456 + 0x0000000000000018
	rax_427 = rax_427 + rcx_454
	rcx_454 = rcx_454 + 0x0000000000000008
	branch rdx_456 != rsi_459 l0000000000405FD0
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FE4:
	Mem448[0x000000000061A660:word64] = rbp
	rax_321 = 0x0000000000000000
	r8_316 = Mem448[0x000000000061B1B0:word64]
	rsi_326 = Mem448[0x000000000061B028:word64]
	branch rbx_124 != 0x0000000000000000 l00000000004060E0
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060E0:
	word64 rcx_330 = Mem0[rsi_326 + 0x0000000000000010:word64]
	Mem332[rsi_326:byte] = 0x01
	word64 rdi_328 = rax_321 + 0x0000000000000001
	Mem334[rsi_326 + 0x0000000000000008:word64] = rdi_328 * 0x0000000000000003
	word64 rdx_335 = 0x0000000000000000
// DataOut: fs r11 r12b r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060F8:
	Mem341[rcx_330 + rdx_335 * 0x0000000000000008:word64] = 0x0000000000000003
	rdx_335 = rdx_335 + 0x0000000000000001
	branch rdx_335 <=u rax_321 l00000000004060F8
// DataOut: fs r11 r12b r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406109:
	rsi_326 = rsi_326 + 0x0000000000000018
	branch rdi_328 == rbx_124 l0000000000406004
// DataOut: fs r11 r12b r8 r9 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406116:
	rax_321 = rdi_328
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406004:
	word64 rbp_183 = 0x0000000000000000
	branch r8_316 == 0x0000000000000000 l000000000040612D
// DataOut: fs r11 r12b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040600F:
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406010:
	word64 rbp_190
	byte r12b_192
	word64 r9_191
	word64 rax_193 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbp_183 * 0x0000000000000008:word64], r11, fs, out rsp_117, out rbp_190, out r9_191, out r12b_192)
	r11 = rax_193
	word64 r14_199 = Mem0[0x000000000061B1B0:word64]
	branch rbx_124 == 0x0000000000000000 l0000000000406120
// DataOut: fs r11 r12b r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406033:
	word64 r13_222 = Mem0[0x000000000061B0C8:word64]
	word64 rsi_223 = Mem0[0x000000000061B028:word64] + 0x0000000000000010
	word64 rcx_224 = 0x0000000000000001
	rsi_241 = rsi_223
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r13:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060A7:
	word64 rsi_241
	r9_191 = r9_191 - 0x0000000000000001
	*r9Out = r9_191
	branch Mem0[rsi_241:byte] == 0x00 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060B3:
	word64 r10_267
	branch r12b_192 != 0x00 l0000000000406050
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406050:
	r10_267 = (uint64) ((uint128) (uint64) rbp_190 /u (uint64) ((uint128) ((uint64) ((rsi_223 - 0x0000000000000001) + rcx_514)) /u rcx_514))
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060B8:
	r10_267 = (uint64) ((uint128) (uint64) rbp_190 % rcx_514)
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040606A:
	word64 rdx_273 = rax_193 + (uint64) (r9_191 != r10_267) * 0x0000000000000002
	word64 rax_276 = Mem0[rsi_241 + 0x0000000000000000:word64] + r10_267 * 0x0000000000000008
	r9_191 = Mem0[rcx_514:word64]
	*r9Out = r9_191
	branch rdx_273 <=u r9_191 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406086:
	Mem286[r14_199 + 0x0000000000000008:word64] = Mem0[r14_199 + 0x0000000000000008:word64] + (rdx_273 - r9_191)
	Mem287[rax_276:word64] = rdx_273
	Mem290[rsi_241:byte] = Mem287[r14_199 + 0x0000000000000008:word64] <u r13_222
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> al:<invalid> edi:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040609A:
	rsi_241 = rsi_241 + 0x0000000000000018
	rcx_224 = rcx_514 + 0x0000000000000001
	word64 rcx_514 = rcx_224
	branch rbx_124 <=u rcx_514 l0000000000406120
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406120:
	rbp_183 = rbp_190 + 0x0000000000000001
	branch rbp_190 + 0x0000000000000001 <u r14_199 l0000000000406010
// DataOut: fs r11 r12b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040612D:
	branch rbx_124 <=u 0x0000000000000001 l0000000000406164
// DataOut: fs r12b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406133:
	word64 rdx_141 = Mem0[0x000000000061B028:word64]
	word64 rax_143 = rbx_124 * 0x0000000000000003
	branch Mem0[rdx_141 - 0x0000000000000018 + (rax_143 << 0x0000000000000003):byte] != 0x00 l0000000000406164
// DataOut: fs r12b r9 rax rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406149:
	word64 rax_150 = (rax_143 << 0x0000000000000003) + rdx_141
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040615A:
	rbx_124 = rbx_124 - 0x0000000000000001
	branch rbx_124 != 0x0000000000000001 l0000000000406150
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406150:
	rax_150 = rax_150 - 0x0000000000000018
	branch Mem0[rax_150 - 0x0000000000000018:byte] != 0x00 l0000000000406164
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406164:
	word64 rsp_133 = Mem0[rsp_117 + 0x0000000000000010:word64]
	word64 rbp_135
	*rbpOut = Mem0[rsp_133 + 0x0000000000000008:word64]
	word64 rsp_139
	*rspOut = rsp_133 + 0x0000000000000018
	return rbx_124
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn0000000000405ED0_exit:
// DataOut: r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> edx:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r13:<invalid> r10:<invalid> ecx:<invalid> r15:<invalid> dx:<invalid> esi:<invalid> r9d:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn00000000004061B0(word64 rbx, word64 rbp, word64 rsi, word32 edi, word64 r8, word32 r11d, word64 r12, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11d r12 r14 r14d r8 rbp rbx rsi
// LiveOut: eax r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004061B0_entry:
// DataOut: edi fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004061B0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = (uint64) edi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	rsp = fp - 0x0000000000000030
	rax = Mem0[fs:0x00000028:word64]
	qwLoc18 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406248
// DataOut: ebp edi esp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406248:
	rax = fn000000000040C9B0(rsi, edi, r8, r12, out rsp, out rbp, out r12)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	rdi = rax
	edi = (word32) rdi (alias)
	branch Test(EQ,Z) l00000000004061D1
// DataOut: ebp esp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rbp:(uint64) edi rax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406259:
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000406267
// DataOut: eax ebp ebx edx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rdx:<invalid> rbx:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406264_1:
	edx = eax
// DataOut: ebp ebx edx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406267:
// DataOut: ebp ebx edx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061D1:
	r8 = (uint64) ebp
	rcx = 0x000000000041375A
	rdx = 0x0000000000000015
	rsi = 0x0000000000000001
	rdi = rsp
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A)
	rbx = rsp
	rax = rsp
// DataOut: ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rdx:<invalid> rbx:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061F3:
	rcx = (uint64) Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	edx = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rdx = (uint64) (edx & ecx)
	rdx = (uint64) (edx & 0x80808080)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
// DataOut: dl eax ebp ebx edx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040620B:
	rcx = (uint64) edx
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
// DataOut: cl dl eax ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406216_1:
	edx = ecx
// DataOut: dl eax ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
// DataOut: dl eax ebp ebx ecx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040621D_1:
	rax = rcx
// DataOut: dl eax ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	rdx = (uint64) eax
	rdx = (uint64) (edx - ebx)
	SCZO = cond(edx)
// DataOut: ebp ebx edx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> eax:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040622B:
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	rax = (uint64) edx
	branch Test(NE,Z) l0000000000406269
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406269:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	r9 = rsi
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	sil = Test(EQ,Z)
	rdx = (uint64) (edx | esi)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l00000000004062C8
// DataOut: al dl ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062C8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000000004062A1
// DataOut: al dl ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062CC:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A1:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004062B8
// DataOut: dl ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A5:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l00000000004062B8
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062B8:
	rsi = Mem0[rdi:word64]
	rdi = Mem0[rcx:word64]
// DataOut: ebp ebx esi fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:Test(EQ,Z) eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7D0:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	v31 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v31
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	eax = strcmp(rdi, rsi)
	r13 = (uint64) eax
	rax = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: eax fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> eax:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7F1:
	edx = (word32) Mem0[rbx:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040AAE7
// DataOut: dl fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7FC:
	ecx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	al = 0x01
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A806:
	eax = (word32) dl
	rsi = 0x000000000000002E
	rsi = (uint64) (esi - eax)
	SCZO = cond(esi)
	branch Test(NE,Z) l000000000040A81D
// DataOut: cl dl esi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A812:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax esi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A81D:
	eax = (word32) cl
	rdi = 0x000000000000002E
	rdi = (uint64) (edi - eax)
	SCZO = cond(edi)
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl edi esi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A829:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x00)
	rax = 0x0000000000000001
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl eax edi esi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A848:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A84C:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A852:
	SCZO = cond(Mem0[rbx + 0x0000000000000002:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax edi fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A85D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040A9A0
// DataOut: cl dl fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9A0:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9AA:
	SCZO = cond(Mem0[rbp + 0x0000000000000002:byte] - 0x00)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A865:
	SCZO = cond(dl - 0x2E)
	branch Test(EQ,Z) l000000000040AAC0
// DataOut: cl fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAC0:
	rbx = rbx + 0x0000000000000001
	rbp = rbp + 0x0000000000000001
	SCZO = cond(cl - 0x2E)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A877
// DataOut: eax fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAD6:
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x00000000FFFFFFFF rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0xFF dl:<invalid> sil:<invalid> rbx:<invalid> eax:0xFFFFFFFF r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A86E:
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A9B4
// DataOut: fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A877:
	rdi = rsp
	Mem0[rsp:word64] = rbx
	Mem0[rsp + 0x0000000000000008:word64] = rbp
	rax = fn000000000040A730(rdi, r14d, out r9)
	rdi = rsp + 0x0000000000000008
	r14 = rax
	r12 = r14
	rax = fn000000000040A730(rdi, r14d, out r9)
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000040A8A0
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A89B_1:
	r12 = Mem0[rsp:word64]
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8A0:
	r10 = rax
	r10 = r10 - rbp
	r12 = r12 - rbx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AAF1
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAF1:
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r10 = r10 - rbp
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000040A8BB
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB02:
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8B2:
	SCZO = cond(r12 - r10)
	branch Test(EQ,Z) l000000000040AA8B
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA8B:
	rdx = r12
	rsi = rbp
	rdi = rbx
	eax = strncmp(rdi, rsi, rdx)
	SZO = cond(eax & eax)
	C = false
	r10 = r12
	branch Test(NE,Z) l000000000040A8BB
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAA4:
	r12 = Mem0[rsp:word64]
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r12 = r12 - rbx
	r10 = r10 - rbp
	SCZO = cond(r10)
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8BB:
	rcx = 0x0000000000000000
	r8 = 0x0000000000000000
	SZO = cond(r8d)
	C = false
	rbx = 0x00000000FFFFFFFF
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8C6:
	SCZO = cond(r10 - rcx)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8CF:
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB07:
	SCZO = cond(r12 - r8)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A971:
	SCZO = cond(r12 - r8)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A97A:
	esi = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	eax = (int32) sil
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: esi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8D8:
	SCZO = cond(r10 - rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8E7:
	eax = (int32) r9b
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D4:
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	SCZO = cond(dl - 0x30)
	branch Test(EQ,Z) l000000000040A9D0
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9DE:
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9EA:
	SCZO = cond(r9b - 0x30)
	branch Test(EQ,Z) l000000000040A9E0
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9E0:
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9F0:
	eax = (int32) dl
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	eax = (int32) r9b
	branch Test(UGT,CZ) l000000000040AADB
// DataOut: dl eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AADB:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A8C6
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:(int32) r9b r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA03:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9d rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:(int32) r9b r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA0B:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: dl eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA22:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AA2C
// DataOut: dl eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA26:
	eax = (int32) dl
	rax = (uint64) (eax - r9d)
	SCZO = cond(eax)
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA2C:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	esi = (int32) dl
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(ULE,CZ) l000000000040AA10
// DataOut: dl eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA10:
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	esi = (int32) r9b
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9B4:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rax = 0x0000000000000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA44:
	edx = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	rdx = (uint64) (edx - 0x00000030)
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040AAE7
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAE7:
	rax = 0x00000000FFFFFFFF
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA55:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040A8C6
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA5D:
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8F7:
	SCZO = cond(r12 - r8)
	branch Test(EQ,Z) l000000000040AB18
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB18:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A900:
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A98F:
	rdx = (uint64) esi
// DataOut: dl fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A905:
	esi = (word32) dl
	rax = 0x0000000000000000
	edi = rsi - 0x0000000000000030
	SCZO = cond(edi - 0x00000009)
	branch Test(ULE,CZ) l000000000040A925
// DataOut: dl eax esi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A912:
	rax = (uint64) esi
	rax = (uint64) (eax & 0xFFFFFFDF)
	rax = (uint64) (eax - 0x00000041)
	SCZO = cond(eax - 0x00000019)
	branch Test(UGT,CZ) l000000000040AA68
// DataOut: dl esi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA68:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(dl - 0x7E)
	rax = (uint64) esi
	branch Test(NE,Z) l000000000040AA77
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA73_1:
	eax = r11d
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA77:
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A923:
	rax = (uint64) esi
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A925:
	SCZO = cond(r10 - rcx)
	branch Test(EQ,Z) l000000000040AB1F
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB1F:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax edi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A92E:
	r9d = (word32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: eax fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A934:
	esi = (word32) r9b
	rdi = 0x0000000000000000
	edx = rsi - 0x0000000000000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A942:
	rdx = (uint64) esi
	rdi = (uint64) esi
	rdx = (uint64) (edx & 0xFFFFFFDF)
	rdx = (uint64) (edx - 0x00000041)
	SCZO = cond(edx - 0x00000019)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A951:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(r9b - 0x7E)
	rdi = (uint64) esi
	branch Test(NE,Z) l000000000040A961
// DataOut: eax edi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A95D_1:
	edi = r11d
// DataOut: eax edi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A961:
	SCZO = cond(eax - edi)
	branch Test(NE,Z) l000000000040AA80
// DataOut: eax edi fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA80:
	rax = (uint64) (eax - edi)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040AA86
// DataOut: eax fs r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA82_1:
	eax = r13d
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA86:
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A969:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
// DataOut: fs r10 r11 r11d r12 r12b r12d r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB10:
	rax = (uint64) r13d
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF eax:<invalid> r13:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A834:
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x0000000000000001 rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbx:<invalid> eax:0x00000001 r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A838:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> rcx:<invalid> ecx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062AE:
	return rax
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x0000000000000001 rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> sil:Test(EQ,Z) eax:0x00000001 rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040623D:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn00000000004061B0_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r12 (=> r12Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r13:<invalid> ecx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000406400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406400_entry:
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406400:
	branch Mem0[0x000000000061A408:word64] == 0x0000000000000000 l0000000000406418
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406418:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A410)
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406439_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:<invalid>

l000000000040640A:
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040640F_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A400)
	return
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A400

fn0000000000406400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid>



void fn0000000000406440(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406440_entry:
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406440:
	branch Mem0[0x000000000061B128:byte] == 0x00 l0000000000406470
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406470:
	Mem25[0x000000000061B128:byte] = 0x01
	fn0000000000406400()
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018
// LocalsOut: fp(64)

l000000000040644D:
	word64 rsp_16
	byte SCZO_17
	byte Z_18
	word64 rsi_19
	word64 rdi_20
	word64 rcx_21
	word32 edx_22
	word64 rdx_23
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: qwLoc10_8,rcx_11,rdi_13,rdx_12,rsi_10,rsp_14,SCZO_15,Z_5
		defs: edx_22,rcx_21,rdi_20,rdx_23,rsi_19,rsp_16,SCZO_17,Z_18
	return
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdi:rdi rsi:<invalid> rcx:<invalid> rdx:<invalid> -16(fp):rdi

fn0000000000406440_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> -16(fp):rdi



word64 fn0000000000406490(ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax rax rsi rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406490_entry:
	*rsiOut = rsi
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406490:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004064EF:
	branch (word32) (uint64) Mem0[0x000000000061B038:word32] != 0x00000000 l0000000000406503
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064F9:
	word64 rax_133 = (uint64) Mem0[0x000000000061B034:word32]
	branch (word32) rax_133 == 0x00000000 l0000000000406538
// DataOut: eax fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406538:
	word64 rsp_142
	*rspOut = fp + 0x0000000000000004
	return rax_133
// DataOut: eax fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx

fn0000000000406490_exit:
// DataOut: eax rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rax:<invalid> rbx:rbx rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> -4(fp):rbx

l0000000000406503:
	branch Mem0[0x000000000061B128:byte] == 0x00 l00000000004064A0
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040650C:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064A0:
	word64 rsp_37
	word64 rbx_38
	byte SCZO_39
	word32 eax_40
	word64 rax_41
	byte SZO_42
	byte C_43
	byte Z_44
	word32 edi_45
	word64 rdi_46
	word64 rdx_47
	word32 esi_48
	word64 rsi_49
	word32 ebx_50
	word32 edx_51
	call fflush_unlocked (retsize: 8; depth: 140)
		uses: C_30,dwLoc04_4,eax_33,ebx_15,edi_20,edx_14,esi_17,rax_32,rbx_22,rdi_36,rdx_18,rsi_16,rsp_23,SCZO_34,SZO_31,Z_35
		defs: C_43,eax_40,ebx_50,edi_45,edx_51,esi_48,rax_41,rbx_38,rdi_46,rdx_47,rsi_49,rsp_37,SCZO_39,SZO_42,Z_44
	word64 rsp_58
	word64 rbx_59
	byte SCZO_60
	word32 eax_61
	word64 rax_62
	byte SZO_63
	byte C_64
	byte Z_65
	word32 edi_66
	word64 rdi_67
	word64 rdx_68
	word32 esi_69
	word64 rsi_70
	word32 ebx_71
	word32 edx_72
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_55,dwLoc04_4,eax_40,ebx_50,edi_53,edx_51,esi_48,rax_41,rbx_38,rdi_52,rdx_56,rsi_57,rsp_37,SCZO_39,SZO_54,Z_44
		defs: C_64,eax_61,ebx_71,edi_66,edx_72,esi_69,rax_62,rbx_59,rdi_67,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_63,Z_65
	word64 rbx_73 = (uint64) Mem0[0x000000000061B038:word32]
	word64 rax_75 = (uint64) Mem0[0x000000000061B034:word32]
	word32 ebx_74 = (word32) rbx_73
	word32 eax_76 = (word32) rax_75
	branch eax_76 == 0x00000000 l0000000000406528
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406528:
	signal((uint64) ebx_74, 0x0000000000000000)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064CB:
	Mem124[0x000000000061B034:word32] = (word32) (uint64) (eax_76 - 0x00000001)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064D9:
	word64 rsp_82
	word64 rbx_83
	byte SCZO_84
	word32 eax_85
	word64 rax_86
	byte SZO_87
	byte C_88
	byte Z_89
	word32 edi_90
	word64 rdi_91
	word64 rdx_92
	word32 esi_93
	word64 rsi_94
	word32 ebx_95
	word32 edx_96
	call raise (retsize: 8; depth: 140)
		uses: C_79,dwLoc04_4,eax_76,ebx_80,edi_66,edx_72,esi_69,rax_75,rbx_73,rdi_81,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_77,Z_78
		defs: C_88,eax_85,ebx_95,edi_90,edx_96,esi_93,rax_86,rbx_83,rdi_91,rdx_92,rsi_94,rsp_82,SCZO_84,SZO_87,Z_89
	word64 rsp_104
	word64 rbx_105
	byte SCZO_106
	word32 eax_107
	word64 rax_108
	byte SZO_109
	byte C_110
	byte Z_111
	word32 edi_112
	word64 rdi_113
	word64 rdx_114
	word32 esi_115
	word64 rsi_116
	word32 ebx_117
	word32 edx_118
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_100,dwLoc04_4,eax_85,ebx_95,edi_90,edx_98,esi_102,rax_86,rbx_83,rdi_103,rdx_97,rsi_101,rsp_82,SCZO_84,SZO_99,Z_89
		defs: C_110,eax_107,ebx_117,edi_112,edx_118,esi_115,rax_108,rbx_105,rdi_113,rdx_114,rsi_116,rsp_104,SCZO_106,SZO_109,Z_111
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)



word64 fn0000000000406540(word64 rcx, word64 rdx, byte sil, word64 rdi, word64 r11, word32 r14d, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14d r15 rcx rdi rdx sil
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rax
fn0000000000406540_entry:
// DataOut: fs r11 r14d r15 rcx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406540:
	word32 r15d_473
	byte r15b_471
	word32 edx_455
	word32 r14d_475
	word64 rbp_423
	word64 rbx_24 = rdx
	word32 ebx_166 = (word32) rdx
	word64 rdx_32 = Mem0[rdi:word64]
	word64 r12_163 = Mem0[r15 + 0x0000000000000008:word64]
	branch sil == 0x00 l00000000004069BD
// DataOut: ebx fs r11 r12 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004069BD:
	branch Mem0[0x000000000061B129:byte] != 0x00 l00000000004069D8
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069D8:
	branch Mem0[0x000000000061B198:byte] == 0x00 l0000000000406A08
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A08:
	r14d = (word32) Mem0[rcx + 0x00000000000000B1:byte]
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069E1:
	branch Mem0[rdi + 0x00000000000000B1:byte] == 0x00 l0000000000406A20
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A20:
	r14d = 0x00000000 (alias)
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A10:
	word64 r15_883 = (uint64) Mem0[rcx + 0x0000000000000028:word32]
	r15d_473 = (word32) r15_883 (alias)
	r15b_471 = (byte) r15_883 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069EA:
	word64 r15_888 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r15d_473 = (word32) r15_888 (alias)
	r15b_471 = (byte) r15_888 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069F7:
	word64 r14_870 = (uint64) (r14d ^ 0x00000001)
	r14d_475 = (word32) r14_870 (alias)
	r14b = (byte) r14_870 (alias)
	r12_163 = rdx_32
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r15:<invalid> rsi:0x0000000000000001 r14d:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069C6:
	r12_163 = rdx_32
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406567:
	branch Mem0[0x000000000061B129:byte] != 0x00 l0000000000406580
// DataOut: ebx fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406580:
	r14d_475 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
	word64 r15_836 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r14b = (byte) r14d_475 (alias)
	r15d_473 = (word32) r15_836 (alias)
	r15b_471 = (byte) r15_836 (alias)
	branch r14b != 0x00 l00000000004065B0
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406594:
	word64 rsi_844
	eax = fn0000000000404CD0(0x0000000C, out rsi_844)
	edx_455 = 0x0000000C (alias)
	branch (byte) eax != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065AB:
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000C r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B0:
	word64 rax_498
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l0000000000406628
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406628:
	rax_498 = (uint64) ((word32) (uint64) r15d_473 & 0x0000F000)
	word32 eax_620 = (word32) rax_498
	branch eax_620 == 0x00008000 l0000000000406868
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406868:
	branch (r15d_473 & 0x00000800) == 0x00000000 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406871:
	word64 rsi_810
	branch (byte) fn0000000000404CD0(0x00000010, out rsi_810) == 0x00 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068B8:
	branch (r15d_473 & 0x00000400) == 0x00000000 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068C1:
	word64 rsi_798
	branch (byte) fn0000000000404CD0(0x00000011, out rsi_798) == 0x00 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040693B:
	word64 rsi_744
	branch (byte) fn0000000000404CD0(0x00000015, out rsi_744) == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406949:
	branch Mem0[rdi + 0x00000000000000B8:byte] == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040695C:
	branch (word32) (uint64) (r15d_473 & 0x00000049) == 0x00000000 l000000000040697A
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406962:
	word64 rsi_780
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_780) == 0x00 l000000000040697A
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040697A:
	branch Mem0[rdi + 0x0000000000000020:word64] <=u 0x0000000000000001 l00000000004065CF
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406985:
	word64 rsi_768
	branch (byte) fn0000000000404CD0(0x00000016, out rsi_768) == 0x00 l00000000004065CF
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406997:
	edx_455 = 0x00000016 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406970:
	edx_455 = 0x0000000E (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406952:
	edx_455 = 0x00000015 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068CF:
	edx_455 = 0x00000011 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040687F:
	edx_455 = 0x00000010 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040663B:
	branch eax_620 == 0x00004000 l00000000004068E0
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068E0:
	branch (word32) (uint64) ((word32) (uint64) r15d_473 & 0x00000202) == 0x00000202 l00000000004069A1
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069A1:
	edx_455 = 0x00000014 (alias)
	word64 rsi_721
	branch (byte) fn0000000000404CD0(0x00000014, out rsi_721) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069B8:
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000014 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F3:
	branch (r15b_471 & 0x02) == 0x00 l0000000000406910
// DataOut: ebx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F9:
	edx_455 = 0x00000013 (alias)
	word64 rsi_709
	branch (byte) fn0000000000404CD0(0x00000013, out rsi_709) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406910:
	edx_455 = 0x00000006 (alias)
	branch (word32) (uint64) (r15d_473 & 0x00000200) == 0x00000000 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406922:
	word64 rsi_693
	edx_455 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x00000012, out rsi_693) - 0x01)) & 0xFFFFFFF4) + 0x00000012) (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000006 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406646:
	branch eax_620 == 0x0000A000 l0000000000406859
// DataOut: eax ebx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406859:
	edx_455 = 0x00000007 (alias)
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406651:
	edx_455 = 0x00000008 (alias)
	branch eax_620 == 0x00001000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040665D:
	edx_455 = 0x00000009 (alias)
	branch eax_620 == 0x0000C000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000008 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406666:
	edx_455 = 0x0000000A (alias)
	branch eax_620 == 0x00006000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x09 rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040666F:
	word64 rdx_650 = (uint64) (eax_620 != 0x00002000)
	edx_455 = rdx_650 + 0x000000000000000B + rdx_650
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x0A rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B9:
	rax_498 = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	edx_455 = (word32) (uint64) Mem0[rax_498 * 0x0000000000000004 + 0x00412C60:word32] (alias)
	branch edx_455 != 0x00000005 l0000000000406680
// DataOut: ebx edx fs r11 r12 r14d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406680:
	r14b = (byte) (uint64) (r14d_475 & DPB(eax, edx_455 == 0x00000007, 0)) (alias)
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406689:
	branch r14b == 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040668E:
	edx_455 = 0x0000000D (alias)
	branch Mem0[0x000000000061B198:byte] != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040669C:
	word64 rsi_585
	edx_455 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x0000000D, out rsi_585) - 0x01)) & 0xFFFFFFFA) + 0x0000000D) (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000D r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065CF:
	word32 eax_502 = strlen(r12_163)
	word64 rax_503 = DPB(rax_498, eax_502, 0)
	word64 rbp_504 = Mem0[0x000000000061B120:word64]
	r14b = (byte) eax_502 (alias)
	word64 r15_509 = r12_163 + rax_503
	branch rbp_504 == 0x0000000000000000 l0000000000406619
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065EA:
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F0:
	word64 rdx_535 = Mem0[rbp_504:word64]
	branch rax_503 <u rdx_535 l0000000000406610
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F9:
	branch strncmp(r15_509 - rdx_535, Mem0[rbp_504 + 0x0000000000000008:word64], rdx_535) == 0x00000000 l00000000004068A0
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A0:
	branch rbp_504 == 0x0000000000000000 l0000000000406619
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A9:
	rbp_423 = rbp_504 + 0x0000000000000010
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406610:
	rbp_504 = Mem0[rbp_504 + 0x0000000000000020:word64]
	branch rbp_504 != 0x0000000000000000 l00000000004065F0
// DataOut: ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406619:
	edx_455 = 0x00000005 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066B0:
	rbp_423 = ((uint64) edx_455 << 0x0000000000000004) + 6398944
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066C0:
	branch Mem0[rbp_423 + 0x0000000000000008:word64] == 0x0000000000000000 l0000000000406890
// DataOut: ebx edi fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406890:
	word64 rsi_442
	fn0000000000404CD0(0x00000004, out rsi_442)
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066D0:
	word64 rsi_430
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_430) != 0x00 l0000000000406840
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406840:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066DD:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(rbp_423)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406570:
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066FF:
	word64 rbp_197
	word64 r13_186
	branch rdx == 0x0000000000000000 l00000000004067D8
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067D8:
	word64 rbx_388
	word64 rsp_389
	word64 rbp_390
	word64 rsi_391
	word32 edi_392
	word64 r8_393
	word64 r9_394
	word64 r11_395
	word64 r12_396
	word64 r14_398
	word64 r15_399
	word64 rax_400 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_166, r12_163, r11, fs, out rbx_388, out rsp_389, out rbp_390, out rsi_391, out edi_392, out r8_393, out r9_394, out r11_395, out r12_396, out r13_186, out r14_398, out r15_399)
	Mem404[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + rax_400
	rbp_197 = rax_400
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406708:
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406732
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406711:
	word64 rax_290 = Mem0[rdx + 0x0000000000000018:word64]
	branch Mem0[rdx + 0x0000000000000020:word64] <u rax_290 + 0x0000000000000008 l0000000000406820
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406820:
	word64 rsp_341
	word64 rdi_342
	word64 rsi_343
	word64 rbp_344
	word64 r13_345
	word64 rcx_346
	word64 rdx_348
	byte SCZO_349
	byte sil_350
	byte SZO_351
	byte C_352
	word64 r15_354
	byte Z_355
	word32 r14d_356
	word64 r14_357
	word64 rax_358
	word32 r15d_359
	word32 esi_360
	word32 ecx_361
	word32 eax_362
	word32 edx_363
	word32 ebp_365
	word32 edi_366
	byte al_367
	byte dl_368
	byte r15b_369
	byte CZ_370
	word64 r8_373
	word64 r9_374
	call _obstack_newchunk (retsize: 8; depth: 40)
		uses: al_292,C_296,CZ_39,dl_50,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_17,dwLoc18_22,eax_291,ebp_56,ebx_25,ecx,edi_59,edx_49,esi,fs,r11,r12_46,r13_12,r14_43,r14b_41,r14d_44,r15_45,r15b_40,r15d_42,r8,r9,rax_290,rbp_55,rbx_24,rcx,rdi_340,rdx_293,rsi_339,rsp_26,SCZO_295,sil,SZO_60,Z_152
		defs: al_367,C_352,CZ_370,dl_368,eax_362,ebp_365,ebx_375,ecx_361,edi_366,edx_363,esi_360,fs_372,r11_371,r12_353,r13_345,r14_357,r14b_364,r14d_356,r15_354,r15b_369,r15d_359,r8_373,r9_374,rax_358,rbp_344,rbx_347,rcx_346,rdi_342,rdx_348,rsi_343,rsp_341,SCZO_349,sil_350,SZO_351,Z_355
	rax_290 = Mem0[rbx_24 + 0x0000000000000018:word64]
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406723:
	Mem335[rax_290:word64] = Mem0[0x000000000061B018:word64]
	Mem337[rbx_24 + 0x0000000000000018:word64] = Mem335[rbx_24 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: ebx fs r11 r12
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406732:
	word64 rsp_178
	word64 rbp_179
	word64 rsi_180
	word32 edi_181
	word64 r8_182
	word64 r9_183
	word64 r11_184
	word64 r12_185
	word64 r14_187
	word64 r15_188
	word64 rbx_177
	word64 rax_189 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_166, r12_163, r11, fs, out rbx_177, out rsp_178, out rbp_179, out rsi_180, out edi_181, out r8_182, out r9_183, out r11_184, out r12_185, out r13_186, out r14_187, out r15_188)
	word64 rdx_191 = rax_189 + Mem0[0x000000000061B018:word64]
	Mem199[0x000000000061B018:word64] = rdx_191
	rbp_197 = rax_189
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406781
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406767:
	word64 rax_200 = Mem199[rbx_177 + 0x0000000000000018:word64]
	branch Mem199[rbx_177 + 0x0000000000000020:word64] <u rax_200 + 0x0000000000000008 l0000000000406800
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406800:
	word64 rsp_248
	word64 rdi_249
	word64 rsi_250
	word64 rcx_253
	word64 rdx_255
	byte SCZO_256
	byte sil_257
	byte SZO_258
	byte C_259
	word64 r12_260
	word64 r15_261
	byte Z_262
	word32 r14d_263
	word64 r14_264
	word64 rax_265
	word32 r15d_266
	word32 esi_267
	word32 ecx_268
	word32 eax_269
	word32 edx_270
	word32 ebp_272
	word32 edi_273
	byte al_274
	byte dl_275
	byte r15b_276
	byte CZ_277
	word64 r11_278
	selector fs_279
	word64 r8_280
	word64 r9_281
	word32 ebx_282
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_203,C_206,CZ_158,dl_194,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_17,dwLoc18_22,eax_202,ebp_198,ebx_166,ecx_173,edi_181,edx_193,esi_168,fs_156,r11_184,r12_185,r13_186,r14_187,r14b_160,r14d_162,r15_188,r15b_159,r15d_161,r8_182,r9_183,rax_200,rbp_197,rbx_177,rcx_204,rdi_247,rdx_191,rsi_246,rsp_178,SCZO_205,sil_167,SZO_174,Z_196
		defs: al_274,C_259,CZ_277,dl_275,eax_269,ebp_272,ebx_282,ecx_268,edi_273,edx_270,esi_267,fs_279,r11_278,r12_260,r13_252,r14_264,r14b_271,r14d_263,r15_261,r15b_276,r15d_266,r8_280,r9_281,rax_265,rbp_251,rbx_254,rcx_253,rdi_249,rdx_255,rsi_250,rsp_248,SCZO_256,sil_257,SZO_258,Z_262
	rax_200 = Mem199[rbx_177 + 0x0000000000000018:word64]
	rdx_191 = Mem199[0x000000000061B018:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406779:
	Mem242[rax_200:word64] = rdx_191
	Mem244[rbx_177 + 0x0000000000000018:word64] = Mem242[rbx_177 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406781:
	word64 rsp_93
	word64 rsi_94
	fn0000000000406490(out rsp_93, out rsi_94)
	branch r14b != 0x00 l00000000004067A0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067A0:
	fn0000000000406400()
	word64 rcx_134 = Mem0[0x000000000061B0C8:word64]
	branch (uint64) ((uint128) (uint64) r13_186 /u rcx_134) == (uint64) ((uint128) ((uint64) ((rbp_197 - 0x0000000000000001) + r13_186)) /u rcx_134) l000000000040678B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067C6:
	fn0000000000406440(0x000000000061A550)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040678B:
	word64 rsp_111 = Mem0[rsp_93 + 0x0000000000000018:word64]
	word64 rbp_113
	*rbpOut = Mem0[rsp_111 + 0x0000000000000008:word64]
	word64 rsi_116
	*rsiOut = Mem0[rsp_111 + 0x0000000000000010:word64]
	word64 rdi_120
	*rdiOut = Mem0[rsp_111 + 0x0000000000000018:word64]
	word64 rsp_122
	*rspOut = rsp_111 + 0x0000000000000020
	return Mem0[rsp_93 + 0x0000000000000008:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406540_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000406A30()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406A30_entry:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A30:
	branch Mem0[0x000000000061B129:byte] == 0x00 l0000000000406A4F
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A39:
	word64 rsi_36
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_36) != 0x00 l0000000000406A58
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A58:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A420)
// DataOut: fs r11 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A75_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> al:<invalid>

l0000000000406A4B:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A4F:
	return
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

fn0000000000406A30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> al:<invalid>



word64 fn0000000000406A80(word32 ecx, word64 rdx, word64 rsi, word64 rdi, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx fs r11d r14 r15b rdi rdx rsi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406A80_entry:
// DataOut: ecx edx fs r11d r14 r15b rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A80:
	word64 r12_15 = rdi
	word32 ebp_20 = (word32) rdx
	word64 rbx_200 = rsi
	word64 rsp_191 = fp - 0x0000000000000124
	word64 rax_130 = 0x0000000000000000
	branch Mem0[0x000000000061A748:word64] == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406AB8:
	rax_130 = strstr(rsi, 0x0000000000413766)
	r14 = rax_130
	branch rax_130 == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406ACD:
	word32 eax_137 = strlen(rsi)
	rax_130 = DPB(rax_130, eax_137, 0) (alias)
	branch rax_130 <=u 0x0000000000000065 l0000000000406B20
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406B20:
	word64 rsp_155
	word64 rsi_156
	word64 rbp_157
	word32 r13d_158
	word32 ecx_159
	word64 r13_160
	word64 r12_161
	word64 rdi_162
	word64 rdx_163
	word64 rbx_164
	byte SCZO_165
	word64 rax_166
	selector fs_167
	word32 eax_168
	byte SZO_169
	byte C_170
	byte Z_171
	word32 esi_172
	word64 r14_173
	byte CZ_174
	word32 r8d_175
	word64 r8_176
	word64 rcx_177
	word32 r9d_178
	word64 r9_179
	word32 r11d_180
	byte r15b_181
	word64 r11_182
	word64 r15_183
	word32 ebp_184
	call __mempcpy_chk (retsize: 8; depth: 300)
		uses: C_134,CZ_140,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_17,dwLoc14_23,eax_137,ebp_20,ecx,esi,fs,qwLoc1C_29,r11,r11d,r12_15,r13_9,r13d_10,r14_135,r15,r15b,r8,r8d,r9,r9d,rax_138,rbp_19,rbx_147,rcx_143,rdi_146,rdx_144,rsi_142,rsp_25,SCZO_145,SZO_132,Z_133
		defs: C_170,CZ_174,eax_168,ebp_184,ecx_159,esi_172,fs_167,r11_182,r11d_180,r12_161,r13_160,r13d_158,r14_173,r15_183,r15b_181,r8_176,r8d_175,r9_179,r9d_178,rax_166,rbp_157,rbx_164,rcx_177,rdi_162,rdx_163,rsi_156,rsp_155,SCZO_165,SZO_169,Z_171
	word64 rsi_192
	word64 rbp_193
	word32 r13d_194
	word32 ecx_195
	word64 r13_196
	word64 rdi_198
	word64 rdx_199
	byte SCZO_201
	word64 rax_202
	word32 eax_204
	byte SZO_205
	byte C_206
	byte Z_207
	word32 esi_208
	byte CZ_210
	word32 r8d_211
	word64 r8_212
	word64 rcx_213
	word32 r9d_214
	word64 r9_215
	word64 r11_218
	word64 r15_219
	call stpcpy (retsize: 8; depth: 300)
		uses: C_170,CZ_174,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_17,dwLoc14_23,eax_168,ebp_184,ecx_159,esi_172,fs_167,qwLoc1C_29,r11_182,r11d_180,r12_161,r13_160,r13d_158,r14_173,r15_183,r15b_181,r8_176,r8d_175,r9_179,r9d_178,rax_166,rbp_157,rbx_164,rcx_185,rdi_186,rdx_188,rsi_190,rsp_155,SCZO_189,SZO_169,Z_171
		defs: C_206,CZ_210,eax_204,ebp_220,ecx_195,esi_208,fs_203,r11_218,r11d_216,r12_197,r13_196,r13d_194,r14_209,r15_219,r15b_217,r8_212,r8d_211,r9_215,r9d_214,rax_202,rbp_193,rbx_200,rcx_213,rdi_198,rdx_199,rsi_192,rsp_191,SCZO_201,SZO_205,Z_207
	rax_130 = strcpy(rax_202, rsi_192 + 0x0000000000000002)
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> eax:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406ADB:
	word64 rbp_63
	word32 esi_64
	word64 rdi_65
	word64 r8_66
	word64 r9_67
	word64 r11_68
	word64 r12_69
	word64 r13_70
	word64 r14_71
	word64 r15_72
	word64 rax_73 = fn0000000000410600(rax_130, rbx_200, ebp_20, 0x00000000000003E9, r12_15, 0x00000000, r11d, r14, r15b, fs, out rbp_63, out esi_64, out rdi_65, out r8_66, out r9_67, out r11_68, out r12_69, out r13_70, out r14_71, out r15_72)
	branch (Mem0[rsp_191 + 0x0000000000000108:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000406B66
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B66:
	__stack_chk_fail()
// DataOut: edi esi fs r11 r11d r14 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B6B_thunk_fn0000000000406B70:
	word64 rsp_117
	word64 rbp_118
	word64 r8_119
	word64 r9_120
	word64 r11_121
	word64 r12_122
	word64 r13_123
	word64 r14_124
	word64 r15_125
	return fn0000000000406B70(rbp_63, esi_64, rdi_65, r11_68, r14_71, fs, out rsp_117, out rbp_118, out r8_119, out r9_120, out r11_121, out r12_122, out r13_123, out r14_124, out r15_125)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B07:
	word64 rsp_110 = Mem0[rsp_191 + 0x0000000000000120:word64]
	word64 rbp_112
	*rbpOut = Mem0[rsp_110 + 0x0000000000000008:word64]
	word64 rsp_116
	*rspOut = rsp_110 + 0x0000000000000018
	return rax_73
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn0000000000406A80_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> dil:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> ebx:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> sil:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn0000000000406B70(word64 rbp, word32 esi, word64 rdi, word64 r11, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 r11d r14 rbp rdi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000406B70_entry:
// DataOut: edi esi fs r11 r11d r14 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406B70:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000012D0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406E00
// DataOut: fs r11 r11d r14 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E00:
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	r13 = fp - 0x0000000000001290
	rcx = 0x0000000000003F3F
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	bLoc1290 = al
	r8 = 0x000000003F3F3F3F
	qwLoc128F = rax
	Mem0[rbp + 0x0000000000000009:word16] = cx
	bLoc1285 = 0x00
	branch Test(EQ,Z) l0000000000406BC2
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BA4:
	r13 = fp - 0x0000000000001290
	rdi = rdi + 0x0000000000000010
	rsi = fp - 0x0000000000001290
	fn000000000040A600(rsi, rdi)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	branch Test(NE,Z) l0000000000406E41
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E41:
	rax = (uint64) Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000407138
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407138:
	bLoc1286 = 0x2E
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E59:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	bLoc1286 = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E6D:
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):0x2B -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC2:
	bLoc1286 = 0x00
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC7:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E90:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = fp - 0x0000000000000E70
	rbp = fp - 0x0000000000000E70
	branch Test(NE,Z) l0000000000407060
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rcx = 0x0000000000413764
	branch Test(EQ,Z) l0000000000407085
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
// DataOut: dil fs r11 r11d r13 r13d r14 rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000413764 eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407078:
	rsi = fp - 0x0000000000001260
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000413764 eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407085:
	r12 = fp - 0x0000000000000E70
	r8 = (uint64) Mem0[0x000000000061B178:word32]
	rdx = 0x0000000000000E3B
	rcx = 0x0000000000413779
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = fp - 0x0000000000000E70
	eax = __sprintf_chk(fp - 0x0000000000000E70, 0x0000000000000001, 0x0000000000000E3B, 0x0000000000413779)
	rdx = fp - 0x0000000000000E70
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070B0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
// DataOut: al eax fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070C7:
	rcx = (uint64) eax
	rbp = rdx + 0x0000000000000002
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
// DataOut: al cl fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D5_1:
	eax = ecx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8_1:
	rbp = rdx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rsi = 0x0000000000413764
	branch Test(NE,Z) l0000000000407288
// DataOut: fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = fp - 0x0000000000001260
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	rcx = 0x0000000000000200
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r13, out r14d, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:0x0000000000413764 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C2B:
	r15 = (uint64) Mem0[0x000000000061B174:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r15 = (uint64) (r15d - eax)
	SZO = cond(r15d & r15d)
	C = false
	rax = (uint64) r15d
	branch Test(LE,SZO) l0000000000406F50
// DataOut: eax fs r11 r11d r12 r13 r13d r14 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> al:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C4B:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406F50:
	rdx = rbp
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = 0x0000000000413764
	branch Test(NE,Z) l0000000000407120
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = rsp + 0x0000000000000070
	rax = fn000000000040CD70(rsi, rdi, out r14)
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:0x0000000000413764 r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:0x3764 al:0x64 r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CA1:
	r9 = (uint64) Mem0[0x000000000061B170:word32]
	rdi = rbp
	Mem0[rsp:word64] = rax
	r8 = r13
	rcx = 0x0000000000413769
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413769)
	rdi = rbp
	eax = strlen(rdi)
	rbp = rbp + rax
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> ax:0x3764 al:0x64 r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	rdi = 0x0000000000413771
	call fwrite_unlocked (retsize: 8; depth: 8)
	v35 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v35
	SCZO = cond(v35)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:0x0000000000413769 eax:<invalid> r8:<invalid> rdx:0xFFFFFFFFFFFFFFFF r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:0xFFFFFFFF r11:<invalid> r10:<invalid> cl:0x69 ah:<invalid> r15d:<invalid> ecx:0x00413769 r14d:<invalid> dl:0xFF sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407155:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D01:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = r12
	rbp = rbp - r12
	eax = fputs_unlocked(rdi, rsi)
	v33 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v33
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rsi = (uint64) Mem0[0x000000000061B168:word32]
	rsp = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = (uint64) Mem0[rbx + 0x0000000000000030:word32]
	rdi = 0x0000000000413764
	rdx = (uint64) Mem0[0x000000000061B164:word32]
	rsi = (uint64) eax
	branch Test(EQ,Z) l0000000000407238
// DataOut: eax edx fs r11 r11d r12 r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407229:
	rdi = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
// DataOut: eax edx fs r11 r11d r12 r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000413764 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00413764 -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407415:
	rdi = (uint64) eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	rax = fn000000000040CB40(rax, rsi, edi, r8, r12, out rsp, out rbp, out r12)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	rdx = (uint64) Mem0[rsp + 0x0000000000000010:word32]
// DataOut: edx fs r11 r11d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407238:
	rsp = fn0000000000405700(edx, rdi, fs, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rbp = r12
	rsi = (uint64) Mem0[0x000000000061B160:word32]
	rsp = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = r12
	branch Test(NE,Z) l00000000004071F5
// DataOut: fs r11 r11d r12 r13d r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	rdx = (uint64) Mem0[0x000000000061B16C:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rsp = fn0000000000405700(edx, rdi, fs, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
// DataOut: fs r11 r11d r12 r13d r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406F60:
	rsi = 0x0000000000413764
// DataOut: fs r11 r11d r14 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D65:
	rax = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
// DataOut: fs r11 r11d r12 r13d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	rbp = 0x00000000FFFFFFFE
	r13 = (uint64) (r13d - Mem0[0x000000000061B15C:word32])
	r13 = (uint64) (r13d - Mem0[0x000000000061B158:word32])
	rdi = rax
	eax = (word32) al
	r13 = (uint64) (r13d + Mem0[0x000000000061B154:word32])
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14 = (uint64) Mem0[0x000000000061B158:word32]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	rax = (uint64) edx
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r8 = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407324_1:
	r8d = r13d
// DataOut: fs r11 r11d r12 r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:0x00000000FFFFFFFE r9:<invalid> dil:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407328:
	r8 = (uint64) (r8d + Mem0[0x000000000061B15C:word32])
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	rcx = 0x0000000000413774
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rdi = 0x00000000FFFFFFFE
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(0x00000000FFFFFFFE, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413774)
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = 0xFFFFFFFFFFFFFFFF + rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:0x00000000FFFFFFFE r9:<invalid> dil:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> r8d:r13d edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r13, out r14d, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D9B:
	r13 = (uint64) Mem0[0x000000000061B154:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r13 = (uint64) (r13d - eax)
	SZO = cond(r13d & r13d)
	C = false
	rax = (uint64) r13d
	branch Test(LE,SZO) l0000000000406DDC
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DB7:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:(uint64) r13d r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	r13 = r13 + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[rbp + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0xFE r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
// DataOut: ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
// DataOut: ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
// DataOut: ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407380:
	rdi = 0x000000000061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rsp = fn000000000040AB30(rdi)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEC:
	r8 = rdi
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEF:
	rdi = rdx + 0xFFFFFFFFFF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407268:
	rdi = 0x0000000000000000
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040727C:
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	rdi = 0x0000000000000001
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000001 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x01 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000001 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F0E:
	rdi = (uint64) ecx
	rdi = (uint64) (edi - r8d)
	rdi = (uint64) (edi >>u 0x0000001F)
	SCZO = cond(edi)
// DataOut: ecx edi fs r11d r13 r14 r15b rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F6B:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	rax = fn000000000040CCD0(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F7F:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F80:
	rcx = 0x0000000000413764
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F86:
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	rcx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = rax
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
// DataOut: fs r11 r12 r13 r14d r15 r8d r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407436:
	rdi = rsp + 0x0000000000000070
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	rax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsp, out rbp, out rsi, out rdi, out r12, out r13, out r14, out r15)
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8 = (uint64) eax
// DataOut: fs r11 r12 r13 r14d r15 r8d rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8 = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F96:
	rdi = r13
	rcx = 0x0000000000413779
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413779)
	rdi = r13
	eax = strlen(rdi)
	r13 = r13 + rax
	SCZO = cond(r13)
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = r8 + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - r12
	rdi = r12
	eax = fputs_unlocked(rdi, rsi)
	rdx = 0x000000000061AFC0
	rsi = 0x0000000000000000
	rcx = r13
	rdi = rbx
	v39 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v39
	SCZO = cond(v39)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	rdx = (uint64) Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000004
	rsi = 0x0000000000000001
	rdi = 0x000000000041377E
	call fwrite_unlocked (retsize: 8; depth: 8)
	rcx = r13 + 0x0000000000000004 + rbp
	rdx = 0x0000000000000000
	rsi = 0x0000000000000001
	rdi = rbx
	v40 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v40
	SCZO = cond(v40)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	rdx = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004071B0:
	rsi = (uint64) Mem0[rbx + 0x00000000000000A4:word32]
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = 0x0000000000000001
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FF9:
	rax = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rsi = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040745A:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rax = (uint64) (eax | r8d)
	dl = dl | cl
	SZO = cond(dl)
	C = false
	branch Test(NE,Z) l00000000004074B0
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B0:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040748F
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B4:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040748F:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004074C0
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C0:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000407493
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407493:
	rcx = Mem0[rdi + 0x0000000000000040:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000040:word64] - rcx)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rdi:word64]
	branch Test(GT,SZO) l00000000004074B8
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdx rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B8:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A3:
	branch Test(LT,SO) l00000000004074C4
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C4:
	rax = 0x0000000000000001
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A5:
	rsi = rdx
	rdi = rax
	eax = strcmp(rdi, rsi)
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406B70_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r8b:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DF5:
	rbp = r13
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000407870(word64 rsi, word64 rdi, word64 r11, word32 r14d, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14d r15 rdi rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407870_entry:
// DataOut: fs r11 r14d r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407870:
	fn0000000000406A30()
	word64 rbp_168 = rsi
	branch Mem0[0x000000000061B114:byte] != 0x00 l0000000000407970
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407970:
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000407992
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040797E:
	word64 rdi_220 = Mem0[rdi + 0x0000000000000018:word64]
	branch rdi_220 == 0x0000000000000000 l0000000000407992
// DataOut: dil fs r11 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407987:
	word64 r14_227
	fn000000000040CD70(fp - 0x00000000000002B0, rdi_220, out r14_227)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407992:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004079A7
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A0_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A7:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078A4:
	branch Mem0[0x000000000061B144:byte] == 0x00 l00000000004078E0
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078AD:
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l00000000004079C0
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079C0:
	word64 rsp_187
	word64 r8_189
	word64 r9_190
	word64 r13_192
	fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rsi, fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out rsp_187, out rbp_168, out r8_189, out r9_190, out r11, out r13_192, out r14d, out r15)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078BF:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004078D4
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078CD_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 rdi:<invalid> r8:<invalid> edx:<invalid> eax:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078D4:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E0:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000407911
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E9:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000407900
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078F9_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407900:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407911:
	word64 rbp_80
	word64 rsi_81
	word64 rdi_82
	word64 r8_83
	word64 r9_84
	word64 r11_85
	word64 r12_86
	word64 r13_87
	word64 r14_88
	word64 r15_89
	word64 rsp_108
	word64 rbx_90 = fn0000000000406540(rbp_168, 0x0000000000000000, 0x00, rdi, r11, r14d, r15, fs, out rsp_108, out rbp_80, out rsi_81, out rdi_82, out r8_83, out r9_84, out r11_85, out r12_86, out r13_87, out r14_88, out r15_89)
	branch (word32) (uint64) Mem0[0x000000000061B12C:word32] == 0x00000000 l0000000000407948
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040792D:
	word64 rsi_136
	word64 rdi_137
	fn0000000000405D00((word32) (uint64) Mem0[rbx_90 + 0x00000000000000A0:word32], (word32) (uint64) Mem0[rbx_90 + 0x0000000000000028:word32], (byte) (word32) Mem0[rbx_90 + 0x00000000000000B0:byte], out rsp_108, out rsi_136, out rdi_137)
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> eax:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> al:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407948:
	branch (Mem0[rsp_108 + 0x0000000000000298:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004079E6
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079EB_thunk_fn00000000004079F0:
	word64 rsp_126
	fn00000000004079F0(out rsp_126)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407962:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000407870_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



word32 fn00000000004079F0(ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax rsp
// Trashed: SCZO ah al ax eax esp rax rsp sp spl
// Preserved:
fn00000000004079F0_entry:
// DataOut: bpl eax fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F0:
	word64 rsp_1
	*rspOut = fp
	branch Mem0[0x000000000061B150:word32] >u 0x00000004 l0000000000407A46
// DataOut: bpl eax fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407A46:
	return eax
// DataOut: bpl eax fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004079F9:
	word64 rax_40 = (uint64) Mem0[0x000000000061B150:word32]
	word64 rsp_42
	byte SCZO_43
	byte CZ_44
	word64 rdi_45
	word64 rsi_46
	word64 rbp_47
	word64 rbx_48
	word32 eax_49
	word64 rax_50
	call Mem0[rax_40 * 0x0000000000000008 + 0x00412308:word32] (retsize: 4; depth: 84)
		uses: CZ_4,dwLoc04_23,dwLoc08_26,dwLoc0C_29,dwLoc10_32,dwLoc14_34,dwLoc18_37,eax_41,rax_40,rbp,rbx,rdi,rsi,rsp_38,SCZO_39
		defs: CZ_44,eax_49,rax_50,rbp_47,rbx_48,rdi_45,rsi_46,rsp_42,SCZO_43
	return eax_49
// DataOut: bpl eax fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn00000000004079F0_exit:
// DataOut: eax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000407EA0(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r14, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi edx esi fs r11 r14 r15 r8 rbp rcx rdi rsi
// LiveOut: bpl ebx r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407EA0_entry:
// DataOut: edi edx esi fs r11 r12 r12d r14 r15 r8 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407EA0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = fp - 0x0000000000000004
	rsp = fp - 0x0000000000000008
	dwLoc08 = rdi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rsi
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x0000000000000004
	r13 = (uint64) esi
	v9 = fp - 0x0000000000000010
	rsp = fp - 0x0000000000000014
	dwLoc14 = fp - 0x0000000000000010
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000390
	dwLoc0388 = edx
	rdx = rcx
	rax = Mem0[fs:0x00000028:word64]
	qwLoc3C = rax
	rax = 0x0000000000000000
	rcx = Mem0[0x000000000061B1B0:word64]
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
	SCZO = cond(rcx - Mem0[0x000000000061B1B8:word64])
	Z = SCZO (alias)
	r9 = Mem0[0x000000000061B1C0:word64]
	r9d = (word32) r9 (alias)
	r9w = (word16) r9 (alias)
	branch Test(EQ,Z) l0000000000408400
// DataOut: bpl cl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 r9b rax rbp rbx rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408400:
	r8 = 0x00000000AAAAAAAA
	rdi = Mem0[0x000000000061B1C0:word64]
	SCZO = cond(rcx - rax)
	branch Test(UGT,CZ) l0000000000408C7B
// DataOut: bpl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r9 rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040841A:
	rsi = rcx + rcx * 0x0000000000000002
	qwLoc0394 = rdx
	rsi = rsi << 0x0000000000000007
	SCZO = cond(rsi)
	rax = fn0000000000410C90(rdx, rsi, rdi, out rsp, out r8)
	v29 = Mem0[0x000000000061B1B8:word64] << 0x0000000000000001
	Mem0[0x000000000061B1B8:word64] = v29
	SCZO = cond(v29)
	Mem0[0x000000000061B1C0:word64] = rax
	r9 = rax
	rcx = Mem0[0x000000000061B1B0:word64]
	rdx = qwLoc0394
// DataOut: cl fs r11 r13 r13d r15 r8 r9 r9b rbp rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> r8:0x00000000AAAAAAAA rdi:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407EED:
	rcx = rcx + rcx * 0x0000000000000002
	rsi = 0x00000000000000C0
	rcx = rcx << 0x0000000000000006
	r14 = r9 + rcx
	SZO = cond(r14b & 0x01)
	C = false
	rdi = r14
	branch Test(NE,Z) l0000000000408A18
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408A18:
	Mem0[0x00000000000000C0:byte] = 0x00
	rdi = 0x00000000000000C1
	sil = 0xBF
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000000000C0 r14:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F0B:
	SZO = cond(dil & 0x02)
	C = false
	branch Test(NE,Z) l00000000004089E0
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004089E0:
	r9 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	rsi = (uint64) (esi - 0x00000002)
	Mem0[r15 - 0x0000000000000002:word16] = r9w
	SZO = cond(dil & 0x04)
	C = false
	branch Test(EQ,Z) l0000000000407F1F
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004089F9:
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F15:
	SZO = cond(dil & 0x04)
	C = false
	branch Test(NE,Z) l0000000000408A00
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408A00:
	Mem0[rdi:word32] = 0x00000000
	rsi = (uint64) (esi - 0x00000004)
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
// DataOut: esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F1F:
	rcx = (uint64) esi
	rax = 0x0000000000000000
	rcx = (uint64) (ecx >>u 0x00000003)
	SZO = cond(sil & 0x04)
	C = false
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F2A:
	branch rcx == 0x0000000000000000 l0000000000407F2D
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F2D:
	branch Test(NE,Z) l0000000000408360
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408360:
	Mem0[rdi:word32] = 0x00000000
	rdi = rdi + 0x0000000000000004
	SZO = cond(sil & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000407F3D
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408374:
// DataOut: eax esi fs r11 r13 r13d r14 r15 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F33:
	SZO = cond(sil & 0x02)
	C = false
	branch Test(NE,Z) l0000000000408340
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408340:
	r8 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	Mem0[r15 - 0x0000000000000002:word16] = r8w
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000407F46
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408355:
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F3D:
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000408338
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408338:
	Mem0[rdi:byte] = 0x00
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F46:
	SCZO = cond(bLoc0388 - 0x00)
	Mem0[rsi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r14 + 0x00000000000000A0:word32] = r13d
	branch Test(EQ,Z) l0000000000408220
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408220:
	SCZO = cond(Mem0[0x000000000061B0C1:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040822D:
	SCZO = cond(r13d - 0x00000003)
	branch Test(EQ,Z) l0000000000408910
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408910:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408237
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040891D:
	rdi = 0x0000000000000013
	qwLoc0394 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l000000000040893D:
	rdi = 0x0000000000000012
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l0000000000408956:
	rdi = 0x0000000000000014
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040896F:
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408237:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000408818
// DataOut: al eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408818:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000408246
// DataOut: al eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408246:
	SZO = cond(r13d & r13d)
	C = false
	sil = Test(EQ,Z)
	branch Test(EQ,Z) l0000000000408255
// DataOut: al eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040824F:
	SCZO = cond(r13d - 0x00000006)
	branch Test(NE,Z) l0000000000408280
// DataOut: al eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408255:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
	SCZO = cond(ecx - 0x00000005)
	branch Test(EQ,Z) l0000000000408BD0
// DataOut: al eax ecx fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408BD0:
	rcx = 0x0000000000000005
// DataOut: eax ecx fs r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408264:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408271:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040827E:
// DataOut: al eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408280:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408288:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408825
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408825:
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408295:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040829E:
	r12 = 0x0000000000000000
	SCZO = cond(r13d - 0x00000005)
	branch Test(NE,Z) l00000000004081E1
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082AB:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000407F62
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082B8:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081E1
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082C5:
	rdi = 0x000000000000000E
	qwLoc0394 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l00000000004082E5:
	rdi = 0x0000000000000010
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l00000000004082FE:
	rdi = 0x0000000000000011
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l0000000000408317:
	rdi = 0x0000000000000015
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408330:
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407F62:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
// DataOut: eax ecx fs r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F68:
	esi = (word32) Mem0[rbx:byte]
	r12 = rbx
	SCZO = cond(sil - 0x2F)
	branch Test(EQ,Z) l0000000000407F81
// DataOut: eax ecx esi fs r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F74:
	r15d = (word32) Mem0[0x00000000AAAAAAA9:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000408670
// DataOut: eax ecx esi fs r11 r12 r13 r13d r14 r15b r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408670:
	rdi = rbx
	dwLoc0398 = ecx
	dwLoc038C = esi
	qwLoc0394 = rdx
	eax = strlen(rdi)
	rdx = qwLoc0394
	r12 = rax
	rdi = rdx
	eax = strlen(rdi)
	rax = r12 + 0x0000000000000020 + rax
	rdx = qwLoc0394
	rsi = (uint64) dwLoc038C
	rcx = (uint64) dwLoc0398
	rax = rax & 0xFFFFFFFFFFFFFFF0
	rsp = rsp - rax
	rax = rsp + 0x000000000000000F
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SCZO = cond(r15b - 0x2E)
	r12 = rax
	branch Test(EQ,Z) l0000000000408B30
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408B30:
	SCZO = cond(Mem0[rdx + 0x0000000000000001:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408705
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408B3A:
// DataOut: ecx fs r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086D2:
	rsi = rdx
// DataOut: ecx fs r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086D8:
	rax = rax + 0x0000000000000001
	rsi = rsi + 0x0000000000000001
	Mem0[r8 - 0x0000000000000001:byte] = r15b
	r15d = (word32) Mem0[r14:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004086D8
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086ED:
	SCZO = cond(rdx - rsi)
	rdi = rax
	branch Test(UGE,C) l0000000000408702
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086F5:
	SCZO = cond(Mem0[rsi - 0x0000000000000001:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408702
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086FB:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rdi:byte] = 0x2F
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408702:
	esi = (word32) Mem0[rbx:byte]
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408705:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000408724
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040870A:
	rdx = rbx
// DataOut: ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408710:
	rax = rax + 0x0000000000000001
	rdx = rdx + 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = sil
	esi = (word32) Mem0[rdx:byte]
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000408710
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408724:
	Mem0[rax:byte] = 0x00
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F81:
	SCZO = cond(ecx - 0x00000003)
	branch Test(ULT,C) l0000000000407FFD
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F86:
	SCZO = cond(ecx - 0x00000004)
	branch Test(ULE,CZ) l0000000000407FF0
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407FF0:
	SCZO = cond(bLoc0388 - 0x00)
	branch Test(NE,Z) l00000000004088B0
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088B0:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	dwLoc0394 = ecx
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rcx = (uint64) dwLoc0394
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SCZO = cond(ecx - 0x00000003)
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088E0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408B5E
// DataOut: eax edx fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B5E:
	dwLoc0394 = eax
	rax = __errno_location()
	SCZO = cond(Mem0[rax:word32] - 0x00000002)
	rdx = (uint64) dwLoc0394
	al = Test(EQ,Z)
// DataOut: al eax edx fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088E8:
	rax = (uint64) Mem0[0x0000000000000029:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00004000)
	al = Test(NE,Z)
// DataOut: al eax edx fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088F9:
	SZO = cond(al & al)
	C = false
	rsi = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408906:
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407F8B:
	SCZO = cond(ecx - 0x00000005)
	branch Test(NE,Z) l0000000000407FFD
// DataOut: eax fs r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407FFD:
	r15 = r14 + 0x0000000000000010
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408001:
	rdx = r15
	rsi = r12
	rdi = 0x0000000000000001
	call __lxstat (retsize: 8; depth: 8)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = (uint64) eax
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408015:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000407FB1
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407F92:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408019
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408019:
	SCZO = cond(r13d - 0x00000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040802B:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408380:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040838D:
	rdi = 0x0000000000000015
	dwLoc038C = esi
	dwLoc0394 = edx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = (uint64) dwLoc0394
	rsi = (uint64) dwLoc038C
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -038C(64) Local -0394(64)

l00000000004083B7:
	r13 = Mem0[r14 + 0x0000000000000010:word64]
	SCZO = cond(r13 - Mem0[0x000000000061A678:word64])
	branch Test(EQ,Z) l0000000000408C1F
// DataOut: edx esi fs r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -038C(64) Local -0394(64)

l0000000000408C1F:
	rax = __errno_location()
	rdx = (uint64) dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	rsi = (uint64) dwLoc038C
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004083C8:
	dwLoc038C = esi
	dwLoc0394 = edx
	rax = __errno_location()
	rsi = (uint64) dwLoc038C
	rdx = (uint64) dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	Mem0[0x000000000061A678:word64] = r13
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004083F2:
	Mem0[rsi + 0x00000000000000B8:byte] = 0x00
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040803F:
	rcx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408049:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408056:
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	dwLoc0394 = edx
	branch Test(EQ,Z) l0000000000408C52
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0394(64)

l0000000000408C52:
	rax = __errno_location()
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0394
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
// DataOut: edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040806D:
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0394(64)

l0000000000408458:
	eax = fn0000000000411840(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0394
	branch Test(NS,S) l0000000000408093
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408080:
	eax = fn0000000000411820(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0394
	branch Test(SG,S) l000000000040846B
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040846B:
	dwLoc0394 = edx
	rax = __errno_location()
	rax = (uint64) Mem0[rax:word32]
	rdx = (uint64) dwLoc0394
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408483:
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089C0:
	SCZO = cond(eax - 0x0000005F)
	branch Test(NE,Z) l0000000000408497
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089C9:
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040848C:
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408497:
	SCZO = cond(eax - 0x0000005F)
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
	branch Test(EQ,Z) l00000000004089D0
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084AB:
	SCZO = cond(eax - 0x0000003D)
	branch Test(EQ,Z) l00000000004089D0
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089D0:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
// DataOut: edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084B4:
	Mem0[rsi + 0x00000000000000B4:word32] = 0x00000000
// DataOut: fs r11 r12 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408093:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rsi = 0x00000000004137B1
	rcx = 0x000000000000000A
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A4:
	branch rcx == 0x0000000000000000 l00000000004080A6
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004080A4
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A6:
	r13b = Test(NE,Z)
// DataOut: edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080AA:
	rax = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000408830
// DataOut: edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408830:
	rax = Mem0[0x000000000061A668:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000408B40
// DataOut: edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B40:
	dwLoc0394 = edx
	rax = __errno_location()
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0394
// DataOut: cl edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408841:
	dwLoc038C = edx
	rax = __errno_location()
	rsi = r15
	Mem0[rax:word32] = 0x00000000
	rdi = r12
	qwLoc0394 = rax
	rax = fn0000000000409CC0(rsi)
	SZO = cond(eax & eax)
	C = false
	rcx = 0x0000000000000001
	r8 = Mem0[r13 - 0x0000000000000390:word64]
	rdx = (uint64) dwLoc038C
	branch Test(GT,SZO) l00000000004080BA
// DataOut: cl eax edx fs r11 r12 r13b r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040887E:
	rdx = (uint64) Mem0[rax:word32]
	SCZO = cond(edx - 0x00000016)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040888A:
	SCZO = cond(edx - 0x00000026)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408893:
	SCZO = cond(edx - 0x0000005F)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax fs r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C3B:
	rdx = Mem0[rsi + 0x0000000000000010:word64]
	rax = (uint64) (eax >>u 0x0000001F)
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[0x000000000061A668:word64] = rdx
	rdx = (uint64) eax
// DataOut: cl edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040889C:
	rax = (uint64) (eax >>u 0x0000001F)
	SCZO = cond(eax)
	rdx = (uint64) eax
// DataOut: edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080B8:
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
// DataOut: cl edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080BA:
	rsi = (uint64) ecx
	rax = 0x0000000000000000
	sil = sil | r13b
	SZO = cond(sil)
	C = false
	branch Test(EQ,Z) l00000000004080D9
// DataOut: cl eax edx fs r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080C3:
	rcx = (uint64) (ecx ^ 0x00000001)
	r13b = r13b & cl
	SZO = cond(r13b)
	C = false
	rax = (uint64) r13d
	branch Test(EQ,Z) l00000000004080D0
// DataOut: eax edx fs r11 r12 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080CC_2:
	esi = r13d
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080D0:
	rax = (uint64) (eax << 0x0000001F)
	rax = (uint64) (eax >> 0x0000001F)
	rax = (uint64) (eax + 0x00000002)
	SCZO = cond(eax)
// DataOut: eax edx fs r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080D9:
	v46 = Mem0[0x000000000061B17C:byte] | sil
	Mem0[0x000000000061B17C:byte] = v46
	SZO = cond(Mem0[0x000000000061B17C:byte])
	SZO = cond(edx & edx)
	C = false
	Mem0[rsi + 0x00000000000000B4:word32] = eax
	branch Test(NE,Z) l00000000004084BF
// DataOut: fs r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084BF:
	rdi = r12
	rbx = fn000000000040EAB0(rdi, r11, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	r13 = rax
	rax = __errno_location()
	rsi = (uint64) Mem0[rax:word32]
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rcx = r13
	rdx = 0x0000000000415E54
	call error (retsize: 8; depth: 8)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084F6:
// DataOut: fs r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080EF:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000408500
// DataOut: eax fs r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408500:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000408519
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040850C:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l000000000040862A
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408519:
	rsi = Mem0[rsi + 0x0000000000000040:word64]
	rdi = r12
	rax = fn0000000000409D20(rsi, out rbp, out rsi, out r11, out r12, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	Mem0[rsi + 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000408BDA
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BDA:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x0000000000413794
	rax = dcgettext(0x0000000000000000, 0x0000000000413794, 0x0000000000000005)
	edi = (word32) Mem0[rbp - 0x0000000000000384:byte]
	rdx = r12
	rsi = rax
	eax = fn0000000000405810(rdx, edi, r11, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	r13 = Mem0[r14 + 0x0000000000000008:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000408535
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000FFFFFFFF rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:0x00000000FFFFFFFE r11:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0A:
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408535:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408C0F
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0F:
	rdi = r13
	rax = fn0000000000410E30(rdi, out rsp, out rbp, out rsi, out rdi)
	r13 = rax
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408540:
	rdi = r12
	rax = fn000000000040A2B0(rdi, qwLoc08, out rbp, out rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	rdi = r13
	branch Test(EQ,Z) l0000000000408B98
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B98:
	rax = fn0000000000410E30(rdi, out rsp, out rbp, out rsi, out rdi)
	r13 = rax
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408557:
	eax = strlen(rdi)
	rdi = r15 + 0x0000000000000002 + rax
	rax = fn0000000000410C40(rsi, rdi, out rsp)
	rcx = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[r12 - 0x0000000000000001 + r15:byte] - 0x2F)
	rdi = rcx
	rsi = r12
	Mem0[rbp - 0x0000000000000390:word64] = rcx
	al = Test(NE,Z)
	r15 = r15 + rax
	SCZO = cond(r15)
	rdx = r15
	call stpncpy (retsize: 8; depth: 8)
	rsi = r13
	rdi = rax
	rax = strcpy(rdi, rsi)
	rcx = Mem0[rbp - 0x0000000000000390:word64]
	r13 = rcx
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085A1:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085A6:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(ULE,CZ) l0000000000408B80
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B80:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B8D:
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085B3:
	rdx = rbp - 0x0000000000000380
	rsi = r13
	rdi = 0x0000000000000001
	call __xstat (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000408607
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085CB:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	Mem0[rsi + 0x00000000000000B1:byte] = 0x01
	rax = (uint64) Mem0[rbp - 0x0000000000000368:word32]
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085E2:
	rdx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085EC:
	rdx = (uint64) eax
	rdx = (uint64) (edx & 0x0000F000)
	SCZO = cond(edx - 0x00004000)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085FC:
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408600:
	Mem0[rsi + 0x00000000000000A4:word32] = eax
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408607:
	rdi = r13
	free(rdi)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408623:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040862A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000006
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408103:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l0000000000408978
// DataOut: fs r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408978:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	branch Test(EQ,Z) l00000000004089A8
// DataOut: fs r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408981:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(NE,Z) l00000000004089A8
// DataOut: fs r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089A8:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000003
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040898A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000009
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040810E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000005
// DataOut: fs r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408120:
	SZO = cond(r13d & r13d)
	C = false
	r12 = Mem0[r14 + 0x0000000000000050:word64]
	branch Test(EQ,Z) l0000000000408132
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408129:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081A8
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408132:
	r8 = Mem0[0x000000000061B138:word64]
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	r15 = r13 - 0x00000000000002D0
	rcx = 0x0000000000000200
	rdi = r12
	rsi = r15
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r13, out r14d, out r15)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B174:word32])
	branch Test(LE,SZO) l000000000040816E
// DataOut: eax fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408168:
	Mem0[0x000000000061B174:word32] = eax
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040816E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(NE,Z) l00000000004081A8
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040817A:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000408B10
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B10:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rbx, rbp, rsi, edi, r8, r11d, r12, r14, fs, out rsp, out rbp, out rsi, out r8, out r9, out r12, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B168:word32])
	branch Test(LE,SZO) l0000000000408187
// DataOut: eax fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B25:
	Mem0[0x000000000061B168:word32] = eax
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408187:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A90
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408A90:
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	r13 = (uint64) Mem0[r14 + 0x0000000000000030:word32]
	branch Test(EQ,Z) l0000000000408BA8
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BA8:
	rdi = (uint64) r13d
	rax = fn000000000040CB40(rax, rsi, edi, r8, r12, out rsp, out rbp, out r12)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l0000000000408AA1
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BBC:
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408BCA
// DataOut: eax edx fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BC7_1:
	edx = eax
// DataOut: edx fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BCA:
// DataOut: edx fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AA1:
	rdx = 0x0000000000000015
	r8 = (uint64) r13d
	rcx = 0x000000000041375A
	rsi = 0x0000000000000001
	rdi = r15
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A)
	rdx = r15
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AC0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000408AC0
// DataOut: al eax edx fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AD7:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000408AE4
// DataOut: al cl edx fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE1_1:
	eax = ecx
// DataOut: al edx fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE4:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000408AEC
// DataOut: al ecx edx fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE8_1:
	rdx = rcx
// DataOut: al edx fs r11 r11d r12 r12d r14 r14d r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AEC:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = (uint64) (edx - r15d)
	SCZO = cond(edx)
// DataOut: edx fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AF5:
	SCZO = cond(Mem0[0x000000000061B164:word32] - edx)
	branch Test(GE,SO) l0000000000408194
// DataOut: edx fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B01:
	Mem0[0x000000000061B164:word32] = edx
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408194:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A70
// DataOut: fs r11 r11d r12 r12d r14 r14d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A70:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rbx, rbp, rsi, edi, r8, r11d, r12, r14, fs, out rsp, out rbp, out rsi, out r8, out r9, out r12, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B160:word32])
	branch Test(LE,SZO) l00000000004081A1
// DataOut: eax fs r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A85:
	Mem0[0x000000000061B160:word32] = eax
// DataOut: fs r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081A1:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081A8:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081C9
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081B1:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B16C:word32])
	branch Test(GT,SZO) l0000000000408730
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408730:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[0x000000000061B16C:word32] = eax
	branch Test(NE,Z) l00000000004081D2
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081C9:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040873F
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040873F:
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp - 0x00000000000002F0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
// DataOut: eax fs r11 r12 r12d r13 r13d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040875F:
	Mem0[0x000000000061B170:word32] = eax
// DataOut: fs r11 r12 r12d r13 r13d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408765:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(NE,Z) l0000000000408A30
// DataOut: fs r11 r12 r12d r13 r13d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A30:
	rdi = Mem0[rsi + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rbp - 0x00000000000002D0
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r13, out r14d, out r15)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408A68:
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408779:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	r15 = r13 - 0x00000000000002D0
	rsi = r15
	rdi = rax
	rax = rax >>u 0x0000000000000008
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B15C:word32])
	branch Test(LE,SZO) l00000000004087BA
// DataOut: eax fs r11 r12 r12d r13 r13d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087B4:
	Mem0[0x000000000061B15C:word32] = eax
// DataOut: fs r11 r12 r12d r13 r13d r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087BA:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	rsi = r15
	rdi = rax
	eax = (word32) al
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	eax = strlen(rdi)
	rdx = (uint64) Mem0[0x000000000061B158:word32]
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l00000000004087F0
// DataOut: eax edx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087E8:
	Mem0[0x000000000061B158:word32] = eax
	rdx = (uint64) eax
// DataOut: edx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087F0:
	rax = (uint64) Mem0[0x000000000061B15C:word32]
	eax = rdx + 0x0000000000000002 + rax
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408806:
	Mem0[0x000000000061B154:word32] = eax
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> dil:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081D2:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408640
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408640:
	rdi = Mem0[rsi + 0x0000000000000018:word64]
	rsi = rbp - 0x00000000000002D0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B178:word32])
	branch Test(LE,SZO) l00000000004081E1
// DataOut: eax fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408664:
	Mem0[0x000000000061B178:word32] = eax
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407FB1:
	rdi = 0x0000000000000000
	rdx = 0x0000000000000005
	rsi = 0x0000000000413783
	rax = dcgettext(0x0000000000000000, 0x0000000000413783, 0x0000000000000005)
	r15 = (uint64) Mem0[r13 - 0x0000000000000384:word32]
	rdx = r12
	rsi = rax
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
	edi = (word32) r15b
	eax = fn0000000000405810(rdx, edi, r11, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004081F4
// DataOut: bpl ebp fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407FE4:
// DataOut: fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081E1:
	rdi = rbx
	rax = fn0000000000410E30(rdi, out rsp, out rbp, out rsi, out rdi)
	v43 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v43
	SCZO = cond(v43)
	Mem0[rsi:word64] = rax
// DataOut: bpl ebp fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> sil:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081F4:
	rbx = Mem0[rbp - 0x0000000000000038:word64]
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	rax = r12
	branch Test(NE,Z) l0000000000408C76
// DataOut: bpl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408C76:
	__stack_chk_fail()
// DataOut: bpl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408C7B:
	fn0000000000410E50()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rdx = (uint64) (edx | r8d)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0000000000408CE8
// DataOut: al bpl dl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rsi:<invalid> r14:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// Terminates process

l0000000000408CE8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000408CAF
// DataOut: al bpl dl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CEC:
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CAF:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408CC0
// DataOut: bpl dl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CB3:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408CC0
// DataOut: bpl ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CC0:
	rcx = Mem0[rsi + 0x0000000000000068:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000068:word64] - rcx)
	rax = Mem0[rdi + 0x0000000000000070:word64]
	rdx = Mem0[rsi + 0x0000000000000070:word64]
	branch Test(GT,SZO) l0000000000408CF0
// DataOut: bpl eax ebp ebx edx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): SO
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CF0:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD2:
	branch Test(LT,SO) l0000000000408D00
// DataOut: bpl eax ebp ebx edx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408D00:
	rax = 0x0000000000000001
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD4:
	rdx = (uint64) (edx - eax)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000408D06
// DataOut: bpl ebp ebx edx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408D06:
	rax = (uint64) edx
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD8:
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
// DataOut: ebp ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405020:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000008
	rax = __errno_location()
	Mem0[rax:word32] = 0x00000000
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rdi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	call strcoll (retsize: 8; depth: 8)
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CBC:
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:0x0000000000000001 r8:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040820A:
	rsp = rbp - 0x0000000000000028
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: bpl ebx fs r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

fn0000000000407EA0_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: bpl ebx r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r9:<invalid> r14:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407F2A_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)



void fn0000000000409750(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000409750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000409750_entry:
// DataOut: edi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409750:
	word64 rbx_10 = (uint64) edi
	word32 ebx_11 = (word32) rbx_10
	branch edi == 0x00000000 l0000000000409794
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409794:
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D88, 0x0000000000000005))
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413DB0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E40, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E90, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413FA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004141E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414398, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414540, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414580, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414670, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414780, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414928, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414AC0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414C28, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414DA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414F58, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415020, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004151F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004153F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415480, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004155E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415748, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415778, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004157B0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415850, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415970, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	word64 rsi_263
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_263)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137BB, 0x0000000000000005))
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137E8, 0x0000000000000005))
	word64 rbp_283 = Mem0[0x000000000061A610:word64]
	word32 eax_290 = fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415A30, 0x0000000000000005), rbp_283)
	word64 rsp_296
	word64 rbp_297
	word32 edx_298
	word64 rdx_299
	word64 rbx_300
	word32 edi_302
	byte SCZO_303
	byte SZO_304
	byte C_305
	byte Z_306
	word32 esi_307
	word64 rsi_308
	word64 rdi_309
	word64 rax_310
	word64 rcx_311
	word32 eax_312
	word32 ecx_313
	call setlocale (retsize: 8; depth: 24)
		uses: C_294,dwLoc04_4,dwLoc08_8,eax_290,ebx_11,ecx,edi_254,edx,esi,rax_291,rbp_283,rbx_10,rcx_278,rdi_295,rdx_284,rsi_292,rsp_12,SCZO,SZO_293,Z_14
		defs: C_305,eax_312,ebx_301,ecx_313,edi_302,edx_298,esi_307,rax_310,rbp_297,rbx_300,rcx_311,rdi_309,rdx_299,rsi_308,rsp_296,SCZO_303,SZO_304,Z_306
	branch rax_310 == 0x0000000000000000 l0000000000409BC8
// DataOut: ebx rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BB2:
	branch strncmp(rax_310, 0x000000000041380A, 0x0000000000000003) != 0x00000000 l0000000000409BFF
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BFF:
	word64 rsi_341
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_341)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415A70, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000003 rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:0x000000000041380A rax:<invalid> eax:<invalid> rcx:<invalid> edx:0x00000003 ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BC8:
	word64 rsi_319
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_319)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415AB8, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409768:
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D60, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040978D:
	exit((uint64) ebx_11)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000409CC0(word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: eax rax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000409CC0_entry:
// DataOut: fs r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409CC0:
	word64 rax_6 = (uint64) ((word32) (uint64) Mem0[rsi + 0x0000000000000018:word32] & 0x0000F000)
	word32 eax_7 = (word32) rax_6
	branch eax_7 == 0x0000A000 l0000000000409D10
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D10:
	return 0x0000000000000000
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000409CCF:
	word64 rsp_26
	word32 eax_27
	word64 rsi_28
	byte SZO_30
	byte C_31
	byte SCZO_32
	byte Z_33
	byte S_34
	byte al_35
	word64 rax_29
	call acl_extended_file (retsize: 8; depth: 16)
		uses: al_8,C,eax_7,rax_6,rsi,rsp_21,S,SCZO_22,SZO,Z_10
		defs: al_35,C_31,eax_27,rax_29,rsi_28,rsp_26,S_34,SCZO_32,SZO_30,Z_33
	branch eax_27 < 0x00000000 l0000000000409CE8
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CE8:
	word32 eax_48 = (word32) (uint64) Mem0[__errno_location():word32]
	branch eax_48 == 0x0000005F l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF4:
	branch eax_48 == 0x00000026 l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF9:
	branch eax_48 == 0x00000016 l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409D18:
	return 0x0000000000000000
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

l0000000000409CFE:
	rax_29 = (uint64) -(word32) (eax_48 != 0x00000010)
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CDC:
	return rax_29
// DataOut: eax fs r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> al:<invalid> eax:<invalid>

fn0000000000409CC0_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> al:<invalid> eax:<invalid>



word64 fn0000000000409D20(word64 rsi, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: r11 r12 r14 r15 rax rbp rsi
// Trashed: SCZO ah al ax bp bpl dh di dil dl dx eax ebp edi edx esi esp r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409D20_entry:
	*r12Out = r12
	*r11Out = r11
// DataOut: fs r11 r12 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D20:
	word64 r15_8
	*r15Out = 0x00000000FFFFFFFE
	word64 r14_11
	*r14Out = 0x00000000FFFFFFFF
	word64 rbx_158 = 0x0000000000000401
	branch rsi >u 0x0000000000000400 l0000000000409D59
// DataOut: fs r11 r12 r14 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D55_1:
	rbx_158 = rsi + 0x0000000000000001
// DataOut: fs r11 r12 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:0x0000000000000401 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D59:
// DataOut: fs r11 r12 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D60:
	branch malloc(rbx_158) == 0x0000000000000000 l0000000000409DAB
// DataOut: fs r11 r12 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D70:
	word64 rsp_150
	word64 rdi_151
	word64 rsi_152
	word64 rax_153
	word64 r15_154
	word64 r14_155
	word64 rbp_156
	word64 r13_157
	word32 ebx_159
	byte SCZO_160
	byte CZ_161
	byte SZO_162
	byte C_163
	byte Z_164
	word64 rdx_165
	word64 r12_166
	byte S_167
	word32 eax_168
	word64 r11_169
	word32 edx_170
	call readlink (retsize: 8; depth: 56)
		uses: C_55,CZ_43,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_23,dwLoc24,eax_52,ebx_45,edx_42,qwLoc08,qwLoc10,qwLoc18,qwLoc30,r11_44,r12_40,r13_144,r14_37,r15_38,rax_145,rbp_56,rbx_146,rdi_149,rdx_147,rsi_148,rsp_49,S_39,SCZO_46,SZO_53,Z_54
		defs: C_163,CZ_161,eax_168,ebx_159,edx_170,r11_169,r12_166,r13_157,r14_155,r15_154,rax_153,rbp_156,rbx_158,rdi_151,rdx_165,rsi_152,rsp_150,S_167,SCZO_160,SZO_162,Z_164
	word64 r12_174 = rax_153
	*r12Out = r12_174
	branch rax_153 < 0x0000000000000000 l0000000000409DD8
// DataOut: fs r11 r12 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DD8:
	word64 rax_233 = __errno_location()
	word32 edx_236 = (word32) (uint64) Mem0[rax_233:word32]
	branch edx_236 == 0x00000022 l0000000000409D86
// DataOut: edx fs r11 r12 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DE4:
	free(rbp_156)
	Mem245[rax_233:word32] = (word32) (uint64) edx_236
// DataOut: fs r11 r12 r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D86:
	branch rbx_158 >u rax_153 l0000000000409E08
// DataOut: fs r11 r12 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E08:
	Mem216[rbp_156:byte] = 0x00
	word64 rbp_227
	*rbpOut = Mem216[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_229
	*rsiOut = Mem216[qwLoc08 + 0x0000000000000010:word64]
	return rbp_156
// DataOut: fs r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409D8B:
	free(rbp_156)
	branch rbx_158 >u 0x00000000FFFFFFFF l0000000000409DC0
// DataOut: fs r11 r12 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DC0:
	branch rbx_158 >u 0x00000000FFFFFFFE l0000000000409E20
// DataOut: fs r11 r12 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E20:
	Mem198[__errno_location():word32] = 0x0000000C
	word64 rbp_210
	*rbpOut = Mem198[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_212
	*rsiOut = Mem198[qwLoc08 + 0x0000000000000010:word64]
	return 0x0000000000000000
// DataOut: fs r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409DC5:
	word64 r11_196
	*r11Out = 0x00000000FFFFFFFF
// DataOut: fs r11 r12 r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D98:
	branch malloc(rbx_158 * 0x0000000000000002) != 0x0000000000000000 l0000000000409D70
// DataOut: fs r11 r12 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAB:
// DataOut: fs r11 r12 r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAD:
	word64 rbp_115
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_117
	*rsiOut = Mem0[qwLoc08 + 0x0000000000000010:word64]
	return 0x0000000000000000
// DataOut: fs r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -48(fp):<invalid> -36(fp):edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409D20_exit:
// DataOut: r11 r12 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:rbx rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> r11:<invalid> -48(fp):<invalid> -36(fp):edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409E50(word64 rcx, word64 rdx, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx rdi rdx rsi
// LiveOut: al eax ebp r12 r12d r13 r13b r14 r14b r15 rax rbp rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409E50_entry:
	*r13Out = r13
// DataOut: ebx fs r11 r13 r13b r8 r9 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409E50:
	word64 qwLoc38_113
	word64 rax_109
	word64 rax_29 = DPB(rax, strlen(rdi), 0)
	word64 r15_6
	*r15Out = rsi
	word64 r12_16
	*r12Out = rcx
	word64 rbp_131 = rdx
	word64 r14_126 = Mem0[rsi:word64]
	*r14Out = r14_126
	branch r14_126 == 0x0000000000000000 l0000000000409F72
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0040(64)

l0000000000409F72:
	qwLoc38_113 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(64)

l0000000000409E81:
	word64 r13_111 = rax_29
	*r13Out = r13_111
	byte bLoc29_112 = 0x00
	qwLoc38_113 = 0xFFFFFFFFFFFFFFFF
	word64 rbx_114 = 0x0000000000000000
	rax_127 = rax_29
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EE8:
	word64 rax_127
	branch strncmp(r14_126, rdi, rax_29) != 0x00000000 l0000000000409ED8
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EFB:
	rax_127 = DPB(rax_127, strlen(r14_126), 0) (alias)
	branch rax_127 == rax_29 l0000000000409F60
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(32) Local -0038(0) Local -0040(64)

l0000000000409F60:
	word64 rbp_226
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rbx_114
// DataOut: al eax ebp ebx fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409F08:
	branch qwLoc38_113 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
// DataOut: fs r11 r12 r12d r13 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409EA0:
	rax_127 = rdx
	branch rdx == 0x0000000000000000 l0000000000409F50
// DataOut: fs r11 r12 r12d r13 r13b r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409F50:
	bLoc29_112 = 0x01
// DataOut: fs r11 r12 r12d r13 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EAE:
	byte cl_202 = (byte) (word32) bLoc29_112
	rax_127 = 0x0000000000000001
	branch memcmp(qwLoc38_113 *s rcx + rdx, rbp_131, rcx) == 0x00000000 l0000000000409ED4
// DataOut: cl fs r11 r12 r12d r13 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED1_1:
	cl_202 = 0x01 (alias)
// DataOut: cl fs r11 r12 r12d r13 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED4:
	bLoc29_112 = cl_202
// DataOut: fs r11 r12 r12d r13 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409ED8:
	rbx_114 = rbx_114 + 0x0000000000000001
	rbp_131 = rbp_131 + rcx
	r14_126 = Mem0[rsi + rbx_114 * 0x0000000000000008:word64]
	*r14Out = r14_126
	branch r14_126 == 0x0000000000000000 l0000000000409F28
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F10:
	rbx_114 = rbx_114 + 0x0000000000000001
	qwLoc38_113 = rbx_114
	rbp_131 = rbp_131 + rcx
	r14_126 = Mem0[rsi + rbx_114 * 0x0000000000000008:word64]
	*r14Out = r14_126
	branch r14_126 != 0x0000000000000000 l0000000000409EE8
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F25:
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0029(0) Local -0038(64)

l0000000000409F28:
	rax_109 = 0xFFFFFFFFFFFFFFFE
	branch bLoc29_112 != 0x00 l0000000000409F3B
// DataOut: al eax fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(64)

l0000000000409F36:
	rax_109 = qwLoc38_113
// DataOut: al eax fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:0xFFFFFFFFFFFFFFFE ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000409F3B:
	word64 rbp_86
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rax_109
// DataOut: al eax ebp ebx fs r11 r12 r12d r13 r13b r14 r14b r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> rax:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409E50_exit:
// DataOut: al eax ebp r12 r12d r13 r13b r14 r14b r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> rax:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> r13:rax rdx:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409F80(word64 rdx, word64 rdi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx
// LiveOut: r11 r15 r9 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000409F80_entry:
// DataOut: fs r11 rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409F80:
	branch rdx == 0xFFFFFFFFFFFFFFFF l0000000000409FE0
// DataOut: fs r11 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409FE0:
	dcgettext(0x0000000000000000, 0x0000000000415DFD, 0x0000000000000005)
// DataOut: fs r11 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409F95:
	dcgettext(0x0000000000000000, 0x0000000000415E18, 0x0000000000000005)
// DataOut: fs r11 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409FA4:
	word64 r11_25
	word64 rbx_26 = fn000000000040EBF0(rdi, 0x0000000000000001, r11, fs, out r11_25)
	word64 r9_35
	word64 r11_36
	word64 r15_37
	fn000000000040E970(rbx_26, 0x00000006, 0x00000000, r11_25, fs, out r9_35, out r11_36, out r15_37)
	word64 rsp_54
	word64 rdx_55
	byte SCZO_56
	word32 edx_57
	word64 rbp_58
	word64 rdi_59
	word64 rbx_60
	word64 rsi_61
	byte Z_62
	word32 esi_63
	word32 edi_64
	byte SZO_65
	byte C_66
	word64 rax_67
	word64 r12_68
	word64 r8_69
	word64 rcx_70
	word32 eax_71
	word64 r11_72
	selector fs_73
	word64 r9_74
	word64 r15_75
	call error (retsize: 8; depth: 8)
		uses: C_53,dwLoc04_4,dwLoc08_11,dwLoc0C_16,edi_31,esi_29,fs,r11_36,r12_19,r15_37,r8_42,r9_35,rax_51,rbp_45,rbx_40,rcx_44,rdi_50,rdx_43,rsi_49,rsp_48,SCZO_6,SZO_52,Z_7
		defs: C_66,eax_71,edi_64,edx_57,esi_63,fs_73,r11_72,r12_68,r15_75,r8_69,r9_74,rax_67,rbp_58,rbx_60,rcx_70,rdi_59,rdx_55,rsi_61,rsp_54,SCZO_56,SZO_65,Z_62
	return rbx_60
// DataOut: fs r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000409F80_exit:
// DataOut: r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040A000(word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A000_entry:
// DataOut: fs r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A000:
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415E35, 0x0000000000000005), Mem0[0x000000000061A650:word64])
	word64 r14_10 = 0x0000000000000000
	word64 r13_16 = rdx
	word64 rbp_169 = rsi
	word64 rbx_168 = 0x0000000000000000
	word64 r12_158 = Mem0[rdi:word64]
	branch r12_158 != 0x0000000000000000 l000000000040A086
// DataOut: fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A086:
	branch rbx_168 == 0x0000000000000000 l000000000040A050
// DataOut: fs r11 r12 r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A08B:
	branch memcmp(r14_10, rbp_169, r13_16) != 0x00000000 l000000000040A050
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A050:
	word64 rbp_182
	word64 r8_183
	word64 r9_184
	word64 r12_186
	word64 r15_189
	fn000000000040EC10(r12_158, r11, fs, out rbx_168, out rbp_182, out r8_183, out r9_184, out r11, out r12_186, out r13_16, out r14_10, out r15_189)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E4A)
	rbp_169 = rbp_182 + r13_16
	r12_158 = Mem0[r15_189 + rbx_168 * 0x0000000000000008:word64]
	branch r12_158 == 0x0000000000000000 l000000000040A0D0
// DataOut: fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A09D:
	word64 r8_216
	word64 r9_217
	word64 r12_219
	word64 r15_222
	fn000000000040EC10(r12_158, r11, fs, out rbx_168, out rbp_169, out r8_216, out r9_217, out r11, out r12_219, out r13_16, out r14_10, out r15_222)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E52)
	r12_158 = Mem0[r15_222 + rbx_168 * 0x0000000000000008:word64]
	branch r12_158 != 0x0000000000000000 l000000000040A086
// DataOut: fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A047:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:0x0000000000000005 rbp:rsi rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0D0:
	word64 rdi_62 = Mem0[0x000000000061A650:word64]
	word64 rax_64 = Mem0[rdi_62 + 0x0000000000000028:word64]
	branch rax_64 >=u Mem0[rdi_62 + 0x0000000000000030:word64] l000000000040A0FB
// DataOut: rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0FB:
	word64 rsp_128
	word64 rdi_129
	word64 r15_130
	word32 edi_131
	byte SZO_132
	byte C_133
	word64 rsi_134
	word32 r14d_135
	word64 r14_136
	word64 rbp_137
	word64 r13_138
	word64 rdx_139
	word32 edx_140
	word32 esi_141
	word64 rbx_142
	byte SCZO_143
	word64 rax_144
	word32 ebx_145
	word32 eax_146
	word64 r12_147
	byte Z_148
	word64 rcx_149
	word64 r11_150
	selector fs_151
	word64 r8_152
	word64 r9_153
	call __overflow (retsize: 8; depth: 8)
		uses: C_67,dwLoc04_4,dwLoc08_9,dwLoc0C_14,dwLoc10_20,dwLoc14_22,dwLoc18_27,eax_65,ebx_52,edi_63,edx,esi,fs,r11_48,r12_51,r13_53,r14_54,r14d_55,r15_57,r8_47,r9_46,rax_64,rbp_122,rbx_116,rcx_49,rdi_126,rdx_58,rsi_124,rsp_127,SCZO_115,SZO_56,Z_50
		defs: C_133,eax_146,ebx_145,edi_131,edx_140,esi_141,fs_151,r11_150,r12_147,r13_138,r14_136,r14d_135,r15_130,r8_152,r9_153,rax_144,rbp_137,rbx_142,rcx_149,rdi_129,rdx_139,rsi_134,rsp_128,SCZO_143,SZO_132,Z_148
	return rsp_128
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0E1:
	Mem95[rdi_62 + 0x0000000000000028:word64] = rax_64 + 0x0000000000000001
	Mem96[rax_64:byte] = 0x0A
	return Mem96[fp - 0x0000000000000008:word64] + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A000_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040A120(word64 rcx, word64 rdx, word64 rsi, word64 r8, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rcx rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A120_entry:
// DataOut: fs r11 r8 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A120:
	word64 rsp_35
	word64 rbp_36
	word64 r12_37
	word64 r13_38
	word64 r14_39
	word64 r15_40
	word64 rax_41 = fn0000000000409E50(r8, rcx, rdx, rsi, out rsp_35, out rbp_36, out r12_37, out r13_38, out r14_39, out r15_40)
	branch rax_41 < 0x0000000000000000 l000000000040A165
// DataOut: fs r11 r14 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A165:
	word64 rsp_82
	word64 rbp_83
	word64 r9_84
	word64 r11_85
	word64 r15_86
	word64 rbx_87 = fn0000000000409F80(rax_41, r14_39, r11, fs, out rsp_82, out rbp_83, out r9_84, out r11_85, out r15_86)
	word64 rsp_91 = fn000000000040A000(r15_86, rbp_83, rbx_87, r11_85, fs)
	word64 rsp_92
	word64 rdi_93
	word64 r15_94
	word64 r8_95
	word64 rsi_96
	word64 r14_97
	word64 rbp_98
	word64 r13_99
	word64 r9_100
	word64 r12_101
	word64 rcx_102
	word64 rbx_103
	word64 rdx_104
	byte SCZO_105
	word64 rax_106
	byte SZO_107
	byte C_108
	byte S_109
	word32 r13d_110
	word64 r11_111
	selector fs_112
	call r13d (retsize: 4; depth: 4)
		uses: C_44,dwLoc04_4,dwLoc08_9,dwLoc0C_13,dwLoc10_18,dwLoc14_22,dwLoc18_28,fs,r11_85,r12_37,r13_38,r13d,r14_39,r15_86,r8,r9_84,rax_41,rbp_83,rbx_87,rcx_25,rdi_90,rdx_88,rsi_89,rsp_91,S_43,SCZO_34,SZO_42
		defs: C_108,fs_112,r11_111,r12_101,r13_99,r13d_110,r14_97,r15_94,r8_95,r9_100,rax_106,rbp_98,rbx_103,rcx_102,rdi_93,rdx_104,rsi_96,rsp_92,S_109,SCZO_105,SZO_107
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:r8 rbx:rdx rdx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> ecx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A156:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A120_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040A2B0(word64 rdi, word64 qwArg00, ptr64 & rbpOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rbp rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esi esp rax rbp rcx rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64)
fn000000000040A2B0_entry:
// DataOut: fs r11 r12 r13 r14 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2B0:
	word64 rdx_27
	word64 rbp_16 = (uint64) (Mem0[rdi:byte] == 0x2F)
	word64 rsi_19
	word64 rax_20 = fn000000000040A390(rdi, out rsi_19)
	word64 rcx_22 = rax_20 - rdi
	branch rcx_22 <=u rbp_16 l000000000040A2FD
// DataOut: fs r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2D2:
	rdx_27 = rcx_22 - 0x0000000000000001
	branch Mem0[rax_20 - 0x0000000000000001:byte] == 0x2F l000000000040A2EE
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2EE:
	branch rbp_16 <u rdx_27 l000000000040A2E0
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2E0:
	word64 rax_55 = rdx_27 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rdx_27:byte] != 0x2F l000000000040A2F3
// DataOut: fs r11 r12 r13 r14 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2EB:
	rdx_27 = rax_55
// DataOut: fs r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2DC:
// DataOut: fs r11 r12 r13 r14 r8 r9 rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2FD:
	rdx_27 = rcx_22
// DataOut: fs r11 r12 r13 r14 r8 r9 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2F3:
	word64 rbp_35
	*rbpOut = qwArg00
	return rdx_27
// DataOut: fs r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

fn000000000040A2B0_exit:
// DataOut: rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx bpl:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040A390(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A390_entry:
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A390:
	word32 edx_107 = (word32) Mem0[rdi:byte]
	word64 rax_104 = rdi
	branch (byte) edx_107 != 0x2F l000000000040A3AC
// DataOut: dl ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A39B:
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:rdi

l000000000040A3A0:
	rax_104 = rax_104 + 0x0000000000000001
	edx_107 = (word32) Mem0[rax_104:byte]
	branch (byte) edx_107 == 0x2F l000000000040A3A0
// DataOut: dl ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3AC:
	word64 rsi_16 = 0x0000000000000000
	*rsiOut = rsi_16
	byte sil_102 = 0x00
	word64 rdx_19 = rax_104
	branch (byte) (uint64) edx_107 == 0x00 l000000000040A3F7
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3F7:
	return rax_104
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3B7:
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3C0:
	rdx_19 = rdx_19 + 0x0000000000000001
	byte cl_52 = (byte) (word32) Mem0[rdx_19:byte]
	branch cl_52 == 0x00 l000000000040A3E5
// DataOut: cl ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3CB:
	branch cl_52 == 0x2F l000000000040A3F0
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3F0:
	word64 rsi_100
	*rsiOut = 0x0000000000000001
	sil_102 = 0x01 (alias)
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D0:
	branch sil_102 == 0x00 l000000000040A3C0
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D5:
	rdx_19 = rdx_19 + 0x0000000000000001
	rax_104 = rdx_19
	cl_52 = (byte) (word32) Mem0[rdx_19:byte] (alias)
	word64 rsi_94 = 0x0000000000000000
	*rsiOut = rsi_94
	sil_102 = 0x00 (alias)
	branch cl_52 != 0x00 l000000000040A3CB
// DataOut: cl ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3E5:
	return rax_104
// DataOut: ebx fs r11 r12 r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

fn000000000040A390_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>



word64 fn000000000040A400(word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh dl dx eax edx esp rax rdx rsp sp spl
// Preserved: rbx
fn000000000040A400_entry:
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A400:
	word64 rax_25 = DPB(rax, strlen(rdi), 0)
	branch rax_25 <=u 0x0000000000000001 l000000000040A41A
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A40F:
	word64 rdx_35 = rax_25 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rax_25:byte] == 0x2F l000000000040A420
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A420:
	rax_25 = rdx_35
	branch rdx_35 != 0x0000000000000001 l000000000040A40F
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A429:
	return rdx_35
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx

l000000000040A41A:
	return rax_25
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx

fn000000000040A400_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx eax:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx



void fn000000000040A600(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rsp
fn000000000040A600_entry:
// DataOut: fs r11 r11d r13 r13d r14 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A600:
	word32 edi_5 = (word32) (uint64) Mem0[rdi + 0x0000000000000018:word32]
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A430:
	byte dl_15
	word32 eax_9 = (word32) (uint64) ((word32) (uint64) edi_5 & 0x0000F000)
	branch eax_9 == 0x00008000 l000000000040A5B0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040A5B0:
	dl_15 = 0x2D (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A442:
	branch eax_9 == 0x00004000 l000000000040A5C0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5C0:
	dl_15 = 0x64 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A44D:
	branch eax_9 == 0x00006000 l000000000040A5D0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5D0:
	dl_15 = 0x62 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A458:
	branch eax_9 == 0x00002000 l000000000040A5A0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5A0:
	dl_15 = 0x63 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A463:
	branch eax_9 == 0x0000A000 l000000000040A5E0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5E0:
	dl_15 = 0x6C (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A46E:
	branch eax_9 == 0x00001000 l000000000040A5F0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5F0:
	dl_15 = 0x70 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A479:
	dl_15 = 0x73 (alias)
	branch eax_9 == 0x0000C000 l000000000040A48B
// DataOut: al dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A488_1:
	dl_15 = 0x3F (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x000000000000003F rdx:0x0000000000000073

l000000000040A48B:
	byte al_180
	Mem18[rsi:byte] = dl_15
	Mem30[rsi + 0x0000000000000001:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000100)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem43[rsi + 0x0000000000000002:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000080)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_51 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000040)) - 0x00000001))
	branch (edi_5 & 0x00000800) == 0x00000000 l000000000040A590
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A590:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4CD:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4D3:
	byte al_168
	Mem57[rsi + 0x0000000000000003:byte] = al_180
	Mem70[rsi + 0x0000000000000004:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000020)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem83[rsi + 0x0000000000000005:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000010)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_91 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000008)) - 0x00000001))
	branch (edi_5 & 0x00000400) == 0x00000000 l000000000040A580
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A580:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A50E:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A514:
	Mem97[rsi + 0x0000000000000006:byte] = al_168
	Mem110[rsi + 0x0000000000000007:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000004)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem126[rsi + 0x0000000000000008:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000002)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	branch (edi_5 & 0x00000200) == 0x00000000 l000000000040A560
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A560:
	Mem151[rsi + 0x000000000000000A:byte] = 0x20
	Mem152[rsi + 0x000000000000000B:byte] = 0x00
	Mem163[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFB5) + 0x00000078)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A545:
	Mem136[rsi + 0x000000000000000A:byte] = 0x20
	Mem137[rsi + 0x000000000000000B:byte] = 0x00
	Mem148[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFE0) + 0x00000074)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

fn000000000040A600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax



word64 fn000000000040A610(word64 rdx, word64 rsi, word64 rdi, ptr64 & rbpOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rbp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040A610_entry:
// DataOut: fs r11 r8 r9 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A610:
	word64 rdx_7
	word64 rsp_8
	word64 rbp_9
	word64 rsi_10
	word64 rdi_11
	word32 r14d_12
	word64 rax_13 = fn000000000040A630(rdx, rsi, rdi, out rdx_7, out rsp_8, out rbp_9, out rsi_10, out rdi_11, out r14d_12)
	branch rax_13 == 0x0000000000000000 l000000000040A623
// DataOut: fs r11 r14d r8 r9 rax rbp rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A623:
	fn0000000000410E50()
// DataOut: fs r11 r8 r9 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>
// Terminates process

l000000000040A628_thunk_fn000000000040A630:
	word64 rdx_29
	word64 rsp_30
	word64 rbp_31
	word64 rsi_32
	word64 rdi_33
	word32 r14d_34
	return fn000000000040A630(rdx_7, rsi_10, rdi_11, out rdx_29, out rsp_30, out rbp_31, out rsi_32, out rdi_33, out r14d_34)
// DataOut: fs r11 r14d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn:

l000000000040A61E:
	return rax_13
// DataOut: fs r11 r14d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>

fn000000000040A610_exit:
// DataOut: r14d rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>



word64 fn000000000040A630(word64 rdx, word64 rsi, word64 rdi, ptr64 & rdxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rbp rdi rdx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A630_entry:
// DataOut: fs r11 r8 r9 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A630:
	word64 rsi_28
	word64 rax_29 = fn000000000040A390(rdi, out rsi_28)
	word64 rsp_32
	word64 rax_33 = fn000000000040A400(rax_29, out rsp_32)
	word64 rdx_37 = rax_29 - rdi
	*rdxOut = rdx_37
	Mem42[rsp_32:word64] = rdx_37 + rax_33
	word64 r14_10 = 0x0000000000000000
	word32 r14d_11
	*r14dOut = 0x00000000
	branch rax_33 == 0x0000000000000000 l000000000040A679
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A66D:
	byte r14b_136 = Mem42[rax_29 - 0x0000000000000001 + rax_33:byte] != 0x2F
	r14_10 = (uint64) r14b_136 (alias)
	word32 r14d_138
	*r14dOut = (word32) r14b_136
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A679:
	word64 rbx_126 = rsi + 0x0000000000000001
	branch Mem42[rsi:byte] == 0x2F l000000000040A700
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A700:
	rbx_126 = rbx_126 + 0x0000000000000000
	branch Mem42[rbx_126:byte] != 0x2F l000000000040A682
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A70D:
	rbx_126 = rbx_126 + 0x0000000000000001
	branch Mem42[rbx_126 + 0x0000000000000001:byte] != 0x2F l000000000040A682
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A71A:
// DataOut: fs r11 r12 r14 r14d r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A682:
	word64 rax_109
	word64 rax_53 = DPB(rax_33, strlen(rbx_126), 0)
	word64 rcx_54 = Mem42[rsp_32:word64]
	Mem55[rsp_32 + 0x0000000000000008:word64] = rax_53
	word64 rax_58 = malloc(rcx_54 + 0x0000000000000001 + r14_10 + rax_53)
	branch rax_58 == 0x0000000000000000 l000000000040A720
// DataOut: fs r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A720:
	rax_109 = 0x0000000000000000
// DataOut: fs r11 r14d r8 r9 rax rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6A8:
	word64 rax_96 = mempcpy(rax_58, rdi, Mem55[rsp_32:word64])
	Mem100[rax_96:byte] = 0x2F
	word64 rdi_101 = rax_96 + r14_10
	branch rdx == 0x0000000000000000 l000000000040A6D5
// DataOut: fs r11 r13 r14d r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6C3:
	Mem120[rdi_101:word64] = rdi_101 - (uint64) (Mem100[rsi:byte] == 0x2F)
// DataOut: fs r11 r13 r14d r8 r9 rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6D5:
	word64 rdx_105 = Mem100[rsp_32 + 0x0000000000000008:word64]
	*rdxOut = rdx_105
	Mem108[mempcpy(rdi_101, rbx_126, rdx_105):byte] = 0x00
	rax_109 = rax_58
// DataOut: fs r11 r14d r8 r9 rax rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:Test(EQ,Z) edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6E8:
	word64 rsp_79 = Mem55[rsp_32 + 0x0000000000000028:word64]
	word64 rbp_81
	*rbpOut = Mem55[rsp_79 + 0x0000000000000008:word64]
	word64 rsi_83
	*rsiOut = Mem55[rsp_79 + 0x0000000000000010:word64]
	word64 rdi_85
	*rdiOut = Mem55[rsp_79 + 0x0000000000000018:word64]
	word64 rsp_86
	*rspOut = rsp_79 + 0x0000000000000020
	return rax_109
// DataOut: fs r11 r14d r8 r9 rax rbp rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A630_exit:
// DataOut: r14d rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040A730(word64 rdi, word32 r14d, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r14d rdi
// LiveOut: r9 rax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A730_entry:
	*r9Out = r9
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A730:
	word64 rdx_124 = Mem0[rdi:word64]
	byte cl_127 = (byte) (word32) Mem0[rdx_124:byte]
	branch cl_127 == 0x00 l000000000040A7CD
// DataOut: cl fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A7CD:
	return 0x0000000000000000
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A73E:
	byte r8b_140 = 0x00
	word64 rax_107 = 0x0000000000000000
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A776:
	branch r8b_140 != 0x00 l000000000040A750
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A750:
	r8b_140 = 0x00 (alias)
	branch (word32) (uint64) ((word32) (uint64) ((int32) cl_127 & 0xFFFFFFDF) - 0x00000041) <=u 0x00000019 l000000000040A768
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A77B:
	branch cl_127 == 0x2E l000000000040A7B8
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7B8:
	branch rax_107 == 0x0000000000000000 l000000000040A7C8
// DataOut: fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7C8:
// DataOut: fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7BD:
	rax_107 = 0x0000000000000001
// DataOut: fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A780:
	word32 esi_111 = (int32) cl_127
	r9 = DPB(r9, r14 - 0x0000000000000030, 0) (alias)
	*r9Out = r9
	branch r14 <=u 0x0000000000000039 l000000000040A768
// DataOut: cl esi fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A78D:
	branch (word32) (uint64) ((word32) (uint64) (esi_111 & 0xFFFFFFDF) - 0x00000041) >u 0x00000019 l000000000040A761
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:(int32) cl r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A761:
	branch cl_127 == 0x7E l000000000040A768
// DataOut: fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A764_1:
	rax_107 = 0x0000000000000000
// DataOut: fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A768:
	rdx_124 = rdx_124 + 0x0000000000000001
	Mem91[rdi:word64] = rdx_124
	cl_127 = (byte) (word32) Mem91[rdx_124:byte] (alias)
	branch cl_127 == 0x00 l000000000040A7B0
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A798:
	rdx_124 = rdx_124 + 0x0000000000000001
	Mem125[rdi:word64] = rdx_124
	cl_127 = (byte) (word32) Mem125[rdx_124:byte] (alias)
	branch cl_127 != 0x00 l000000000040A776
// DataOut: cl fs r10 r11 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7A6:
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7B0:
	return rax_107
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

fn000000000040A730_exit:
// DataOut: r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> rax:<invalid> r8:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030



word64 fn000000000040AB30(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AB30_entry:
// DataOut: fs r11d r13 r14 r15b rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB30:
	word32 eax_10 = clock_gettime(0x0000000000000000, rdi)
	branch eax_10 == 0x00000000 l000000000040AB67
// DataOut: fs r11d r13 r14 r15b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB46:
	word64 rsp_37
	word64 rbx_38
	word64 rsi_39
	word64 rdi_40
	word32 edi_41
	byte SZO_42
	byte C_43
	byte SCZO_44
	word32 eax_45
	byte Z_46
	word32 esi_47
	word64 rax_48
	call gettimeofday (retsize: 8; depth: 28)
		uses: C_34,dwLoc04_4,eax_10,edi,esi_32,qwLoc04,rax,rbx_7,rdi_35,rsi_31,rsp_9,SCZO,SZO_33,Z_12
		defs: C_43,eax_45,edi_41,esi_47,rax_48,rbx_38,rdi_40,rsi_39,rsp_37,SCZO_44,SZO_42,Z_46
	Mem51[rbx_38:word64] = qwLoc14
	Mem56[rbx_38 + 0x0000000000000008:word64] = qwLoc0C *s 1000
// DataOut: fs r11d r13 r14 r15b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:rdi rbx:rdi rdi:<invalid> eax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040AB67:
	return fp + 0x0000000000000004
// DataOut: fs r11d r13 r14 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:<invalid> rbx:rdi rdi:<invalid> eax:<invalid> rax:<invalid> -4(fp):rbx

fn000000000040AB30_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rsi:<invalid> rbx:rbx rdi:<invalid> eax:<invalid> rax:<invalid> -4(fp):rbx



word64 fn000000000040AB70(word64 rax, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax
// LiveOut: al rax rsi
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi rax rcx rdi rsi si sil
// Preserved: rsp
fn000000000040AB70_entry:
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AB70:
	word64 rsp_7
	byte SCZO_8
	word32 esi_9
	word64 rsi_10
	byte SZO_11
	byte C_12
	word64 rax_13
	byte Z_14
	word32 eax_15
	word32 edi_16
	word64 rdi_17
	word32 ecx_18
	word64 rcx_19
	byte al_20
	call setlocale (retsize: 8; depth: 16)
		uses: C_6,esi_4,rsi_3,rsp_2,SZO_5
		defs: al_20,C_12,eax_15,ecx_18,edi_16,esi_9,rax_13,rcx_19,rdi_17,rsi_10,rsp_7,SCZO_8,SZO_11,Z_14
	branch rax_13 == 0x0000000000000000 l000000000040ABB0
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ABB0:
	return 0x0000000000000001
// DataOut: al ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

l000000000040AB80:
	byte Z_42 = cond(Mem0[rax_13:byte] - 0x43)
	branch Mem0[rax_13:byte] != 0x43 l000000000040AB98
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB85:
	Z_42 = cond(Mem0[rax_13 + 0x0000000000000001:byte]) (alias)
	branch Mem0[rax_13 + 0x0000000000000001:byte] != 0x00 l000000000040AB98
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB98:
	word64 rsi_48
	*rsiOut = rax_13
	word64 rdi_50 = 0x0000000000415E6A
	word64 rcx_52 = 0x0000000000000006
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5:
	branch rcx_52 == 0x0000000000000000 l000000000040ABA7
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5_1:
	Z_42 = cond(Mem0[rsi_102:byte] - Mem0[rdi_103:byte]) (alias)
	*rsiOut = rsi_102 + 0x0000000000000001
	rdi_50 = rdi_103 + 0x0000000000000001
	rcx_52 = rcx_52 - 0x0000000000000001
	word64 rsi_102 = rsi_48
	word64 rdi_103 = rdi_50
	branch Mem0[rsi_102:byte] != Mem0[rdi_103:byte] l000000000040ABA5
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA7:
	return DPB(rax_13, Z_42, 0)
// DataOut: al ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040AB8B:
	return 0x0000000000000000
// DataOut: al ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

fn000000000040AB70_exit:
// DataOut: al rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid> al:Test(NE,Z)



word64 fn000000000040ABC0(word64 rdi, word64 r8, ptr64 & rsiOut, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi
// LiveOut: r9 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040ABC0_entry:
	*rsiOut = rsi
	*r9Out = r9
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABC0:
	word64 rdi_121
	branch rdi >u 0x0000000000000009 l000000000040AC4F
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC4F:
	rdi_121 = rdi | 0x0000000000000001
	branch (rdi | 0x0000000000000001) != 0xFFFFFFFFFFFFFFFF l000000000040ABCF
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC5D:
// DataOut: fs r11 r12 r12d r13 r14 r15 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:rdi | 0x0000000000000001

l000000000040ABCA:
	rdi_121 = 0x000000000000000B
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABCF:
	word64 r9_28
	*r9Out = 0x00000000AAAAAAAB
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040ABE0:
	word64 rcx_105
	branch rdi_121 <=u 0x0000000000000009 l000000000040AC48
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC48:
	rcx_105 = 0x0000000000000003
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040ABE6:
	word64 rdx_rax_84 = rdi_121 *u 0x00000000AAAAAAAB
	branch rdi_121 == (rdx_rax_84 >>u 0x0000000000000001) + (rdx_rax_84 >>u 0x0000000000000001) * 0x0000000000000002 l000000000040AC3A
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040ABF8:
	word64 rsi_103 = 0x0000000000000009
	rcx_105 = 0x0000000000000003
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC21:
	rsi_103 = rsi_103 + r8
	*rsiOut = rsi_103
	rcx_105 = rcx_105 + 0x0000000000000002
	branch rsi_103 <u rdi_121 l000000000040AC10
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC10:
	r8 = r8 + 0x0000000000000008
	branch (uint64) (rdi_121 % rcx_105) == 0x0000000000000000 l000000000040AC3A
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC2D:
	branch (uint64) (rdi_121 % rcx_105) != 0x0000000000000000 l000000000040AC44
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC3A:
	rdi_121 = rdi_121 + 0x0000000000000002
	branch rdi_121 != 0xFFFFFFFFFFFFFFFF l000000000040ABE0
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC44:
	return rdi_121
// DataOut: fs r11 r12 r12d r13 r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

fn000000000040ABC0_exit:
// DataOut: r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r9:0x00000000AAAAAAAB Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>



word64 fn000000000040AC80(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: al rax rsi rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AC80_entry:
// DataOut: fs r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC80:
	word64 rsp_11
	word64 rbx_12
	word64 rdi_13
	word64 rsi_14
	word64 rax_15
	byte SCZO_16
	byte C_17
	call Mem0[rdi + 0x0000000000000030:word32] (retsize: 4; depth: 8)
		uses: dwLoc04_4,rbx_6,rdi_8,rsi_10,rsp_2
		defs: C_17,rax_15,rbx_12,rdi_13,rsi_14,rsp_11,SCZO_16
	branch rax_15 >=u Mem0[rbx_12 + 0x0000000000000010:word64] l000000000040AC9D
// DataOut: fs r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC9D:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

l000000000040AC94:
	word64 rsp_25
	*rspOut = fp + 0x0000000000000004
	return (rax_15 << 0x0000000000000004) + Mem0[rbx_12:word64]
// DataOut: al fs r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

fn000000000040AC80_exit:
// DataOut: al rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx



word64 fn000000000040ACB0(word64 rax, word32 ecx, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cl ecx r11 r8 rax rdi rsi
// LiveOut: r12 r13 r14 r9 rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040ACB0_entry:
	*r9Out = r9
// DataOut: cl ecx fs r11 r15 r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACB0:
	word64 r13_11 = (uint64) ecx
	*r13Out = r13_11
	word64 rsi_27
	word64 rsp_127
	word64 rax_28 = fn000000000040AC80(rax, rdi, out rsp_127, out rsi_27)
	Mem30[rsi_27:word64] = rax_28
	word64 r14_6 = rdx
	*r14Out = r14_6
	byte r13b_13 = (byte) r13_11
	word64 r12_17 = rsi
	*r12Out = r12_17
	word64 rbp_156 = rdi
	word64 rsi_126 = Mem30[rax_28:word64]
	word64 rbx_155 = rax_28
	branch rsi_126 == 0x0000000000000000 l000000000040AD4F
// DataOut: al fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ACD7:
	branch rsi == rsi_126 l000000000040ACE9
// DataOut: al fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACDC:
	word64 rsi_181
	word64 r14_182
	word64 rdx_183
	word32 r13d_185
	word32 ecx_186
	word64 r13_187
	word64 rdi_189
	word64 rax_191
	byte SZO_192
	byte C_193
	byte Z_194
	byte SCZO_195
	byte al_196
	word32 esi_197
	word64 r9_199
	word64 r10_201
	word64 rcx_203
	word64 r12_188
	call Mem30[rdi + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_29,C_36,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_24,ecx,esi_32,r10,r11,r12_17,r13_11,r13b_13,r13d_12,r14_6,r8,r9,rax_28,rbp_21,rbx_33,rcx,rdi_179,rdx,rsi_31,rsp_26,SCZO_107,SZO_34,Z_108
		defs: al_196,C_193,ecx_186,esi_197,r10_201,r11_202,r12_188,r13_187,r13b_198,r13d_185,r14_182,r8_200,r9_199,rax_191,rbp_184,rbx_190,rcx_203,rdi_189,rdx_183,rsi_181,rsp_180,SCZO_195,SZO_192,Z_194
	branch al_196 == 0x00 l000000000040AD46
// DataOut: fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD46:
	word64 rax_228 = Mem30[rbx_155 + 0x0000000000000008:word64]
	branch rax_228 != 0x0000000000000000 l000000000040AD30
// DataOut: al fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD30:
	rsi_126 = Mem30[rax_228:word64]
	branch rsi_126 == r12_188 l000000000040AD67
// DataOut: al fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD38:
	word64 rsi_282
	word64 r14_283
	word64 rdx_284
	word32 r13d_286
	word32 ecx_287
	word64 r13_288
	word64 rdi_290
	word64 rax_292
	byte SZO_293
	byte C_294
	byte Z_295
	byte SCZO_296
	byte al_297
	word32 esi_298
	word64 r9_300
	word64 r8_301
	word64 r10_302
	word64 r11_303
	word64 rcx_304
	call Mem30[rbp_156 + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_229,C_232,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_24,ecx_216,esi_234,r10_221,r11_209,r12_214,r13_215,r13b_211,r13d_217,r14_219,r8_210,r9_220,rax_228,rbp_224,rbx_223,rcx_222,rdi_280,rdx_218,rsi_233,rsp_227,SCZO_235,SZO_230,Z_236
		defs: al_297,C_294,ecx_287,esi_298,r10_302,r11_303,r12_289,r13_288,r13b_299,r13d_286,r14_283,r8_301,r9_300,rax_292,rbp_285,rbx_291,rcx_304,rdi_290,rdx_284,rsi_282,rsp_281,SCZO_296,SZO_293,Z_295
	branch al_297 != 0x00 l000000000040AD60
// DataOut: fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD60:
	rax_228 = Mem30[rbx_155 + 0x0000000000000008:word64]
	rsi_126 = Mem30[rax_228:word64]
// DataOut: fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD67:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD6C:
	Mem262[rbx_155 + 0x0000000000000008:word64] = Mem30[rax_228 + 0x0000000000000008:word64]
	Mem263[rax_228:word64] = 0x0000000000000000
	Mem265[rax_228 + 0x0000000000000008:word64] = Mem263[rbp_156 + 0x0000000000000048:word64]
	Mem266[rbp_156 + 0x0000000000000048:word64] = rax_228
	word64 rsp_273 = Mem266[rsp_127 + 0x0000000000000010:word64]
	word64 rbp_275
	*rbpOut = Mem266[rsp_273 + 0x0000000000000008:word64]
	word64 rsi_277
	*rsiOut = Mem266[rsp_273 + 0x0000000000000010:word64]
	word64 rsp_279
	*rspOut = rsp_273 + 0x0000000000000018
	return rsi_126
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD42:
	rbx_155 = Mem30[rbx_155 + 0x0000000000000008:word64]
// DataOut: fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD4F:
	word64 rsp_94 = Mem30[rsp_127 + 0x0000000000000010:word64]
	word64 rbp_100
	*rbpOut = Mem30[rsp_94 + 0x0000000000000008:word64]
	word64 rsi_104
	*rsiOut = Mem30[rsp_94 + 0x0000000000000010:word64]
	word64 rsp_106
	*rspOut = rsp_94 + 0x0000000000000018
	return 0x0000000000000000
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE6:
	rsi_126 = Mem30[rbx_155:word64]
// DataOut: fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE9:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACEE:
	word64 rax_165 = Mem30[rbx_155 + 0x0000000000000008:word64]
	branch rax_165 == 0x0000000000000000 l000000000040AD98
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD98:
	Mem178[rbx_155:word64] = 0x0000000000000000
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACFB:
	word64 r9_170 = Mem30[r8:word64]
	*r9Out = r9_170
	word64 r10_171 = Mem30[r8 + 0x0000000000000008:word64]
	Mem172[r11:word64] = r9_170
	Mem173[r11 + 0x0000000000000008:word64] = r10_171
	Mem174[rax_165:word64] = 0x0000000000000000
	Mem176[rax_165 + 0x0000000000000008:word64] = Mem174[rbp_156 + 0x0000000000000048:word64]
	Mem177[rbp_156 + 0x0000000000000048:word64] = rax_165
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD1C:
	word64 rsp_132 = Mem30[rsp_127 + 0x0000000000000010:word64]
	word64 rbp_134
	*rbpOut = Mem30[rsp_132 + 0x0000000000000008:word64]
	word64 rsi_138
	*rsiOut = Mem30[rsp_132 + 0x0000000000000010:word64]
	word64 rsp_140
	*rspOut = rsp_132 + 0x0000000000000018
	return rsi_126
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn000000000040ACB0_exit:
// DataOut: r12 r13 r14 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn000000000040ADB0(word64 rdi, word64 r8, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi xmm0 xmm1 xmm2 xmm3
// LiveOut: al rax xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax eax rax xmm0 xmm1 xmm2 xmm3
// Preserved: rsp
fn000000000040ADB0_entry:
	*xmm0Out = xmm0
	*xmm1Out = xmm1
	*xmm2Out = xmm2
	*xmm3Out = xmm3
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ADB0:
	word64 rax_4 = Mem0[rdi:word64]
	branch r8 == 0x0000000000415EE0 l000000000040AE30
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE30:
// DataOut: al fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADBB:
	word128 xmm0_34 = DPB(xmm0, Mem0[rax_4 + 0x0000000000000008:real32], 0)
	*xmm0Out = xmm0_34
	branch Mem0[rax_4 + 0x0000000000000008:real32] <=u Mem0[0x0000000000415EF4:real32] l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADC9:
	word128 xmm1_50
	*xmm1Out = DPB(xmm1, Mem0[0x0000000000415EF8:real32], 0)
	branch Mem0[0x0000000000415EF8:real32] <=u xmm0_34 l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid>

l000000000040ADD6:
	word128 xmm1_53
	*xmm1Out = DPB(xmm1, Mem0[rax_4 + 0x000000000000000C:real32], 0)
	branch Mem0[rax_4 + 0x000000000000000C:real32] <=u Mem0[0x0000000000415EFC:real32] l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADE4:
	word128 xmm1_56
	*xmm1Out = DPB(xmm1, Mem0[rax_4:real32], 0)
	branch Mem0[rax_4:real32] <u Mem0[0x0000000000415F00:real32] l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADF1:
	word128 xmm1_60 = DPB(xmm1, Mem0[rax_4:real32] + Mem0[0x0000000000415EF4:real32], 0)
	*xmm1Out = xmm1_60
	word128 xmm2_61 = DPB(xmm2, Mem0[rax_4 + 0x0000000000000004:real32], 0)
	*xmm2Out = xmm2_61
	branch Mem0[rax_4 + 0x0000000000000004:real32] <=u xmm1_60 l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040AE03:
	word128 xmm3_64
	*xmm3Out = DPB(xmm3, Mem0[0x0000000000415F04:real32], 0)
	branch Mem0[0x0000000000415F04:real32] <u xmm2_61 l000000000040AE20
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid>

l000000000040AE10:
	branch Mem0[rax_4 + 0x0000000000000008:real32] >u xmm1_60 l000000000040AE35
// DataOut: al fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE35:
	return 0x0000000000000001
// DataOut: al fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE1A:
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE20:
	Mem45[rdi:word64] = 0x0000000000415EE0
	return 0x0000000000000000
// DataOut: al fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

fn000000000040ADB0_exit:
// DataOut: al rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>



word64 fn000000000040AE40(word64 rax, word32 edx, word64 rbp, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx rax rbp rdi rsi
// LiveOut: al eax ebp r12 r13 r14 r15 rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AE40_entry:
// DataOut: dl edx fs r11 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AE40:
	word64 r15_6 = (uint64) edx
	*r15Out = r15_6
	byte r15b_8 = (byte) r15_6
	word64 r14_12
	*r14Out = rsi
	word64 r12_19
	*r12Out = rdi
	word64 rsp_114 = fp - 0x0000000000000020
	word64 r13_115 = Mem0[rsi:word64]
	*r13Out = r13_115
	branch r13_115 >=u Mem0[rsi + 0x0000000000000008:word64] l000000000040AEEF
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE64:
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE68:
	rbp = Mem0[rbp:word64]
	branch rbp == 0x0000000000000000 l000000000040AEE1
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE71:
	word64 rbx_118 = Mem0[rbp + 0x0000000000000008:word64]
	branch rbx_118 != 0x0000000000000000 l000000000040AE94
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE94:
	word64 rbp_208 = Mem0[rbx_118:word64]
	word64 rsi_212
	rax = fn000000000040AC80(rax, rdi, out rsp_114, out rsi_212)
	word64 rdx_217 = Mem0[rbx_118 + 0x0000000000000008:word64]
	branch Mem0[rax:word64] != 0x0000000000000000 l000000000040AE80
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE80:
	Mem248[rbx_118 + 0x0000000000000008:word64] = Mem0[rax + 0x0000000000000008:word64]
	Mem249[rax + 0x0000000000000008:word64] = rbx_118
	branch rdx_217 == 0x0000000000000000 l000000000040AED0
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEAC:
	Mem233[rax:word64] = rbp_208
	Mem235[rdi + 0x0000000000000018:word64] = Mem233[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	Mem239[rbx_118:word64] = 0x0000000000000000
	rax = Mem239[rdi + 0x0000000000000048:word64]
	Mem242[rbx_118 + 0x0000000000000008:word64] = rax
	Mem243[rdi + 0x0000000000000048:word64] = rbx_118
	branch rdx_217 != 0x0000000000000000 l000000000040AE91
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE91:
	rbx_118 = rdx_217
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AECF:
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED0:
	rbp = Mem0[rbp_208:word64]
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE7A:
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED4:
	Mem136[rbp + 0x0000000000000008:word64] = 0x0000000000000000
	branch r15b_8 == 0x00 l000000000040AF08
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF08:
	word64 rsi_140
	rax = fn000000000040AC80(rax, rdi, out rsp_114, out rsi_140)
	branch Mem136[rax:word64] == 0x0000000000000000 l000000000040AF5B
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF5B:
	Mem199[rax:word64] = rbp
	Mem201[rdi + 0x0000000000000018:word64] = Mem199[rdi + 0x0000000000000018:word64] + 0x0000000000000001
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF1C:
	rax = Mem136[rdi + 0x0000000000000048:word64]
	branch rax == 0x0000000000000000 l000000000040AF66
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF66:
	rax = malloc(0x0000000000000010)
	branch rax != 0x0000000000000000 l000000000040AF2F
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF75:
	word64 rsp_191 = Mem136[rsp_114 + 0x0000000000000018:word64]
	word64 rbp_193
	*rbpOut = Mem136[rsp_191 + 0x0000000000000008:word64]
	word64 rsi_195
	*rsiOut = Mem136[rsp_191 + 0x0000000000000010:word64]
	word64 rsp_198
	*rspOut = rsp_191 + 0x0000000000000020
	return 0x0000000000000000
// DataOut: al eax ebp fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:0x0000000000000010 rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF26:
	Mem175[rdi + 0x0000000000000048:word64] = Mem136[rax + 0x0000000000000008:word64]
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF2F:
	word64 rdx_170 = Mem136[rax + 0x0000000000000008:word64]
	Mem171[rax:word64] = rbp
	Mem172[rax + 0x0000000000000008:word64] = rdx_170
	Mem173[rax + 0x0000000000000008:word64] = rax
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF3E:
	Mem153[rbp:word64] = 0x0000000000000000
	Mem155[rsi_140 + 0x0000000000000018:word64] = Mem153[rsi_140 + 0x0000000000000018:word64] - 0x0000000000000001
	r13_115 = r13_115 + 0x0000000000000010
	*r13Out = r13_115
	branch Mem155[rsi + 0x0000000000000008:word64] >u r13_115 l000000000040AE68
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF59:
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEE1:
	r13_115 = r13_115 + 0x0000000000000010
	*r13Out = r13_115
	branch Mem0[rsi + 0x0000000000000008:word64] >u r13_115 l000000000040AE68
// DataOut: fs r11 r12 r13 r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEEF:
	word64 rsp_75 = Mem0[rsp_114 + 0x0000000000000018:word64]
	word64 rbp_77
	*rbpOut = Mem0[rsp_75 + 0x0000000000000008:word64]
	word64 rsi_79
	*rsiOut = Mem0[rsp_75 + 0x0000000000000010:word64]
	word64 rsp_82
	*rspOut = rsp_75 + 0x0000000000000020
	return 0x0000000000000001
// DataOut: al eax ebp fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040AE40_exit:
// DataOut: al eax ebp r12 r13 r14 r15 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rax:<invalid> rbx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040AFB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: ah al ax eax rax
// Preserved: rsp
fn000000000040AFB0_entry:
// DataOut: r13 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AFB0:
	return Mem0[rdi + 0x0000000000000020:word64]
// DataOut: r13 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040AFB0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040B400(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r12 r12d r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040B400_entry:
	*r8Out = r8
	*xmm0Out = xmm0
	*xmm1Out = xmm1
	*xmm2Out = xmm2
	*xmm3Out = xmm3
	*r9Out = r9
// DataOut: ebx fs r11 r8 r9 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B400:
	word64 r15_197 = rdi
	*r15Out = r15_197
	word32 r15d_7 = (word32) rdi
	word64 r14_13
	*r14Out = r8
	word64 r13_18 = rdx
	word64 r12_23
	*r12Out = rcx
	word64 rbp_122 = rsi
	branch rdx != 0x0000000000000000 l000000000040B42E
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B42A_1:
	r13_18 = 0x000000000040AC60
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:rdx r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B42E:
	branch rcx != 0x0000000000000000 l000000000040B43A
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B436_1:
	*r12Out = 0x000000000040AC70
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B43A:
	word64 rax_235
	word64 rax_40 = malloc(0x0000000000000050)
	branch rax_40 == 0x0000000000000000 l000000000040B598
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B598:
	rax_235 = 0x0000000000000000
// DataOut: eax fs r11 r12 r12d r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B44B:
	branch rsi != 0x0000000000000000 l000000000040B45B
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B457_1:
	rbp_122 = 0x0000000000415EE0
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B45B:
	Mem123[rax_40 + 0x0000000000000028:word64] = rbp_122
	word128 xmm0_128
	word128 xmm1_129
	word128 xmm2_130
	word128 xmm3_131
	word64 rax_132 = fn000000000040ADB0(rax_40 + 0x0000000000000028, r8, xmm0, xmm1, xmm2, xmm3, out xmm0_128, out xmm1_129, out xmm2_130, out xmm3_131)
	branch (byte) rax_132 == 0x00 l000000000040B548
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B46C:
	word64 r8_199
	word128 xmm1_175 = DPB(xmm1_129, Mem123[rbp_122 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_175
	r8_199 = r8
	branch Mem123[rbp_122 + 0x0000000000000010:byte] != 0x00 l000000000040B4C0
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B477:
	word128 xmm0_242
	branch rdi < 0x0000000000000000 l000000000040B578
// DataOut: fs r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B578:
	r15_197 = (uint64) (r15d_7 & 0x00000001)
	*r15Out = r15_197
	rax_132 = rdi >>u 0x0000000000000001 | r15_197
	real32 v34_277 = (real32) rax_132
	xmm0_242 = DPB(xmm0_128, v34_277 + DPB(xmm0_128, v34_277, 0), 0)
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B480:
	xmm0_242 = DPB(xmm0_128, (real32) rdi, 0)
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B485:
	real32 v27_249 = (real32) xmm0_242 / xmm1_175
	word128 xmm0_250
	*xmm0Out = DPB(xmm0_242, v27_249, 0)
	branch v27_249 >=u Mem123[0x0000000000415F08:real32] l000000000040B540
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B496:
	branch v27_249 <u Mem123[0x0000000000415F0C:real32] l000000000040B568
// DataOut: fs r11 r12 r12d r13 r14 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B568:
	*r15Out = DPB(r15_197, v27_249, 0)
	r8_199 = r8
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B4A3:
	real32 v29_255 = v27_249 - Mem123[0x0000000000415F0C:real32]
	word128 xmm0_256
	*xmm0Out = DPB(xmm0_242, v29_255, 0)
	r8_199 = 0x0000000000000000
	*r15Out = DPB(r15_197, v29_255, 0) ^ rax_132
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B4C0:
	word64 rsi_205
	word64 r9_206
	word64 rax_207 = fn000000000040ABC0(r15_197, r8_199, out rsi_205, out r9_206)
	word64 r8_209 = 0x00000000FFFFFFFF
	*r8Out = r8_209
	branch rax_207 >u rax_207 l000000000040B540
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r8:0x0000000000000000 r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B540:
	Mem193[rax_40 + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: fs r11 r12 r12d r14 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B4DA:
	Mem215[rax_40 + 0x0000000000000010:word64] = rax_207
	branch rax_207 == 0x0000000000000000 l000000000040B548
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B4E3:
	word64 rax_218 = calloc(rax_207, 0x0000000000000010)
	Mem224[rax_40:word64] = rax_218
	branch rax_218 == 0x0000000000000000 l000000000040B548
// DataOut: fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B548:
	free(rax_40)
	word64 rbp_167
	*rbpOut = Mem123[qwLoc08 + 0x0000000000000008:word64]
	return 0x0000000000000000
// DataOut: eax ebx fs r11 r12 r12d r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040B4F8:
	Mem226[rax_40 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem227[rax_40 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem230[r11 + 0x0000000000000030:word64] = r13_18
	Mem232[r11 + 0x0000000000000038:word64] = r12_23
	Mem233[rax_40 + 0x0000000000000008:word64] = rax_218 + (rax_207 << 0x0000000000000004)
	Mem234[r11 + 0x0000000000000040:word64] = r8
	Mem238[rax_40 + 0x0000000000000048:word64] = 0x0000000000000000
	rax_235 = rax_40
// DataOut: eax fs r11 r12 r12d r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040B52A:
	word64 rbp_110
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rax_235
// DataOut: eax ebx fs r11 r12 r12d r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040B400_exit:
// DataOut: eax r12 r12d r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:rbx rsi:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF xmm2:<invalid> xmm3:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040B640(word64 rdi, word64 r13, word64 r15, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r15 rdi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl eax ebp esp r12 r12b r12d r12w rax rbp rsp sp spl
// Preserved: rbx rdi
// Stack args: Stack +0004(64)
fn000000000040B640_entry:
// DataOut: r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B640:
	word64 rax_119
	word64 rbp_102 = rdi
	branch Mem0[rdi + 0x0000000000000040:word64] == 0x0000000000000000 l000000000040B655
// DataOut: r13 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B64E:
	branch Mem0[rdi + 0x0000000000000020:word64] != 0x0000000000000000 l000000000040B6C6
// DataOut: r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6C6:
	word64 r12_111 = Mem0[r15:word64]
	branch r12_111 >=u Mem0[r15 + 0x0000000000000008:word64] l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6CF:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6D0:
	word64 rdi_104 = Mem0[r12_111:word64]
	branch rdi_104 != 0x0000000000000000 l000000000040B6E3
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6E3:
	word64 rsp_123
	word64 rdi_125
	word64 rbx_126
	byte SCZO_127
	byte Z_128
	word64 rax_129
	byte C_132
	byte SZO_133
	byte CZ_134
	word64 r15_135
	call Mem0[rbp_102 + 0x0000000000000040:word32] (retsize: 4; depth: 16)
		uses: C_108,CZ_101,dwLoc04_4,dwLoc08_7,dwLoc0C_12,qwLoc0C,r12_99,r13_97,r15_96,rax_98,rbp_102,rbx_105,rdi_104,rsp_103,SCZO_100,SZO_106,Z_107
		defs: C_132,CZ_134,r12_130,r13_131,r15_135,rax_129,rbp_124,rbx_126,rdi_125,rsp_123,SCZO_127,SZO_133,Z_128
	branch Mem0[rbx_126 + 0x0000000000000008:word64] != 0x0000000000000000 l000000000040B6E0
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6E0:
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6DC:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6EF:
	rax_119 = Mem0[rbp_102 + 0x0000000000000008:word64]
	r12_111 = r12_111 + 0x0000000000000010
	branch rax_119 >u r12_111 l000000000040B6D0
// DataOut: r12 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6FC:
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B655:
	rax_119 = Mem0[rdi + 0x0000000000000008:word64]
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B659:
	word64 r12_58 = Mem0[r13:word64] + 0x0000000000000008
	branch r12_58 >=u rax_119 l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B662:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B668:
	word64 rdi_65 = Mem0[r12_58 + 0x0000000000000000:word64]
	branch rdi_65 != 0x0000000000000000 l000000000040B67B
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B67B:
	word64 rbx_78 = Mem0[rdi_65 + 0x0000000000000008:word64]
	free(rdi_65)
	branch rbx_78 != 0x0000000000000000 l000000000040B678
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B678:
	rdi_65 = rbx_78
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B672:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B689:
	r12_58 = r12_58 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_58 l000000000040B668
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B693:
	word64 rdi_25 = Mem0[rbp_102 + 0x0000000000000048:word64]
	branch rdi_25 != 0x0000000000000000 l000000000040B6A3
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6A3:
	word64 rbx_43 = Mem0[rdi_25 + 0x0000000000000008:word64]
	free(rdi_25)
	branch rbx_43 != 0x0000000000000000 l000000000040B6A0
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6A0:
	rdi_25 = rbx_43
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B69C:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6B1:
	free(Mem0[rbp_102:word64])
	free(rbp_102)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040B640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp r12:<invalid> rax:<invalid> rdi:rdi rbx:rbx -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040B710(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word64 qwArg04, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi r11 r8 rax rdi rsi xmm0 xmm1
// LiveOut: al r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040B710_entry:
	*xmm0Out = xmm0
	*r8Out = r8
	*rsiOut = rsi
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
	*r9Out = r9
	*r12Out = r12
// DataOut: esi fs r11 r12 r13 r14 r15 r8 r9 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B710:
	word64 rbp_15 = Mem0[rdi + 0x0000000000000028:word64]
	word128 xmm1_20 = DPB(xmm1, Mem0[rbp_15 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_20
	branch Mem0[rbp_15 + 0x0000000000000010:byte] != 0x00 l000000000040B770
// DataOut: esi fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B72A:
	word128 xmm0_298
	branch rsi < 0x0000000000000000 l000000000040B8D0
// DataOut: esi fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B8D0:
	rsi = (uint64) (esi & 0x00000001)
	*rsiOut = rsi
	rax = rsi >>u 0x0000000000000001 | rsi
	real32 v30_338 = (real32) rax
	xmm0_298 = DPB(xmm0, v30_338 + DPB(xmm0, v30_338, 0), 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B733:
	xmm0_298 = DPB(xmm0, (real32) rsi, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B738:
	real32 v16_305 = (real32) xmm0_298 / xmm1_20
	word128 xmm0_306
	*xmm0Out = DPB(xmm0_298, v16_305, 0)
	branch v16_305 >=u Mem0[0x0000000000415F08:real32] l000000000040B870
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B749:
	branch v16_305 <u Mem0[0x0000000000415F0C:real32] l000000000040B880
// DataOut: fs r11 r13 r14 r15 r8 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B880:
	rsi = DPB(rsi, v16_305, 0) (alias)
// DataOut: fs r11 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B756:
	real32 v18_315 = v16_305 - Mem0[0x0000000000415F0C:real32]
	word128 xmm0_316
	*xmm0Out = DPB(xmm0_298, v18_315, 0)
	r8 = 0x0000000000000000
	rsi = DPB(rsi, v18_315, 0) ^ rax
// DataOut: fs r11 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B770:
	word64 rsi_133
	word64 r9_134
	word64 rax_135 = fn000000000040ABC0(rsi, r8, out rsi_133, out r9_134)
	word64 r12_137 = rax_135
	*r12Out = r12_137
	word64 r8_138 = 0x00000000FFFFFFFE
	*r8Out = r8_138
	branch rax_135 - 0x0000000000000001 >u rax_135 l000000000040B870
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> r8:0x0000000000000000 esi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B792:
	branch Mem0[r11 + 0x0000000000000010:word64] == rax_135 l000000000040B860
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rax:<invalid> xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B860:
	word64 rbp_290
	*rbpOut = fp
	word64 rsp_294
	*rspOut = qwArg04 + 0x0000000000000008
	return 0x0000000000000001
// DataOut: al fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rax:<invalid> xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B79C:
	word64 rsi_145
	*rsiOut = 0x0000000000000010
	branch calloc(rax_135, 0x0000000000000010) == 0x0000000000000000 l000000000040B870
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rax:<invalid> xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B870:
	word64 rbp_103
	*rbpOut = fp
	word64 rsp_108
	*rspOut = qwArg04 + 0x0000000000000008
	return 0x0000000000000000
// DataOut: al fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE xmm0:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -92(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B7B6:
	word64 rsp_176
	word64 rbp_177
	word64 rsi_178
	word64 r12_179
	word64 r13_180
	word64 r14_181
	word64 r15_182
	word64 rax_183 = fn000000000040AE40(Mem0[rdi + 0x0000000000000048:word64], 0x00000000, rbp_15, rdi, fp - 0x000000000000005C, out rsp_176, out rbp_177, out rsi_178, out r12_179, out r13_180, out r14_181, out r15_182)
	word64 rbp_189 = (uint64) (word32) rax_183
	word32 ebp_190 = (word32) rbp_189
	branch (byte) rax_183 != 0x00 l000000000040B890
// DataOut: ebp fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000005C rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:0x0000000000000010 rax:<invalid> xmm0:<invalid> esi:0x00000010 r9:0x00000000AAAAAAAB rcx:<invalid> -92(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B890:
	free(Mem0[rdi:word64])
	Mem260[rdi:word64] = Mem0[rsp_176:word64]
	Mem262[rdi + 0x0000000000000008:word64] = Mem260[rsp_176 + 0x0000000000000008:word64]
	Mem264[rdi + 0x0000000000000010:word64] = Mem262[rsp_176 + 0x0000000000000010:word64]
	Mem266[rdi + 0x0000000000000018:word64] = Mem264[rsp_176 + 0x0000000000000018:word64]
	Mem268[rdi + 0x0000000000000048:word64] = Mem266[rsp_176 + 0x0000000000000048:word64]
	word64 rbp_276
	*rbpOut = Mem268[rsp_176 + 0x0000000000000058:word64]
	word64 rsp_280
	*rspOut = Mem268[rsp_176 + 0x0000000000000060:word64] + 0x0000000000000008
	return (uint64) ebp_190
// DataOut: al fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B815:
	word64 rax_191 = Mem0[rsp_176 + 0x0000000000000048:word64]
	Mem196[rdi + 0x0000000000000048:word64] = rax_191
	word64 rsp_197
	word64 rbp_198
	word64 rsi_199
	word64 r12_200
	word64 r13_201
	word64 r14_202
	word64 r15_203
	word64 rax_204 = fn000000000040AE40(rax_191, 0x00000001, rbp_189, rsp_176, rdi, out rsp_197, out rbp_198, out rsi_199, out r12_200, out r13_201, out r14_202, out r15_203)
	branch (byte) rax_204 == 0x00 l000000000040B8EA
// DataOut: fs r11 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B836:
	word64 rsp_233
	word64 rbp_234
	word64 rsi_235
	word64 r12_236
	word64 r13_237
	word64 r14_238
	word64 r15_239
	branch (byte) fn000000000040AE40(rax_204, 0x00000000, rbp_198, rsp_197, rdi, out rsp_233, out rbp_234, out rsi_235, out r12_236, out r13_237, out r14_238, out r15_239) == 0x00 l000000000040B8EA
// DataOut: ebp fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B8EA:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B84B:
	free(Mem196[rsp_233:word64])
	word64 rbp_253
	*rbpOut = Mem196[rsp_233 + 0x0000000000000058:word64]
	word64 rsp_257
	*rspOut = Mem196[rsp_233 + 0x0000000000000060:word64] + 0x0000000000000008
	return (uint64) ebp_190
// DataOut: al fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040B710_exit:
// DataOut: al r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> r8:0x00000000FFFFFFFE rax:(uint64) ebp xmm0:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> -92(fp):<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):0x0000000000000000 -60(fp):0x0000000000000000 -52(fp):<invalid> -44(fp):<invalid> -36(fp):<invalid> -28(fp):<invalid> -20(fp):<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word32 fn000000000040B8F0(word64 rax, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040B8F0_entry:
	*xmm2Out = xmm2
	*xmm3Out = xmm3
	*r8Out = r8
	*r15Out = r15
	*xmm0Out = xmm0
	*xmm1Out = xmm1
// DataOut: fs r11 r15 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B8F0:
	branch rsi == 0x0000000000000000 l000000000040BA67
// DataOut: fs r11 r15 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040B904:
	word32 eax_152
	word64 rsi_78
	word64 r9_79
	word64 r12_80
	word64 r13_81
	word64 r14_82
	word64 rbp_261
	word64 rsp_156
	word64 rax_83 = fn000000000040ACB0(rax, 0x00000000, rsi, rdi, r8, r11, out rsp_156, out rbp_261, out rsi_78, out r9_79, out r12_80, out r13_81, out r14_82)
	branch rax_83 == 0x0000000000000000 l000000000040B938
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000001C rbp:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B938:
	word128 xmm0_193
	word64 rax_187 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_188 = (word32) rax_187
	branch rax_187 < 0x0000000000000000 l000000000040BA70
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA70:
	real32 v27_456 = (real32) (rax_187 >>u 0x0000000000000001 | (uint64) (eax_188 & 0x00000001))
	*xmm0Out = DPB(xmm0, v27_456 + DPB(xmm0, v27_456, 0), 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B945:
	*xmm0Out = DPB(xmm0, (real32) rax_187, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B94A:
	word128 xmm1_201
	word64 rax_194 = Mem0[rdi + 0x0000000000000010:word64]
	word32 eax_195 = (word32) rax_194
	word64 rdx_197 = Mem0[rdi + 0x0000000000000028:word64]
	branch rax_194 < 0x0000000000000000 l000000000040BA90
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA90:
	real32 v47_444 = (real32) (rax_194 >>u 0x0000000000000001 | (uint64) (eax_195 & 0x00000001))
	xmm1_201 = DPB(xmm1, v47_444 + DPB(xmm1, v47_444, 0), 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B95B:
	xmm1_201 = DPB(xmm1, (real32) rax_194, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B960:
	word128 xmm1_207 = DPB(xmm1_201, (real32) xmm1_201 * Mem0[rdx_197 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_207
	branch (real32) xmm0_193 >u xmm1_207 l000000000040B9C8
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9C8:
	word128 xmm0_326
	word128 xmm0_313
	word128 xmm1_314
	word128 xmm2_315
	word128 xmm3_316
	fn000000000040ADB0(rdi + 0x0000000000000028, r8, xmm0_193, xmm1_207, xmm2, xmm3, out xmm0_313, out xmm1_314, out xmm2_315, out xmm3_316)
	word64 rax_318 = Mem0[rdi + 0x0000000000000010:word64]
	word64 rdx_321 = Mem0[rdi + 0x0000000000000028:word64]
	word32 eax_319 = (word32) rax_318
	word128 xmm2_325 = DPB(xmm2_315, Mem0[rdx_321 + 0x0000000000000008:real32], 0)
	*xmm2Out = xmm2_325
	branch rax_318 < 0x0000000000000000 l000000000040BAE7
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BAE7:
	real32 v45_432 = (real32) (rax_318 >>u 0x0000000000000001 | (uint64) (eax_319 & 0x00000001))
	*xmm0Out = DPB(xmm0_313, v45_432 + DPB(xmm0_313, v45_432, 0), 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9E7:
	*xmm0Out = DPB(xmm0_313, (real32) rax_318, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9EC:
	word128 xmm1_334
	word64 rax_328 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_329 = (word32) rax_328
	branch rax_328 < 0x0000000000000000 l000000000040BB01
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BB01:
	rax_328 = (uint64) (eax_329 & 0x00000001)
	real32 v41_420 = (real32) (rax_328 >>u 0x0000000000000001 | rax_328)
	*xmm1Out = DPB(xmm1_314, v41_420 + DPB(xmm1_314, v41_420, 0), 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9F9:
	*xmm1Out = DPB(xmm1_314, (real32) rax_328, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040B9FE:
	word128 xmm3_343 = DPB(xmm2_315, Mem0[rdx_321 + 0x0000000000000008:real32] * xmm0_326, 0)
	*xmm3Out = xmm3_343
	branch (real32) xmm1_334 <=u xmm3_343 l000000000040B96A
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA0E:
	real32 v37_348 = (real32) xmm0_326 * Mem0[rdx_321 + 0x000000000000000C:real32]
	word128 xmm0_349
	*xmm0Out = DPB(xmm0_326, v37_348, 0)
	branch Mem0[rdx_321 + 0x0000000000000010:byte] != 0x00 l000000000040BA1D
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA19:
	*xmm0Out = DPB(xmm0_326, v37_348 * xmm2_325, 0)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA1D:
	branch (real32) xmm0_349 >=u Mem0[0x0000000000415F08:real32] l000000000040BB2E
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA2A:
	word64 rsi_358
	branch (real32) xmm0_349 >=u Mem0[0x0000000000415F0C:real32] l000000000040BAC8
// DataOut: fs r11 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BAC8:
	real32 v43_399 = (real32) xmm0_349 - Mem0[0x0000000000415F0C:real32]
	xmm0_349 = DPB(xmm0_349, v43_399, 0)
	r8 = 0x0000000000000000
	rsi_358 = DPB(rsi_78, v43_399, 0) ^ rax_328
// DataOut: esi fs r11 r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA37:
	rsi_358 = DPB(rsi_78, (int32) xmm0_349, 0) (alias)
// DataOut: esi fs r11 r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040BA3C:
	word64 rbp_362
	word64 rsi_363
	word64 r8_364
	word64 r9_365
	word64 r12_366
	word64 r13_367
	word64 r14_368
	word64 r15_369
	word128 xmm0_370
	word128 xmm1_371
	word64 rax_372 = fn000000000040B710(rax_328, rsi_358, rdi, r8, r11, xmm0_349, xmm1_334, qwLoc04, out rsp_156, out rbp_362, out rsi_363, out r8_364, out r9_365, out r12_366, out r13_367, out r14_368, out r15_369, out xmm0_370, out xmm1_371)
	branch (byte) rax_372 == 0x00 l000000000040BB2E
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x0000000000000000 rsi:<invalid> r14:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BA4C:
	word64 rsi_388
	word64 r9_389
	word64 r12_390
	word64 r13_391
	word64 r14_392
	branch fn000000000040ACB0(rax_372, 0x00000000, rbp_362, rdi, r8_364, r11, out rsp_156, out rbp_261, out rsi_388, out r9_389, out r12_390, out r13_391, out r14_392) == 0x0000000000000000 l000000000040B96A
// DataOut: fs r11 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BA67:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B96A:
	word64 r12_263 = Mem0[rsp_156 + 0x0000000000000008:word64]
	*r12Out = r12_263
	branch Mem0[r12_263:word64] == 0x0000000000000000 l000000000040BAB0
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BAB0:
	Mem303[r12_263:word64] = rbp_261
	Mem308[rdi + 0x0000000000000020:word64] = Mem303[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	Mem310[rdi + 0x0000000000000018:word64] = Mem308[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	eax_152 = 0x00000001 (alias)
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B97A:
	word64 rax_266 = Mem0[rdi + 0x0000000000000048:word64]
	branch rax_266 == 0x0000000000000000 l000000000040BB1B
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BB1B:
	rax_266 = malloc(0x0000000000000010)
	branch rax_266 != 0x0000000000000000 l000000000040B98F
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BB2E:
	eax_152 = 0xFFFFFFFF (alias)
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B987:
	Mem295[rdi + 0x0000000000000048:word64] = Mem0[rax_266 + 0x0000000000000008:word64]
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B98F:
	word64 rdx_277 = Mem0[r12_263 + 0x0000000000000008:word64]
	Mem278[rax_266:word64] = rbp_261
	Mem279[rax_266 + 0x0000000000000008:word64] = rdx_277
	Mem280[r12_263 + 0x0000000000000008:word64] = rax_266
	Mem285[rdi + 0x0000000000000020:word64] = Mem280[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	word64 rsp_286 = rsp_156 + 0x0000000000000010
	word64 rbp_290
	*rbpOut = Mem285[rsp_286 + 0x0000000000000008:word64]
	word64 rsp_293
	*rspOut = Mem285[rsp_286 + 0x0000000000000010:word64] + 0x0000000000000008
	return 0x00000001
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B91B:
	branch r12_80 == 0x0000000000000000 l000000000040B9B8
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B9B8:
	word64 rbp_183
	*rbpOut = Mem0[rsp_156 + 0x0000000000000018:word64]
	word64 rsp_186
	*rspOut = Mem0[rsp_156 + 0x0000000000000020:word64] + 0x0000000000000008
	return 0x00000000
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B924:
	Mem169[r12_80:word64] = rax_83
	eax_152 = 0x00000000 (alias)
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B92A:
	word64 rsp_157 = rsp_156 + 0x0000000000000010
	word64 rbp_162
	*rbpOut = Mem0[rsp_157 + 0x0000000000000008:word64]
	word64 rsp_165
	*rspOut = Mem0[rsp_157 + 0x0000000000000010:word64] + 0x0000000000000008
	return eax_152
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040B8F0_exit:
// DataOut: eax r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040BB50(word64 rax, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax ebx r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040BB50_entry:
// DataOut: fs r11 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BB50:
	word64 rax_40
	word64 rsp_20
	word64 rbp_21
	word64 rsi_22
	word64 r8_23
	word64 r9_24
	word64 r12_25
	word64 r13_26
	word64 r14_27
	word64 r15_28
	word128 xmm0_29
	word128 xmm1_30
	word128 xmm2_31
	word128 xmm3_32
	word32 eax_33 = fn000000000040B8F0(rax, rbp, rsi, rdi, r8, r11, xmm0, xmm1, xmm2, xmm3, out rsp_20, out rbp_21, out rsi_22, out r8_23, out r9_24, out r12_25, out r13_26, out r14_27, out r15_28, out xmm0_29, out xmm1_30, out xmm2_31, out xmm3_32)
	branch eax_33 == 0xFFFFFFFF l000000000040BB80
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040BB80:
	rax_40 = 0x0000000000000000
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -4(fp):rbx

l000000000040BB67:
	rax_40 = rsi
	branch eax_33 != 0x00000000 l000000000040BB72
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -4(fp):rbx

l000000000040BB6C_1:
	rax_40 = Mem0[rsp_20 + 0x0000000000000008:word64]
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -4(fp):rbx

l000000000040BB72:
	word32 ebx_46
	*ebxOut = (word32) Mem0[rsp_20 + 0x0000000000000010:word64]
	word64 rsp_47
	*rspOut = rsp_20 + 0x0000000000000018
	return rax_40
// DataOut: eax ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -4(fp):rbx

fn000000000040BB50_exit:
// DataOut: eax ebx r12 r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -4(fp):rbx



word64 fn000000000040BB90(word64 rax, byte bpl, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rspOut, ptr64 & bplOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r13Out, ptr64 & r15Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl r11 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: bpl r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040BB90_entry:
	*r8Out = r8
	*xmm3Out = xmm3
	*xmm2Out = xmm2
	*r15Out = r15
	*xmm0Out = xmm0
	*xmm1Out = xmm1
// DataOut: bpl fs r11 r15 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BB90:
	word64 rbp_23
	word64 rsi_24
	word64 r9_25
	word64 r12_26
	word64 r13_27
	word64 r14_28
	word64 rsp_102
	word64 rax_100 = fn000000000040ACB0(rax, 0x00000001, rsi, rdi, r8, r11, out rsp_102, out rbp_23, out rsi_24, out r9_25, out r12_26, out r13_27, out r14_28)
	branch rax_100 == 0x0000000000000000 l000000000040BD08
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD08:
	rax_100 = 0x0000000000000000
// DataOut: fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBB6:
	word64 rdx_113 = Mem0[rsp_102 + 0x0000000000000008:word64]
	Mem115[rdi + 0x0000000000000020:word64] = Mem0[rdi + 0x0000000000000020:word64] - 0x0000000000000001
	branch Mem115[rdx_113:word64] == 0x0000000000000000 l000000000040BBD0
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBD0:
	word128 xmm0_136
	word64 rax_129 = Mem115[rdi + 0x0000000000000018:word64]
	Mem135[rdi + 0x0000000000000018:word64] = rax_129 - 0x0000000000000001
	word32 eax_131 = (word32) (rax_129 - 0x0000000000000001)
	branch rax_129 < 0x0000000000000001 l000000000040BCE8
// DataOut: eax fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BCE8:
	real32 v25_319 = (real32) (rax_129 - 0x0000000000000001 >>u 0x0000000000000001 | (uint64) (eax_131 & 0x00000001))
	*xmm0Out = DPB(xmm0, v25_319 + DPB(xmm0, v25_319, 0), 0)
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBE5:
	*xmm0Out = DPB(xmm0, (real32) (rax_129 - 0x0000000000000001), 0)
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBEA:
	word128 xmm1_146
	word64 rax_137 = Mem135[rdi + 0x0000000000000010:word64]
	word32 eax_138 = (word32) rax_137
	word64 rdx_139 = Mem135[rdi + 0x0000000000000028:word64]
	branch rax_137 < 0x0000000000000000 l000000000040BCC8
// DataOut: eax fs r11 r13 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BCC8:
	real32 v33_307 = (real32) (rax_137 >>u 0x0000000000000001 | (uint64) (eax_138 & 0x00000001))
	xmm1_146 = DPB(xmm1, v33_307 + DPB(xmm1, v33_307, 0), 0)
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BBFB:
	xmm1_146 = DPB(xmm1, (real32) rax_137, 0)
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC00:
	real32 v22_150 = (real32) xmm1_146 * Mem135[rdx_139:real32]
	word128 xmm1_151 = DPB(xmm1_146, v22_150, 0)
	*xmm1Out = xmm1_151
	branch v22_150 >u xmm0_136 l000000000040BC18
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC18:
	word128 xmm0_194
	word128 xmm0_180
	word128 xmm1_181
	word128 xmm2_182
	word128 xmm3_183
	fn000000000040ADB0(rdi + 0x0000000000000028, r8, xmm0_136, xmm1_151, xmm2, xmm3, out xmm0_180, out xmm1_181, out xmm2_182, out xmm3_183)
	word64 rdx_185 = Mem135[rdi + 0x0000000000000010:word64]
	word32 edx_186 = (word32) rdx_185
	word64 rax_188 = Mem135[rdi + 0x0000000000000028:word64]
	branch rdx_185 < 0x0000000000000000 l000000000040BD2F
// DataOut: edx fs r11 r13 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD2F:
	real32 v36_295 = (real32) (rdx_185 >>u 0x0000000000000001 | (uint64) (edx_186 & 0x00000001))
	*xmm0Out = DPB(xmm0_180, v36_295 + DPB(xmm0_180, v36_295, 0), 0)
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC32:
	*xmm0Out = DPB(xmm0_180, (real32) rdx_185, 0)
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC37:
	word128 xmm1_202
	word64 rdx_195 = Mem135[rdi + 0x0000000000000018:word64]
	word32 edx_196 = (word32) rdx_195
	branch rdx_195 < 0x0000000000000000 l000000000040BD49
// DataOut: edx fs r11 r13 r15 r8 r9 rax rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD49:
	real32 v38_283 = (real32) (rdx_195 >>u 0x0000000000000001 | (uint64) (edx_196 & 0x00000001))
	*xmm1Out = DPB(xmm1_181, v38_283 + DPB(xmm1_181, v38_283, 0), 0)
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC44:
	*xmm1Out = DPB(xmm1_181, (real32) rdx_195, 0)
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC49:
	real32 v30_207 = Mem135[rax_188:real32] * xmm0_194
	word128 xmm2_208
	*xmm2Out = DPB(xmm2_182, v30_207, 0)
	branch v30_207 <=u xmm1_202 l000000000040BC09
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC56:
	real32 v31_213 = (real32) xmm0_194 * Mem135[rax_188 + 0x0000000000000004:real32]
	word128 xmm0_214 = DPB(xmm0_194, v31_213, 0)
	branch Mem135[rax_188 + 0x0000000000000010:byte] != 0x00 l000000000040BC66
// DataOut: fs r11 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC61:
	xmm0_214 = DPB(xmm0_194, v31_213 * Mem135[rax_188 + 0x0000000000000008:real32], 0)
// DataOut: fs r11 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC66:
	word64 rsi_219
	branch (real32) xmm0_214 >=u Mem135[0x0000000000415F0C:real32] l000000000040BD10
// DataOut: fs r11 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BD10:
	real32 v42_264 = (real32) xmm0_214 - Mem135[0x0000000000415F0C:real32]
	xmm0_214 = DPB(xmm0_214, v42_264, 0)
	r8 = 0x0000000000000000
	rsi_219 = DPB(rsi_24, v42_264, 0) ^ rax_188
// DataOut: esi fs r11 r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC73:
	rsi_219 = DPB(rsi_24, (int32) xmm0_214, 0) (alias)
// DataOut: esi fs r11 r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: Local -0004(8) Local -0008(8)

l000000000040BC78:
	rax_100 = rbp_225
	word64 rbp_225
	word64 rsi_226
	word64 r8_227
	word64 r9_228
	word64 r12_229
	word64 r13_230
	word64 r14_231
	word64 r15_232
	word128 xmm0_233
	word128 xmm1_234
	branch (byte) (uint64) (word32) fn000000000040B710(rax_188, rsi_219, rdi, r8, r11, xmm0_214, xmm1_202, qwLoc04, out rsp_102, out rbp_225, out rsi_226, out r8_227, out r9_228, out r12_229, out r13_230, out r14_231, out r15_232, out xmm0_233, out xmm1_234) != 0x00 l000000000040BBC6
// DataOut: fs r11 r13 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x0000000000000000 rsi:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BC8D:
	word64 rdi_244 = Mem135[rdi + 0x0000000000000048:word64]
	branch rdi_244 != 0x0000000000000000 l000000000040BCA3
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCA3:
	word64 r12_257 = Mem135[r15_232 + 0x0000000000000008:word64]
	free(rdi_244)
	branch r12_257 != 0x0000000000000000 l000000000040BCA0
// DataOut: fs r11 r12 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCA0:
	rdi_244 = r12_257
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BC96:
// DataOut: fs r11 r13 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCB1:
	Mem253[rdi + 0x0000000000000048:word64] = 0x0000000000000000
	rax_100 = rbp_225
// DataOut: fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE rsi:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r9:0x00000000AAAAAAAB r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BC09:
	byte bpl_175
	*bplOut = (byte) Mem135[rsp_102 + 0x0000000000000018:word64]
	word64 rsp_178
	*rspOut = Mem135[rsp_102 + 0x0000000000000020:word64] + 0x0000000000000008
	return rax_100
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBC6:
	word64 rsp_103 = rsp_102 + 0x0000000000000010
	byte bpl_109
	*bplOut = (byte) Mem0[rsp_103 + 0x0000000000000008:word64]
	word64 rsp_112
	*rspOut = Mem0[rsp_103 + 0x0000000000000010:word64] + 0x0000000000000008
	return rax_100
// DataOut: bpl fs r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040BB90_exit:
// DataOut: bpl r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:0x00000000FFFFFFFE r15:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040BD70(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r13Out, ptr64 & r14dOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs r8 rbp rcx rdi rsi
// LiveOut: bpl r11 r11d r13 r14d r15 r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040BD70_entry:
	def fp
	def rdi
	def edx
	def rsi
	def rbp
	def rbx
	def rcx
	def r8
	def fs
	def Mem0
	def bLocB0
	def qwLoc18
	def qwLoc10
	def qwLoc08
	def rspOut
	def rbpOut
	def r8Out
	def r9Out
	def r11Out
	def r13Out
	def r14dOut
	def r15Out
	def dwLoc74
	def qwLoc90
	def qwLoc98
	def rLoc4
	def wLoc6A
	def wLoc6C
	def rLoc90
	def rLoc3
	def rLoc2
	def qwLoc68
	def rLoc1
	def rLocD0
// DataOut: edx fs r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BD70:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000004
	dwLoc04_4 = rdi
	rax_6 = (uint64) edx
	eax_7 = (word32) rax_6 (alias)
	rax_8 = (uint64) (eax_7 & 0x00000003)
	eax_9 = (word32) rax_8 (alias)
	rsp_10 = fp - 0x0000000000000008
	dwLoc08_12 = rsi
	r14_13 = rsi
	r14d_14 = (word32) r14_13 (alias)
	rsp_15 = fp - 0x000000000000000C
	dwLoc0C_17 = rbp
	v12_18 = fp - 0x000000000000000C
	rsp_19 = fp - 0x0000000000000010
	dwLoc10_20 = fp - 0x000000000000000C
	r12_21 = rdi
	r12d_22 = (word32) r12_21 (alias)
	rsp_23 = fp - 0x0000000000000014
	dwLoc14_24 = rbp
	rsp_25 = fp - 0x0000000000000018
	dwLoc18_27 = rbx
	rbx_29 = rcx
	ebx_30 = (word32) rbx_29 (alias)
	rsp_31 = fp - 0x00000000000000D0
	dwLoc98_32 = eax_9
	rax_33 = (uint64) edx
	eax_34 = (word32) rax_33 (alias)
	qwLocA0_35 = rsi
	rax_36 = (uint64) (eax_34 & 0x00000020)
	eax_37 = (word32) rax_36 (alias)
	dwLocB0_38 = edx
	qwLocA8_40 = r8
	rcx_43 = Mem0[fs:0x00000028:word64]
	qwLoc28_44 = rcx_43
	rcx_45 = 0x0000000000000000
	SCZO_46 = cond(eax_37 - 0x00000001)
	C_47 = SCZO_46 (alias)
	dwLoc78_48 = eax_37
	rax_49 = (uint64) (0x00000000 - C_47)
	eax_50 = (word32) rax_49 (alias)
	dwLocAC_51 = eax_50
	v20_52 = dwLocAC_51 & 0xFFFFFFE8
	dwLocAC_53 = v20_52
	SZO_54 = cond(dwLocAC_53)
	v21_55 = dwLocAC_53 + 0x00000400
	dwLocAC_56 = v21_55
	SCZO_57 = cond(v21_55)
	call localeconv (retsize: 8; depth: 216)
		uses: C_47,dwLoc04_4,dwLoc08_12,dwLoc0C_17,dwLoc10_20,dwLoc14_24,dwLoc18_27,dwLoc78_48,dwLoc98_32,dwLocAC_56,dwLocB0_38,eax_50,ebx_30,edx,fs,qwLoc28_44,qwLocA0_35,qwLocA8_40,r12_21,r12d_22,r14_13,r14d_14,r8,rax_49,rbp,rbx_29,rcx_45,rdi,rsi,rsp_31,SCZO_57,SZO_54
		defs: ah_92,al_98,ax_93,C_64,cl_85,CZ_79,CZP_90,dil_97,dl_95,eax_60,ebx_82,ecx_74,edi_84,edx_61,esi_88,fs_73,P_94,r10_83,r10b_101,r10d_100,r11_77,r12_68,r12d_89,r13_76,r14_66,r14d_91,r15_75,r15d_99,r8_72,r9_87,r9d_86,rax_62,rbp_67,rbx_69,rcx_70,rdi_59,rdx_78,rsi_65,rsp_58,S_81,SCZO_71,sil_96,SZO_63,Z_80
	r15_102 = Mem0[r8_72:word64]
	r15d_103 = (word32) r15_102 (alias)
	r13_104 = rax_62
	rdi_105 = r15_102
	eax_106 = strlen(rdi_105)
	rax_107 = DPB(rax_62, eax_106, 0) (alias)
	rbp_108 = Mem0[rbp_67 + 0x0000000000000010:word64]
	r11_109 = rax_107
	r13_110 = Mem0[r13_104 + 0x0000000000000008:word64]
	rax_111 = rax_107 - 0x0000000000000001
	rdx_112 = 0x0000000000000001
	edx_113 = (word32) rdx_112 (alias)
	dl_114 = (byte) rdx_112 (alias)
	SCZO_115 = cond(rax_111 - 0x0000000000000010)
	C_116 = SCZO_115 (alias)
	SZO_117 = SCZO_115 (alias)
	Z_118 = SCZO_115 (alias)
	CZ_119 = SCZO_115 (alias)
	S_120 = SCZO_115 (alias)
	CZP_121 = SCZO_115 (alias)
	rdi_122 = r13_110
	edi_123 = (word32) rdi_122 (alias)
	dil_124 = (byte) rdi_122 (alias)
	rax_125 = 0x0000000000413990
	rdx_rax_126 = SEQ(rdx_112, rax_125) (alias)
	edx_eax_127 = rax_125 (alias)
	branch rax_111 <u 0x0000000000000010 l000000000040BE0A
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE06_1:
	r11_1858 = 0x0000000000000001
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0A:
	r11_128 = PHI(r11_109, r11_1858)
	branch rax_111 <u 0x0000000000000010 l000000000040BE0E
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0A_1:
	r15_1856 = 0x0000000000413990
	r15d_1857 = (word32) r15_1856 (alias)
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0E:
	r15_129 = PHI(r15_102, r15_1856)
	r15d_130 = PHI(r15d_103, r15d_1857)
	qwLoc80_131 = r11_128
	eax_132 = strlen(rdi_122)
	rax_133 = DPB(rax_125, eax_132, 0) (alias)
	SCZO_134 = cond(rax_133 - 0x0000000000000011)
	C_135 = SCZO_134 (alias)
	rax_136 = 0x0000000000416919
	rdx_rax_137 = SEQ(rdx_112, rax_136) (alias)
	edx_eax_138 = rax_136 (alias)
	r11_139 = qwLoc80_131
	branch rax_133 <u 0x0000000000000011 l000000000040BE2A
// DataOut: bx fs r11 r11d r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE26_1:
	r13_1855 = 0x0000000000416919
// DataOut: bx fs r11 r11d r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE2A:
	r13_140 = PHI(r13_110, r13_1855)
	rax_141 = r14_66
	rdx_rax_142 = SEQ(rdx_112, rax_141) (alias)
	edx_eax_143 = rax_141 (alias)
	r8_144 = r8_72 + 648
	SCZO_145 = cond(qwLocA8_40 - rbx_69)
	CZ_146 = SCZO_145 (alias)
	qwLocB8_147 = rax_141
	branch qwLocA8_40 >u rbx_69 l000000000040C0E0
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0E0:
	SZO_1789 = cond(rbx_69 & rbx_69)
	Z_1790 = SZO_1789 (alias)
	C_1791 = false
	branch Test(EQ,Z_1790) l000000000040BE59
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0E9:
	rax_1792 = qwLocA8_40
	rdx_1793 = 0x0000000000000000
	rdx_rax_1794 = SEQ(rdx_1793, rax_1792) (alias)
	v35_1795 = rdx_rax_1794
	rdx_1796 = (uint64) (v35_1795 % rbx_69)
	edx_1797 = (word32) rdx_1796 (alias)
	dl_1798 = (byte) rdx_1796 (alias)
	rax_1799 = (uint64) (v35_1795 /u rbx_69)
	rdx_rax_1800 = SEQ(rdx_1796, rax_1799) (alias)
	edx_eax_1801 = rax_1799 (alias)
	SZO_1802 = cond(rdx_1796 & rdx_1796)
	Z_1803 = SZO_1802 (alias)
	C_1804 = false
	rsi_1805 = rax_1799
	sil_1806 = (byte) rsi_1805 (alias)
	esi_1807 = (word32) rsi_1805 (alias)
	branch Test(NE,Z_1803) l000000000040BE59
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0FF:
	rdx_1808 = 0x0000000000000000
	rax_1809 = r12_68
	rdx_rax_1810 = SEQ(rdx_1808, rax_1809) (alias)
	v36_1811 = rdx_rax_1810
	rdx_1812 = (uint64) (v36_1811 % rsi_1805)
	rax_1813 = (uint64) (v36_1811 /u rsi_1805)
	rdi_1814 = rdx_1812 + rdx_1812 * 0x0000000000000004
	r10_1815 = rax_1813
	r10d_1816 = (word32) r10_1815 (alias)
	r10b_1817 = (byte) r10_1815 (alias)
	rdx_1818 = 0x0000000000000000
	rax_1819 = rdi_1814 + rdi_1814
	rdx_rax_1820 = SEQ(rdx_1818, rax_1819) (alias)
	v38_1821 = rdx_rax_1820
	rdx_1822 = (uint64) (v38_1821 % rsi_1805)
	rax_1823 = (uint64) (v38_1821 /u rsi_1805)
	eax_1824 = (word32) rax_1823 (alias)
	rdx_1825 = rdx_1822 + rdx_1822
	edx_1826 = (word32) rdx_1825 (alias)
	rdx_rax_1827 = SEQ(rdx_1825, rax_1823) (alias)
	edx_eax_1828 = rdx_1825 (alias)
	dl_1829 = (byte) rdx_1825 (alias)
	rdi_1830 = (uint64) eax_1824
	edi_1831 = (word32) rdi_1830 (alias)
	dil_1832 = (byte) rdi_1830 (alias)
	SCZO_1833 = cond(rsi_1805 - rdx_1825)
	C_1834 = SCZO_1833 (alias)
	SZO_1835 = SCZO_1833 (alias)
	Z_1836 = SCZO_1833 (alias)
	CZ_1837 = SCZO_1833 (alias)
	S_1838 = SCZO_1833 (alias)
	CZP_1839 = SCZO_1833 (alias)
	branch Test(ULE,CZ_1837) l000000000040C6E0
// DataOut: edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C6E0:
	rcx_1847 = (uint64) (0x00000000 - C_1834)
	ecx_1848 = (word32) rcx_1847 (alias)
	rcx_1849 = (uint64) ~ecx_1848
	ecx_1850 = (word32) rcx_1849 (alias)
	rcx_1851 = (uint64) (ecx_1850 + 0x00000003)
	ecx_1852 = (word32) rcx_1851 (alias)
	cl_1853 = (byte) rcx_1851 (alias)
	SCZO_1854 = cond(ecx_1852)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C125:
	rcx_1840 = 0x0000000000000000
	SZO_1841 = cond(rdx_1825 & rdx_1825)
	Z_1842 = SZO_1841 (alias)
	C_1843 = false
	cl_1844 = Test(NE,Z_1842)
	rcx_1845 = DPB(rcx_1840, cl_1844, 0) (alias)
	ecx_1846 = DPB(ecx_74, cl_1844, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040BE43:
	rdx_1745 = 0x0000000000000000
	rax_1746 = rbx_69
	rdx_rax_1747 = SEQ(rdx_1745, rax_1746) (alias)
	v28_1748 = rdx_rax_1747
	rdx_1749 = (uint64) (v28_1748 % qwLocA8_40)
	edx_1750 = (word32) rdx_1749 (alias)
	dl_1751 = (byte) rdx_1749 (alias)
	rax_1752 = (uint64) (v28_1748 /u qwLocA8_40)
	eax_1753 = (word32) rax_1752 (alias)
	rdx_rax_1754 = SEQ(rdx_1749, rax_1752) (alias)
	edx_eax_1755 = rax_1752 (alias)
	ah_1756 = SLICE(rax_1752, byte, 8) (alias)
	ax_1757 = (word16) rax_1752 (alias)
	al_1758 = (byte) rax_1752 (alias)
	SZO_1759 = cond(rdx_1749 & rdx_1749)
	Z_1760 = SZO_1759 (alias)
	C_1761 = false
	rcx_1762 = rax_1752
	ecx_1763 = (word32) rcx_1762 (alias)
	cl_1764 = (byte) rcx_1762 (alias)
	branch Test(EQ,Z_1760) l000000000040C2F0
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C2F0:
	r10_1765 = rax_1752
	rdx_1766 = 0x0000000000000000
	r10_1767 = r10_1765 *s r12_68
	r10d_1768 = (word32) r10_1767 (alias)
	r10b_1769 = (byte) r10_1767 (alias)
	rax_1770 = r10_1767
	rdx_rax_1771 = SEQ(rdx_1766, rax_1770) (alias)
	v72_1772 = rdx_rax_1771
	rdx_1773 = (uint64) (v72_1772 % rcx_1762)
	edx_1774 = (word32) rdx_1773 (alias)
	dl_1775 = (byte) rdx_1773 (alias)
	rax_1776 = (uint64) (v72_1772 /u rcx_1762)
	rdx_rax_1777 = SEQ(rdx_1773, rax_1776) (alias)
	edx_eax_1778 = rax_1776 (alias)
	SCZO_1779 = cond(rax_1776 - r12_68)
	Z_1780 = SCZO_1779 (alias)
	branch Test(NE,Z_1780) l000000000040BE59
// DataOut: bx fs r10 r10b r10d r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C308:
	rcx_1781 = 0x0000000000000000
	ecx_1782 = (word32) rcx_1781 (alias)
	cl_1783 = (byte) rcx_1781 (alias)
	rdi_1784 = 0x0000000000000000
	edi_1785 = (word32) rdi_1784 (alias)
	dil_1786 = (byte) rdi_1784 (alias)
	SZO_1787 = cond(edi_1785)
	C_1788 = false
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C12D:
	r10b_1294 = PHI(r10b_1817, r10b_1817, r10b_1769)
	r10d_1295 = PHI(r10d_1816, r10d_1816, r10d_1768)
	dil_1296 = PHI(dil_1832, dil_1832, dil_1786)
	sil_1297 = PHI(sil_1806, sil_1806, sil_96)
	CZP_1298 = PHI(CZP_1839, CZP_1839, CZP_121)
	esi_1299 = PHI(esi_1807, esi_1807, esi_88)
	edi_1300 = PHI(edi_1831, edi_1831, edi_1785)
	r10_1301 = PHI(r10_1815, r10_1815, r10_1767)
	S_1302 = PHI(S_1838, S_1838, S_120)
	CZ_1303 = PHI(CZ_1837, CZ_1837, CZ_146)
	ecx_1304 = PHI(ecx_1846, ecx_1852, ecx_1782)
	rcx_1305 = PHI(rcx_1845, rcx_1851, rcx_1781)
	cl_1306 = PHI(cl_1844, cl_1853, cl_1783)
	rax_1307 = PHI(rax_1823, rax_1823, rax_1776)
	eax_1308 = PHI(eax_1824, eax_1824, eax_1753)
	ah_1309 = PHI(ah_92, ah_92, ah_1756)
	ax_1310 = PHI(ax_93, ax_93, ax_1757)
	al_1311 = PHI(al_98, al_98, al_1758)
	rdx_1312 = PHI(rdx_1825, rdx_1825, rdx_1773)
	edx_1313 = PHI(edx_1826, edx_1826, edx_1774)
	rdx_rax_1314 = PHI(rdx_rax_1827, rdx_rax_1827, rdx_rax_1777)
	edx_eax_1315 = PHI(edx_eax_1828, edx_eax_1828, edx_eax_1778)
	dl_1316 = PHI(dl_1829, dl_1829, dl_1775)
	SCZO_1317 = PHI(SCZO_1833, SCZO_1854, SCZO_1779)
	rsi_1318 = PHI(rsi_1805, rsi_1805, rsi_65)
	rdi_1319 = PHI(rdi_1830, rdi_1830, rdi_1784)
	r9_1320 = (uint64) dwLocB0_38
	r9d_1321 = (word32) r9_1320 (alias)
	r8_1322 = qwLocB8_147
	rbx_1323 = 0x00000000FFFFFFFF
	ebx_1324 = (word32) rbx_1323 (alias)
	r9_1325 = (uint64) (r9d_1321 & 0x00000010)
	r9d_1326 = (word32) r9_1325 (alias)
	SZO_1327 = cond(r9d_1326)
	Z_1328 = SZO_1327 (alias)
	C_1329 = false
	branch Test(EQ,Z_1328) l000000000040C530
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C146:
	rsi_1519 = (uint64) dwLocAC_56
	sil_1520 = (byte) rsi_1519 (alias)
	esi_1521 = (word32) rsi_1519 (alias)
	SCZO_1522 = cond(r10_1301 - rsi_1519)
	C_1523 = SCZO_1522 (alias)
	branch Test(ULT,C_1523) l000000000040C710
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r9d rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C710:
	r8_1740 = qwLocB8_147
	rbx_1741 = 0x0000000000000000
	ebx_1742 = (word32) rbx_1741 (alias)
	SZO_1743 = cond(ebx_1742)
	C_1744 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C153:
	rbx_1524 = 0x0000000000000000
	ebx_1525 = (word32) rbx_1524 (alias)
	SZO_1526 = cond(ebx_1525)
	C_1527 = false
	r12_1528 = (uint64) dwLocAC_56
	r12d_1529 = (word32) r12_1528 (alias)
// DataOut: ebx ecx edi fs r10 r11 r11d r12d r13 r15 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C17D:
	r10_1530 = PHI(r10_1301, r10_1550)
	r14_1531 = PHI(r14_66, r14_1569)
	ebx_1532 = PHI(ebx_1525, ebx_1585)
	ecx_1533 = PHI(ecx_1304, ecx_1578)
	SZO_1534 = PHI(SZO_1526, SZO_1581)
	Z_1535 = PHI(Z_1328, Z_1593)
	C_1536 = PHI(C_1527, C_1583)
	edx_1537 = PHI(edx_1313, edx_1559)
	rbx_1538 = PHI(rbx_1524, rbx_1584)
	rdi_1539 = PHI(rdi_1319, rdi_1570)
	rax_1540 = r10_1530
	rdx_1541 = 0x0000000000000000
	rdx_rax_1542 = SEQ(rdx_1541, rax_1540) (alias)
	v48_1543 = rdx_rax_1542
	rdx_1544 = (uint64) (v48_1543 % rsi_1519)
	rax_1545 = (uint64) (v48_1543 /u rsi_1519)
	r8_1546 = rax_1545
	eax_1547 = rdx_1544 + rdx_1544 * 0x0000000000000004
	rax_1548 = DPB(rax_1545, eax_1547, 0) (alias)
	rdx_1549 = 0x0000000000000000
	r10_1550 = r8_1546
	r10d_1551 = (word32) r10_1550 (alias)
	r10b_1552 = (byte) r10_1550 (alias)
	eax_1553 = rdi_1539 + rax_1548 * 0x0000000000000002
	edx_eax_1554 = SEQ(edx_1537, eax_1553) (alias)
	rdi_1555 = (uint64) ecx_1533
	edi_1556 = (word32) rdi_1555 (alias)
	rdi_1557 = (uint64) (edi_1556 >> 0x00000001)
	v50_1558 = edx_eax_1554
	edx_1559 = (uint32) (v50_1558 % r12d_1529)
	rdx_1560 = DPB(rdx_1549, edx_1559, 0) (alias)
	eax_1561 = (uint32) (v50_1558 /u r12d_1529)
	rax_1562 = DPB(rax_1548, eax_1561, 0) (alias)
	rdx_rax_1563 = DPB(rdx_rax_1542, eax_1561, 0) (alias)
	edx_eax_1564 = SEQ(edx_1559, eax_1561) (alias)
	ah_1565 = SLICE(eax_1561, byte, 8) (alias)
	ax_1566 = (word16) eax_1561 (alias)
	al_1567 = (byte) eax_1561 (alias)
	r14d_1568 = rdi_1557 + rdx_1560 * 0x0000000000000002
	r14_1569 = DPB(r14_1531, r14d_1568, 0) (alias)
	rdi_1570 = (uint64) eax_1561
	edi_1571 = (word32) rdi_1570 (alias)
	dil_1572 = (byte) rdi_1570 (alias)
	rcx_1573 = (uint64) (ecx_1533 + r14d_1568)
	ecx_1574 = (word32) rcx_1573 (alias)
	cl_1575 = (byte) rcx_1573 (alias)
	SCZO_1576 = cond(r12d_1529 - r14d_1568)
	CZ_1577 = SCZO_1576 (alias)
	branch Test(UGT,CZ_1577) l000000000040C160
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C160:
	SZO_1733 = cond(ecx_1574 & ecx_1574)
	Z_1734 = SZO_1733 (alias)
	C_1735 = false
	cl_1736 = Test(NE,Z_1734)
	ecx_1737 = (word32) cl_1736
	rcx_1738 = DPB(rcx_1573, ecx_1737, 0) (alias)
	cl_1739 = (byte) ecx_1737 (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1A8:
	SCZO_1723 = cond(r12d_1529 - ecx_1574)
	C_1724 = SCZO_1723 (alias)
	rcx_1725 = (uint64) (0x00000000 - C_1724)
	ecx_1726 = (word32) rcx_1725 (alias)
	rcx_1727 = (uint64) ~ecx_1726
	ecx_1728 = (word32) rcx_1727 (alias)
	rcx_1729 = (uint64) (ecx_1728 + 0x00000003)
	ecx_1730 = (word32) rcx_1729 (alias)
	cl_1731 = (byte) rcx_1729 (alias)
	SCZO_1732 = cond(ecx_1730)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C168:
	ecx_1578 = PHI(ecx_1730, ecx_1737)
	rcx_1579 = PHI(rcx_1729, rcx_1738)
	cl_1580 = PHI(cl_1731, cl_1739)
	SZO_1581 = PHI(SZO_1534, SZO_1733)
	Z_1582 = PHI(Z_1535, Z_1734)
	C_1583 = PHI(C_1724, C_1735)
	rbx_1584 = (uint64) (ebx_1532 + 0x00000001)
	ebx_1585 = (word32) rbx_1584 (alias)
	SCZO_1586 = cond(rsi_1519 - r8_1546)
	CZ_1587 = SCZO_1586 (alias)
	branch Test(UGT,CZ_1587) l000000000040C49F
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C49F:
	SCZO_1594 = cond(r8_1546 - 0x0000000000000009)
	CZ_1595 = SCZO_1594 (alias)
	branch Test(UGT,CZ_1595) l000000000040C768
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4A9:
	SCZO_1596 = cond(dwLoc98_32 - 0x00000001)
	Z_1597 = SCZO_1596 (alias)
	branch Test(EQ,Z_1597) l000000000040C7B0
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7B0:
	rdx_1710 = (uint64) eax_1561
	edx_1711 = (word32) rdx_1710 (alias)
	rdx_1712 = (uint64) (edx_1711 & 0x00000001)
	edx_1713 = (word32) rdx_1712 (alias)
	rdx_1714 = (uint64) (edx_1713 + ecx_1578)
	edx_1715 = (word32) rdx_1714 (alias)
	SCZO_1716 = cond(edx_1715 - 0x00000002)
	SZO_1717 = SCZO_1716 (alias)
	dl_1718 = Test(GT,SZO_1717)
	edx_1719 = DPB(edx_1715, dl_1718, 0) (alias)
	rdx_1720 = DPB(rdx_1714, dl_1718, 0) (alias)
	rdx_rax_1721 = DPB(rdx_rax_1563, dl_1718, 64) (alias)
	edx_eax_1722 = DPB(edx_eax_1564, dl_1718, 32) (alias)
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4B4:
	r12_1694 = (uint64) dwLoc98_32
	r12d_1695 = (word32) r12_1694 (alias)
	SZO_1696 = cond(ecx_1578 & ecx_1578)
	dl_1697 = Test(GT,SZO_1696)
	edx_1698 = DPB(edx_1559, dl_1697, 0) (alias)
	SZO_1699 = cond(r12d_1695 & r12d_1695)
	Z_1700 = SZO_1699 (alias)
	sil_1701 = Test(EQ,Z_1700)
	esi_1702 = DPB(esi_1521, sil_1701, 0) (alias)
	rdx_1703 = (uint64) (edx_1698 & esi_1702)
	edx_1704 = (word32) rdx_1703 (alias)
	rdx_rax_1705 = SEQ(rdx_1703, rax_1562) (alias)
	edx_eax_1706 = rdx_1703 (alias)
	dl_1707 = (byte) rdx_1703 (alias)
	SZO_1708 = cond(edx_1704)
	C_1709 = false
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4C7:
	sil_1598 = PHI(sil_1701, sil_1520)
	esi_1599 = PHI(esi_1702, esi_1521)
	r12_1600 = PHI(r12_1694, r12_1528)
	r12d_1601 = PHI(r12d_1695, r12d_1529)
	rdx_1602 = PHI(rdx_1703, rdx_1720)
	edx_1603 = PHI(edx_1704, edx_1719)
	rdx_rax_1604 = PHI(rdx_rax_1705, rdx_rax_1721)
	edx_eax_1605 = PHI(edx_eax_1706, edx_eax_1722)
	dl_1606 = PHI(dl_1707, dl_1718)
	SCZO_1607 = PHI(SCZO_1596, SCZO_1716)
	SZO_1608 = cond(dl_1606 & dl_1606)
	Z_1609 = SZO_1608 (alias)
	C_1610 = false
	branch Test(EQ,Z_1609) l000000000040C788
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C788:
	SZO_1691 = cond(eax_1561 & eax_1561)
	Z_1692 = SZO_1691 (alias)
	C_1693 = false
	branch Test(NE,Z_1692) l000000000040C4DB
// DataOut: dil ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4CF:
	edi_1667 = rax_1562 + 0x0000000000000001
	rdi_1668 = DPB(rdi_1570, edi_1667, 0) (alias)
	dil_1669 = (byte) edi_1667 (alias)
	SCZO_1670 = cond(edi_1667 - 0x0000000A)
	Z_1671 = SCZO_1670 (alias)
	branch Test(EQ,Z_1671) l000000000040C7CE
// DataOut: dil ebx fs r10 r10d r11 r11d r13 r14d r15 r8 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7CE:
	r10_1672 = r8_1546 + 0x0000000000000001
	r10d_1673 = (word32) r10_1672 (alias)
	r10b_1674 = (byte) r10_1672 (alias)
	SCZO_1675 = cond(r10_1672 - 0x000000000000000A)
	Z_1676 = SCZO_1675 (alias)
	branch Test(NE,Z_1676) l000000000040C7FF
// DataOut: ebx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7FF:
	rcx_1686 = 0x0000000000000000
	ecx_1687 = (word32) rcx_1686 (alias)
	cl_1688 = (byte) rcx_1686 (alias)
	SZO_1689 = cond(0x00000000)
	C_1690 = false
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C790:
	r10b_1643 = PHI(r10b_1674, r10b_1552)
	r10d_1644 = PHI(r10d_1673, r10d_1551)
	dil_1645 = PHI(dil_1669, dil_1572)
	edi_1646 = PHI(edi_1667, edi_1571)
	r10_1647 = PHI(r10_1672, r10_1550)
	ecx_1648 = PHI(ecx_1687, ecx_1578)
	rcx_1649 = PHI(rcx_1686, rcx_1579)
	cl_1650 = PHI(cl_1688, cl_1580)
	SCZO_1651 = PHI(SCZO_1675, SCZO_1607)
	rdi_1652 = PHI(rdi_1668, rdi_1570)
	SZO_1653 = cond(bLocB0 & 0x08)
	Z_1654 = SZO_1653 (alias)
	C_1655 = false
	branch Test(NE,Z_1654) l000000000040C7C2
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7C2:
	r8_1661 = qwLocB8_147
	rdi_1662 = 0x0000000000000000
	edi_1663 = (word32) rdi_1662 (alias)
	dil_1664 = (byte) rdi_1662 (alias)
	SZO_1665 = cond(0x00000000)
	C_1666 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C797:
	rdi_1656 = 0x0000000000000000
	edi_1657 = (word32) rdi_1656 (alias)
	dil_1658 = (byte) rdi_1656 (alias)
	SZO_1659 = cond(0x00000000)
	C_1660 = false
// DataOut: dil ebx fs r10 r10d r11 r13 r14d r15 r8 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7D8:
	r8_1677 = qwLocB8_147
	rcx_1678 = 0x0000000000000000
	ecx_1679 = (word32) rcx_1678 (alias)
	cl_1680 = (byte) rcx_1678 (alias)
	rdi_1681 = 0x0000000000000000
	edi_1682 = (word32) rdi_1681 (alias)
	dil_1683 = (byte) rdi_1681 (alias)
	SZO_1684 = cond(0x00000000)
	C_1685 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4DB:
	edi_1611 = PHI(edi_1667, edi_1571, edi_1657)
	r10_1612 = PHI(r10_1550, r10_1550, r10_1647)
	Z_1613 = PHI(Z_1671, Z_1692, Z_1654)
	SCZO_1614 = PHI(SCZO_1670, SCZO_1607, SCZO_1651)
	rax_1615 = qwLocA0_35
	rdi_1616 = (uint64) (edi_1611 + 0x00000030)
	dil_1617 = (byte) rdi_1616 (alias)
	rdx_1618 = r11_139
	rsi_1619 = r15_129
	dwLoc74_1620 = r9d_1326
	qwLoc90_1621 = r10_1612
	qwLoc80_1622 = r11_139
	r8_1623 = r8_1546 + 0x0000000000000287
	Mem1624[rax_1615 + 0x0000000000000287:byte] = dil_1617
	r8_1625 = r8_1623 - r11_139
	rdi_1626 = r8_1625
	rax_1627 = memcpy(rdi_1626, rsi_1619, rdx_1618)
	r11_1628 = qwLoc80_1622
	r10_1629 = qwLoc90_1621
	r10d_1630 = (word32) r10_1629 (alias)
	r10b_1631 = (byte) r10_1629 (alias)
	r8_1632 = rax_1627
	r9_1633 = (uint64) dwLoc74_1620
	r9d_1634 = (word32) r9_1633 (alias)
	rcx_1635 = 0x0000000000000000
	ecx_1636 = (word32) rcx_1635 (alias)
	cl_1637 = (byte) rcx_1635 (alias)
	rdi_1638 = 0x0000000000000000
	edi_1639 = (word32) rdi_1638 (alias)
	dil_1640 = (byte) rdi_1638 (alias)
	SZO_1641 = cond(0x00000000)
	C_1642 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C174:
	SCZO_1592 = cond(ebx_1585 - 0x00000008)
	Z_1593 = SCZO_1592 (alias)
	branch Test(EQ,Z_1593) l000000000040C768
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r9d rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C768:
	CZ_1588 = PHI(CZ_1587, CZ_1595)
	Z_1589 = PHI(Z_1593, Z_1582)
	SCZO_1590 = PHI(SCZO_1592, SCZO_1594)
	r8_1591 = qwLocB8_147
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C530:
	dwLoc74_1330 = PHI(dwLoc74, dwLoc74, dwLoc74_1620, dwLoc74, dwLoc74, dwLoc74)
	qwLoc90_1331 = PHI(qwLoc90, qwLoc90, qwLoc90_1621, qwLoc90, qwLoc90, qwLoc90)
	qwLoc80_1332 = PHI(qwLoc80_131, qwLoc80_131, qwLoc80_1622, qwLoc80_131, qwLoc80_131, qwLoc80_131)
	r10b_1333 = PHI(r10b_1294, r10b_1552, r10b_1631, r10b_1674, r10b_1643, r10b_1294)
	r10d_1334 = PHI(r10d_1295, r10d_1551, r10d_1630, r10d_1673, r10d_1644, r10d_1295)
	dil_1335 = PHI(dil_1296, dil_1572, dil_1640, dil_1683, dil_1664, dil_1296)
	sil_1336 = PHI(sil_1520, sil_1520, sil_1598, sil_1598, sil_1598, sil_1297)
	esi_1337 = PHI(esi_1521, esi_1521, esi_1599, esi_1599, esi_1599, esi_1299)
	edi_1338 = PHI(edi_1300, edi_1571, edi_1639, edi_1682, edi_1663, edi_1300)
	r10_1339 = PHI(r10_1301, r10_1550, r10_1629, r10_1672, r10_1647, r10_1301)
	r11_1340 = PHI(r11_139, r11_139, r11_1628, r11_139, r11_139, r11_139)
	r8_1341 = PHI(r8_1740, r8_1591, r8_1632, r8_1677, r8_1661, r8_1322)
	r9_1342 = PHI(r9_1325, r9_1325, r9_1633, r9_1325, r9_1325, r9_1325)
	r9d_1343 = PHI(r9d_1326, r9d_1326, r9d_1634, r9d_1326, r9d_1326, r9d_1326)
	r12_1344 = PHI(r12_68, r12_1528, r12_1600, r12_1600, r12_1600, r12_68)
	r12d_1345 = PHI(r12d_89, r12d_1529, r12d_1601, r12d_1601, r12d_1601, r12d_89)
	r14_1346 = PHI(r14_66, r14_1569, r14_1569, r14_1569, r14_1569, r14_66)
	r14d_1347 = PHI(r14d_91, r14d_1568, r14d_1568, r14d_1568, r14d_1568, r14d_91)
	CZ_1348 = PHI(CZ_1303, CZ_1588, CZ_1595, CZ_1595, CZ_1595, CZ_1303)
	ebx_1349 = PHI(ebx_1742, ebx_1585, ebx_1585, ebx_1585, ebx_1585, ebx_1324)
	ecx_1350 = PHI(ecx_1304, ecx_1578, ecx_1636, ecx_1679, ecx_1648, ecx_1304)
	rcx_1351 = PHI(rcx_1305, rcx_1579, rcx_1635, rcx_1678, rcx_1649, rcx_1305)
	cl_1352 = PHI(cl_1306, cl_1580, cl_1637, cl_1680, cl_1650, cl_1306)
	SZO_1353 = PHI(SZO_1743, SZO_1581, SZO_1641, SZO_1684, SZO_1665, SZO_1327)
	C_1354 = PHI(C_1744, C_1583, C_1642, C_1685, C_1666, C_1329)
	rax_1355 = PHI(rax_1307, rax_1562, rax_1627, rax_1562, rax_1562, rax_1307)
	eax_1356 = PHI(eax_1308, eax_1561, eax_1561, eax_1561, eax_1561, eax_1308)
	ah_1357 = PHI(ah_1309, ah_1565, ah_1565, ah_1565, ah_1565, ah_1309)
	ax_1358 = PHI(ax_1310, ax_1566, ax_1566, ax_1566, ax_1566, ax_1310)
	al_1359 = PHI(al_1311, al_1567, al_1567, al_1567, al_1567, al_1311)
	rdx_1360 = PHI(rdx_1312, rdx_1560, rdx_1618, rdx_1602, rdx_1602, rdx_1312)
	edx_1361 = PHI(edx_1313, edx_1559, edx_1603, edx_1603, edx_1603, edx_1313)
	rdx_rax_1362 = PHI(rdx_rax_1314, rdx_rax_1563, rdx_rax_1604, rdx_rax_1604, rdx_rax_1604, rdx_rax_1314)
	edx_eax_1363 = PHI(edx_eax_1315, edx_eax_1564, edx_eax_1605, edx_eax_1605, edx_eax_1605, edx_eax_1315)
	dl_1364 = PHI(dl_1316, dl_1316, dl_1606, dl_1606, dl_1606, dl_1316)
	rbx_1365 = PHI(rbx_1741, rbx_1584, rbx_1584, rbx_1584, rbx_1584, rbx_1323)
	rsi_1366 = PHI(rsi_1519, rsi_1519, rsi_1619, rsi_1519, rsi_1519, rsi_1318)
	rdi_1367 = PHI(rdi_1319, rdi_1570, rdi_1638, rdi_1681, rdi_1662, rdi_1319)
	SCZO_1368 = cond(dwLoc98_32 - 0x00000001)
	Z_1369 = SCZO_1368 (alias)
	branch Test(EQ,Z_1369) l000000000040C6F0
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C6F0:
	rax_1498 = r10_1339
	eax_1499 = (word32) rax_1498 (alias)
	rcx_1500 = (int64) ecx_1350
	ecx_1501 = (word32) rcx_1500 (alias)
	cl_1502 = (byte) rcx_1500 (alias)
	rax_1503 = (uint64) (eax_1499 & 0x00000001)
	rax_1504 = rax_1503 + rcx_1500
	SCZO_1505 = cond(rax_1504)
	Z_1506 = SCZO_1505 (alias)
	al_1507 = Test(NE,Z_1506)
	eax_1508 = (word32) al_1507
	rdi_1509 = (uint64) (edi_1338 + eax_1508)
	edi_1510 = (word32) rdi_1509 (alias)
	SCZO_1511 = cond(edi_1510 - 0x00000005)
	SZO_1512 = SCZO_1511 (alias)
	al_1513 = Test(GT,SZO_1512)
	eax_1514 = DPB(eax_1508, al_1513, 0) (alias)
	rax_1515 = DPB(rax_1504, al_1513, 0) (alias)
	rdx_rax_1516 = DPB(rdx_rax_1362, al_1513, 0) (alias)
	edx_eax_1517 = DPB(edx_eax_1363, al_1513, 0) (alias)
	ax_1518 = DPB(ax_1358, al_1513, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C53B:
	rsi_1476 = (uint64) dwLoc98_32
	esi_1477 = (word32) rsi_1476 (alias)
	rax_1478 = 0x0000000000000000
	eax_1479 = (word32) rax_1478 (alias)
	rdx_rax_1480 = SEQ(rdx_1360, rax_1478) (alias)
	edx_eax_1481 = rax_1478 (alias)
	ax_1482 = (word16) rax_1478 (alias)
	al_1483 = (byte) rax_1478 (alias)
	SZO_1484 = cond(esi_1477 & esi_1477)
	Z_1485 = SZO_1484 (alias)
	C_1486 = false
	branch Test(NE,Z_1485) l000000000040C54C
// DataOut: al ebx ecx edi fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C545:
	rcx_1487 = (uint64) (ecx_1350 + edi_1338)
	ecx_1488 = (word32) rcx_1487 (alias)
	cl_1489 = (byte) rcx_1487 (alias)
	SZO_1490 = cond(ecx_1488 & ecx_1488)
	C_1491 = false
	al_1492 = Test(GT,SZO_1490)
	eax_1493 = DPB(eax_1479, al_1492, 0) (alias)
	rax_1494 = DPB(rax_1478, al_1492, 0) (alias)
	rdx_rax_1495 = DPB(rdx_rax_1480, al_1492, 0) (alias)
	edx_eax_1496 = DPB(edx_eax_1481, al_1492, 0) (alias)
	ax_1497 = DPB(ax_1482, al_1492, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C54C:
	esi_1370 = PHI(esi_1477, esi_1477, esi_1337)
	edi_1371 = PHI(edi_1338, edi_1338, edi_1510)
	ecx_1372 = PHI(ecx_1350, ecx_1488, ecx_1501)
	rcx_1373 = PHI(rcx_1351, rcx_1487, rcx_1500)
	cl_1374 = PHI(cl_1352, cl_1489, cl_1502)
	rax_1375 = PHI(rax_1478, rax_1494, rax_1515)
	eax_1376 = PHI(eax_1479, eax_1493, eax_1514)
	ax_1377 = PHI(ax_1482, ax_1497, ax_1518)
	al_1378 = PHI(al_1483, al_1492, al_1513)
	rdx_rax_1379 = PHI(rdx_rax_1480, rdx_rax_1495, rdx_rax_1516)
	edx_eax_1380 = PHI(edx_eax_1481, edx_eax_1496, edx_eax_1517)
	SCZO_1381 = PHI(SCZO_1368, SCZO_1368, SCZO_1511)
	rsi_1382 = PHI(rsi_1476, rsi_1476, rsi_1366)
	rdi_1383 = PHI(rdi_1367, rdi_1367, rdi_1509)
	SZO_1384 = cond(al_1378 & al_1378)
	Z_1385 = SZO_1384 (alias)
	C_1386 = false
	branch Test(EQ,Z_1385) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C550:
	r10_1438 = r10_1339 + 0x0000000000000001
	r10d_1439 = (word32) r10_1438 (alias)
	r10b_1440 = (byte) r10_1438 (alias)
	SZO_1441 = cond(r9d_1343 & r9d_1343)
	Z_1442 = SZO_1441 (alias)
	C_1443 = false
	branch Test(EQ,Z_1442) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C559:
	rax_1444 = (uint64) dwLocAC_56
	eax_1445 = (word32) rax_1444 (alias)
	rdx_rax_1446 = SEQ(rdx_1360, rax_1444) (alias)
	edx_eax_1447 = rax_1444 (alias)
	ah_1448 = SLICE(rax_1444, byte, 8) (alias)
	ax_1449 = (word16) rax_1444 (alias)
	al_1450 = (byte) rax_1444 (alias)
	SCZO_1451 = cond(rax_1444 - r10_1438)
	Z_1452 = SCZO_1451 (alias)
	branch Test(NE,Z_1452) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C562:
	SCZO_1453 = cond(ebx_1349 - 0x00000008)
	Z_1454 = SCZO_1453 (alias)
	branch Test(EQ,Z_1454) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C567:
	rbx_1455 = (uint64) (ebx_1349 + 0x00000001)
	ebx_1456 = (word32) rbx_1455 (alias)
	SZO_1457 = cond(bLocB0 & 0x08)
	Z_1458 = SZO_1457 (alias)
	C_1459 = false
	rdx_1460 = 0x0000000000000001
	rdx_rax_1461 = SEQ(rdx_1460, rax_1444) (alias)
	edx_eax_1462 = rdx_1460 (alias)
	branch Test(NE,Z_1458) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C577:
	rax_1463 = rax_1444 - 0x0000000000000001
	Mem1464[rax_1463 - 0x0000000000000001:byte] = 0x30
	rdx_1465 = r11_1340
	rsi_1466 = r15_129
	qwLoc98_1467 = r10_1438
	rax_1468 = rax_1463 - r11_1340
	SCZO_1469 = cond(rax_1468)
	rdi_1470 = rax_1468
	rax_1471 = memcpy(rdi_1470, rsi_1466, rdx_1465)
	r10_1472 = qwLoc98_1467
	r10d_1473 = (word32) r10_1472 (alias)
	r10b_1474 = (byte) r10_1472 (alias)
	r8_1475 = rax_1471
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:0x00000001 r14d:<invalid> ecx:<invalid> dl:0x01 sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5A0:
	qwLoc98_1387 = PHI(qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98_1467)
	r10b_1388 = PHI(r10b_1333, r10b_1440, r10b_1440, r10b_1440, r10b_1440, r10b_1474)
	r10d_1389 = PHI(r10d_1334, r10d_1439, r10d_1439, r10d_1439, r10d_1439, r10d_1473)
	r10_1390 = PHI(r10_1339, r10_1438, r10_1438, r10_1438, r10_1438, r10_1472)
	r8_1391 = PHI(r8_1341, r8_1341, r8_1341, r8_1341, r8_1341, r8_1475)
	ebx_1392 = PHI(ebx_1349, ebx_1349, ebx_1349, ebx_1349, ebx_1456, ebx_1456)
	SZO_1393 = PHI(SZO_1384, SZO_1441, SZO_1441, SZO_1441, SZO_1457, SZO_1457)
	Z_1394 = PHI(Z_1385, Z_1442, Z_1452, Z_1454, Z_1458, Z_1458)
	C_1395 = PHI(C_1386, C_1443, C_1443, C_1443, C_1459, C_1459)
	rax_1396 = PHI(rax_1375, rax_1375, rax_1444, rax_1444, rax_1444, rax_1471)
	eax_1397 = PHI(eax_1376, eax_1376, eax_1445, eax_1445, eax_1445, eax_1445)
	ah_1398 = PHI(ah_1357, ah_1357, ah_1448, ah_1448, ah_1448, ah_1448)
	ax_1399 = PHI(ax_1377, ax_1377, ax_1449, ax_1449, ax_1449, ax_1449)
	al_1400 = PHI(al_1378, al_1378, al_1450, al_1450, al_1450, al_1450)
	rdx_1401 = PHI(rdx_1360, rdx_1360, rdx_1360, rdx_1360, rdx_1460, rdx_1465)
	rdx_rax_1402 = PHI(rdx_rax_1379, rdx_rax_1379, rdx_rax_1446, rdx_rax_1446, rdx_rax_1461, rdx_rax_1461)
	edx_eax_1403 = PHI(edx_eax_1380, edx_eax_1380, edx_eax_1447, edx_eax_1447, edx_eax_1462, edx_eax_1462)
	SCZO_1404 = PHI(SCZO_1381, SCZO_1381, SCZO_1451, SCZO_1453, SCZO_1453, SCZO_1469)
	rbx_1405 = PHI(rbx_1365, rbx_1365, rbx_1365, rbx_1365, rbx_1455, rbx_1455)
	rsi_1406 = PHI(rsi_1382, rsi_1382, rsi_1382, rsi_1382, rsi_1382, rsi_1466)
	rdi_1407 = PHI(rdi_1383, rdi_1383, rdi_1383, rdi_1383, rdi_1383, rdi_1470)
	r12_1408 = r8_1391
	r12d_1409 = (word32) r12_1408 (alias)
	r9_1410 = 0x00000000CCCCCCCD
	r9d_1411 = (word32) r9_1410 (alias)
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r14d r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5B0:
	r10_1412 = PHI(r10_1390, r10_1430)
	r12_1413 = PHI(r12_1408, r12_1415)
	rax_1414 = r10_1412
	r12_1415 = r12_1413 - 0x0000000000000001
	r12d_1416 = (word32) r12_1415 (alias)
	rdx_rax_1417 = rcx_1373 *u rax_1414
	rdx_1418 = SLICE(rdx_rax_1417, word64, 64) (alias)
	rdx_1419 = rdx_1418 >>u 0x0000000000000003
	rax_1420 = rdx_1419 + rdx_1419 * 0x0000000000000004
	rax_1421 = rax_1420 + rax_1420
	r10_1422 = r10_1412 - rax_1421
	r10d_1423 = (word32) r10_1422 (alias)
	r10_1424 = (uint64) (r10d_1423 + 0x00000030)
	r10b_1425 = (byte) r10_1424 (alias)
	SZO_1426 = cond(rdx_1419 & rdx_1419)
	Z_1427 = SZO_1426 (alias)
	C_1428 = false
	Mem1429[r12_1415:byte] = r10b_1425
	r10_1430 = rdx_1419
	r10d_1431 = (word32) r10_1430 (alias)
	r10b_1432 = (byte) r10_1430 (alias)
	branch Test(NE,Z_1427) l000000000040C5B0
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r14d r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5D8:
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BE59:
	r10b_629 = PHI(r10b_101, r10b_101, r10b_101, r10b_1769)
	r10d_630 = PHI(r10d_100, r10d_100, r10d_100, r10d_1768)
	sil_631 = PHI(sil_96, sil_96, sil_1806, sil_96)
	esi_632 = PHI(esi_88, esi_88, esi_1807, esi_88)
	r10_633 = PHI(r10_83, r10_83, r10_83, r10_1767)
	ecx_634 = PHI(ecx_1763, ecx_74, ecx_74, ecx_1763)
	rcx_635 = PHI(rcx_1762, rcx_70, rcx_70, rcx_1762)
	cl_636 = PHI(cl_1764, cl_85, cl_85, cl_1764)
	Z_637 = PHI(Z_1760, Z_1790, Z_1803, Z_1780)
	rax_638 = PHI(rax_1752, rax_141, rax_1799, rax_1776)
	eax_639 = PHI(eax_1753, eax_132, eax_132, eax_1753)
	ah_640 = PHI(ah_1756, ah_92, ah_92, ah_1756)
	ax_641 = PHI(ax_1757, ax_93, ax_93, ax_1757)
	al_642 = PHI(al_1758, al_98, al_98, al_1758)
	rdx_643 = PHI(rdx_1749, rdx_112, rdx_1796, rdx_1773)
	edx_644 = PHI(edx_1750, edx_113, edx_1797, edx_1774)
	rdx_rax_645 = PHI(rdx_rax_1754, rdx_rax_142, rdx_rax_1800, rdx_rax_1777)
	edx_eax_646 = PHI(edx_eax_1755, edx_eax_143, edx_eax_1801, edx_eax_1778)
	dl_647 = PHI(dl_1751, dl_114, dl_1798, dl_1775)
	SCZO_648 = PHI(SCZO_145, SCZO_145, SCZO_145, SCZO_1779)
	rsi_649 = PHI(rsi_65, rsi_65, rsi_1805, rsi_65)
	qwLoc68_650 = r12_68
	SZO_651 = cond(r12_68 & r12_68)
	S_652 = SZO_651 (alias)
	C_653 = false
	rLoc1_654 = (real64) qwLoc68_650
	branch (r12_68 & r12_68) < 0x0000000000000000 l000000000040C5F0
// DataOut: bx fs r11 r11d r13 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5F0:
	rLoc1_1288 = rLoc1_654 + Mem0[0x0000000000415F08:real32]
	qwLoc68_1289 = rbx_69
	SZO_1290 = cond(rbx_69 & rbx_69)
	S_1291 = SZO_1290 (alias)
	C_1292 = false
	rLoc2_1293 = (real64) qwLoc68_1289
	branch Test(NS,S_1291) l000000000040BE7D
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE6B:
	qwLoc68_1283 = rbx_69
	SZO_1284 = cond(rbx_69 & rbx_69)
	S_1285 = SZO_1284 (alias)
	C_1286 = false
	rLoc2_1287 = (real64) qwLoc68_1283
	branch Test(SG,S_1285) l000000000040C608
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C608:
	rLoc2_1276 = PHI(rLoc2_1287, rLoc2_1293)
	qwLoc68_1277 = PHI(qwLoc68_1283, qwLoc68_1289)
	rLoc1_1278 = PHI(rLoc1_654, rLoc1_1288)
	S_1279 = PHI(S_1285, S_1291)
	SZO_1280 = PHI(SZO_1284, SZO_1290)
	C_1281 = PHI(C_1286, C_1292)
	rLoc2_1282 = rLoc2_1276 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE7D:
	rLoc2_655 = PHI(rLoc2_1287, rLoc2_1282, rLoc2_1293)
	rLoc1_656 = PHI(rLoc1_654, rLoc1_1278, rLoc1_1288)
	rax_657 = qwLocA8_40
	rdx_rax_658 = SEQ(rdx_643, rax_657) (alias)
	edx_eax_659 = rax_657 (alias)
	qwLoc68_660 = rax_657
	SZO_661 = cond(rax_657 & rax_657)
	S_662 = SZO_661 (alias)
	C_663 = false
	rLoc3_664 = (real64) qwLoc68_660
	branch (rax_657 & rax_657) < 0x0000000000000000 l000000000040C5E0
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5E0:
	rLoc3_1275 = rLoc3_664 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE94:
	rLoc3_665 = PHI(rLoc3_664, rLoc3_1275)
	SZO_666 = cond(bLocB0 & 0x10)
	Z_667 = SZO_666 (alias)
	C_668 = false
	rLoc2_669 = rLoc2_655 / rLoc3_665
	rLoc1_670 = rLoc1_656 * rLoc2_669
	branch (bLocB0 & 0x10) == 0x00 l000000000040C1B8
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C1B8:
	SCZO_1110 = cond(dwLoc98_32 - 0x00000001)
	Z_1111 = SCZO_1110 (alias)
	branch Test(EQ,Z_1111) l000000000040C1CD
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1BF:
	rLoc2_1153 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_1154 = cond(rLoc2_1153 - rLoc1_670)
	CZ_1155 = CZP_1154 (alias)
	branch Test(UGT,CZ_1155) l000000000040C408
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C408:
	rLoc2_1156 = (real64) Mem0[0x0000000000415F0C:real32]
	v70_1157 = rLoc2_1156
	rLoc2_1158 = rLoc1_670
	rLoc1_1159 = v70_1157
	CZP_1160 = cond(rLoc2_1158 - rLoc1_1159)
	C_1161 = CZP_1160 (alias)
	branch Test(UGE,C_1161) l000000000040C6A0
// DataOut: fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C6A0:
	wLoc6A_1253 = __fstcw()
	eax_1254 = (word32) wLoc6A_1253
	ah_1255 = SLICE(eax_1254, byte, 8) (alias)
	rLoc2_1256 = rLoc2_1158 - rLoc1_1159
	v71_1257 = rLoc2_1256
	rLoc2_1258 = rLoc1_1159
	rLoc1_1259 = v71_1257
	r10_1260 = 0x0000000000000000
	ah_1261 = ah_1255 | 0x0C
	ax_1262 = DPB(ax_641, ah_1261, 8) (alias)
	wLoc6C_1263 = ax_1262
	__fldcw(wLoc6C_1263)
	qwLoc68_1264 = (int64) rLoc2_1258
	__fldcw(wLoc6A_1253)
	rax_1265 = qwLoc68_1264
	rax_1266 = rax_1265 ^ rdx_643
	eax_1267 = (word32) rax_1266 (alias)
	rdx_rax_1268 = SEQ(rdx_643, rax_1266) (alias)
	edx_eax_1269 = rax_1266 (alias)
	ah_1270 = SLICE(rax_1266, byte, 8) (alias)
	ax_1271 = (word16) rax_1266 (alias)
	al_1272 = (byte) rax_1266 (alias)
	SZO_1273 = cond(rax_1266)
	C_1274 = false
// DataOut: ax fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C418:
	rLoc1_1235 = rLoc2_1158
	wLoc6A_1236 = __fstcw()
	eax_1237 = (word32) wLoc6A_1236
	ah_1238 = SLICE(eax_1237, byte, 8) (alias)
	ah_1239 = ah_1238 | 0x0C
	ax_1240 = DPB(ax_641, ah_1239, 8) (alias)
	SZO_1241 = cond(ah_1239)
	C_1242 = false
	wLoc6C_1243 = ax_1240
	rLoc2_1244 = rLoc2_1158
	__fldcw(wLoc6C_1243)
	qwLoc68_1245 = (int64) rLoc2_1244
	__fldcw(wLoc6A_1236)
	rax_1246 = qwLoc68_1245
	eax_1247 = (word32) rax_1246 (alias)
	rdx_rax_1248 = SEQ(rdx_643, rax_1246) (alias)
	edx_eax_1249 = rax_1246 (alias)
	ah_1250 = SLICE(rax_1246, byte, 8) (alias)
	ax_1251 = (word16) rax_1246 (alias)
	al_1252 = (byte) rax_1246 (alias)
// DataOut: ax fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C43E:
	wLoc6A_1162 = PHI(wLoc6A_1236, wLoc6A_1253)
	wLoc6C_1163 = PHI(wLoc6C_1243, wLoc6C_1263)
	rLoc2_1164 = PHI(rLoc2_1244, rLoc2_1258)
	qwLoc68_1165 = PHI(qwLoc68_1245, qwLoc68_1264)
	rLoc1_1166 = PHI(rLoc1_1235, rLoc1_1259)
	r10_1167 = PHI(r10_633, r10_1260)
	rax_1168 = PHI(rax_1246, rax_1266)
	eax_1169 = PHI(eax_1247, eax_1267)
	ah_1170 = PHI(ah_1250, ah_1270)
	ax_1171 = PHI(ax_1251, ax_1271)
	al_1172 = PHI(al_1252, al_1272)
	rsi_1173 = (uint64) dwLoc98_32
	esi_1174 = (word32) rsi_1173 (alias)
	rdx_1175 = 0x0000000000000000
	edx_1176 = (word32) rdx_1175 (alias)
	rdx_rax_1177 = SEQ(rdx_1175, rax_1168) (alias)
	edx_eax_1178 = rdx_1175 (alias)
	dl_1179 = (byte) rdx_1175 (alias)
	SZO_1180 = cond(esi_1174 & esi_1174)
	Z_1181 = SZO_1180 (alias)
	C_1182 = false
	branch Test(NE,Z_1181) l000000000040C470
// DataOut: ax fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C470:
	rLoc1_1234 = rLoc1_1166
// DataOut: fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C448:
	qwLoc68_1202 = rax_1168
	SZO_1203 = cond(rax_1168 & rax_1168)
	S_1204 = SZO_1203 (alias)
	C_1205 = false
	rLoc2_1206 = (real64) qwLoc68_1202
	branch Test(SG,S_1204) l000000000040C772
// DataOut: fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C772:
	rLoc2_1233 = rLoc2_1206 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C45A:
	rLoc2_1207 = PHI(rLoc2_1206, rLoc2_1233)
	rcx_1208 = 0x0000000000000000
	ecx_1209 = (word32) rcx_1208 (alias)
	SZO_1210 = cond(ecx_1209)
	rdx_1211 = 0x0000000000000001
	edx_1212 = (word32) rdx_1211 (alias)
	rdx_rax_1213 = SEQ(rdx_1211, rax_1168) (alias)
	edx_eax_1214 = rdx_1211 (alias)
	dl_1215 = (byte) rdx_1211 (alias)
	CZP_1216 = cond(rLoc2_1207 - rLoc1_1166)
	Z_1217 = CZP_1216 (alias)
	P_1218 = CZP_1216 (alias)
	rLoc1_1219 = rLoc1_1166
	cl_1220 = Test(PE,P_1218)
	rcx_1221 = DPB(rcx_1208, cl_1220, 0) (alias)
	ecx_1222 = DPB(ecx_1209, cl_1220, 0) (alias)
	branch Test(NE,Z_1217) l000000000040C46C
// DataOut: fs r11 r11d r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C468_1:
	rdx_1228 = rcx_1221
	edx_1229 = (word32) rdx_1228 (alias)
	rdx_rax_1230 = SEQ(rdx_1228, rax_1168) (alias)
	edx_eax_1231 = rdx_1228 (alias)
	dl_1232 = (byte) rdx_1228 (alias)
// DataOut: fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C46C:
	rdx_1223 = PHI(rdx_1211, rdx_1228)
	edx_1224 = PHI(edx_1212, edx_1229)
	rdx_rax_1225 = PHI(rdx_rax_1213, rdx_rax_1230)
	edx_eax_1226 = PHI(edx_eax_1214, edx_eax_1231)
	dl_1227 = PHI(dl_1215, dl_1232)
// DataOut: fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C472:
	rLoc2_1183 = PHI(rLoc2_1207, rLoc2_1164)
	P_1184 = PHI(P_1218, P_94)
	CZP_1185 = PHI(CZP_1216, CZP_1160)
	ecx_1186 = PHI(ecx_1222, ecx_634)
	rcx_1187 = PHI(rcx_1221, rcx_635)
	cl_1188 = PHI(cl_1220, cl_636)
	Z_1189 = PHI(Z_1217, Z_1181)
	rdx_1190 = PHI(rdx_1223, rdx_1175)
	edx_1191 = PHI(edx_1224, edx_1176)
	rdx_rax_1192 = PHI(rdx_rax_1225, rdx_rax_1177)
	edx_eax_1193 = PHI(edx_eax_1226, edx_eax_1178)
	dl_1194 = PHI(dl_1227, dl_1179)
	rax_1195 = rax_1168 + rdx_1190
	qwLoc68_1196 = rax_1195
	SZO_1197 = cond(rax_1195 & rax_1195)
	S_1198 = SZO_1197 (alias)
	C_1199 = false
	rLoc1_1200 = (real64) qwLoc68_1196
	branch Test(NS,S_1198) l000000000040C1CD
// DataOut: fs r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C487:
	rLoc1_1201 = rLoc1_1200 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1CD:
	wLoc6A_1112 = PHI(wLoc6A, wLoc6A, wLoc6A_1162, wLoc6A_1162)
	wLoc6C_1113 = PHI(wLoc6C, wLoc6C, wLoc6C_1163, wLoc6C_1163)
	rLoc2_1114 = PHI(rLoc2_669, rLoc2_1153, rLoc2_1183, rLoc2_1183)
	qwLoc68_1115 = PHI(qwLoc68_660, qwLoc68_660, qwLoc68_1196, qwLoc68_1196)
	rLoc1_1116 = PHI(rLoc1_670, rLoc1_670, rLoc1_1200, rLoc1_1201)
	P_1117 = PHI(P_94, P_94, P_1184, P_1184)
	CZP_1118 = PHI(CZP_121, CZP_1154, CZP_1185, CZP_1185)
	esi_1119 = PHI(esi_632, esi_632, esi_1174, esi_1174)
	r10_1120 = PHI(r10_633, r10_633, r10_1167, r10_1167)
	S_1121 = PHI(S_662, S_662, S_1198, S_1198)
	CZ_1122 = PHI(CZ_146, CZ_1155, CZ_1155, CZ_1155)
	ecx_1123 = PHI(ecx_634, ecx_634, ecx_1186, ecx_1186)
	cl_1124 = PHI(cl_636, cl_636, cl_1188, cl_1188)
	Z_1125 = PHI(Z_1111, Z_1111, Z_1189, Z_1189)
	ah_1126 = PHI(ah_640, ah_640, ah_1170, ah_1170)
	ax_1127 = PHI(ax_641, ax_641, ax_1171, ax_1171)
	al_1128 = PHI(al_642, al_642, al_1172, al_1172)
	edx_1129 = PHI(edx_644, edx_644, edx_1191, edx_1191)
	rdx_rax_1130 = PHI(rdx_rax_658, rdx_rax_658, rdx_rax_1192, rdx_rax_1192)
	edx_eax_1131 = PHI(edx_eax_659, edx_eax_659, edx_eax_1193, edx_eax_1193)
	dl_1132 = PHI(dl_647, dl_647, dl_1194, dl_1194)
	rLocD0_1133 = (real80) rLoc1_1116
	rbx_1134 = qwLocA0_35
	rcx_1135 = 0x0000000000415F18
	rdx_1136 = 0xFFFFFFFFFFFFFFFF
	rsi_1137 = 0x0000000000000001
	rax_1138 = 0x0000000000000000
	r14_1139 = 0x0000000000000000
	r14d_1140 = (word32) r14_1139 (alias)
	SZO_1141 = cond(r14d_1140)
	C_1142 = false
	rdi_1143 = rbx_1134
	eax_1144 = __sprintf_chk(rdi_1143, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18)
	rdi_1145 = rbx_1134
	rbx_1146 = 0x00000000FFFFFFFF
	ebx_1147 = (word32) rbx_1146 (alias)
	eax_1148 = strlen(rdi_1145)
	rax_1149 = DPB(rax_1138, eax_1148, 0) (alias)
	r15_1150 = rax_1149
	r15d_1151 = (word32) r15_1150 (alias)
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEA3:
	rLoc2_721 = (real64) dwLocAC_56
	rbx_722 = 0x0000000000000000
	ebx_723 = (word32) rbx_722 (alias)
	SZO_724 = cond(ebx_723)
	C_725 = false
	rLoc3_726 = rLoc3_665
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEB4:
	rLoc4_728 = PHI(rLoc4, rLoc4_739)
	rLoc3_729 = PHI(rLoc3_726, rLoc3_1106)
	rLoc1_730 = PHI(rLoc1_670, rLoc1_1107)
	ebx_731 = PHI(ebx_723, ebx_735)
	Z_732 = PHI(Z_667, Z_1101)
	rLoc4_733 = rLoc4_728
	rbx_734 = (uint64) (ebx_731 + 0x00000001)
	ebx_735 = (word32) rbx_734 (alias)
	SCZO_736 = cond(ebx_735)
	rLoc4_737 = rLoc4_733 * rLoc2_721
	v46_738 = rLoc4_737
	rLoc4_739 = rLoc1_730
	rLoc1_740 = v46_738
	CZP_741 = cond(rLoc4_739 - rLoc1_740)
	C_742 = CZP_741 (alias)
	branch rLoc4_739 <u rLoc1_740 l000000000040BED0
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BED0:
	rLoc2_1108 = rLoc4_739
	rLoc1_1109 = rLoc3_729
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEC1:
	SCZO_1100 = cond(ebx_735 - 0x00000008)
	Z_1101 = SCZO_1100 (alias)
	branch Test(NE,Z_1101) l000000000040BEB0
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEB0:
	rLoc3_1104 = rLoc4_739
	v56_1105 = rLoc3_1104
	rLoc3_1106 = rLoc1_740
	rLoc1_1107 = v56_1105
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEC6:
	rLoc2_1102 = rLoc4_739
	rLoc1_1103 = rLoc3_729
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BED4:
	rLoc2_743 = PHI(rLoc2_1102, rLoc2_1108)
	rLoc1_744 = PHI(rLoc1_1103, rLoc1_1109)
	rLoc1_745 = rLoc2_743 / rLoc1_744
	SCZO_746 = cond(dwLoc98_32 - 0x00000001)
	Z_747 = SCZO_746 (alias)
	rLoc2_748 = rLoc2_743
	branch dwLoc98_32 == 0x00000001 l000000000040BF70
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF70:
	v67_1097 = rLoc2_748
	rLoc2_1098 = rLoc1_745
	rLoc1_1099 = v67_1097
// DataOut: ebx fs r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEE3:
	rLoc2_973 = rLoc2_748
	rLoc2_974 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_975 = cond(rLoc2_974 - rLoc1_745)
	CZ_976 = CZP_975 (alias)
	branch Test(ULE,CZ_976) l000000000040C498
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C498:
	rLoc2_1094 = rLoc2_974
// DataOut: ebx fs r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEF3:
	rLoc2_977 = (real64) Mem0[0x0000000000415F0C:real32]
	v52_978 = rLoc2_977
	rLoc2_979 = rLoc1_745
	rLoc1_980 = v52_978
	CZP_981 = cond(rLoc2_979 - rLoc1_980)
	C_982 = CZP_981 (alias)
	branch Test(UGE,C_982) l000000000040C660
// DataOut: ebx fs r11 r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C660:
	wLoc6A_1072 = __fstcw()
	eax_1073 = (word32) wLoc6A_1072
	ah_1074 = SLICE(eax_1073, byte, 8) (alias)
	rLoc2_1075 = rLoc2_979 - rLoc1_980
	v61_1076 = rLoc2_1075
	rLoc2_1077 = rLoc1_980
	rLoc1_1078 = v61_1076
	r10_1079 = 0x0000000000000000
	ah_1080 = ah_1074 | 0x0C
	ax_1081 = DPB(ax_641, ah_1080, 8) (alias)
	wLoc6C_1082 = ax_1081
	__fldcw(wLoc6C_1082)
	qwLoc68_1083 = (int64) rLoc2_1077
	__fldcw(wLoc6A_1072)
	rax_1084 = qwLoc68_1083
	rax_1085 = rax_1084 ^ rdx_643
	eax_1086 = (word32) rax_1085 (alias)
	rdx_rax_1087 = SEQ(rdx_643, rax_1085) (alias)
	edx_eax_1088 = rax_1085 (alias)
	ah_1089 = SLICE(rax_1085, byte, 8) (alias)
	ax_1090 = (word16) rax_1085 (alias)
	al_1091 = (byte) rax_1085 (alias)
	SZO_1092 = cond(rax_1085)
	C_1093 = false
// DataOut: al ax ebx fs r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF03:
	rLoc1_1054 = rLoc2_979
	wLoc6A_1055 = __fstcw()
	eax_1056 = (word32) wLoc6A_1055
	ah_1057 = SLICE(eax_1056, byte, 8) (alias)
	ah_1058 = ah_1057 | 0x0C
	ax_1059 = DPB(ax_641, ah_1058, 8) (alias)
	SZO_1060 = cond(ah_1058)
	C_1061 = false
	wLoc6C_1062 = ax_1059
	rLoc2_1063 = rLoc2_979
	__fldcw(wLoc6C_1062)
	qwLoc68_1064 = (int64) rLoc2_1063
	__fldcw(wLoc6A_1055)
	rax_1065 = qwLoc68_1064
	eax_1066 = (word32) rax_1065 (alias)
	rdx_rax_1067 = SEQ(rdx_643, rax_1065) (alias)
	edx_eax_1068 = rax_1065 (alias)
	ah_1069 = SLICE(rax_1065, byte, 8) (alias)
	ax_1070 = (word16) rax_1065 (alias)
	al_1071 = (byte) rax_1065 (alias)
// DataOut: al ax ebx fs r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF29:
	wLoc6A_983 = PHI(wLoc6A_1055, wLoc6A_1072)
	wLoc6C_984 = PHI(wLoc6C_1062, wLoc6C_1082)
	rLoc2_985 = PHI(rLoc2_1063, rLoc2_1077)
	qwLoc68_986 = PHI(qwLoc68_1064, qwLoc68_1083)
	rLoc1_987 = PHI(rLoc1_1054, rLoc1_1078)
	r10_988 = PHI(r10_633, r10_1079)
	rax_989 = PHI(rax_1065, rax_1085)
	eax_990 = PHI(eax_1066, eax_1086)
	ah_991 = PHI(ah_1069, ah_1089)
	ax_992 = PHI(ax_1070, ax_1090)
	al_993 = PHI(al_1071, al_1091)
	rcx_994 = (uint64) dwLoc98_32
	ecx_995 = (word32) rcx_994 (alias)
	rdx_996 = 0x0000000000000000
	edx_997 = (word32) rdx_996 (alias)
	rdx_rax_998 = SEQ(rdx_996, rax_989) (alias)
	edx_eax_999 = rdx_996 (alias)
	dl_1000 = (byte) rdx_996 (alias)
	SZO_1001 = cond(ecx_995 & ecx_995)
	Z_1002 = SZO_1001 (alias)
	C_1003 = false
	branch Test(NE,Z_1002) l000000000040BF55
// DataOut: al ax ebx fs r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF33:
	qwLoc68_1028 = rax_989
	SZO_1029 = cond(rax_989 & rax_989)
	S_1030 = SZO_1029 (alias)
	C_1031 = false
	rLoc2_1032 = (real64) qwLoc68_1028
	branch Test(SG,S_1030) l000000000040C77D
// DataOut: ebx fs r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C77D:
	rLoc2_1053 = rLoc2_1032 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF45:
	rLoc2_1033 = PHI(rLoc2_1032, rLoc2_1053)
	rcx_1034 = 0x0000000000000000
	ecx_1035 = (word32) rcx_1034 (alias)
	SZO_1036 = cond(ecx_1035)
	rdx_1037 = 0x0000000000000001
	edx_1038 = (word32) rdx_1037 (alias)
	rdx_rax_1039 = SEQ(rdx_1037, rax_989) (alias)
	edx_eax_1040 = rdx_1037 (alias)
	dl_1041 = (byte) rdx_1037 (alias)
	CZP_1042 = cond(rLoc2_1033 - rLoc1_987)
	Z_1043 = CZP_1042 (alias)
	P_1044 = CZP_1042 (alias)
	cl_1045 = Test(PE,P_1044)
	rcx_1046 = DPB(rcx_1034, cl_1045, 0) (alias)
	ecx_1047 = DPB(ecx_1035, cl_1045, 0) (alias)
	branch Test(NE,Z_1043) l000000000040BF55
// DataOut: ebx fs r11 r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF51_1:
	rdx_1048 = rcx_1046
	edx_1049 = (word32) rdx_1048 (alias)
	rdx_rax_1050 = SEQ(rdx_1048, rax_989) (alias)
	edx_eax_1051 = rdx_1048 (alias)
	dl_1052 = (byte) rdx_1048 (alias)
// DataOut: ebx fs r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> r10:<invalid> cl:Test(PE,P) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF55:
	P_1004 = PHI(P_1044, P_1044, P_94)
	CZP_1005 = PHI(CZP_1042, CZP_1042, CZP_981)
	ecx_1006 = PHI(ecx_1047, ecx_1047, ecx_995)
	rcx_1007 = PHI(rcx_1046, rcx_1046, rcx_994)
	cl_1008 = PHI(cl_1045, cl_1045, cl_636)
	Z_1009 = PHI(Z_1043, Z_1043, Z_1002)
	rdx_1010 = PHI(rdx_1037, rdx_1048, rdx_996)
	edx_1011 = PHI(edx_1038, edx_1049, edx_997)
	rdx_rax_1012 = PHI(rdx_rax_1039, rdx_rax_1050, rdx_rax_998)
	edx_eax_1013 = PHI(edx_eax_1040, edx_eax_1051, edx_eax_999)
	dl_1014 = PHI(dl_1041, dl_1052, dl_1000)
	rax_1015 = rax_989 + rdx_1010
	qwLoc68_1016 = rax_1015
	SZO_1017 = cond(rax_1015 & rax_1015)
	S_1018 = SZO_1017 (alias)
	C_1019 = false
	rLoc2_1020 = (real64) qwLoc68_1016
	branch Test(SG,S_1018) l000000000040C758
// DataOut: ebx fs r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C758:
	rLoc2_1024 = rLoc2_1020 + Mem0[0x0000000000415F08:real32]
	v63_1025 = rLoc2_1024
	rLoc2_1026 = rLoc1_987
	rLoc1_1027 = v63_1025
// DataOut: ebx fs r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF6A:
	v60_1021 = rLoc2_1020
	rLoc2_1022 = rLoc1_987
	rLoc1_1023 = v60_1021
// DataOut: ebx fs r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF72:
	wLoc6A_749 = PHI(wLoc6A_983, wLoc6A_983, wLoc6A, wLoc6A)
	wLoc6C_750 = PHI(wLoc6C_984, wLoc6C_984, wLoc6C, wLoc6C)
	rLoc2_751 = PHI(rLoc2_1022, rLoc2_1026, rLoc2_1094, rLoc2_1098)
	qwLoc68_752 = PHI(qwLoc68_1016, qwLoc68_1016, qwLoc68_660, qwLoc68_660)
	rLoc1_753 = PHI(rLoc1_1023, rLoc1_1027, rLoc1_745, rLoc1_1099)
	P_754 = PHI(P_1004, P_1004, P_94, P_94)
	CZP_755 = PHI(CZP_1005, CZP_1005, CZP_975, CZP_741)
	r10_756 = PHI(r10_988, r10_988, r10_633, r10_633)
	S_757 = PHI(S_1018, S_1018, S_662, S_662)
	ecx_758 = PHI(ecx_1006, ecx_1006, ecx_634, ecx_634)
	cl_759 = PHI(cl_1008, cl_1008, cl_636, cl_636)
	C_760 = PHI(C_1019, C_1019, C_742, C_742)
	ah_761 = PHI(ah_991, ah_991, ah_640, ah_640)
	ax_762 = PHI(ax_992, ax_992, ax_641, ax_641)
	r14_763 = qwLocA0_35
	rdx_764 = 0xFFFFFFFFFFFFFFFF
	rcx_765 = 0x0000000000415F1E
	rsi_766 = 0x0000000000000001
	rax_767 = 0x0000000000000000
	qwLoc80_768 = r11_139
	rdi_769 = r14_763
	rLoc90_770 = (real80) rLoc2_751
	rLocD0_771 = (real80) rLoc1_753
	eax_772 = __sprintf_chk(rdi_769, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F1E)
	rdi_773 = r14_763
	eax_774 = strlen(rdi_773)
	rax_775 = DPB(rax_767, eax_774, 0) (alias)
	r11_776 = qwLoc80_768
	rdx_777 = (uint64) dwLoc78_48
	edx_778 = (word32) rdx_777 (alias)
	dl_779 = (byte) rdx_777 (alias)
	r15_780 = rax_775
	r15d_781 = (word32) r15_780 (alias)
	rax_782 = 0x0000000000000000
	rLoc1_783 = (real64) rLoc90_770
	SZO_784 = cond(edx_778 & edx_778)
	Z_785 = SZO_784 (alias)
	r14_786 = r11_776 + 0x0000000000000001
	r14d_787 = (word32) r14_786 (alias)
	al_788 = (edx_778 & edx_778) == 0x00000000
	rax_789 = DPB(rax_782, al_788, 0) (alias)
	rax_790 = r14_786 + 0x0000000000000001 + rax_789
	rdx_rax_791 = SEQ(rdx_777, rax_790) (alias)
	edx_eax_792 = rax_790 (alias)
	SCZO_793 = cond(r15_780 - rax_790)
	CZ_794 = SCZO_793 (alias)
	branch r15_780 >u rax_790 l000000000040BFF0
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFCB:
	SZO_963 = cond(bLocB0 & 0x08)
	Z_964 = SZO_963 (alias)
	C_965 = false
	branch Test(EQ,Z_964) l000000000040C208
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C208:
	rLoc1_972 = rLoc1_783
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFD6:
	rax_966 = qwLocA0_35
	rdx_rax_967 = SEQ(rdx_777, rax_966) (alias)
	edx_eax_968 = rax_966 (alias)
	SCZO_969 = cond(Mem0[rax_966 - 0x0000000000000001 + r15_780:byte] - 0x30)
	Z_970 = SCZO_969 (alias)
	branch Test(NE,Z_970) l000000000040C210
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C210:
	rLoc1_971 = rLoc1_783
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFE7:
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFF0:
	SZO_795 = PHI(SZO_784, SZO_963)
	C_796 = PHI(C_760, C_965)
	rax_797 = PHI(rax_790, rax_966)
	rdx_rax_798 = PHI(rdx_rax_791, rdx_rax_967)
	edx_eax_799 = PHI(edx_eax_792, edx_eax_968)
	SCZO_800 = cond(dwLoc98_32 - 0x00000001)
	Z_801 = SCZO_800 (alias)
	rLoc1_802 = rLoc1_783 * Mem0[0x0000000000415F84:real32]
	branch dwLoc98_32 == 0x00000001 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C001:
	rLoc2_841 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_842 = cond(rLoc2_841 - rLoc1_802)
	CZ_843 = CZP_842 (alias)
	branch rLoc2_841 <=u rLoc1_802 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C00F:
	rLoc2_844 = (real64) Mem0[0x0000000000415F0C:real32]
	v64_845 = rLoc2_844
	rLoc2_846 = rLoc1_802
	rLoc1_847 = v64_845
	CZP_848 = cond(rLoc2_846 - rLoc1_847)
	C_849 = CZP_848 (alias)
	branch rLoc2_846 >=u rLoc1_847 l000000000040C720
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C720:
	wLoc6A_941 = __fstcw()
	eax_942 = (word32) wLoc6A_941
	ah_943 = SLICE(eax_942, byte, 8) (alias)
	rLoc2_944 = rLoc2_846 - rLoc1_847
	v65_945 = rLoc2_944
	rLoc2_946 = rLoc1_847
	rLoc1_947 = v65_945
	r10_948 = 0x0000000000000000
	ah_949 = ah_943 | 0x0C
	ax_950 = DPB(ax_762, ah_949, 8) (alias)
	wLoc6C_951 = ax_950
	__fldcw(wLoc6C_951)
	qwLoc68_952 = (int64) rLoc2_946
	__fldcw(wLoc6A_941)
	rax_953 = qwLoc68_952
	rax_954 = rax_953 ^ rdx_777
	eax_955 = (word32) rax_954 (alias)
	rdx_rax_956 = SEQ(rdx_777, rax_954) (alias)
	edx_eax_957 = rax_954 (alias)
	ah_958 = SLICE(rax_954, byte, 8) (alias)
	ax_959 = (word16) rax_954 (alias)
	al_960 = (byte) rax_954 (alias)
	SZO_961 = cond(rax_954)
	C_962 = false
// DataOut: ax eax ebx fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C01F:
	rLoc1_923 = rLoc2_846
	wLoc6A_924 = __fstcw()
	eax_925 = (word32) wLoc6A_924
	ah_926 = SLICE(eax_925, byte, 8) (alias)
	ah_927 = ah_926 | 0x0C
	ax_928 = DPB(ax_762, ah_927, 8) (alias)
	SZO_929 = cond(ah_927)
	C_930 = false
	wLoc6C_931 = ax_928
	rLoc2_932 = rLoc2_846
	__fldcw(wLoc6C_931)
	qwLoc68_933 = (int64) rLoc2_932
	__fldcw(wLoc6A_924)
	rax_934 = qwLoc68_933
	eax_935 = (word32) rax_934 (alias)
	rdx_rax_936 = SEQ(rdx_777, rax_934) (alias)
	edx_eax_937 = rax_934 (alias)
	ah_938 = SLICE(rax_934, byte, 8) (alias)
	ax_939 = (word16) rax_934 (alias)
	al_940 = (byte) rax_934 (alias)
// DataOut: ax eax ebx fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C045:
	wLoc6A_850 = PHI(wLoc6A_924, wLoc6A_941)
	wLoc6C_851 = PHI(wLoc6C_931, wLoc6C_951)
	rLoc2_852 = PHI(rLoc2_932, rLoc2_946)
	qwLoc68_853 = PHI(qwLoc68_933, qwLoc68_952)
	rLoc1_854 = PHI(rLoc1_923, rLoc1_947)
	r10_855 = PHI(r10_756, r10_948)
	rax_856 = PHI(rax_934, rax_954)
	eax_857 = PHI(eax_935, eax_955)
	ah_858 = PHI(ah_938, ah_958)
	ax_859 = PHI(ax_939, ax_959)
	al_860 = PHI(al_940, al_960)
	r14_861 = (uint64) dwLoc98_32
	r14d_862 = (word32) r14_861 (alias)
	rdx_863 = 0x0000000000000000
	edx_864 = (word32) rdx_863 (alias)
	rdx_rax_865 = SEQ(rdx_863, rax_856) (alias)
	edx_eax_866 = rdx_863 (alias)
	dl_867 = (byte) rdx_863 (alias)
	SZO_868 = cond(r14d_862 & r14d_862)
	Z_869 = SZO_868 (alias)
	C_870 = false
	branch (r14d_862 & r14d_862) != 0x00000000 l000000000040C080
// DataOut: ax eax ebx fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C080:
	rLoc1_922 = rLoc1_854
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C051:
	qwLoc68_890 = rax_856
	SZO_891 = cond(rax_856 & rax_856)
	S_892 = SZO_891 (alias)
	C_893 = false
	rLoc2_894 = (real64) qwLoc68_890
	branch (rax_856 & rax_856) < 0x0000000000000000 l000000000040C79E
// DataOut: ebx fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C79E:
	rLoc2_921 = rLoc2_894 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r11d r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C063:
	rLoc2_895 = PHI(rLoc2_894, rLoc2_921)
	rcx_896 = 0x0000000000000000
	ecx_897 = (word32) rcx_896 (alias)
	SZO_898 = cond(ecx_897)
	rdx_899 = 0x0000000000000001
	edx_900 = (word32) rdx_899 (alias)
	rdx_rax_901 = SEQ(rdx_899, rax_856) (alias)
	edx_eax_902 = rdx_899 (alias)
	dl_903 = (byte) rdx_899 (alias)
	CZP_904 = cond(rLoc2_895 - rLoc1_854)
	Z_905 = CZP_904 (alias)
	P_906 = CZP_904 (alias)
	rLoc1_907 = rLoc1_854
	cl_908 = Test(PE,P_906)
	rcx_909 = DPB(rcx_896, cl_908, 0) (alias)
	ecx_910 = DPB(ecx_897, cl_908, 0) (alias)
	branch rLoc2_895 != rLoc1_854 l000000000040C075
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C071_1:
	rdx_916 = rcx_909
	edx_917 = (word32) rdx_916 (alias)
	rdx_rax_918 = SEQ(rdx_916, rax_856) (alias)
	edx_eax_919 = rdx_916 (alias)
	dl_920 = (byte) rdx_916 (alias)
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C075:
	rdx_911 = PHI(rdx_899, rdx_916)
	edx_912 = PHI(edx_900, edx_917)
	rdx_rax_913 = PHI(rdx_rax_901, rdx_rax_918)
	edx_eax_914 = PHI(edx_eax_902, edx_eax_919)
	dl_915 = PHI(dl_903, dl_920)
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C082:
	rLoc2_871 = PHI(rLoc2_895, rLoc2_852)
	P_872 = PHI(P_906, P_754)
	CZP_873 = PHI(CZP_904, CZP_848)
	ecx_874 = PHI(ecx_910, ecx_758)
	rcx_875 = PHI(rcx_909, rcx_765)
	cl_876 = PHI(cl_908, cl_759)
	Z_877 = PHI(Z_905, Z_869)
	rdx_878 = PHI(rdx_911, rdx_863)
	edx_879 = PHI(edx_912, edx_864)
	rdx_rax_880 = PHI(rdx_rax_913, rdx_rax_865)
	edx_eax_881 = PHI(edx_eax_914, edx_eax_866)
	dl_882 = PHI(dl_915, dl_867)
	rax_883 = rax_856 + rdx_878
	qwLoc68_884 = rax_883
	SZO_885 = cond(rax_883 & rax_883)
	S_886 = SZO_885 (alias)
	C_887 = false
	rLoc1_888 = (real64) qwLoc68_884
	branch (rax_883 & rax_883) >= 0x0000000000000000 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C093:
	rLoc1_889 = rLoc1_888 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r11d r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C0A0:
	wLoc6A_803 = PHI(wLoc6A_749, wLoc6A_749, wLoc6A_850, wLoc6A_850)
	wLoc6C_804 = PHI(wLoc6C_750, wLoc6C_750, wLoc6C_851, wLoc6C_851)
	rLoc2_805 = PHI(rLoc2_751, rLoc2_841, rLoc2_871, rLoc2_871)
	qwLoc68_806 = PHI(qwLoc68_752, qwLoc68_752, qwLoc68_884, qwLoc68_884)
	rLoc1_807 = PHI(rLoc1_802, rLoc1_802, rLoc1_888, rLoc1_889)
	P_808 = PHI(P_754, P_754, P_872, P_872)
	CZP_809 = PHI(CZP_755, CZP_842, CZP_873, CZP_873)
	r10_810 = PHI(r10_756, r10_756, r10_855, r10_855)
	S_811 = PHI(S_757, S_757, S_886, S_886)
	CZ_812 = PHI(CZ_794, CZ_843, CZ_843, CZ_843)
	ecx_813 = PHI(ecx_758, ecx_758, ecx_874, ecx_874)
	cl_814 = PHI(cl_759, cl_759, cl_876, cl_876)
	Z_815 = PHI(Z_801, Z_801, Z_877, Z_877)
	ah_816 = PHI(ah_761, ah_761, ah_858, ah_858)
	ax_817 = PHI(ax_762, ax_762, ax_859, ax_859)
	al_818 = PHI(al_788, al_788, al_860, al_860)
	edx_819 = PHI(edx_778, edx_778, edx_879, edx_879)
	rdx_rax_820 = PHI(rdx_rax_798, rdx_rax_798, rdx_rax_880, rdx_rax_880)
	edx_eax_821 = PHI(edx_eax_799, edx_eax_799, edx_eax_881, edx_eax_881)
	dl_822 = PHI(dl_779, dl_779, dl_882, dl_882)
	rLoc1_823 = rLoc1_807 / Mem0[0x0000000000415F84:real32]
	r14_824 = qwLocA0_35
	rcx_825 = 0x0000000000415F18
	rdx_826 = 0xFFFFFFFFFFFFFFFF
	rsi_827 = 0x0000000000000001
	rax_828 = 0x0000000000000000
	rdi_829 = r14_824
	rLocD0_830 = (real80) rLoc1_823
	eax_831 = __sprintf_chk(rdi_829, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18)
	rdi_832 = r14_824
	r14_833 = 0x0000000000000000
	r14d_834 = (word32) r14_833 (alias)
	SZO_835 = cond(r14d_834)
	C_836 = false
	eax_837 = strlen(rdi_832)
	rax_838 = DPB(rax_828, eax_837, 0) (alias)
	r15_839 = rax_838
	r15d_840 = (word32) r15_839 (alias)
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C218:
	rLoc4_671 = PHI(rLoc4_739, rLoc4_739, rLoc4_739, rLoc4)
	rLoc3_672 = PHI(rLoc3_729, rLoc3_729, rLoc3_729, rLoc3_665)
	qwLoc80_673 = PHI(qwLoc80_768, qwLoc80_768, qwLoc80_768, qwLoc80_131)
	rLoc90_674 = PHI(rLoc90_770, rLoc90_770, rLoc90_770, rLoc90)
	wLoc6A_675 = PHI(wLoc6A_749, wLoc6A_749, wLoc6A_803, wLoc6A_1112)
	wLoc6C_676 = PHI(wLoc6C_750, wLoc6C_750, wLoc6C_804, wLoc6C_1113)
	rLoc2_677 = PHI(rLoc2_751, rLoc2_751, rLoc2_805, rLoc2_1114)
	qwLoc68_678 = PHI(qwLoc68_752, qwLoc68_752, qwLoc68_806, qwLoc68_1115)
	rLoc1_679 = PHI(rLoc1_971, rLoc1_972, rLoc1_823, rLoc1_1116)
	rLocD0_680 = PHI(rLocD0_771, rLocD0_771, rLocD0_830, rLocD0_1133)
	P_681 = PHI(P_754, P_754, P_808, P_1117)
	CZP_682 = PHI(CZP_755, CZP_755, CZP_809, CZP_1118)
	esi_683 = PHI(esi_632, esi_632, esi_632, esi_1119)
	r10_684 = PHI(r10_756, r10_756, r10_810, r10_1120)
	S_685 = PHI(S_757, S_757, S_811, S_1121)
	r11_686 = PHI(r11_776, r11_776, r11_776, r11_139)
	r15_687 = PHI(r15_780, r15_780, r15_839, r15_1150)
	r14_688 = PHI(r14_786, r14_786, r14_833, r14_1139)
	r14d_689 = PHI(r14d_787, r14d_787, r14d_834, r14d_1140)
	CZ_690 = PHI(CZ_794, CZ_794, CZ_812, CZ_1122)
	ebx_691 = PHI(ebx_735, ebx_735, ebx_735, ebx_1147)
	ecx_692 = PHI(ecx_758, ecx_758, ecx_813, ecx_1123)
	rcx_693 = PHI(rcx_765, rcx_765, rcx_825, rcx_1135)
	cl_694 = PHI(cl_759, cl_759, cl_814, cl_1124)
	SZO_695 = PHI(SZO_963, SZO_963, SZO_835, SZO_1141)
	Z_696 = PHI(Z_970, Z_964, Z_815, Z_1125)
	C_697 = PHI(C_965, C_965, C_836, C_1142)
	eax_698 = PHI(eax_774, eax_774, eax_837, eax_1148)
	ah_699 = PHI(ah_761, ah_761, ah_816, ah_1126)
	ax_700 = PHI(ax_762, ax_762, ax_817, ax_1127)
	al_701 = PHI(al_788, al_788, al_818, al_1128)
	edx_702 = PHI(edx_778, edx_778, edx_819, edx_1129)
	rdx_rax_703 = PHI(rdx_rax_967, rdx_rax_791, rdx_rax_820, rdx_rax_1130)
	edx_eax_704 = PHI(edx_eax_968, edx_eax_792, edx_eax_821, edx_eax_1131)
	dl_705 = PHI(dl_779, dl_779, dl_822, dl_1132)
	rbx_706 = PHI(rbx_734, rbx_734, rbx_734, rbx_1146)
	r12_707 = qwLocB8_147
	rsi_708 = qwLocA0_35
	rdx_709 = r15_687
	r12_710 = r12_707 - r15_687
	r12d_711 = (word32) r12_710 (alias)
	r15_712 = r15_687 - r14_688
	r15d_713 = (word32) r15_712 (alias)
	SCZO_714 = cond(r15_712)
	rdi_715 = r12_710
	rax_716 = memmove(rdi_715, rsi_708, rdx_709)
	r8_717 = r12_710 + r15_712
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 r10:<invalid> al:<invalid> ah:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C237:
	dwLoc74_148 = PHI(dwLoc74, dwLoc74_1330)
	qwLoc90_149 = PHI(qwLoc90, qwLoc90_1331)
	rLoc4_150 = PHI(rLoc4_671, rLoc4)
	rLoc3_151 = PHI(rLoc3_672, rLoc3)
	qwLoc80_152 = PHI(qwLoc80_673, qwLoc80_1332)
	rLoc90_153 = PHI(rLoc90_674, rLoc90)
	wLoc6A_154 = PHI(wLoc6A_675, wLoc6A)
	wLoc6C_155 = PHI(wLoc6C_676, wLoc6C)
	rLoc2_156 = PHI(rLoc2_677, rLoc2)
	qwLoc68_157 = PHI(qwLoc68_678, qwLoc68)
	rLoc1_158 = PHI(rLoc1_679, rLoc1)
	rLocD0_159 = PHI(rLocD0_680, rLocD0)
	qwLoc98_160 = PHI(qwLoc98, qwLoc98_1387)
	r10b_161 = PHI(r10b_629, r10b_1432)
	r10d_162 = PHI(r10d_630, r10d_1431)
	dil_163 = PHI(dil_124, dil_1335)
	sil_164 = PHI(sil_631, sil_1336)
	P_165 = PHI(P_681, P_94)
	CZP_166 = PHI(CZP_682, CZP_1298)
	esi_167 = PHI(esi_683, esi_1370)
	edi_168 = PHI(edi_123, edi_1371)
	r10_169 = PHI(r10_684, r10_1430)
	S_170 = PHI(S_685, S_1302)
	r11_171 = PHI(r11_686, r11_1340)
	r8_172 = PHI(r8_717, r8_1391)
	r15_173 = PHI(r15_712, r15_129)
	r15d_174 = PHI(r15d_713, r15d_130)
	r9_175 = PHI(r9_87, r9_1410)
	r9d_176 = PHI(r9d_86, r9d_1411)
	r12_177 = PHI(r12_710, r12_1415)
	r12d_178 = PHI(r12d_711, r12d_1416)
	r14_179 = PHI(r14_688, r14_1346)
	r14d_180 = PHI(r14d_689, r14d_1347)
	CZ_181 = PHI(CZ_690, CZ_1348)
	ebx_182 = PHI(ebx_691, ebx_1392)
	ecx_183 = PHI(ecx_692, ecx_1372)
	rcx_184 = PHI(rcx_693, rcx_1373)
	cl_185 = PHI(cl_694, cl_1374)
	rax_186 = PHI(rax_716, rax_1421)
	eax_187 = PHI(eax_698, eax_1397)
	ah_188 = PHI(ah_699, ah_1398)
	ax_189 = PHI(ax_700, ax_1399)
	al_190 = PHI(al_701, al_1400)
	rdx_191 = PHI(rdx_709, rdx_1419)
	edx_192 = PHI(edx_702, edx_1361)
	rdx_rax_193 = PHI(rdx_rax_703, rdx_rax_1417)
	edx_eax_194 = PHI(edx_eax_704, edx_eax_1403)
	dl_195 = PHI(dl_705, dl_1364)
	SCZO_196 = PHI(SCZO_714, SCZO_1404)
	rbx_197 = PHI(rbx_706, rbx_1405)
	rsi_198 = PHI(rsi_708, rsi_1406)
	rdi_199 = PHI(rdi_715, rdi_1407)
	SZO_201 = cond(bLocB0 & 0x04)
	Z_202 = SZO_201 (alias)
	C_203 = false
	branch (bLocB0 & 0x04) != 0x00 l000000000040C318
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C318:
	r8_492 = r8_172 - r12_177
	SCZO_493 = cond(r8_492)
	rdi_494 = r13_140
	r15_495 = 0xFFFFFFFFFFFFFFFF
	r15d_496 = (word32) r15_495 (alias)
	r14_497 = r8_492
	r14d_498 = (word32) r14_497 (alias)
	eax_499 = strlen(rdi_494)
	rax_500 = DPB(rax_186, eax_499, 0) (alias)
	rdi_501 = fp - 0x0000000000000060
	rsi_502 = r12_177
	rcx_503 = 0x0000000000000029
	rdx_504 = r14_497
	qwLoc98_505 = rax_500
	call __memcpy_chk (retsize: 8; depth: 216)
		uses: ah_188,al_190,ax_189,bLocB0,C_203,cl_185,CZ_181,CZP_166,dil_163,dl_195,dwLoc04_4,dwLoc08_12,dwLoc0C_17,dwLoc10_20,dwLoc14_24,dwLoc18_27,dwLoc74_148,dwLoc78_48,dwLoc98_32,dwLocAC_56,dwLocB0_38,eax_499,ebx_182,ecx_183,edi_168,edx_192,esi_167,fs_73,P_165,qwLoc08,qwLoc10,qwLoc18,qwLoc28_44,qwLoc68_157,qwLoc80_152,qwLoc90_149,qwLoc98_505,qwLocA0_35,qwLocA8_40,qwLocB8_147,r10_169,r10b_161,r10d_162,r11_171,r12_177,r12d_178,r13_140,r14_497,r14d_498,r15_495,r15d_496,r8_492,r9_175,r9d_176,rax_500,rbp_108,rbx_197,rcx_503,rdi_501,rdx_504,rLoc90_153,rLocD0_159,rsi_502,rsp_58,S_170,SCZO_493,sil_164,SZO_201,wLoc6A_154,wLoc6C_155,Z_202
		defs: ah_540,al_546,ax_541,C_512,cl_533,CZ_527,CZP_538,dil_545,dl_543,eax_508,ebx_530,ecx_522,edi_532,edx_509,esi_536,fs_521,P_542,r10_531,r10b_549,r10d_548,r11_525,r12_516,r12d_537,r13_524,r14_514,r14d_539,r15_523,r15d_547,r8_520,r9_535,r9d_534,rax_510,rbp_515,rbx_517,rcx_518,rdi_507,rdx_526,rsi_513,rsp_506,S_529,SCZO_519,sil_544,SZO_511,Z_528
	r9_550 = r12_516 + r14_514
	r9d_551 = (word32) r9_550 (alias)
	r12_552 = r13_524
	r12d_553 = (word32) r12_552 (alias)
	r13_554 = qwLoc98_505
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C36C:
	r15_555 = PHI(r15_523, r15_587)
	r15d_556 = PHI(r15d_547, r15d_588)
	r9_557 = PHI(r9_550, r9_615)
	r9d_558 = PHI(r9d_551, r9d_616)
	r14_559 = PHI(r14_514, r14_589)
	r14d_560 = PHI(r14d_539, r14d_590)
	CZ_561 = PHI(CZ_527, CZ_585)
	rax_562 = PHI(rax_510, rax_614)
	eax_563 = PHI(eax_508, eax_596)
	ah_564 = PHI(ah_540, ah_599)
	ax_565 = PHI(ax_541, ax_600)
	al_566 = PHI(al_546, al_601)
	rdx_567 = PHI(rdx_526, rdx_611)
	rdx_rax_568 = PHI(rdx_rax_193, rdx_rax_597)
	SCZO_569 = PHI(SCZO_519, SCZO_610)
	rbp_570 = PHI(rbp_515, rbp_583)
	rsi_571 = PHI(rsi_513, rsi_612)
	rdi_572 = PHI(rdi_507, rdi_613)
	edx_573 = (word32) Mem0[rbp_570 + 0x0000000000000000:byte]
	rdx_574 = DPB(rdx_567, edx_573, 0) (alias)
	rdx_rax_575 = DPB(rdx_rax_568, edx_573, 64) (alias)
	edx_eax_576 = SEQ(edx_573, eax_563) (alias)
	dl_577 = (byte) edx_573 (alias)
	SZO_578 = cond(dl_577 & dl_577)
	Z_579 = SZO_578 (alias)
	C_580 = false
	branch (dl_577 & dl_577) == 0x00 l000000000040C383
// DataOut: dl ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C374:
	SCZO_619 = cond(dl_577 - 0x7E)
	CZ_620 = SCZO_619 (alias)
	r15d_621 = (word32) dl_577
	r15_622 = DPB(r15_555, r15d_621, 0) (alias)
	branch dl_577 <=u 0x7E l000000000040C37F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C37B_1:
	r15_627 = r14_559
	r15d_628 = (word32) r15_627 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C37F:
	r15_623 = PHI(r15_622, r15_627)
	r15d_624 = PHI(r15d_621, r15d_628)
	rbp_625 = rbp_570 + 0x0000000000000001
	SCZO_626 = cond(rbp_625)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C383:
	r15_581 = PHI(r15_555, r15_623)
	r15d_582 = PHI(r15d_556, r15d_624)
	rbp_583 = PHI(rbp_570, rbp_625)
	SCZO_584 = cond(r15_581 - r14_559)
	CZ_585 = SCZO_584 (alias)
	rax_586 = fp - 0x0000000000000060
	branch r15_581 <=u r14_559 l000000000040C38F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C38B_1:
	r15_617 = r14_559
	r15d_618 = (word32) r15_617 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:fp - 0x0000000000000060 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C38F:
	r15_587 = PHI(r15_581, r15_617)
	r15d_588 = PHI(r15d_582, r15d_618)
	r14_589 = r14_559 - r15_587
	r14d_590 = (word32) r14_589 (alias)
	r9_591 = r9_557 - r15_587
	rdx_592 = r15_587
	rsi_593 = fp - 0x0000000000000060 + r14_589
	rdi_594 = r9_591
	rax_595 = memcpy(rdi_594, rsi_593, rdx_592)
	eax_596 = (word32) rax_595 (alias)
	rdx_rax_597 = SEQ(rdx_592, rax_595) (alias)
	edx_eax_598 = rax_595 (alias)
	ah_599 = SLICE(rax_595, byte, 8) (alias)
	ax_600 = (word16) rax_595 (alias)
	al_601 = (byte) rax_595 (alias)
	SZO_602 = cond(r14_589 & r14_589)
	Z_603 = SZO_602 (alias)
	C_604 = false
	r9_605 = rax_595
	r9d_606 = (word32) r9_605 (alias)
	branch (r14_589 & r14_589) != 0x0000000000000000 l000000000040C358
// DataOut: ebx fs r11 r11d r12 r13 r14 r14d r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:fp - 0x0000000000000060 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C358:
	r9_609 = r9_605 - r13_554
	SCZO_610 = cond(r9_609)
	rdx_611 = r13_554
	rsi_612 = r12_552
	rdi_613 = r9_609
	rax_614 = memcpy(rdi_613, rsi_612, rdx_611)
	r9_615 = rax_614
	r9d_616 = (word32) r9_615 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C3AC:
	r12_607 = rax_595
	r12d_608 = (word32) r12_607 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C242:
	qwLoc98_204 = PHI(qwLoc98_505, qwLoc98_160)
	r10b_205 = PHI(r10b_549, r10b_161)
	r10d_206 = PHI(r10d_548, r10d_162)
	dil_207 = PHI(dil_545, dil_163)
	sil_208 = PHI(sil_544, sil_164)
	P_209 = PHI(P_542, P_165)
	CZP_210 = PHI(CZP_538, CZP_166)
	esi_211 = PHI(esi_536, esi_167)
	edi_212 = PHI(edi_532, edi_168)
	r10_213 = PHI(r10_531, r10_169)
	S_214 = PHI(S_529, S_170)
	r11_215 = PHI(r11_525, r11_171)
	fs_216 = PHI(fs_521, fs_73)
	r8_217 = PHI(r8_520, r8_172)
	r13_218 = PHI(r13_554, r13_140)
	r15_219 = PHI(r15_587, r15_173)
	r15d_220 = PHI(r15d_588, r15d_174)
	r9_221 = PHI(r9_605, r9_175)
	r9d_222 = PHI(r9d_606, r9d_176)
	r12_223 = PHI(r12_607, r12_177)
	r12d_224 = PHI(r12d_608, r12d_178)
	r14_225 = PHI(r14_589, r14_179)
	r14d_226 = PHI(r14d_590, r14d_180)
	CZ_227 = PHI(CZ_585, CZ_181)
	ebx_228 = PHI(ebx_530, ebx_182)
	ecx_229 = PHI(ecx_522, ecx_183)
	rcx_230 = PHI(rcx_518, rcx_184)
	cl_231 = PHI(cl_533, cl_185)
	rax_232 = PHI(rax_595, rax_186)
	eax_233 = PHI(eax_596, eax_187)
	ah_234 = PHI(ah_599, ah_188)
	ax_235 = PHI(ax_600, ax_189)
	al_236 = PHI(al_601, al_190)
	rdx_237 = PHI(rdx_592, rdx_191)
	edx_238 = PHI(edx_573, edx_192)
	rdx_rax_239 = PHI(rdx_rax_597, rdx_rax_193)
	edx_eax_240 = PHI(edx_eax_598, edx_eax_194)
	dl_241 = PHI(dl_577, dl_195)
	SCZO_242 = PHI(SCZO_584, SCZO_196)
	rbx_243 = PHI(rbx_517, rbx_197)
	rbp_244 = PHI(rbp_583, rbp_108)
	rsi_245 = PHI(rsi_593, rsi_198)
	rdi_246 = PHI(rdi_594, rdi_199)
	rsp_247 = PHI(rsp_506, rsp_58)
	SZO_248 = cond(bLocB0 & 0x80)
	Z_249 = SZO_248 (alias)
	C_250 = false
	branch (bLocB0 & 0x80) == 0x00 l000000000040C2BA
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C249:
	SCZO_384 = cond(ebx_228 - 0xFFFFFFFF)
	Z_385 = SCZO_384 (alias)
	branch ebx_228 == 0xFFFFFFFF l000000000040C618
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C618:
	rdx_453 = qwLocA8_40
	edx_454 = (word32) rdx_453 (alias)
	rdx_rax_455 = SEQ(rdx_453, rax_232) (alias)
	edx_eax_456 = rdx_453 (alias)
	dl_457 = (byte) rdx_453 (alias)
	SCZO_458 = cond(rdx_453 - 0x0000000000000001)
	CZ_459 = SCZO_458 (alias)
	branch rdx_453 <=u 0x0000000000000001 l000000000040C7A9
// DataOut: fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C7A9:
	rbx_488 = 0x0000000000000000
	ebx_489 = (word32) rbx_488 (alias)
	SZO_490 = cond(ebx_489)
	C_491 = false
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C627:
	r14_460 = (uint64) dwLocAC_56
	r14d_461 = (word32) r14_460 (alias)
	rbx_462 = 0x0000000000000001
	ebx_463 = (word32) rbx_462 (alias)
	rax_464 = 0x0000000000000001
	eax_465 = (word32) rax_464 (alias)
	rdx_rax_466 = SEQ(rdx_453, rax_464) (alias)
	edx_eax_467 = rax_464 (alias)
	ah_468 = SLICE(rax_464, byte, 8) (alias)
	ax_469 = (word16) rax_464 (alias)
	al_470 = (byte) rax_464 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14d r15 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C640:
	ebx_471 = PHI(ebx_463, ebx_485)
	Z_472 = PHI(Z_385, Z_487)
	rax_473 = PHI(rax_464, rax_475)
	rbx_474 = PHI(rbx_462, rbx_484)
	rax_475 = rax_473 *s r14_460
	eax_476 = (word32) rax_475 (alias)
	rdx_rax_477 = SEQ(rdx_453, rax_475) (alias)
	edx_eax_478 = rax_475 (alias)
	ah_479 = SLICE(rax_475, byte, 8) (alias)
	ax_480 = (word16) rax_475 (alias)
	al_481 = (byte) rax_475 (alias)
	SCZO_482 = cond(rdx_453 - rax_475)
	CZ_483 = SCZO_482 (alias)
	branch rdx_453 <=u rax_475 l000000000040C252
// DataOut: ebx fs r11 r11d r12 r13 r14 r14d r15 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C64D:
	rbx_484 = (uint64) (ebx_471 + 0x00000001)
	ebx_485 = (word32) rbx_484 (alias)
	SCZO_486 = cond(ebx_485 - 0x00000008)
	Z_487 = SCZO_486 (alias)
	branch ebx_485 != 0x00000008 l000000000040C640
// DataOut: ebx fs r11 r11d r12 r13 r14 r14d r15 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C655:
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C252:
	r14_386 = PHI(r14_225, r14_460, r14_460, r14_225)
	r14d_387 = PHI(r14d_226, r14d_461, r14d_461, r14d_226)
	CZ_388 = PHI(CZ_227, CZ_483, CZ_483, CZ_459)
	ebx_389 = PHI(ebx_228, ebx_471, ebx_485, ebx_489)
	rdx_390 = PHI(rdx_237, rdx_453, rdx_453, rdx_453)
	edx_391 = PHI(edx_238, edx_454, edx_454, edx_454)
	dl_392 = PHI(dl_241, dl_457, dl_457, dl_457)
	SCZO_393 = PHI(SCZO_384, SCZO_482, SCZO_486, SCZO_458)
	rbx_394 = PHI(rbx_243, rbx_474, rbx_484, rbx_488)
	rax_395 = (uint64) dwLocB0_38
	eax_396 = (word32) rax_395 (alias)
	rcx_397 = (uint64) ebx_389
	ecx_398 = (word32) rcx_397 (alias)
	rax_399 = (uint64) (eax_396 & 0x00000100)
	eax_400 = (word32) rax_399 (alias)
	rdx_rax_401 = SEQ(rdx_390, rax_399) (alias)
	edx_eax_402 = rax_399 (alias)
	ah_403 = SLICE(rax_399, byte, 8) (alias)
	ax_404 = (word16) rax_399 (alias)
	al_405 = (byte) rax_399 (alias)
	rcx_406 = (uint64) (ecx_398 | eax_400)
	ecx_407 = (word32) rcx_406 (alias)
	SZO_408 = cond(ecx_407)
	Z_409 = SZO_408 (alias)
	C_410 = false
	branch ecx_407 == 0x00000000 l000000000040C2BA
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(0) Local -00B8(64)

l000000000040C261:
	SZO_411 = cond(bLocB0 & 0x40)
	Z_412 = SZO_411 (alias)
	C_413 = false
	branch (bLocB0 & 0x40) != 0x00 l000000000040C3E8
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B8(64)

l000000000040C3E8:
	rcx_449 = qwLocA0_35
	rsi_450 = rcx_449 + 0x0000000000000289
	Mem451[rcx_449 + 0x0000000000000288:byte] = 0x20
	qwLocB8_452 = rsi_450
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C26C:
	rcx_414 = PHI(rcx_406, rcx_449)
	qwLocB8_415 = PHI(qwLocB8_147, qwLocB8_452)
	rsi_416 = PHI(rsi_245, rsi_450)
	SZO_417 = cond(ebx_389 & ebx_389)
	Z_418 = SZO_417 (alias)
	C_419 = false
	branch (ebx_389 & ebx_389) == 0x00000000 l000000000040C7EB
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C274:
	rcx_420 = qwLocB8_415
	rdx_421 = rcx_420 + 0x0000000000000001
	edx_422 = (word32) rdx_421 (alias)
	rdx_rax_423 = SEQ(rdx_421, rax_399) (alias)
	edx_eax_424 = rdx_421 (alias)
	dl_425 = (byte) rdx_421 (alias)
	rcx_426 = (uint64) dwLoc78_48
	ecx_427 = (word32) rcx_426 (alias)
	SZO_428 = cond(ecx_427 & ecx_427)
	Z_429 = SZO_428 (alias)
	C_430 = false
	branch (ecx_427 & ecx_427) == 0x00000000 l000000000040C3D0
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3D0:
	SCZO_444 = cond(ebx_389 - 0x00000001)
	Z_445 = SCZO_444 (alias)
	rcx_446 = 0x000000000000006B
	ecx_447 = (word32) rcx_446 (alias)
	cl_448 = (byte) rcx_446 (alias)
	branch ebx_389 != 0x00000001 l000000000040C289
// DataOut: cl eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3DE:
// DataOut: cl eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x000000000000006B r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x6B edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:0x0000006B dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C289:
	Z_438 = PHI(Z_429, Z_445)
	SCZO_439 = PHI(SCZO_393, SCZO_444)
	rcx_440 = (int64) ebx_389
	ecx_441 = (word32) Mem0[rcx_440 + 0x0000000000415F78:byte]
	rcx_442 = DPB(rcx_440, ecx_441, 0) (alias)
	cl_443 = (byte) ecx_441 (alias)
// DataOut: cl eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C293:
	ecx_431 = PHI(ecx_441, ecx_447)
	rcx_432 = PHI(rcx_442, rcx_446)
	cl_433 = PHI(cl_443, cl_448)
	Z_434 = PHI(Z_438, Z_445)
	SCZO_435 = PHI(SCZO_439, SCZO_444)
	rdi_436 = qwLocB8_415
	Mem437[rdi_436:byte] = cl_433
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> ecx:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C29A:
	r14_329 = PHI(r14_386, r14_251)
	r14d_330 = PHI(r14d_387, r14d_252)
	CZ_331 = PHI(CZ_388, CZ_253)
	ebx_332 = PHI(ebx_389, ebx_254)
	ecx_333 = PHI(ecx_431, ecx_255)
	rcx_334 = PHI(rcx_432, rcx_256)
	cl_335 = PHI(cl_433, cl_257)
	qwLocB8_336 = PHI(qwLocB8_415, qwLocB8_258)
	rax_337 = PHI(rax_399, rax_262)
	eax_338 = PHI(eax_400, eax_263)
	ah_339 = PHI(ah_403, ah_264)
	ax_340 = PHI(ax_404, ax_265)
	al_341 = PHI(al_405, al_266)
	rdx_342 = PHI(rdx_421, rdx_271)
	edx_343 = PHI(edx_422, edx_272)
	rdx_rax_344 = PHI(rdx_rax_423, rdx_rax_273)
	edx_eax_345 = PHI(edx_eax_424, edx_eax_274)
	dl_346 = PHI(dl_425, dl_275)
	SCZO_347 = PHI(SCZO_435, SCZO_267)
	rbx_348 = PHI(rbx_394, rbx_268)
	rsi_349 = PHI(rsi_416, rsi_269)
	rdi_350 = PHI(rdi_436, rdi_270)
	SZO_351 = cond(eax_338 & eax_338)
	Z_352 = SZO_351 (alias)
	C_353 = false
	branch (eax_338 & eax_338) == 0x00000000 l000000000040C7F5
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C7F5:
	qwLocB8_383 = rdx_342
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2A2:
	rax_354 = (uint64) dwLoc78_48
	eax_355 = (word32) rax_354 (alias)
	rdx_rax_356 = SEQ(rdx_342, rax_354) (alias)
	edx_eax_357 = rax_354 (alias)
	SZO_358 = cond(eax_355 & eax_355)
	Z_359 = SZO_358 (alias)
	C_360 = false
	branch (eax_355 & eax_355) != 0x00000000 l000000000040C3B8
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3B8:
	SZO_373 = cond(ebx_332 & ebx_332)
	Z_374 = SZO_373 (alias)
	C_375 = false
	branch (ebx_332 & ebx_332) == 0x00000000 l000000000040C2AE
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3C0:
	Mem376[rdx_342:byte] = 0x69
	rdx_377 = rdx_342 + 0x0000000000000001
	edx_378 = (word32) rdx_377 (alias)
	rdx_rax_379 = SEQ(rdx_377, rax_354) (alias)
	edx_eax_380 = rdx_377 (alias)
	dl_381 = (byte) rdx_377 (alias)
	SCZO_382 = cond(rdx_377)
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2AE:
	SZO_361 = PHI(SZO_358, SZO_373, SZO_373)
	Z_362 = PHI(Z_359, Z_374, Z_374)
	C_363 = PHI(C_360, C_375, C_375)
	rdx_364 = PHI(rdx_342, rdx_342, rdx_377)
	edx_365 = PHI(edx_343, edx_343, edx_378)
	rdx_rax_366 = PHI(rdx_rax_356, rdx_rax_356, rdx_rax_379)
	edx_eax_367 = PHI(edx_eax_357, edx_eax_357, edx_eax_380)
	dl_368 = PHI(dl_346, dl_346, dl_381)
	SCZO_369 = PHI(SCZO_347, SCZO_347, SCZO_382)
	rax_370 = rdx_364 + 0x0000000000000001
	Mem371[rdx_364:byte] = 0x42
	qwLocB8_372 = rax_370
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2BA:
	r14_276 = PHI(r14_225, r14_386, r14_329, r14_329)
	r14d_277 = PHI(r14d_226, r14d_387, r14d_330, r14d_330)
	CZ_278 = PHI(CZ_227, CZ_388, CZ_331, CZ_331)
	ebx_279 = PHI(ebx_228, ebx_389, ebx_332, ebx_332)
	ecx_280 = PHI(ecx_229, ecx_407, ecx_333, ecx_333)
	rcx_281 = PHI(rcx_230, rcx_406, rcx_334, rcx_334)
	cl_282 = PHI(cl_231, cl_231, cl_335, cl_335)
	qwLocB8_283 = PHI(qwLocB8_147, qwLocB8_147, qwLocB8_372, qwLocB8_383)
	rdx_284 = PHI(rdx_237, rdx_390, rdx_364, rdx_342)
	edx_285 = PHI(edx_238, edx_391, edx_365, edx_343)
	dl_286 = PHI(dl_241, dl_392, dl_368, dl_346)
	SCZO_287 = PHI(SCZO_242, SCZO_393, SCZO_369, SCZO_347)
	rbx_288 = PHI(rbx_243, rbx_394, rbx_348, rbx_348)
	rsi_289 = PHI(rsi_245, rsi_245, rsi_349, rsi_349)
	rax_290 = qwLocB8_283
	rdi_291 = qwLoc28_44
	rdi_292 = rdi_291 ^ Mem0[fs_216:0x00000028:word64]
	SZO_293 = cond(rdi_292)
	Z_294 = SZO_293 (alias)
	C_295 = false
	Mem296[rax_290:byte] = 0x00
	rax_297 = r12_223
	eax_298 = (word32) rax_297 (alias)
	rdx_rax_299 = SEQ(rdx_284, rax_297) (alias)
	edx_eax_300 = rax_297 (alias)
	ah_301 = SLICE(rax_297, byte, 8) (alias)
	ax_302 = (word16) rax_297 (alias)
	al_303 = (byte) rax_297 (alias)
	branch rdi_292 != 0x0000000000000000 l000000000040C7E6
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7E6:
	__stack_chk_fail()
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7EB:
	r14_251 = PHI(r14_386, r14_276)
	r14d_252 = PHI(r14d_387, r14d_277)
	CZ_253 = PHI(CZ_388, CZ_278)
	ebx_254 = PHI(ebx_389, ebx_279)
	ecx_255 = PHI(ecx_407, ecx_280)
	rcx_256 = PHI(rcx_414, rcx_281)
	cl_257 = PHI(cl_231, cl_282)
	qwLocB8_258 = PHI(qwLocB8_415, qwLocB8_283)
	SZO_259 = PHI(SZO_417, SZO_293)
	Z_260 = PHI(Z_418, Z_294)
	C_261 = PHI(C_419, C_295)
	rax_262 = PHI(rax_399, rax_297)
	eax_263 = PHI(eax_400, eax_298)
	ah_264 = PHI(ah_403, ah_301)
	ax_265 = PHI(ax_404, ax_302)
	al_266 = PHI(al_405, al_303)
	SCZO_267 = PHI(SCZO_393, SCZO_287)
	rbx_268 = PHI(rbx_394, rbx_288)
	rsi_269 = PHI(rsi_416, rsi_289)
	rdi_270 = PHI(rdi_246, rdi_292)
	rdx_271 = qwLocB8_258
	edx_272 = (word32) rdx_271 (alias)
	rdx_rax_273 = SEQ(rdx_271, rax_262) (alias)
	edx_eax_274 = rdx_271 (alias)
	dl_275 = (byte) rdx_271 (alias)
// DataOut: eax ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2DC:
	rsp_304 = fp - 0x0000000000000018
	SCZO_305 = cond(fp - 0x0000000000000018)
	rbx_307 = qwLoc18
	rsp_308 = fp - 0x0000000000000010
	rbp_310 = qwLoc10
	rsp_311 = fp - 0x0000000000000008
	rsp_313 = qwLoc08
	rsp_314 = rsp_313 + 0x0000000000000008
	rbp_315 = Mem296[rsp_314:word64]
	rsp_316 = rsp_314 + 0x0000000000000008
	rsi_317 = Mem296[rsp_316:word64]
	rsp_318 = rsp_316 + 0x0000000000000008
	rdi_319 = Mem296[rsp_318:word64]
	rsp_320 = rsp_318 + 0x0000000000000008
	return rax_297
// DataOut: bpl fs r11 r11d r13 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040BD70_exit:
	use rsp_320 (=> rspOut)
	use rbp_315 (=> rbpOut)
	use r8_217 (=> r8Out)
	use r9_221 (=> r9Out)
	use r11_215 (=> r11Out)
	use r13_218 (=> r13Out)
	use r14d_277 (=> r14dOut)
	use r15_219 (=> r15Out)
// DataOut: bpl r11 r11d r13 r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 rax:<invalid> r14:<invalid> r12:<invalid> rbx:rbx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040C810(word64 rdx, word64 rdi, word64 r8, ptr64 & r9Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi rdx
// LiveOut: r13 r13b r14 r14b r15 r8 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040C810_entry:
	*r9Out = r9
	*r14Out = r14
	*r15Out = r15
// DataOut: fs r11 r14 r14b r15 r8 r9 rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C810:
	word64 rbp_102
	word64 rdx_140
	word64 r13_6
	*r13Out = rsi
	word64 r12_11 = rdx
	word64 rbx_112 = rdi
	branch rdi == 0x0000000000000000 l000000000040C910
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C910:
	word64 rax_236 = getenv(0x00000000004138E4)
	rbx_112 = rax_236
	branch rax_236 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:rdi -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C926:
	word64 rax_242 = getenv(0x0000000000415F24)
	rbx_112 = rax_242
	branch rax_242 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C93C:
	word64 rdx_256 = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	Mem260[rdx:word64] = rdx_256 + 512
	rbp_102 = 0x0000000000000000
	ebp = 0x00000000 (alias)
	rdx_140 = rdx_256 + 512
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:0x0000000000415F24 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C82C:
	branch Mem0[rbx_112:byte] == 0x27 l000000000040C8A0
// DataOut: fs r11 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8A0:
	rbx_112 = rbx_112 + 0x0000000000000001
// DataOut: fs r11 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C833:
	word64 rsp_124
	word64 rbp_125
	word64 r13_127
	word64 r14_128
	word64 r15_129
	word64 rax_130 = fn0000000000409E50(0x0000000000000004, 0x0000000000415F50, 0x0000000000415F60, rbx_112, out rsp_124, out rbp_125, out r12_11, out r13_127, out r14_128, out r15_129)
	byte al_133 = (byte) rax_130
	branch (word32) rax_130 < 0x00000000 l000000000040C8B0
// DataOut: al ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> bpl:0x04 rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8B0:
	word64 rsp_159
	word64 r9_162
	word64 r13_164
	word64 r14_165
	word64 r15_166
	branch fn0000000000411360(0x00000000, rsp_124 + 0x0000000000000008, rbx_112, r8, out rsp_159, out rbp_102, out r8, out r9_162, out r12_11, out r13_164, out r14_165, out r15_166) != 0x00000000 l000000000040C968
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> ecx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C968:
	Mem229[rbp_102:word32] = 0x00000000
	rdx_140 = Mem229[r12_11:word64]
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> eax:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8D0:
	branch (byte) (uint64) ((word32) Mem0[rbx_112:byte] - 0x00000030) <=u 0x09 l000000000040C907
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> eax:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8DA:
	word64 rdx_190 = Mem0[rsp_159 + 0x0000000000000008:word64]
	branch rbx_112 != rdx_190 l000000000040C8F9
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F9:
	rbx_112 = rbx_112 + 0x0000000000000001
	branch (byte) (uint64) ((word32) Mem0[rbx_112:byte] - 0x00000030) >u 0x09 l000000000040C8F0
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F0:
	branch rbx_112 == rdx_190 l000000000040C980
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8E4:
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C980:
	branch Mem0[rdx_190 - 0x0000000000000001:byte] == 0x42 l000000000040C998
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C998:
	rbp_102 = (uint64) (ebp | 0x00000180)
	ebp = (word32) rbp_102 (alias)
	branch Mem0[rdx_190 - 0x0000000000000002:byte] != 0x69 l000000000040C907
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C9A8:
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C986:
	ebp = DPB(ebp, 0x84, 0) (alias)
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C98A:
	rbp_102 = (uint64) (ebp | 0x00000020)
	ebp = (word32) rbp_102 (alias)
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C907:
	rdx_140 = Mem0[r12_11:word64]
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C84E:
	Mem139[r12_11:word64] = 0x0000000000000001
	rbp_102 = (uint64) (ebp | Mem139[DPB(rax_130, (int16) al_133, 0) * 0x0000000000000004 + 0x00415F50:word32])
	rdx_140 = 0x0000000000000001
	ebp = (word32) rbp_102 (alias)
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> ecx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C864:
	Mem104[rbp_102:word32] = ebp
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:(int16) al rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86A:
	branch rdx_140 != 0x0000000000000000 l000000000040C894
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86F:
	Mem79[r12_11:word64] = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	r8 = r8 + 512
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C894:
	return r8
// DataOut: fs r11 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040C810_exit:
// DataOut: r13 r13b r14 r14b r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040C9B0(word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rsi
// LiveOut: ebp esp r12 r12b r12d rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040C9B0_entry:
	*r12Out = r12
// DataOut: edi fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C9B0:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_16 = Mem0[0x000000000061B1F8:word64]
	branch rbx_16 != 0x0000000000000000 l000000000040C9D1
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C9D1:
	branch Mem0[rbx_16:word32] != ebp_10 l000000000040C9C8
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C8:
	rbx_16 = Mem0[rbx_16 + 0x0000000000000008:word64]
	branch rbx_16 == 0x0000000000000000 l000000000040C9F0
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C2:
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9F0:
	word64 rax_52 = getpwuid((uint64) ebp_10)
	word64 rdi_56 = 0x0000000000000011
	branch rax_52 == 0x0000000000000000 l000000000040CA16
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA07:
	r12 = Mem0[r8:word64]
	*r12Out = r12
	rdi_56 = DPB(rax_52, strlen(r12), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA16:
	word64 rax_66 = fn0000000000410C40(rsi, rdi_56, out rsp_11)
	Mem68[rax_66:word32] = ebp_10
	strcpy(rax_66 + 0x0000000000000010, r12)
	word64 rax_72 = Mem68[0x000000000061B1F8:word64]
	Mem73[0x000000000061B1F8:word64] = rax_66
	Mem74[rax_66 + 0x0000000000000008:word64] = rax_72
	rbx_16 = rax_66
// DataOut: fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9D5:
	word64 rsp_34 = rsp_11 + 0x0000000000000008
	word64 rax_28 = 0x0000000000000000
	word64 rdx_32 = rbx_16 + 0x0000000000000010
	word64 rbp_35
	*rbpOut = Mem0[rsp_34:word64]
	word64 rsp_39
	*rspOut = Mem0[rsp_34 + 0x0000000000000008:word64] + 0x0000000000000008
	branch Mem0[rbx_16 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
// DataOut: ebp esp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:(uint64) edi rbx:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E3_1:
	rax_28 = rdx_32
// DataOut: ebp esp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E7:
	return rax_28
// DataOut: ebp esp fs r11 r11d r12 r12b r12d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040C9B0_exit:
// DataOut: ebp esp r12 r12b r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CB40(word64 rax, word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rax rsi
// LiveOut: r12 r12d rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040CB40_entry:
	*r12Out = r12
// DataOut: edi fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB40:
	word64 rbx_102
	word64 rbp_9 = (uint64) edi
	word32 ebp_10 = (word32) rbp_9
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_16 = Mem0[0x000000000061B1E8:word64]
	rbx_102 = rbx_16
	branch rbx_16 != 0x0000000000000000 l000000000040CB61
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CB61:
	branch Mem0[rbx_102:word32] != ebp_10 l000000000040CB58
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB58:
	rbx_102 = Mem0[rbx_102 + 0x0000000000000008:word64]
	branch rbx_102 == 0x0000000000000000 l000000000040CB80
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB52:
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB80:
	word64 rsp_58
	word64 rbp_59
	word32 ebp_60
	word32 edi_61
	word64 rbx_62
	byte SZO_63
	byte C_64
	byte Z_65
	byte SCZO_66
	word32 eax_67
	word64 rax_68
	word64 rdx_69
	word64 rdi_70
	word32 esp_71
	word64 r8_73
	word64 rsi_74
	word64 r12_72
	call getgrgid (retsize: 8; depth: 8)
		uses: C_19,dwLoc04_4,dwLoc08_7,dwLoc0C_14,eax,ebp_10,edi,esp_12,r12,r8,rax,rbp_9,rbx_16,rdi_49,rdx,rsi,rsp_50,SCZO,SZO_17,Z_18
		defs: C_64,eax_67,ebp_60,edi_61,esp_71,r12_72,r8_73,rax_68,rbp_59,rbx_62,rdi_70,rdx_69,rsi_74,rsp_58,SCZO_66,SZO_63,Z_65
	word64 rdi_78 = 0x0000000000000011
	branch rax_68 == 0x0000000000000000 l000000000040CBA6
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB97:
	r12_72 = Mem0[r8_73:word64]
	*r12Out = r12_72
	rdi_78 = DPB(rax_68, strlen(r12_72), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CBA6:
	word64 rax_85 = fn0000000000410C40(rsi_74, rdi_78, out rsp_11)
	Mem87[rax_85:word32] = ebp_60
	strcpy(rax_85 + 0x0000000000000010, r12_72)
	word64 rax_91 = Mem87[0x000000000061B1E8:word64]
	Mem92[0x000000000061B1E8:word64] = rax_85
	Mem93[rax_85 + 0x0000000000000008:word64] = rax_91
	rbx_102 = rax_85
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB65:
	word64 rsp_35 = rsp_11 + 0x0000000000000008
	word64 rax_29 = 0x0000000000000000
	word64 rdx_33 = rbx_102 + 0x0000000000000010
	word64 rbp_36
	*rbpOut = Mem0[rsp_35:word64]
	word64 rsp_40
	*rspOut = Mem0[rsp_35 + 0x0000000000000008:word64] + 0x0000000000000008
	branch Mem0[rbx_102 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB73_1:
	rax_29 = rdx_33
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB77:
	return rax_29
// DataOut: fs r11 r11d r12 r12d r13d r14 r14d r15 r15d r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040CB40_exit:
// DataOut: r12 r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CCD0(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CCD0_entry:
// DataOut: dil fs r11 r11d r12 r13 r15 r15b rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CCD0:
	Mem8[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_26 = rsi + 0x0000000000000014
	word64 r14_9
	*r14Out = 0x0000000066666667
	branch rdi < 0x0000000000000000 l000000000040CD28
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD28:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CD30:
	word64 rdx_68 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem79[rcx_26:byte] = (byte) (uint64) (rdx_68 * 0x0000000000000005 * 0x0000000000000002 + 0x0000000000000030 - edi)
	rdi = rdx_68
	edi = (word32) rdx_68 (alias)
	branch rdx_68 != 0x0000000000000000 l000000000040CD30
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi rsi:0x0000000000000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CD5B:
	Mem83[rcx_26 - 0x0000000000000001:byte] = 0x2D
	return rcx_26 - 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi rsi:0x0000000000000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CCE7:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CCF0:
	word64 rdx_35 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem45[rcx_26:byte] = (byte) (uint64) ((word32) (rdi - (rdx_35 * 0x0000000000000005) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_35
	branch rdx_35 != 0x0000000000000000 l000000000040CCF0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CD20:
	return rcx_26
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CCD0_exit:
// DataOut: r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> r8:rsi rsi:0x0000000000000030 eax:<invalid>



word64 fn000000000040CD70(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx r14 r14b r14d r14w rax rcx rdi rdx
// Preserved: rsp
fn000000000040CD70_entry:
// DataOut: dil fs r11 r11d r12 r12d r13 r13d r15 r15b r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD70:
	Mem4[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_10 = rsi + 0x0000000000000014
	word64 r14_5
	*r14Out = 0x00000000CCCCCCCD
// DataOut: dil fs r11 r11d r12 r12d r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD88:
	word64 rdx_rax_11 = rsi *u rdi
	rcx_10 = rcx_10 - 0x0000000000000001
	Mem23[rcx_10:byte] = (byte) (uint64) ((word32) (rdi - ((rdx_rax_11 >>u 0x0000000000000003) + (rdx_rax_11 >>u 0x0000000000000003) * 0x0000000000000004) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_rax_11 >>u 0x0000000000000003
	branch rdx_rax_11 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040CD88
// DataOut: dil fs r11 r11d r12 r12d r13 r13d r14 r14d r15 r15b r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CDAE:
	return rcx_10
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14d r15 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CD70_exit:
// DataOut: r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>



word64 fn000000000040CDC0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12dOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8d r9b r9d rcx rdi rdx rsi
// LiveOut: r12d r13 r14 r15 rbp rsi rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040CDC0_entry:
// DataOut: ebx fs r11 r15 r8 r8d r9 r9b r9d rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CDC0:
	word64 r15_399
	word64 qwLoc40_112
	word64 rbp_129
	word64 rax_376
	word64 rcx_122
	word32 eax_298
	word32 ecx_292
	word64 r12_123
	word64 rbx_24 = (uint64) r9d
	word32 eax_33 = strlen(rdi)
	word64 rax_35 = DPB(rax, eax_33, 0)
	word64 r13_11 = rsi
	*r13Out = r13_11
	word64 r12_16 = rcx
	word32 ebx_127 = (word32) rbx_24
	byte bl_128 = (byte) rbx_24
	word64 qwLoc48_111 = rdi
	word64 r14_115 = rax_35
	*r14Out = r14_115
	word64 rbp_42 = rax_35
	branch (bl_128 & 0x02) == 0x00 l000000000040CF60
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CF60:
	word64 rsp_553
	word64 rdi_554
	word64 rsi_555
	word64 rcx_559
	word64 rbx_560
	word32 r9d_562
	byte SCZO_563
	word64 rdx_564
	word32 r8d_565
	word32 eax_566
	byte SZO_568
	byte C_569
	word64 rax_571
	byte Z_572
	word64 r15_573
	word32 ebp_574
	byte CZ_575
	word32 ecx_576
	word32 r12d_577
	word32 edx_578
	word32 edi_579
	word32 r15d_580
	word16 ax_581
	byte al_582
	call __ctype_get_mb_cur_max (retsize: 8; depth: 88)
		uses: al_37,ax_36,bl_26,bLoc21,C_40,CZ,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_33,ebp_43,ebx_25,ecx,edi,edx,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_30,qwLoc40,qwLoc48_28,r12_16,r12d_17,r13_11,r14_41,r15,r15d,r8d,r9d,rax_35,rbp_42,rbx_24,rcx,rdi,rdx,rsi,rsp_27,SCZO,SZO_38,Z_39
		defs: al_582,ax_581,bl_567,C_569,CZ_575,eax_566,ebp_574,ebx_561,ecx_576,edi_579,edx_578,r12_558,r12d_577,r13_557,r14_570,r15_573,r15d_580,r8d_565,r9d_562,rax_571,rbp_556,rbx_560,rcx_559,rdi_554,rdx_564,rsi_555,rsp_553,SCZO_563,SZO_568,Z_572
	branch rax_571 <=u 0x0000000000000001 l000000000040CDFA
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CF6F:
	word64 rsp_591
	word64 rdi_592
	word64 rsi_593
	word64 rbp_594
	word64 rcx_597
	word64 rbx_598
	word32 r9d_600
	byte SCZO_601
	word64 rdx_602
	word32 r8d_603
	word32 eax_604
	byte SZO_606
	byte C_607
	word64 rax_609
	byte Z_610
	word64 r15_611
	word32 ebp_612
	byte CZ_613
	word32 ecx_614
	word32 r12d_615
	word32 edx_616
	word32 edi_617
	word32 r15d_618
	word16 ax_619
	byte al_620
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_582,ax_581,bl_567,bLoc21,C_590,CZ_584,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_566,ebp_574,ebx_561,ecx_576,edi_588,edx_578,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_30,qwLoc40,qwLoc48_28,r12_558,r12d_577,r13_557,r14_570,r15_573,r15d_580,r8d_565,r9d_562,rax_571,rbp_556,rbx_560,rcx_559,rdi_587,rdx_586,rsi_585,rsp_553,SCZO_583,SZO_589,Z_572
		defs: al_620,ax_619,bl_605,C_607,CZ_613,eax_604,ebp_612,ebx_599,ecx_614,edi_617,edx_616,r12_596,r12d_615,r13_595,r14_608,r15_611,r15d_618,r8d_603,r9d_600,rax_609,rbp_594,rbx_598,rcx_597,rdi_592,rdx_602,rsi_593,rsp_591,SCZO_601,SZO_606,Z_610
	branch rax_609 != 0xFFFFFFFFFFFFFFFF l000000000040CFA8
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CFA8:
	word64 r15_650 = (rax_609 + 0x0000000000000001) * 0x0000000000000004
	*r15Out = r15_650
	word64 rax_654 = malloc(r15_650)
	qwLoc40_112 = rax_654
	branch rax_654 == 0x0000000000000000 l000000000040D160
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D160:
	branch (bl_128 & 0x01) == 0x00 l000000000040CF8C
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D169:
	*r15Out = r14_115
	rbp_129 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CFCF:
	word64 rsp_665
	word64 rdi_666
	word64 rsi_667
	word64 rcx_671
	word64 rbx_672
	word32 r9d_674
	byte SCZO_675
	word64 rdx_676
	word32 r8d_677
	word32 eax_678
	byte SZO_680
	byte C_681
	word64 rax_683
	byte Z_684
	word64 r15_685
	word32 ebp_686
	byte CZ_687
	word32 ecx_688
	word32 r12d_689
	word32 edx_690
	word32 edi_691
	word32 r15d_692
	word16 ax_693
	byte al_694
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_657,ax_656,bl_605,bLoc21,C_660,CZ_613,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_655,ebp_612,ebx_599,ecx_614,edi_617,edx_616,qwLoc08,qwLoc10,qwLoc18,qwLoc30_652,qwLoc38_30,qwLoc40_661,qwLoc48_28,r12_596,r12d_615,r13_595,r14_608,r15_650,r15d_651,r8d_603,r9d_600,rax_654,rbp_594,rbx_598,rcx_597,rdi_664,rdx_662,rsi_663,rsp_591,SCZO_621,SZO_658,Z_659
		defs: al_694,ax_693,bl_679,C_681,CZ_687,eax_678,ebp_686,ebx_673,ecx_688,edi_691,edx_690,r12_670,r12d_689,r13_669,r14_682,r15_685,r15d_692,r8d_677,r9d_674,rax_683,rbp_668,rbx_672,rcx_671,rdi_666,rdx_676,rsi_667,rsp_665,SCZO_675,SZO_680,Z_684
	branch rax_683 == 0x0000000000000000 l000000000040CE03
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CFEC:
	word64 rsi_731
	word64 qwLoc30_711
	Mem702[rax_654 - 0x0000000000000004 + r15_685:word32] = 0x00000000
	word64 rdi_703 = (uint64) Mem702[rax_654:word32]
	word32 edi_704 = (word32) rdi_703
	branch edi_704 == 0x00000000 l000000000040D106
// DataOut: bl eax ebx fs r11 r12 r13 r14 r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D106:
	*r15Out = (int64) wcswidth(rax_654, rax_609 + 0x0000000000000001)
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D004:
	byte bLoc21_866 = 0x00
// DataOut: bl eax ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D010:
	word64 rsp_868
	word64 rdi_869
	word64 rsi_870
	word64 rcx_874
	word64 rbx_875
	word32 r9d_877
	byte SCZO_878
	word64 rdx_879
	word32 r8d_880
	word32 eax_881
	byte SZO_883
	byte C_884
	word64 rax_886
	byte Z_887
	word64 r15_888
	word32 ebp_889
	byte CZ_890
	word32 ecx_891
	word32 r12d_892
	word32 edx_893
	word32 edi_894
	word32 r15d_895
	word16 ax_896
	byte al_897
	call iswprint (retsize: 8; depth: 88)
		uses: al_701,ax_700,bl_679,bLoc21_867,C_707,CZ_687,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_699,ebp_686,ebx_673,ecx_688,edi_704,edx_690,qwLoc08,qwLoc10,qwLoc18,qwLoc30_652,qwLoc38_30,qwLoc40_661,qwLoc48_28,r12_670,r12d_689,r13_669,r14_682,r15_864,r15d_865,r8d_677,r9d_674,rax_698,rbp_668,rbx_672,rcx_671,rdi_703,rdx_676,rsi_667,rsp_665,SCZO_675,SZO_705,Z_706
		defs: al_897,ax_896,bl_882,C_884,CZ_890,eax_881,ebp_889,ebx_876,ecx_891,edi_894,edx_893,r12_873,r12d_892,r13_872,r14_885,r15_888,r15d_895,r8d_880,r9d_877,rax_886,rbp_871,rbx_875,rcx_874,rdi_869,rdx_879,rsi_870,rsp_868,SCZO_878,SZO_883,Z_887
	branch eax_881 != 0x00000000 l000000000040D025
// DataOut: bl eax ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D019:
	Mem924[rdi_869:word32] = 0x0000FFFD
	bLoc21_866 = 0x01
// DataOut: bl eax ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D025:
	branch (word32) (uint64) Mem702[rdi_869:word32] != 0x00000000 l000000000040D010
// DataOut: bl eax ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D030:
	r15_399 = (int64) wcswidth(rax_654, rax_609 + 0x0000000000000001)
	*r15Out = r15_399
	branch bLoc21_866 == 0x00 l000000000040D118
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D118:
	rsi_731 = rax_609 + 0x0000000000000001
	rax_376 = Mem702[r12_16:word64]
	branch r15_399 <=u rax_376 l000000000040CF28
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF28:
	rbp_129 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D125:
	qwLoc30_711 = rbp_42 + 0x0000000000000001
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D04D:
	rsi_731 = rax_654
	qwLoc30_711 = DPB(rax_886, wcstombs(0x0000000000000000, rax_654, 0x0000000000000000), 0) + 0x0000000000000001
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D064:
	word64 rax_734 = malloc(qwLoc30_711)
	rbp_129 = rax_734
	branch rax_734 == 0x0000000000000000 l000000000040D138
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D138:
	branch (bl_128 & 0x01) != 0x00 l000000000040CE08
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D141:
	word32 r12d_826
	*r12dOut = 0xFFFFFFFF
// DataOut: fs r11 r12d r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040D07A:
	word64 rdi_746 = (uint64) Mem702[rax_654:word32]
	word64 rax_740 = Mem702[r12_16:word64]
	word64 rax_742 = rax_654
	branch (word32) rdi_746 == 0x00000000 l000000000040D173
// DataOut: bl ebx fs r11 r12 r13 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D173:
	*r15Out = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D092:
	*r15Out = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0BA:
	word32 eax_782 = wcwidth(rdi_746)
	byte al_785 = (byte) eax_782
	branch eax_782 != 0xFFFFFFFF l000000000040D0A0
// DataOut: al bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0A0:
	rax_742 = DPB(rax_742, (int16) al_785, 0) + r15_399
	branch rax_740 <u rax_742 l000000000040D0E0
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0C4:
	Mem802[rsi_731:word32] = 0x0000FFFD
	rax_742 = r15_399 + 0x0000000000000001
	branch rax_740 >=u rax_742 l000000000040D0AC
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0AC:
	rdi_746 = (uint64) Mem702[rsi_731:word32]
	*r15Out = rax_742
	branch (word32) rdi_746 == 0x00000000 l000000000040D0E0
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0DA:
// DataOut: bl ebx fs r11 r12 r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D0E0:
	Mem764[rax_654:word32] = 0x00000000
	qwLoc48_111 = rax_734
	*r14Out = DPB(rax_742, wcstombs(rax_734, rax_654, qwLoc30_711), 0)
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF83:
	branch (bl_128 & 0x01) != 0x00 l000000000040D14D
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040D14D:
	*r15Out = r14_115
	qwLoc40_112 = 0x0000000000000000
	rbp_129 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF8C:
	qwLoc40_112 = 0x0000000000000000
	rbp_129 = 0x0000000000000000
	word32 r12d_638
	*r12dOut = 0xFFFFFFFF
// DataOut: fs r11 r12d r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CDFA:
	qwLoc40_112 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE03:
	*r15Out = rbp_42
	rbp_129 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):rax + 0x0000000000000002 -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE08:
	rax_376 = Mem0[r12_16:word64]
	branch r15_399 <=u rax_376 l000000000040CF2A
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF2A:
	branch r15_399 >=u rax_376 l000000000040D180
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D180:
	rax_376 = r15_399
// DataOut: bl ebx ecx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF33:
	Mem431[r12_16:word64] = r15_399
	word64 rax_427 = rax_376 - r15_399
	rcx_122 = rax_427
	ecx_292 = (word32) rax_427 (alias)
	eax_298 = (word32) (uint64) r8d (alias)
	branch eax_298 != 0x00000000 l000000000040CE2A
// DataOut: bl eax ebx ecx fs r11 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE15:
	*r14Out = rax_376
// DataOut: bl ebx ecx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE1A:
	Mem385[r12_16:word64] = rax_376
	ecx_292 = 0x00000000
	rcx_122 = 0x0000000000000000
	eax_298 = (word32) (uint64) r8d (alias)
	branch eax_298 == 0x00000000 l000000000040CF4C
// DataOut: bl eax ebx ecx fs r11 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF4C:
	r12_123 = rcx_122
	rcx_122 = 0x0000000000000000
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE2A:
	r12_123 = 0x0000000000000000
	branch eax_298 == 0x00000001 l000000000040CE3E
// DataOut: bl ebx ecx fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE32:
	r12_123 = rcx_122 >>u 0x0000000000000001
	rcx_122 = (uint64) (ecx_292 & 0x00000001) + r12_123
// DataOut: bl ebx fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE3E:
	branch (bl_128 & 0x04) == 0x00 l000000000040CE47
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE43_1:
	rcx_122 = 0x0000000000000000
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE47:
	branch (word32) (uint64) (ebx_127 & 0x00000008) == 0x00000000 l000000000040CE4E
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE4A_1:
	r12_123 = 0x0000000000000000
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE4E:
	branch rdx == 0x0000000000000000 l000000000040CEF9
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(64) Local -0040(64) Local -0048(64)

l000000000040CE5A:
	word64 rdx_180 = rcx_122 - 0x0000000000000001
	word64 rbx_182 = r13_11 - 0x0000000000000001 + rdx
	branch rcx_122 == 0x0000000000000000 l000000000040CE97
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64) Local -0048(64)

l000000000040CE6D:
	branch r13_11 >=u rbx_182 l000000000040CE97
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64) Local -0048(64)

l000000000040CE72:
	word64 rax_256 = 0x0000000000000000
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64) Local -0048(64)

l000000000040CE89:
	Mem270[rbp_129 - 0x0000000000000001:byte] = 0x20
	r13_11 = r13_11 + 0x0000000000000001
	*r13Out = r13_11
	branch rdx_180 != rax_256 l000000000040CE80
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64) Local -0048(64)

l000000000040CE80:
	rax_256 = rax_256 + 0x0000000000000001
	branch r13_11 == rbx_182 l000000000040CE97
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64) Local -0048(64)

l000000000040CE97:
	Mem195[rbp_129:byte] = 0x00
	word64 rdx_196 = rbx_182 - r13_11
	branch rdx_196 <=u r14_115 l000000000040CEB6
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(64) Local -0040(64)

l000000000040CEB2_1:
	rdx_196 = r14_115
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0038(64) Local -0040(64)

l000000000040CEB6:
	word64 rax_204 = mempcpy(r13_11, qwLoc48_111, rdx_196)
	word64 rdx_211 = rax_204
	word64 rsi_213 = r12_123 - 0x0000000000000001
	branch r12_123 == 0x0000000000000000 l000000000040CEF6
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CECD:
	branch rbx_182 <=u rax_204 l000000000040CEF6
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CED2:
	word64 rax_230 = 0x0000000000000000
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CEE9:
	rdx_211 = rdx_211 + 0x0000000000000001
	Mem245[rdx_211 - 0x0000000000000001:byte] = 0x20
	branch rsi_213 != rax_230 l000000000040CEE0
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CEE0:
	rax_230 = rax_230 + 0x0000000000000001
	branch rdx_211 == rbx_182 l000000000040CEF6
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CEF6:
	Mem227[rdx_211:byte] = 0x00
// DataOut: fs r11 r12 r13 r14 r15 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CEF9:
	word32 r12d_174
	*r12dOut = (word32) (r12_123 + (rcx_122 + r14_115))
// DataOut: fs r11 r12d r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0040(64)

l000000000040CEFF:
	free(qwLoc40_112)
	free(rbp_129)
	word64 rbp_94
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_97
	*rsiOut = Mem0[qwLoc08 + 0x0000000000000010:word64]
	return qwLoc08 + 0x0000000000000020
// DataOut: ebx fs r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040CDC0_exit:
// DataOut: r12d r13 r14 r15 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r13:<invalid> r12:<invalid> rbx:rbx eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040D240(word32 edx, word64 rsi, word64 rdi, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi rsi
// LiveOut: eax ebp ebx esp r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D240_entry:
// DataOut: ebx edx fs r11 r11d r12 r12b r12d r14 r14b r14d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0034(64)

l000000000040D240:
	word64 rax_178
	word64 rsp_34
	word32 edx_36
	word64 r15_37
	word64 rsi_38
	word64 rbx_41
	byte SCZO_42
	word64 rax_44
	word32 eax_45
	byte SZO_46
	byte C_47
	byte CZ_48
	word32 r15d_49
	word64 r14_50
	word32 r12d_51
	word64 r12_52
	word32 r14d_53
	byte al_54
	byte SO_55
	word64 rdx_56
	word64 rcx_57
	byte Z_58
	byte S_59
	word32 esi_60
	byte dh_61
	word32 ebx_62
	selector fs_160
	word64 r13_245
	word64 rbp_251
	word64 rdi_176
	call __ctype_get_mb_cur_max (retsize: 8; depth: 72)
		uses: al_31,C_33,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,eax_30,edx,fs,qwLoc28_28,r13_14,r15_6,r15d_7,rax_29,rbp_20,rbx,rdi,rsi,rsp_24,SZO_32
		defs: al_54,C_47,CZ_48,dh_61,eax_45,ebx_62,edx_36,esi_60,fs_43,r12_52,r12d_51,r13_40,r14_50,r14d_53,r15_37,r15d_49,rax_44,rbp_39,rbx_41,rcx_57,rdi_35,rdx_56,rsi_38,rsp_34,S_59,SCZO_42,SO_55,SZO_46,Z_58
	word64 rax_27 = Mem0[fs:0x00000028:word64]
	branch false l000000000040D370
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D370:
	branch rbp_251 >=u r13_245 l000000000040D406
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D379:
	word64 rsp_536
	word32 edx_538
	word64 r15_539
	word64 rsi_540
	word64 r13_542
	word64 rbx_543
	byte SCZO_544
	word64 rax_546
	word32 eax_547
	byte SZO_548
	byte C_549
	byte CZ_550
	word32 r15d_551
	word64 r14_552
	word32 r12d_553
	word64 r12_554
	word32 r14d_555
	byte al_556
	byte SO_557
	word64 rcx_559
	byte Z_560
	byte S_561
	word32 esi_562
	byte dh_563
	word32 ebx_564
	word64 rbp_541
	word64 rdx_558
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: al_54,C_535,CZ_64,dh_61,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,dwLoc34,eax_45,ebx_62,edx_36,esi_60,fs_43,qwLoc08,qwLoc10,qwLoc18,qwLoc28_28,qwLoc30,qwLoc48,r12_52,r12d_51,r13_40,r14_50,r14d_53,r15_37,r15d_49,rax_44,rbp_39,rbx_41,rcx_57,rdi_35,rdx_56,rsi_38,rsp_34,S_59,SCZO_534,SO_55,SZO_46,Z_58
		defs: al_556,C_549,CZ_550,dh_563,eax_547,ebx_564,edx_538,esi_562,fs_545,r12_554,r12d_553,r13_542,r14_552,r14d_555,r15_539,r15d_551,rax_546,rbp_541,rbx_543,rcx_559,rdi_537,rdx_558,rsi_540,rsp_536,S_561,SCZO_544,SO_557,SZO_548,Z_560
	word64 rcx_567 = Mem0[rax_546:word64]
	rax_178 = 0x0000000000000000
	word32 eax_569 = 0x00000000
	word32 esi_572 = (word32) (uint64) ((word32) (uint64) r15d_551 & 0x00000002)
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D398:
	rbp_541 = rbp_541 + 0x0000000000000001
	word32 edx_584 = (word32) Mem0[rcx_567 + DPB(rdx_558, (word32) Mem0[rbp_541 - 0x0000000000000001:byte], 0) * 0x0000000000000002:word16]
	rdx_558 = DPB(rdx_558, edx_584, 0) (alias)
	branch (SLICE(edx_584, byte, 8) & 0x40) != 0x00 l000000000040D3B2
// DataOut: eax edx esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3A9:
	branch esi_572 != 0x00000000 l000000000040D369
// DataOut: eax edx esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3AD:
	rdx_558 = (uint64) (edx_584 & 0x00000002)
	branch (word32) rdx_558 != 0x00000000 l000000000040D393
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3B2:
	branch eax_569 != 0x7FFFFFFF l000000000040D390
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D390:
	rax_178 = (uint64) (eax_569 + 0x00000001)
	eax_569 = (word32) rax_178 (alias)
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D393:
	branch rbp_541 == r13_542 l000000000040D3C5
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3B9:
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D277:
	branch rbp_251 >=u r13_245 l000000000040D406
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D406:
	rax_178 = 0x0000000000000000
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D280:
	word32 r12d_223 = 0x00000000
	word64 r15_224
	*r15Out = (uint64) (r15d_49 & 0x00000001)
	word64 r14_226
	*r14Out = (uint64) ((word32) (uint64) r15d_49 & 0x00000002)
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2AC:
	word32 eax_256 = (word32) Mem0[rbp_251:byte]
	byte al_258 = (byte) eax_256
	branch al_258 <= 0x3F l000000000040D290
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D290:
	branch al_258 >= 0x25 l000000000040D29B
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D294:
	branch (byte) (uint64) (eax_256 - 0x00000020) >u 0x03 l000000000040D2C3
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2B4:
	branch al_258 < 0x41 l000000000040D2C3
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2B8:
	branch al_258 <= 0x5F l000000000040D29B
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2BC:
	branch (byte) (uint64) (eax_256 - 0x00000061) <=u 0x1D l000000000040D29B
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2C3:
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2F4:
	word64 rsp_369
	word32 edx_371
	word64 r15_372
	word64 rsi_373
	word64 rbx_376
	byte SCZO_377
	word64 rax_379
	word32 eax_380
	byte SZO_381
	byte C_382
	byte CZ_383
	word32 r15d_384
	word64 r14_385
	word64 r12_387
	word32 r14d_388
	byte al_389
	byte SO_390
	word64 rdx_391
	word64 rcx_392
	byte Z_393
	byte S_394
	word32 esi_395
	byte dh_396
	word32 ebx_397
	call mbrtowc (retsize: 8; depth: 72)
		uses: al_358,C_243,CZ_354,dh_231,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,eax_357,ebx_250,edx_240,esi_253,fs_239,qwLoc08,qwLoc10,qwLoc18,qwLoc28_28,qwLoc30_360,qwLoc48,r12_244,r12d_237,r13_361,r14_246,r14d_236,r15_247,r15d_238,rax_356,rbp_362,rbx_249,rcx_364,rdi_365,rdx_366,rsi_368,rsp_255,S_232,SCZO_367,SO_353,SZO_355,Z_242
		defs: al_389,C_382,CZ_383,dh_396,eax_380,ebx_397,edx_371,esi_395,fs_378,r12_387,r12d_386,r13_375,r14_385,r14d_388,r15_372,r15d_384,rax_379,rbp_374,rbx_376,rcx_392,rdi_370,rdx_391,rsi_373,rsp_369,S_394,SCZO_377,SO_390,SZO_381,Z_393
	branch rax_379 == 0xFFFFFFFFFFFFFFFF l000000000040D360
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D360:
	branch r15d_384 == 0x00000000 l000000000040D29B
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D29B:
	word64 r12_350 = (uint64) (r12d_223 + 0x00000001)
	*r12Out = r12_350
	rbp_251 = rbp_251 + 0x0000000000000001
	r12d_223 = (word32) r12_350 (alias)
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D315:
	branch rax_379 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3E8:
	branch r15d_384 != 0x00000000 l000000000040D369
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3F1:
	word64 r12_511 = (uint64) (r12d_223 + 0x00000001)
	*r12Out = r12_511
	rbp_251 = r13_245
	r12d_223 = (word32) r12_511 (alias)
	branch r13_245 >u r13_245 l000000000040D2AC
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D31F:
	rdi_176 = (uint64) dwLoc34
	*rdiOut = rdi_176
	branch rax_379 != 0x0000000000000000 l000000000040D32F
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D32B_1:
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D32F:
	word32 eax_412 = wcwidth(rdi_176)
	branch eax_412 >= 0x00000000 l000000000040D2D0
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2D0:
	branch eax_412 > (word32) ((uint64) (0x7FFFFFFF - r12d_223)) l000000000040D3C0
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2E0:
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D338:
	branch r14d_388 != 0x00000000 l000000000040D369
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D369:
	rax_178 = 0x00000000FFFFFFFF
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D33D:
	word64 rsp_459
	word32 edx_461
	word64 r15_462
	word64 rsi_463
	word64 rbp_464
	word64 r13_465
	word64 rbx_466
	byte SCZO_467
	word64 rax_469
	word32 eax_470
	byte SZO_471
	byte C_472
	byte CZ_473
	word32 r15d_474
	word64 r14_475
	word32 r12d_476
	word64 r12_477
	word32 r14d_478
	byte al_479
	byte SO_480
	word64 rdx_481
	word64 rcx_482
	byte Z_483
	byte S_484
	word32 esi_485
	byte dh_486
	word32 ebx_487
	call iswcntrl (retsize: 8; depth: 72)
		uses: al_414,C_457,CZ_383,dh_396,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,dwLoc34,eax_412,ebx_411,edx_371,esi_395,fs_378,qwLoc08,qwLoc10,qwLoc18,qwLoc28_28,qwLoc30_360,qwLoc48,r12_387,r12d_386,r13_375,r14_385,r14d_388,r15_372,r15d_384,rax_413,rbp_374,rbx_410,rcx_392,rdi_458,rdx_391,rsi_373,rsp_369,S_416,SCZO_402,SO_390,SZO_455,Z_456
		defs: al_479,C_472,CZ_473,dh_486,eax_470,ebx_487,edx_461,esi_485,fs_468,r12_477,r12d_476,r13_465,r14_475,r14d_478,r15_462,r15d_474,rax_469,rbp_464,rbx_466,rcx_482,rdi_460,rdx_481,rsi_463,rsp_459,S_484,SCZO_467,SO_480,SZO_471,Z_483
	branch eax_470 != 0x00000000 l000000000040D2E3
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D34A:
	branch r12d_476 == 0x7FFFFFFF l000000000040D3C0
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3C0:
	rax_178 = 0x000000007FFFFFFF
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D353:
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2E3:
	word64 rsp_423
	word32 edx_425
	word64 r15_426
	word64 rsi_427
	word64 rbx_430
	byte SCZO_431
	word64 rax_433
	word32 eax_434
	byte SZO_435
	byte C_436
	byte CZ_437
	word32 r15d_438
	word64 r14_439
	word64 r12_441
	word32 r14d_442
	byte al_443
	byte SO_444
	word64 rdx_445
	word64 rcx_446
	byte Z_447
	byte S_448
	word32 esi_449
	byte dh_450
	word32 ebx_451
	call mbsinit (retsize: 8; depth: 72)
		uses: al_414,C_417,CZ_383,dh_396,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,dwLoc34,eax_412,ebx_411,edx_371,esi_395,fs_378,qwLoc08,qwLoc10,qwLoc18,qwLoc28_28,qwLoc30_360,qwLoc48,r12_387,r12d_386,r13_375,r14_385,r14d_388,r15_372,r15d_384,rax_413,rbp_421,rbx_418,rcx_392,rdi_420,rdx_391,rsi_373,rsp_369,S_416,SCZO_422,SO_390,SZO_415,Z_407
		defs: al_443,C_436,CZ_437,dh_450,eax_434,ebx_451,edx_425,esi_449,fs_432,r12_441,r12d_440,r13_429,r14_439,r14d_442,r15_426,r15d_438,rax_433,rbp_428,rbx_430,rcx_446,rdi_424,rdx_445,rsi_427,rsp_423,S_448,SCZO_431,SO_444,SZO_435,Z_447
	branch eax_434 != 0x00000000 l000000000040D2A3
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2A3:
	branch r13_245 <=u rbp_251 l000000000040D401
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D401:
	rax_178 = (uint64) r12d_223
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3C5:
	word64 rsi_91 = rax_27 ^ Mem0[fs_160:0x00000028:word64]
	word32 esi_92 = (word32) rsi_91
	branch rsi_91 != 0x0000000000000000 l000000000040D40A
// DataOut: eax esi fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040D40A:
	__stack_chk_fail()
// DataOut: esi fs r11 r11d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64)

l000000000040D40A_thunk_fn000000000040D420:
	word32 ebx_140
	word64 rsp_141
	word64 rbp_142
	word64 rsi_143
	word64 r12_144
	word64 r13_145
	word64 r14_146
	word64 r15_147
	return fn000000000040D420(esi_92, rdi_176, fs_160, qwLoc48, out ebx_140, out rsp_141, out rbp_142, out rsi_143, out r12_144, out r13_145, out r14_146, out r15_147)
// DataOut: eax ebp ebx esp fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D3D5:
	word32 ebx_124
	*ebxOut = (word32) qwLoc18
	word64 rbp_132
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_134
	*rsiOut = Mem0[qwLoc08 + 0x0000000000000010:word64]
	word64 rdi_137
	*rdiOut = Mem0[qwLoc08 + 0x0000000000000018:word64]
	word64 rsp_138
	*rspOut = qwLoc08 + 0x0000000000000020
	return rax_178
// DataOut: eax ebp ebx esp fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D240_exit:
// DataOut: eax ebp ebx esp r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040D420(word32 esi, word64 rdi, selector fs, word64 qwArg00, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rdi
// LiveOut: eax ebp ebx esp r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn000000000040D420_entry:
// DataOut: esi fs r11 r11d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D420:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = (uint64) esi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	qwLoc08 = DPB(qwLoc08, dwLoc08, 0) (alias)
	rbx = rdi
	rsp = fp - 0x0000000000000010
	eax = strlen(rdi)
	rax = DPB(rax, eax, 0) (alias)
	rsp = fp - 0x0000000000000008
	SCZO = cond(fp - 0x0000000000000008)
	rdi = rbx
	edi = (word32) rdi (alias)
	rdx = (uint64) ebp
	edx = (word32) rdx (alias)
	dh = SLICE(rdx, byte, 8) (alias)
	rbx = qwLoc08
	rsp = fp
	rbp = qwArg00
	rsp = fp + 0x0000000000000008
	rsi = rax
	esi = (word32) rsi (alias)
// DataOut: edx fs r11 r11d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D43B_thunk_fn000000000040D240:
	rax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsp, out rbp, out rsi, out rdi, out r12, out r13, out r14, out r15)
	eax = (word32) rax (alias)
	al = (byte) rax (alias)
	return rax
// DataOut: eax ebp ebx esp fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx eax:<invalid> rdi:rdi rdx:(uint64) ebp rsi:rax -8(fp):rbx -4(fp):rbp

fn000000000040D420_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax ebp ebx esp r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r15:<invalid> r13:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> -8(fp):rbx -4(fp):rbp



word32 fn000000000040D450(word32 eax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r11 r15 r8 rdi rsi
// LiveOut: eax r12 r13 r13d r14 r15 rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D450_entry:
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D450:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rbp = rcx
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000050
	SCZO = cond(rsi - 0x0000000000000002)
	Z = SCZO (alias)
	SZO = SCZO (alias)
	CZ = SCZO (alias)
	C = SCZO (alias)
	qwLoc50 = rsi
	qwLoc38 = rdx
	branch Test(UGT,CZ) l000000000040D490
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0050(64)

l000000000040D490:
	rsi = qwLoc50
	rdx = qwLoc38
	rax = rsi
	rax = rax >>u 0x0000000000000001
	r15 = rax
	qwLoc48 = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	qwLoc28 = rax
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out rsi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
// DataOut: fs r11 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D570:
	r12 = Mem0[r11:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[r8:word64] = r12
// DataOut: fs r11 r12 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out rsi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out rsi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[r11:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D53B:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D547:
	v25 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v25
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
// DataOut: eax fs r11 r13 r14 r15 r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
// DataOut: fs r11 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[r8:word64]
// DataOut: fs r11 r12 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	rdi = 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[r8:word64]
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B7:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = 0x00000000 + r15 * 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = memcpy(rdi, rsi, rdx)
	return eax
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5C3:
	v26 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v26
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
// DataOut: eax fs r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D660:
	r13 = Mem0[r15 + 0x0000000000000008:word64]
	r12 = Mem0[r15:word64]
	rsi = r13
	rdi = r12
	call ecx (retsize: 4; depth: 84)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D677:
	Mem0[r11:word64] = r13
	Mem0[r11 + 0x0000000000000008:word64] = r12
	rsp = fp - 0x0000000000000018
	SCZO = cond(fp - 0x0000000000000018)
	rbx = qwLoc18
	rsp = fp - 0x0000000000000010
	rbp = qwLoc10
	rsp = fp - 0x0000000000000008
	rsp = qwLoc08
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax fs r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D450_exit:
	use rsp (=> rspOut)
	use rsi (=> rsiOut)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r12 r13 r13d r14 r15 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040D690(word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r11 r15 r8 rdi rsi
// LiveOut: r12 r13 r13d r14 r15 rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040D690_entry:
// DataOut: edi fs r11 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D690:
	word32 eax_5 = (word32) (rdi + rsi * 0x0000000000000008)
// DataOut: eax fs r11 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D697_thunk_fn000000000040D450:
	word64 rsp_12
	word64 rsi_13
	word64 r12_14
	word64 r13_15
	word64 r14_16
	word64 r15_17
	fn000000000040D450(eax_5, rsi, rdi, r8, r11, r15, out rsp_12, out rsi_13, out r12_14, out r13_15, out r14_16, out r15_17)
	return rsi_13
// DataOut: fs r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:rdi + rsi * 0x0000000000000008 rcx:rdx rdx:rdi + rsi * 0x0000000000000008

fn000000000040D690_exit:
// DataOut: r12 r13 r13d r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> r15:<invalid> r14:<invalid>



word64 fn000000000040D6A0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D6A0_entry:
// DataOut: ebx fs r11 r15 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D6A0:
	word64 rbx_120 = rdi
	branch rdi == 0x0000000000000000 l000000000040D713
// DataOut: fs r11 r15 r9 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(32)

l000000000040D713:
	fwrite(0x0000000000415FA0, 0x0000000000000001, 0x0000000000000037, Mem0[0x000000000061A650:word64])
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l000000000040D6A9:
	word64 rax_11 = strrchr(rdi, 0x000000000000002F)
	branch rax_11 == 0x0000000000000000 l000000000040D703
// DataOut: fs r11 r15 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6B8:
	word64 rcx_50 = rax_11 + 0x0000000000000001 - rdi
	byte SCZO_51 = cond(rcx_50 - 0x0000000000000006)
	byte C_111 = SCZO_51
	byte Z_144 = SCZO_51
	byte CZ_100 = SCZO_51
	branch rcx_50 <= 0x0000000000000006 l000000000040D703
// DataOut: fs r11 r15 r9 rax rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:0x000000000000002F rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6C8:
	word64 rsi_146 = rax_11 - 0x0000000000000006
	word64 rdi_149 = 0x0000000000415FD8
	word64 rcx_151 = 0x0000000000000007
// DataOut: fs r11 r15 r9 rax rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:0x000000000000002F rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6D6:
	branch rcx_151 == 0x0000000000000000 l000000000040D6D8
// DataOut: fs r11 r15 r9 rax rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6D6_1:
	byte SCZO_141 = cond(Mem0[rsi_159:byte] - Mem0[rdi_160:byte])
	C_111 = SCZO_141 (alias)
	Z_144 = SCZO_141 (alias)
	CZ_100 = SCZO_141 (alias)
	rsi_146 = rsi_159 + 0x0000000000000001
	rdi_149 = rdi_160 + 0x0000000000000001
	rcx_151 = rcx_151 - 0x0000000000000001
	word64 rsi_159 = rsi_146
	word64 rdi_160 = rdi_149
	branch Mem0[rsi_159:byte] != Mem0[rdi_160:byte] l000000000040D6D6
// DataOut: fs r11 r15 r9 rax rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6D8:
	branch Z_144 l000000000040D703
// DataOut: fs r11 r15 r9 rax rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6DA:
	word64 rcx_105 = 0x0000000000000003
	word64 rsi_101 = rax_11 + 0x0000000000000001
	word64 rdi_103 = 0x0000000000415FE0
// DataOut: fs r11 r15 r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6E7:
	branch rcx_105 == 0x0000000000000000 l000000000040D6E9
// DataOut: fs r11 r15 r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6E7_2:
	byte SCZO_128 = cond(Mem0[rsi_161:byte] - Mem0[rdi_162:byte])
	C_111 = SCZO_128 (alias)
	CZ_100 = SCZO_128 (alias)
	rsi_101 = rsi_161 + 0x0000000000000001
	rdi_103 = rdi_162 + 0x0000000000000001
	rcx_105 = rcx_105 - 0x0000000000000001
	word64 rsi_161 = rsi_101
	word64 rdi_162 = rdi_103
	branch Mem0[rsi_161:byte] != Mem0[rdi_162:byte] l000000000040D6E7
// DataOut: fs r11 r15 r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6E9:
	rbx_120 = rax_11 + 0x0000000000000001
	branch CZ_100 != C_111 l000000000040D703
// DataOut: fs r11 r15 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D6F8:
	Mem126[0x000000000061A600:word64] = rax_11 + 0x0000000000000004
	rbx_120 = rax_11 + 0x0000000000000004
// DataOut: fs r11 r15 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l000000000040D703:
	Mem42[0x000000000061B200:word64] = rbx_120
	Mem43[0x000000000061A648:word64] = rbx_120
	return fp + 0x0000000000000004
// DataOut: ebx fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx

fn000000000040D6A0_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx



void fn000000000040D740(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx rax rcx rdi rdx
// Preserved: rsp
fn000000000040D740_entry:
// DataOut: ebx esi fs r11 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D740:
	word64 rcx_16 = 0x0000000000000007
	word64 rdi_15 = fp - 0x0000000000000048
// DataOut: ebx esi fs r11 rax rbp rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D754:
	branch rcx_16 == 0x0000000000000000 l000000000040D757
// DataOut: ebx esi fs r11 rax rbp rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D757:
	branch esi == 0x00000008 l000000000040D7A1
// DataOut: ebx esi fs r11 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D7A1:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

l000000000040D759:
	Mem26[rdi:word64] = DPB(qwLoc48, esi, 0)
	Mem29[rdi + 0x0000000000000008:word64] = qwLoc40
	Mem32[rdi + 0x0000000000000010:word64] = qwLoc38
	Mem35[rdi + 0x0000000000000018:word64] = qwLoc30
	Mem38[rdi + 0x0000000000000020:word64] = qwLoc28
	Mem41[rdi + 0x0000000000000028:word64] = qwLoc20
	Mem44[rdi + 0x0000000000000030:word64] = qwLoc18
	return
// DataOut: ebx fs r11 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

fn000000000040D740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):esi

l000000000040D754_1:
	Mem18[rdi_15:word64] = 0x0000000000000000
	rdi_15 = rdi_15 + 0x0000000000000008
	rcx_16 = rcx_16 - 0x0000000000000001
// DataOut: ebx esi fs r11 rax rbp rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)



word64 fn000000000040D7B0(word32 esi, word64 rdi, word64 r8, word64 r13, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r13 r15 r8 rdi
// LiveOut: ebx r12 r12b r12d r13 r15 r15b r8 rax rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D7B0_entry:
	*r8Out = r8
	*r15Out = r15
	*r13Out = r13
// DataOut: esi fs r13 r15 r15b r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D7B0:
	word64 r12_10 = (uint64) esi
	*r12Out = r12_10
	word64 rax_23 = dcgettext(0x0000000000000000, rdi, 0x0000000000000005)
	word32 r12d_11 = (word32) r12_10
	word64 rsp_22 = fp - 0x0000000000000018
	word64 rbx_109 = rax_23
	branch rax_23 == rdi l000000000040D7E8
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D7E8:
	word64 rbp_65
	word64 r8_66
	word64 r12_67
	word64 r13_68
	word64 r15_69
	word64 rax_70 = fn0000000000411900(rdi, r8, r12_10, r13, r15, fs, out rsp_22, out rbp_65, out r8_66, out r12_67, out r13_68, out r15_69)
	byte dl_75 = (byte) (uint64) ((word32) Mem0[rax_70:byte] & 0xFFFFFFDF)
	branch dl_75 != 0x55 l000000000040D850
// DataOut: dl fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 r12:(uint64) esi rsi:rdi rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D850:
	branch dl_75 != 0x47 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D855:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x42 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D861:
	branch Mem0[rax_70 + 0x0000000000000002:byte] != 0x31 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D867:
	branch Mem0[rax_70 + 0x0000000000000003:byte] != 0x38 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D86D:
	branch Mem0[rax_70 + 0x0000000000000004:byte] != 0x30 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D873:
	branch Mem0[rax_70 + 0x0000000000000005:byte] != 0x33 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D879:
	branch Mem0[rax_70 + 0x0000000000000006:byte] != 0x30 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D87F:
	branch Mem0[rax_70 + 0x0000000000000007:byte] != 0x00 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D885:
	word64 r13_134
	*r13Out = rax_23
	rbx_109 = 0x0000000000415FED
	branch Mem0[rbp_65:byte] == 0x60 l000000000040D89B
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D897_1:
	rbx_109 = 0x0000000000415FE8
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FE8 rbx:0x0000000000415FED edx:<invalid> r13:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 r15:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D89B:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FE8 rbx:<invalid> edx:<invalid> r13:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 r15:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7F8:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x54 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D804:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000002:byte] & 0xFFFFFFDF) != 0x46 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D810:
	branch Mem0[rax_70 + 0x0000000000000003:byte] != 0x2D l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D816:
	branch Mem0[rax_70 + 0x0000000000000004:byte] != 0x38 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D81C:
	branch Mem0[rax_70 + 0x0000000000000005:byte] != 0x00 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D838:
	rbx_109 = 0x0000000000415FEB
	branch r12d_11 == 0x00000007 l000000000040D84A
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D846_1:
	rbx_109 = 0x0000000000416DEA
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000416DEA rbx:0x0000000000415FEB edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D84A:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000416DEA rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D822:
	rbx_109 = 0x0000000000415FE4
	branch Mem0[rax_23:byte] != 0x60 l000000000040D833
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D82F_1:
	rbx_109 = 0x0000000000415FF1
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FF1 rbx:0x0000000000415FE4 edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D833:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FF1 rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7D7:
	word64 rsp_43 = rsp_22 + 0x0000000000000008
	word32 ebx_49
	*ebxOut = (word32) Mem0[rsp_43:word64]
	word64 rsp_56
	*rspOut = Mem0[rsp_43 + 0x0000000000000010:word64] + 0x0000000000000010
	return rbx_109
// DataOut: ebx fs r12 r12b r12d r13 r15 r15b r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> r15:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040D7B0_exit:
// DataOut: ebx r12 r12b r12d r13 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> r15:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040D8A0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word32 r9d, selector fs, word64 qwArg20, word64 qwArg28, word64 qwArg30, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8 r8d r9b r9d rcx rdi rdx rsi
// LiveOut: ebp r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040D8A0_entry:
// DataOut: fs r12 r12b r12d r8 r8d r9b rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D8A0:
	word64 rdi_53
	word64 rcx_55
	word32 r14d_57
	word32 r8d_58
	word64 rbp_60
	word64 rdx_62
	word64 rbx_63
	word32 ebx_64
	word32 r9d_65
	byte SCZO_66
	word64 rax_67
	word32 eax_69
	byte SZO_70
	byte C_71
	byte al_72
	byte CZ_73
	word64 r11_74
	word32 esi_75
	byte Z_76
	word32 edi_77
	word64 r9_78
	word32 ebp_79
	word64 r8_80
	byte cl_81
	word32 r12d_83
	byte r12b_84
	word32 edx_85
	byte dl_86
	byte r11b_87
	word32 esp_88
	word32 r11d_89
	word16 dx_90
	word64 r10_92
	byte dil_93
	byte sil_94
	selector fs_1009
	word64 r14_1024
	word64 r12_1022
	word64 r13_1332
	word64 r15_1025
	word64 rsi_1039
	word64 rsp_1041
	word32 ecx_1052
	call __ctype_get_mb_cur_max (retsize: 8; depth: 232)
		uses: C_51,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_35,eax_49,ebx_28,esp_30,fs,qwLoc28_47,qwLoc70_40,qwLoc78_43,qwLoc88_37,qwLocB8_33,qwLocC0_34,r13_17,r14_11,r14d_12,r15_6,r8d,r9d,rax_48,rbp,rbx_27,rcx,rdi,rdx,rsi,rsp_29,SZO_50
		defs: al_72,C_71,cl_81,CZ_73,dil_93,dl_86,dx_90,eax_69,ebp_79,ebx_64,ecx_82,edi_77,edx_85,esi_75,esp_88,fs_68,r10_92,r11_74,r11b_87,r11d_89,r12_91,r12b_84,r12d_83,r13_61,r14_59,r14d_57,r15_54,r8_80,r8d_58,r9_78,r9d_65,rax_67,rbp_60,rbx_63,rcx_55,rdi_53,rdx_62,rsi_56,rsp_52,SCZO_66,sil_94,SZO_70,Z_76
	byte al_101 = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) ebx_64 >>u 0x00000001) & 0x00000001)
	branch r14d_57 >u 0x00000008 l000000000040E280
// DataOut: fs r12 r12b r12d r13 r14 r14d r15 r15b r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32) Local -00AD(0) Local -00B8(64) Local -00C0(64)

l000000000040E280:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D92D:
	word64 rbx_1036
	word64 rax_108 = (uint64) r14d_57
	word64 r11_109 = rsi
	byte r11b_1015 = (byte) rsi
	word32 r11d_1016 = (word32) rsi
	switch (r14d_57) { l000000000040D940 l000000000040E070 l000000000040DF10 l000000000040DF50 l000000000040DFB0 l000000000040DF90 l000000000040DFE0 l000000000040DFE0 l000000000040DFE0 }
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32) Local -00AD(0) Local -00B8(64)

l000000000040DFE0:
	branch r14d_57 == 0x00000008 l000000000040E012
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32)

l000000000040DFE2:
	word32 ebx_1968
	word64 rsp_1969
	word64 r8_1970
	word64 r12_1971
	word64 r13_1972
	word64 r15_1973
	word64 rax_1974 = fn000000000040D7B0((word32) (uint64) (word32) (uint64) r8d, 0x0000000000415FF5, r8_80, r13_1332, r15_1025, fs_1009, out ebx_1968, out rsp_1969, out r8_1970, out r12_1971, out r13_1972, out r15_1973)
	Mem1978[rsp_1969 + 0x0000000000000070:word64] = rax_1974
	rsi_1039 = (uint64) ebx_1968
	word32 ebx_1979
	word64 r8_1981
	rax_108 = fn000000000040D7B0((word32) rsi_1039, 0x0000000000416DEA, r8_1970, r13_1972, r15_1973, fs_1009, out ebx_1979, out rsp_1041, out r8_1981, out r12_1022, out r13_1332, out r15_1025)
	r11_109 = Mem1978[rsp_1041 + 0x0000000000000020:word64]
	Mem1989[rsp_1041 + 0x0000000000000068:word64] = rax_108
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E012:
	rbx_1036 = 0x0000000000000000
	branch Mem0[rsp_1041 + 0x0000000000000033:byte] != 0x00 l000000000040E044
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E01B:
	word64 rdx_1931 = Mem0[rsp_1041 + 0x0000000000000070:word64]
	word32 eax_1935 = (word32) Mem0[rdx_1931:byte]
	rax_108 = DPB(rax_108, eax_1935, 0) (alias)
	byte al_1937 = (byte) eax_1935
	branch al_1937 == 0x00 l000000000040E044
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E027:
	word64 rcx_1941 = Mem0[rsp_1041 + 0x0000000000000028:word64]
	ecx_1052 = (word32) rcx_1941 (alias)
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E030:
	branch rbx_1036 >=u r11_109 l000000000040E038
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E035:
	Mem1961[rcx_1941 + rbx_1036:byte] = al_1937
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E038:
	rbx_1036 = rbx_1036 + 0x0000000000000001
	word32 eax_1955 = (word32) Mem0[rdx_1931 + rbx_1036:byte]
	rax_108 = DPB(rax_108, eax_1955, 0) (alias)
	al_1937 = (byte) eax_1955 (alias)
	branch al_1937 != 0x00 l000000000040E030
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E044:
	word64 rbp_1919 = Mem0[rsp_1041 + 0x0000000000000068:word64]
	Mem1920[rsp_1041 + 0x0000000000000038:word64] = r11_109
	word64 rax_1923 = DPB(rax_108, strlen(rbp_1919), 0)
	Mem1924[rsp_1041 + 0x0000000000000060:word64] = rbp_1919
	Mem1927[rsp_1041 + 0x0000000000000020:byte] = 0x01
	r11_109 = Mem1927[rsp_1041 + 0x0000000000000038:word64]
	r14_1024 = rax_1923
	r11b_1015 = (byte) r11_109 (alias)
	r11d_1016 = (word32) r11_109 (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF90:
	r14_1024 = 0x0000000000000000
	rbx_1036 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DFB0:
	rsi_1039 = 0x0000000000000001
	rbx_1036 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF50:
	branch al_101 != 0x00 l000000000040E428
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040DF5B:
	branch rsi == 0x0000000000000000 l000000000040E2B3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2B3:
	rsi_1039 = 0x0000000000000001
	rbx_1036 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF64:
	Mem1863[rdi:byte] = 0x22
	rsi_1039 = 0x0000000000000001
	rbx_1036 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF10:
	branch al_101 != 0x00 l000000000040E408
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E408:
	rsi_1039 = 0x0000000000000001
	rbx_1036 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF1B:
	branch rsi == 0x0000000000000000 l000000000040E2D1
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2D1:
	rsi_1039 = 0x0000000000000001
	rbx_1036 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF24:
	Mem1837[rdi:byte] = 0x27
	rsi_1039 = 0x0000000000000001
	rbx_1036 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E070:
	rsi_1039 = 0x0000000000000001
	rbx_1036 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D940:
	r14_1024 = 0x0000000000000000
	rbx_1036 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D960:
	Mem209[rsp_1041 + 0x0000000000000038:byte] = (byte) (uint64) ((word32) Mem0[rsp_1041 + 0x0000000000000033:byte] ^ 0x00000001)
	word64 rax_1031 = (uint64) ((word32) Mem209[rsp_1041 + 0x0000000000000020:byte] ^ 0x00000001)
	Mem216[rsp_1041 + 0x0000000000000095:byte] = (byte) rax_1031
	word64 r9_1020
	*r9Out = r14_1024
	word64 rbp_1003 = 0x0000000000000000
	*r14Out = r11_109
	word64 r8_1019
	*r8Out = r13_1332
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D986:
	word64 rax_292
	byte al_1795 = rbp_1003 != r15_1025
	word64 rax_1720 = DPB(rax_1031, al_1795, 0)
	branch r15_1025 == 0xFFFFFFFFFFFFFFFF l000000000040DB76
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D996:
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A0:
	branch al_1795 == 0x00 l000000000040DB86
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A8:
	word64 r13_1725
	byte cl_585 = r9_1020 != 0x0000000000000000
	ecx_1052 = DPB(ecx_1052, cl_585, 0) (alias)
	branch r9_1020 == 0x0000000000000000 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9B4:
	branch Mem216[rsp_1041 + 0x0000000000000020:byte] == 0x00 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9BF:
	rax_1720 = rbp_1003 + r9_1020
	branch r15_1025 <u rax_1720 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0A0:
	r13_1725 = r8_1019 + rbp_1003
	r11b_1015 = 0x00 (alias)
	r11d_1016 = 0x00000000 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9CD:
	rsi_1039 = Mem216[rsp_1041 + 0x0000000000000060:word64]
	Mem1741[rsp_1041 + 0x0000000000000050:word32] = ecx_1052
	Mem1742[rsp_1041 + 0x0000000000000048:word64] = r8_1019
	Mem1744[rsp_1041 + 0x0000000000000040:word64] = r9_1020
	r13_1725 = r8_1019 + rbp_1003
	word32 eax_1745 = memcmp(r13_1725, rsi_1039, r9_1020)
	rax_1720 = DPB(rax_1720, eax_1745, 0) (alias)
	*r9Out = Mem1744[rsp_1041 + 0x0000000000000040:word64]
	r8_1019 = Mem1744[rsp_1041 + 0x0000000000000048:word64]
	*r8Out = r8_1019
	branch eax_1745 != 0x00000000 l000000000040E0B0
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0B0:
	r11b_1015 = 0x00 (alias)
	r11d_1016 = 0x00000000 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA05:
	branch Mem1744[rsp_1041 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA10:
	rbx_1036 = 0x0000000000000001
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA20:
	word32 r12d_1012 = (word32) Mem216[r13_1725:byte]
	byte r12b_1013 = (byte) r12d_1012
	r12_1022 = DPB(r12_1022, r12d_1012, 0) (alias)
	*r12Out = r12_1022
	branch r12b_1013 >u 0x7E l000000000040DE18
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE18:
	byte dl_1181
	word32 esi_1014
	byte dl_1028
	branch Mem216[rsp_1041 + 0x0000000000000078:word64] != 0x0000000000000001 l000000000040E0C0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0C0:
	Mem1276[rsp_1041 + 0x00000000000000B0:word64] = 0x0000000000000000
	branch r15_1025 == 0xFFFFFFFFFFFFFFFF l000000000040E285
// DataOut: fs r11b r11d r12b r13 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E285:
	Mem1707[rsp_1041 + 0x0000000000000050:word64] = r9_1020
	Mem1708[rsp_1041 + 0x0000000000000048:word32] = r11d_1016
	Mem1709[rsp_1041 + 0x0000000000000040:word64] = r8_1019
	word64 rax_1711 = DPB(rax_1720, strlen(r8_1019), 0)
	r9_1020 = Mem1709[rsp_1041 + 0x0000000000000050:word64]
	r15_1025 = rax_1711
	r11b_1015 = (byte) (uint64) Mem1709[rsp_1041 + 0x0000000000000048:word32] (alias)
// DataOut: fs r11b r12b r13 r14 r15 r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0D6:
	Mem1291[rsp_1041 + 0x0000000000000080:word64] = rbx_1036
	Mem1292[rsp_1041 + 0x0000000000000096:byte] = r12b_1013
	Mem1293[rsp_1041 + 0x0000000000000098:word64] = r13_1725
	Mem1296[rsp_1041 + 0x0000000000000048:word64] = rbp_1003
	Mem1297[rsp_1041 + 0x0000000000000088:word64] = r9_1020
	Mem1301[rsp_1041 + 0x0000000000000097:byte] = r11b_1015
	Mem1302[rsp_1041 + 0x0000000000000050:word64] = r14_1024
	Mem1304[rsp_1041 + 0x0000000000000040:word64] = r15_1025
// DataOut: fs r12d r13 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E11D:
	word64 r15_1325
	word64 rcx_1326
	word32 r14d_1328
	word32 r8d_1329
	word64 r14_1330
	word64 rbp_1331
	word64 rdx_1333
	word64 rbx_1334
	word32 ebx_1335
	word32 r9d_1336
	byte SCZO_1337
	word64 rax_1338
	word32 eax_1340
	byte SZO_1341
	byte C_1342
	byte al_1343
	byte CZ_1344
	word64 r11_1345
	byte Z_1347
	word32 edi_1348
	word64 r9_1349
	word32 ebp_1350
	word64 r8_1351
	byte cl_1352
	word32 r12d_1354
	byte r12b_1355
	word32 edx_1356
	byte dl_1357
	byte r11b_1358
	word32 esp_1359
	word32 r11d_1360
	word16 dx_1361
	word64 r12_1362
	word64 r10_1363
	byte dil_1364
	byte sil_1365
	word64 rdi_1324
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_1310,bLocAD_164,bLocC0_165,C_1290,cl_585,CZ_655,dil_551,dl_1319,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_163,dx_1320,eax_1309,ebp_577,ebx_1295,ecx_587,edi_550,edx_1318,esi_549,esp_581,fs_544,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_166,qwLoc88_37,qwLocB8_33,qwLocC0_162,r10_543,r11_1283,r11b_1277,r11d_1278,r12_1298,r12b_1300,r12d_1299,r13_1305,r14_1314,r14d_1315,r15_1316,r8_1281,r8d_1279,r9_1282,r9d_1280,rax_1308,rbp_576,rbx_1306,rcx_1312,rdi_1313,rdx_1317,rsi_1322,rsp_1307,SCZO_1321,sil_546,SZO_1289,Z_1275
		defs: al_1343,C_1342,cl_1352,CZ_1344,dil_1364,dl_1357,dx_1361,eax_1340,ebp_1350,ebx_1335,ecx_1353,edi_1348,edx_1356,esi_1346,esp_1359,fs_1339,r10_1363,r11_1345,r11b_1358,r11d_1360,r12_1362,r12b_1355,r12d_1354,r13_1332,r14_1330,r14d_1328,r15_1325,r8_1351,r8d_1329,r9_1349,r9d_1336,rax_1338,rbp_1331,rbx_1334,rcx_1326,rdi_1324,rdx_1333,rsi_1327,rsp_1323,SCZO_1337,sil_1365,SZO_1341,Z_1347
	branch rax_1338 == 0x0000000000000000 l000000000040E30E
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E30E:
	r11d_1016 = (word32) Mem1304[rsp_1041 + 0x0000000000000097:byte]
	r12d_1012 = (word32) Mem1304[rsp_1041 + 0x0000000000000096:byte]
	rax_1031 = rbx_1334
	rbp_1003 = Mem1304[rsp_1041 + 0x0000000000000048:word64]
	*r9Out = Mem1304[rsp_1041 + 0x0000000000000088:word64]
	r11b_1015 = (byte) r11d_1016 (alias)
	*r8Out = r13_1332
	rbx_1036 = Mem1304[rsp_1041 + 0x0000000000000080:word64]
	r12b_1013 = (byte) r12d_1012 (alias)
	*r12Out = DPB(r12_1362, r12d_1012, 0)
	dl_1181 = (byte) (uint64) ((word32) (uint64) r12d_1354 ^ 0x00000001) (alias)
	*r14Out = Mem1304[rsp_1041 + 0x0000000000000050:word64]
	*r15Out = Mem1304[rsp_1041 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E157:
	branch rax_1338 == 0xFFFFFFFFFFFFFFFF l000000000040E350
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E350:
	r12d_1012 = (word32) Mem1304[rsp_1041 + 0x0000000000000096:byte]
	r11d_1016 = (word32) Mem1304[rsp_1041 + 0x0000000000000097:byte]
	rax_1031 = rbx_1334
	rbp_1003 = Mem1304[rsp_1041 + 0x0000000000000048:word64]
	*r9Out = Mem1304[rsp_1041 + 0x0000000000000088:word64]
	r12b_1013 = (byte) r12d_1012 (alias)
	*r12Out = DPB(r12_1362, r12d_1012, 0)
	r11b_1015 = (byte) r11d_1016 (alias)
	*r8Out = r13_1332
	rbx_1036 = Mem1304[rsp_1041 + 0x0000000000000080:word64]
	*r14Out = Mem1304[rsp_1041 + 0x0000000000000050:word64]
	dl_1181 = 0x01 (alias)
	*r15Out = Mem1304[rsp_1041 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E161:
	branch rax_1338 == 0xFFFFFFFFFFFFFFFE l000000000040E391
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E391:
	r12d_1012 = (word32) Mem1304[rsp_1041 + 0x0000000000000096:byte]
	r11d_1016 = (word32) Mem1304[rsp_1041 + 0x0000000000000097:byte]
	r15_1025 = Mem1304[rsp_1041 + 0x0000000000000040:word64]
	*r15Out = r15_1025
	rsi_1039 = r14_1330
	rax_1031 = rbx_1334
	*r8Out = r13_1332
	rbp_1003 = Mem1304[rsp_1041 + 0x0000000000000048:word64]
	*r9Out = Mem1304[rsp_1041 + 0x0000000000000088:word64]
	r12b_1013 = (byte) r12d_1012 (alias)
	*r12Out = DPB(r12_1362, r12d_1012, 0)
	r11b_1015 = (byte) r11d_1016 (alias)
	rbx_1036 = Mem1304[rsp_1041 + 0x0000000000000080:word64]
	*r14Out = Mem1304[rsp_1041 + 0x0000000000000050:word64]
	word64 r13_1631 = Mem1304[rsp_1041 + 0x0000000000000098:word64]
	branch r15_1025 <=u r14_1330 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3DB:
	branch Mem1304[rdx_1333:byte] != 0x00 l000000000040E3F0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3F0:
	rax_1031 = rax_1031 + 0x0000000000000001
	branch r15_1025 >u rbp_1003 + rax_1031 l000000000040E3E8
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E8:
	branch Mem1304[r13_1631 + rax_1031:byte] == 0x00 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E1:
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3FE:
	dl_1181 = 0x01 (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E16B:
	branch Mem1304[rsp_1041 + 0x0000000000000033:byte] == 0x00 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E172:
	branch Mem1304[rsp_1041 + 0x0000000000000034:word32] != 0x00000002 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E179:
	branch rax_1338 == 0x0000000000000001 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E17F:
	word64 rdx_1561 = 0x0000000000000001
	r15_1568 = r15_1325
// DataOut: eax fs r12d r13 r15 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E190:
	word64 r15_1568
	rdi_1324 = DPB(rdi_1324, (word32) Mem1304[r15_1568 + rdx_1561:byte], 0) (alias)
	ecx_1052 = rdi_1324 - 0x000000000000005B
	byte cl_1583 = (byte) (rdi_1324 - 0x000000000000005B)
	branch cl_1583 >u 0x21 l000000000040E1B6
// DataOut: cl eax fs r12d r13 r15 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E19D:
	r15_1568 = 0x000000000000002B
	branch (0x0000000000000001 << cl_1583 & rdi_1324) != 0x0000000000000000 l000000000040E260
// DataOut: eax fs r12d r13 r15 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E260:
	r11_109 = Mem1304[rsp_1041 + 0x0000000000000050:word64]
	r11b_1015 = (byte) r11_109 (alias)
	r11d_1016 = (word32) r11_109 (alias)
	r15_1025 = Mem1304[rsp_1041 + 0x0000000000000040:word64]
// DataOut: fs r11 r13 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:0x000000000000002B r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1B6:
	rdx_1561 = rdx_1561 + 0x0000000000000001
	branch rdx_1561 != rax_1338 l000000000040E190
// DataOut: eax fs r12d r13 r15 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1BF:
	word64 rsp_1427
	word64 rdi_1428
	word64 r15_1429
	word64 rcx_1430
	word64 rsi_1431
	word32 r14d_1432
	word32 r8d_1433
	word64 r14_1434
	word64 rbp_1435
	word64 r13_1436
	word64 rdx_1437
	word64 rbx_1438
	word32 ebx_1439
	word32 r9d_1440
	byte SCZO_1441
	word64 rax_1442
	selector fs_1443
	word32 eax_1444
	byte SZO_1445
	byte C_1446
	byte al_1447
	byte CZ_1448
	word64 r11_1449
	word32 esi_1450
	byte Z_1451
	word32 edi_1452
	word64 r9_1453
	word32 ebp_1454
	word64 r8_1455
	byte cl_1456
	word32 ecx_1457
	word32 r12d_1458
	byte r12b_1459
	word32 edx_1460
	byte dl_1461
	byte r11b_1462
	word32 esp_1463
	word32 r11d_1464
	word16 dx_1465
	word64 r12_1466
	word64 r10_1467
	byte dil_1468
	byte sil_1469
	call iswprint (retsize: 8; depth: 8)
		uses: al_1343,bLocAD_164,bLocC0_165,C_1368,cl_1352,CZ_1344,dil_1364,dl_1357,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_163,dx_1361,eax_1340,ebp_1370,ebx_1335,ecx_1353,edi_1348,edx_1356,esi_1346,esp_1359,fs_1339,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_166,qwLoc88_37,qwLocB8_33,qwLocC0_162,r10_1363,r11_1345,r11b_1358,r11d_1360,r12_1362,r12b_1355,r12d_1354,r13_1332,r14_1330,r14d_1328,r15_1325,r8_1351,r8d_1329,r9_1349,r9d_1336,rax_1338,rbp_1369,rbx_1334,rcx_1326,rdi_1426,rdx_1333,rsi_1327,rsp_1323,SCZO_1424,sil_1365,SZO_1366,Z_1425
		defs: al_1447,C_1446,cl_1456,CZ_1448,dil_1468,dl_1461,dx_1465,eax_1444,ebp_1454,ebx_1439,ecx_1457,edi_1452,edx_1460,esi_1450,esp_1463,fs_1443,r10_1467,r11_1449,r11b_1462,r11d_1464,r12_1466,r12b_1459,r12d_1458,r13_1436,r14_1434,r14d_1432,r15_1429,r8_1455,r8d_1433,r9_1453,r9d_1440,rax_1442,rbp_1435,rbx_1438,rcx_1430,rdi_1428,rdx_1437,rsi_1431,rsp_1427,SCZO_1441,sil_1469,SZO_1445,Z_1451
	branch eax_1444 != 0x00000000 l000000000040E1DE
// DataOut: fs r12d r13 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DA_1:
// DataOut: fs r12d r13 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000000 r11:<invalid> rsi:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DE:
	word64 rdi_1479
	word64 r15_1480
	word64 rcx_1481
	word64 rsi_1482
	word32 r14d_1483
	word32 r8d_1484
	word64 r14_1485
	word64 rbp_1486
	word64 r13_1487
	word64 rdx_1488
	word64 rbx_1489
	word32 ebx_1490
	word32 r9d_1491
	byte SCZO_1492
	word64 rax_1493
	word32 eax_1495
	byte SZO_1496
	byte C_1497
	byte al_1498
	byte CZ_1499
	word64 r11_1500
	word32 esi_1501
	byte Z_1502
	word32 edi_1503
	word64 r9_1504
	word32 ebp_1505
	word64 r8_1506
	byte cl_1507
	word32 r12d_1509
	byte r12b_1510
	word32 edx_1511
	byte dl_1512
	byte r11b_1513
	word32 esp_1514
	word32 r11d_1515
	word16 dx_1516
	word64 r12_1517
	word64 r10_1518
	byte dil_1519
	byte sil_1520
	call mbsinit (retsize: 8; depth: 8)
		uses: al_1447,bLocAD_164,bLocC0_165,C_1473,cl_1456,CZ_1448,dil_1468,dl_1461,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_163,dx_1465,eax_1444,ebp_1454,ebx_1476,ecx_1457,edi_1452,edx_1460,esi_1450,esp_1463,fs_1443,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_166,qwLoc88_37,qwLocB8_33,qwLocC0_162,r10_1467,r11_1449,r11b_1462,r11d_1464,r12_1466,r12b_1459,r12d_1458,r13_1436,r14_1434,r14d_1432,r15_1429,r8_1455,r8d_1433,r9_1453,r9d_1440,rax_1474,rbp_1435,rbx_1475,rcx_1430,rdi_1470,rdx_1437,rsi_1431,rsp_1427,SCZO_1477,sil_1469,SZO_1471,Z_1472
		defs: al_1498,C_1497,cl_1507,CZ_1499,dil_1519,dl_1512,dx_1516,eax_1495,ebp_1505,ebx_1490,ecx_1508,edi_1503,edx_1511,esi_1501,esp_1514,fs_1494,r10_1518,r11_1500,r11b_1513,r11d_1515,r12_1517,r12b_1510,r12d_1509,r13_1487,r14_1485,r14d_1483,r15_1480,r8_1506,r8d_1484,r9_1504,r9d_1491,rax_1493,rbp_1486,rbx_1489,rcx_1481,rdi_1479,rdx_1488,rsi_1482,rsp_1478,SCZO_1492,sil_1520,SZO_1496,Z_1502
	branch 0x00000000 == 0x00000000 l000000000040E11D
// DataOut: fs r12d r13 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000000 r11:<invalid> rsi:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1EE:
	rsi_1039 = (uint64) r12d_1509
	r11d_1016 = (word32) Mem1304[rsp_1041 + 0x0000000000000097:byte]
	r12d_1012 = (word32) Mem1304[rsp_1041 + 0x0000000000000096:byte]
	esi_1014 = (word32) rsi_1039 (alias)
	r11b_1015 = (byte) r11d_1016 (alias)
	r12b_1013 = (byte) r12d_1012 (alias)
	*r12Out = DPB(r12_1517, r12d_1012, 0)
	rax_1031 = rbx_1489
	rbp_1003 = Mem1304[rsp_1041 + 0x0000000000000048:word64]
	*r9Out = Mem1304[rsp_1041 + 0x0000000000000088:word64]
	rbx_1036 = Mem1304[rsp_1041 + 0x0000000000000080:word64]
	*r14Out = Mem1304[rsp_1041 + 0x0000000000000050:word64]
	*r15Out = Mem1304[rsp_1041 + 0x0000000000000040:word64]
	*r8Out = r13_1487
	dl_1181 = (byte) (uint64) ((word32) (uint64) esi_1014 ^ 0x00000001) (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E22D:
	branch rax_1031 <=u 0x0000000000000001 l000000000040DE61
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E237:
	dl_1028 = dl_1181 & Mem1304[rsp_1041 + 0x0000000000000020:byte]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE24:
	Mem1203[rsp_1041 + 0x0000000000000050:word64] = r8_1019
	Mem1204[rsp_1041 + 0x0000000000000048:word64] = r9_1020
	Mem1205[rsp_1041 + 0x0000000000000040:word32] = r11d_1016
	word64 rdi_1207
	word64 rcx_1209
	word32 r14d_1211
	word32 r8d_1212
	word64 r13_1215
	word64 rdx_1216
	word32 ebx_1218
	word32 r9d_1219
	byte SCZO_1220
	word64 rax_1221
	word32 eax_1223
	byte SZO_1224
	byte C_1225
	byte al_1226
	byte CZ_1227
	word64 r11_1228
	byte Z_1230
	word32 edi_1231
	word64 r9_1232
	word32 ebp_1233
	word64 r8_1234
	byte cl_1235
	word32 edx_1239
	byte dl_1240
	byte r11b_1241
	word32 esp_1242
	word32 r11d_1243
	word16 dx_1244
	word64 r10_1246
	byte dil_1247
	byte sil_1248
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_643,bLocAD_164,bLocC0_165,C_647,cl_585,CZ_655,dil_551,dl_567,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_163,dx_568,eax_642,ebp_577,ebx_645,ecx_587,edi_550,edx_566,esi_549,esp_581,fs_544,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_166,qwLoc88_37,qwLocB8_33,qwLocC0_162,r10_543,r11_637,r11b_631,r11d_632,r12_653,r12b_652,r12d_651,r13_638,r14_561,r14d_545,r15_562,r8_635,r8d_633,r9_636,r9d_634,rax_641,rbp_576,rbx_648,rcx_639,rdi_650,rdx_640,rsi_649,rsp_580,SCZO_1006,sil_546,SZO_646,Z_1007
		defs: al_1226,C_1225,cl_1235,CZ_1227,dil_1247,dl_1240,dx_1244,eax_1223,ebp_1233,ebx_1218,ecx_1236,edi_1231,edx_1239,esi_1229,esp_1242,fs_1222,r10_1246,r11_1228,r11b_1241,r11d_1243,r12_1245,r12b_1238,r12d_1237,r13_1215,r14_1213,r14d_1211,r15_1208,r8_1234,r8d_1212,r9_1232,r9d_1219,rax_1221,rbp_1214,rbx_1217,rcx_1209,rdi_1207,rdx_1216,rsi_1210,rsp_1206,SCZO_1220,sil_1248,SZO_1224,Z_1230
	word64 r11_1252 = (uint64) Mem1205[rsp_1041 + 0x0000000000000040:word32]
	word32 edx_1259 = (word32) Mem1205[Mem1205[rax_1221:word64] + DPB(rdx_1216, (word32) r12b_1013, 0) * 0x0000000000000002:word16]
	r11b_1015 = (byte) r11_1252 (alias)
	r11d_1016 = (word32) r11_1252 (alias)
	*r9Out = Mem1205[rsp_1041 + 0x0000000000000048:word64]
	*r8Out = Mem1205[rsp_1041 + 0x0000000000000050:word64]
	rax_1031 = 0x0000000000000001
	dl_1181 = (byte) (uint64) ((word32) (uint64) (DPB(edx_1259, (word16) edx_1259 >>u 0x000E, 0) ^ 0x00000001) & 0x00000001) (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE61:
	dl_1028 = dl_1181 & Mem216[rsp_1041 + 0x0000000000000020:byte]
	branch dl_1028 == 0x00 l000000000040DAF8
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE6B:
	word64 rcx_1050 = Mem216[rsp_1041 + 0x0000000000000028:word64]
	rax_1031 = rax_1031 + rbp_1003
	byte dil_1049 = (byte) (word32) Mem216[rsp_1041 + 0x0000000000000033:byte]
	ecx_1052 = (word32) rcx_1050 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF0:
	branch dl_1028 != 0x00 l000000000040DE80
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE80:
	branch dil_1049 != 0x00 l000000000040DC40
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE89:
	branch rbx_1036 >=u r14_1024 l000000000040DE92
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE8E:
	Mem1155[rcx_1050 + rbx_1036:byte] = 0x5C
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE92:
	branch r14_1024 <=u rbx_1036 + 0x0000000000000001 l000000000040DEAA
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE9B:
	word64 rsi_1150 = (uint64) (DPB(esi_1014, (byte) (uint64) r12d_1012 >>u 0x06, 0) + 0x00000030)
	Mem1154[rcx_1050 + 0x0000000000000001 + rbx_1036:byte] = (byte) rsi_1150
	esi_1014 = (word32) rsi_1150 (alias)
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEAA:
	rsi_1039 = rbx_1036 + 0x0000000000000002
	branch r14_1024 <=u rsi_1039 l000000000040DEC5
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEB3:
	rsi_1039 = (uint64) ((word32) (uint64) (DPB(esi_1014, (byte) (uint64) r12d_1012 >>u 0x03, 0) & 0x00000007) + 0x00000030)
	Mem1145[rcx_1050 + 0x0000000000000002 + rbx_1036:byte] = (byte) rsi_1039
	esi_1014 = (word32) rsi_1039 (alias)
// DataOut: dil dl fs r11b r11d r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEC5:
	r12_1022 = (uint64) ((word32) (uint64) (r12d_1012 & 0x00000007) + 0x00000030)
	*r12Out = r12_1022
	rbx_1036 = rbx_1036 + 0x0000000000000003
	r12b_1013 = (byte) r12_1022 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF4:
	branch r11b_1015 == 0x00 l000000000040DED1
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF9:
	branch rbx_1036 >=u r14_1024 l000000000040DF02
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEFE:
	Mem1110[rcx_1050 + rbx_1036:byte] = 0x5C
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF02:
	rbx_1036 = rbx_1036 + 0x0000000000000001
	r11b_1015 = 0x00 (alias)
	r11d_1016 = 0x00000000 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DED1:
	rbp_1003 = rbp_1003 + 0x0000000000000001
	branch rax_1031 <=u rbp_1003 l000000000040DB54
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEDE:
	branch rbx_1036 >=u r14_1024 l000000000040DEE7
// DataOut: dil dl fs r11b r11d r12b r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE3:
	Mem1097[rcx_1050 + rbx_1036:byte] = r12b_1013
// DataOut: dil dl fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE7:
	r12d_1012 = (word32) Mem216[r8_1019 + rbp_1003:byte]
	r12b_1013 = (byte) r12d_1012 (alias)
	*r12Out = DPB(r12_1022, r12d_1012, 0)
	rbx_1036 = rbx_1036 + 0x0000000000000001
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA2F:
	rax_1031 = DPB(rax_1720, (word32) r12b_1013, 0) (alias)
	switch (rax_1031) { l000000000040DD20 }
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD20:
	branch Mem216[rsp_1041 + 0x0000000000000020:byte] == 0x00 l000000000040E240
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E240:
	branch (Mem216[rsp_1041 + 0x0000000000000090:byte] & 0x01) == 0x00 l000000000040DAF8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAF8:
	branch Mem216[rsp_1041 + 0x0000000000000038:byte] == 0x00 l000000000040DB09
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAFF:
	branch Mem216[rsp_1041 + 0x0000000000000095:byte] != 0x00 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E24E:
	rbp_1003 = rbp_1003 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD2B:
	branch Mem216[rsp_1041 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD36:
	branch rbx_1036 >=u r14_1024 l000000000040DD44
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD3B:
	Mem999[Mem216[rsp_1041 + 0x0000000000000028:word64] + rbx_1036:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD44:
	rax_1031 = rbx_1036 + 0x0000000000000001
	branch r15_1025 <=u rbp_1003 + 0x0000000000000001 l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD51:
	rsi_1039 = DPB(rsi_1039, (word32) Mem216[r8_1019 + 0x0000000000000001 + rbp_1003:byte], 0) (alias)
	branch (byte) (rsi_1039 - 0x0000000000000030) >u 0x09 l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD5F:
	branch r14_1024 >u rax_1031 l000000000040E300
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E300:
	rsi_1039 = Mem216[rsp_1041 + 0x0000000000000028:word64]
	Mem997[rsi_1039 + rax_1031:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD68:
	branch r14_1024 <=u rbx_1036 + 0x0000000000000002 l000000000040DD7B
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD71:
	Mem995[Mem216[rsp_1041 + 0x0000000000000028:word64] + 0x0000000000000002 + rbx_1036:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD7B:
	rax_1031 = rbx_1036 + 0x0000000000000003
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD80:
	rbx_1036 = rax_1031
	rsp_1041 = 0x0000000000000030
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB09:
	word64 rdi_886 = Mem216[rsp_1041 + 0x0000000000000058:word64]
	branch rdi_886 == 0x0000000000000000 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB13:
	ecx_1052 = (word32) (uint64) r12d_1012 (alias)
	word64 rdx_892 = (uint64) r12d_1012
	rax_1031 = (uint64) (0x00000001 << (byte) ((uint64) (ecx_1052 & 0x0000001F)))
	branch (Mem216[rdi_886 + DPB(rdx_892, (word32) ((byte) rdx_892 >>u 0x05), 0) * 0x0000000000000004:word32] & (word32) rax_1031) != 0x00000000 l000000000040DB33
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB2E:
	branch r11b_1015 == 0x00 l000000000040DB50
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB33:
	branch Mem216[rsp_1041 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC40:
	r11_109 = r14_1024
	r11b_1015 = (byte) r14_1024 (alias)
	r11d_1016 = (word32) r14_1024 (alias)
	r13_1332 = r8_1019
// DataOut: fs r11 r13 r15 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12d:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB3E:
	branch rbx_1036 >=u r14_1024 l000000000040DB4C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB43:
	rax_1031 = Mem216[rsp_1041 + 0x0000000000000028:word64]
	Mem805[rax_1031 + rbx_1036:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB4C:
	rbx_1036 = rbx_1036 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB50:
	rbp_1003 = rbp_1003 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB54:
	branch rbx_1036 >=u r14_1024 l000000000040DB62
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB59:
	rax_1031 = Mem216[rsp_1041 + 0x0000000000000028:word64]
	Mem710[rax_1031 + rbx_1036:byte] = r12b_1013
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB62:
	al_1795 = rbp_1003 != r15_1025
	rbx_1036 = rbx_1036 + 0x0000000000000001
	rax_1720 = DPB(rax_1031, al_1795, 0) (alias)
	branch r15_1025 != 0xFFFFFFFFFFFFFFFF l000000000040D9A0
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB76:
	byte al_537 = Mem216[r8_1019 + rbp_1003:byte] != 0x00
	rax_1720 = DPB(rax_1720, al_537, 0) (alias)
	branch al_537 != 0x00 l000000000040D9A8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB86:
	r11_109 = r14_1024
	*r11Out = r11_109
	r11b_1015 = (byte) r14_1024 (alias)
	r11d_1016 = (word32) r14_1024 (alias)
	r13_1332 = r8_1019
	*r13Out = r13_1332
	branch rbx_1036 != 0x0000000000000000 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB91:
	branch Mem216[rsp_1041 + 0x0000000000000034:word32] != 0x00000002 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB98:
	branch Mem216[rsp_1041 + 0x0000000000000033:byte] != 0x00 l000000000040DC46
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC46:
	word64 rax_360 = Mem216[rsp_1041 + 0x0000000000000068:word64]
	word32 r9d_362 = (word32) (uint64) Mem216[rsp_1041 + 0x0000000000000090:word32]
	word64 r8_364 = (uint64) Mem216[rsp_1041 + 0x0000000000000034:word32]
	word64 rdi_366 = Mem216[rsp_1041 + 0x0000000000000028:word64]
	Mem368[rsp_1041:word64] = 0x0000000000000000
	Mem370[rsp_1041 + 0x0000000000000010:word64] = rax_360
	Mem376[rsp_1041 + 0x0000000000000008:word64] = Mem370[rsp_1041 + 0x0000000000000070:word64]
	word64 rbp_379
	word64 r8_380
	word64 r9_381
	rax_292 = fn000000000040D8A0(r15_1025, r13_1332, r11_109, rdi_366, r8_364, (word32) (uint64) (r9d_362 & 0xFFFFFFFD), fs_1009, qwArg18, qwArg20, qwArg28, out rsp_1041, out rbp_379, out r8_380, out r9_381, out r11_109, out r12_1022, out r13_1332, out r14_1024, out r15_1025)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBA3:
	branch Mem216[rsp_1041 + 0x0000000000000033:byte] != 0x00 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBAA:
	branch Mem216[rsp_1041 + 0x0000000000000060:word64] == 0x0000000000000000 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBB2:
	word64 rdx_456 = Mem216[rsp_1041 + 0x0000000000000060:word64]
	byte al_462 = (byte) (word32) Mem216[rdx_456:byte]
	branch al_462 == 0x00 l000000000040DBE4
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBBE:
	word64 rcx_466 = Mem216[rsp_1041 + 0x0000000000000028:word64]
	ecx_1052 = (word32) rcx_466 (alias)
	word64 rdx_469 = rdx_456 - rbx_1036
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD0:
	branch r14_1024 <=u rbx_1036 l000000000040DBD8
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD5:
	Mem492[rcx_466 + rbx_1036:byte] = al_462
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD8:
	rbx_1036 = rbx_1036 + 0x0000000000000001
	al_462 = (byte) (word32) Mem216[rdx_469 + rbx_1036:byte] (alias)
	branch al_462 != 0x00 l000000000040DBD0
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBE4:
	rax_292 = rbx_1036
	branch rbx_1036 >=u r14_1024 l000000000040DC86
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBF0:
	Mem453[Mem216[rsp_1041 + 0x0000000000000028:word64] + rbx_1036:byte] = 0x00
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC86:
	branch (Mem216[rsp_1041 + 0x00000000000000B8:word64] ^ Mem216[fs_1009:0x00000028:word64]) != 0x0000000000000000 l000000000040E423
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E423:
	__stack_chk_fail()
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E428:
	Mem155[rsp_1041 + 0x0000000000000020:byte] = 0x01
	Mem157[rsp_1041 + 0x0000000000000060:word64] = 0x0000000000415FEB
	rsi_1039 = 0x0000000000000001
	rbx_1036 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC9D:
	word64 rsp_314 = Mem216[rsp_1041 + 0x00000000000000D8:word64]
	word64 rbp_316
	*rbpOut = Mem216[rsp_314 + 0x0000000000000008:word64]
	word64 rsp_322
	*rspOut = rsp_314 + 0x0000000000000020
	return rax_292
// DataOut: ebp fs r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D8A0_exit:
// DataOut: ebp r11 r11b r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040E450(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 rcx rdi rdx rsi
// LiveOut: bpl ebx r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040E450_entry:
// DataOut: edi fs r11 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E450:
	word64 r15_6 = (int64) edi
	__errno_location()
	word32 r15d_7 = (word32) r15_6
	word64 rsp_189 = fp - 0x0000000000000060
	word64 r12_188 = Mem0[0x000000000061A5D8:word64]
	branch r15d_7 < 0x00000000 l000000000040E5F7
// DataOut: edi fs r11 r12 r15 r15d rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E5F7:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040E48C:
	branch r15d_7 <u Mem0[0x000000000061A5F0:word32] l000000000040E4FA
// DataOut: edi fs r11 r12 r15 rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E495:
	word64 r14_178 = (uint64) (rdi + 0x0000000000000001)
	branch r12_188 != 0x000000000061A5E0 l000000000040E5E0
// DataOut: ebp fs r11 r12 r14 r15 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E5E0:
	word64 r8_215
	word64 rax_216 = fn0000000000410C90(rdx, r14_178 << 0x0000000000000004, r12_188, out rsp_189, out r8_215)
	Mem218[0x000000000061A5D8:word64] = rax_216
	r12_188 = rax_216
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4B0:
	word64 r8_205
	word64 rax_206 = fn0000000000410C90(rdx, r14_178 << 0x0000000000000004, 0x0000000000000000, out rsp_189, out r8_205)
	word64 rsi_207 = Mem0[0x000000000061A5E0:word64]
	word64 rdi_208 = Mem0[0x000000000061A5E8:word64]
	Mem210[0x000000000061A5D8:word64] = rax_206
	Mem211[rax_206:word64] = rsi_207
	Mem212[rax_206 + 0x0000000000000008:word64] = rdi_208
	r12_188 = rax_206
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4D6:
	word64 rdi_190 = (uint64) Mem0[0x000000000061A5F0:word32]
	memset((rdi_190 << 0x0000000000000004) + r12_188, 0x0000000000000000, r14_178 - rdi_190 << 0x0000000000000004)
	Mem199[0x000000000061A5F0:word32] = rdi + 0x0000000000000001
// DataOut: fs r11 r12 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4FA:
	word64 r12_52 = r12_188 + (r15_6 << 0x0000000000000004)
	word32 ebp_51 = (word32) (uint64) Mem0[rcx + 0x0000000000000004:word32]
	word64 r8_54 = (uint64) Mem0[r11:word32]
	word64 r11_57 = Mem0[r12_52:word64]
	word64 r14_58 = Mem0[r12_52 + 0x0000000000000008:word64]
	Mem59[rsp_189 + 0x0000000000000010:word64] = Mem0[rcx + 0x0000000000000030:word64]
	word64 rax_60 = Mem59[rcx + 0x0000000000000028:word64]
	word64 rcx_65 = Mem59[rsp_189 + 0x0000000000000028:word64]
	word64 rdx_66 = Mem59[rsp_189 + 0x0000000000000020:word64]
	Mem70[rsp_189:word64] = r11 + 0x0000000000000008
	Mem72[rsp_189 + 0x0000000000000008:word64] = rax_60
	Mem73[rsp_189 + 0x0000000000000038:word64] = r11_57
	word32 ebp_62 = (word32) (uint64) (ebp_51 | 0x00000001)
	word64 r8_80
	word64 r9_81
	word64 r11_82
	word64 r12_83
	word64 r13_84
	word64 r15_86
	word64 r14_102
	word64 rbp_104
	word64 rsp_105
	word64 rax_87 = fn000000000040D8A0(rcx_65, rdx_66, r11_57, r14_58, r8_54, (word32) (uint64) ebp_62, fs, qwArg18, qwArg20, qwArg28, out rsp_105, out rbp_104, out r8_80, out r9_81, out r11_82, out r12_83, out r13_84, out r14_102, out r15_86)
	word64 r11_89 = Mem73[rsp_105 + 0x0000000000000038:word64]
	*r11Out = r11_89
	branch r11_89 >u rax_87 l000000000040E5BF
// DataOut: ebp fs r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E554:
	Mem141[r12_83:word64] = rax_87 + 0x0000000000000001
	word64 rsi_137 = rax_87 + 0x0000000000000001
	branch r14_102 == 0x000000000061B220 l000000000040E577
// DataOut: ebp fs r11 r12 r14 r15 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E565:
	Mem173[rsp_105 + 0x0000000000000038:word64] = rax_87 + 0x0000000000000001
	free(r14_102)
	rsi_137 = Mem173[rsp_105 + 0x0000000000000038:word64]
// DataOut: ebp fs r11 r12 r15 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E577:
	Mem145[rsp_105 + 0x0000000000000038:word64] = rsi_137
	word64 rsp_146
	word64 rax_147 = fn0000000000410C40(rsi_137, rsi_137, out rsp_146)
	Mem148[r12_83 + 0x0000000000000008:word64] = rax_147
	word64 r8_151 = (uint64) Mem148[r11_89:word32]
	word64 rcx_152 = Mem148[rsp_146 + 0x0000000000000028:word64]
	word64 rdx_155 = Mem148[rsp_146 + 0x0000000000000020:word64]
	word64 rsi_156 = Mem148[rsp_146 + 0x0000000000000038:word64]
	Mem158[rsp_146 + 0x0000000000000010:word64] = Mem148[rcx + 0x0000000000000030:word64]
	word64 rax_159 = Mem158[rcx + 0x0000000000000028:word64]
	Mem160[rsp_146:word64] = r15_86
	Mem161[rsp_146 + 0x0000000000000008:word64] = rax_159
	word64 r8_164
	word64 r9_165
	word64 r11_166
	word64 r12_167
	word64 r13_168
	word64 r15_170
	fn000000000040D8A0(rcx_152, rdx_155, rsi_156, rax_147, r8_151, (word32) (uint64) ebp_62, fs, qwArg18, qwArg20, qwArg28, out rsp_105, out rbp_104, out r8_164, out r9_165, out r11_166, out r12_167, out r13_168, out r14_102, out r15_170)
// DataOut: fs r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040E5BF:
	Mem108[rbp_104:word32] = (word32) (uint64) Mem73[rsp_105 + 0x0000000000000034:word32]
	word64 rsp_109 = rsp_105 + 0x0000000000000048
	word64 rsp_118 = Mem108[rsp_109 + 0x0000000000000010:word64]
	word32 ebx_114
	*ebxOut = (word32) Mem108[rsp_109:word64]
	word64 rbp_120
	*rbpOut = Mem108[rsp_118 + 0x0000000000000008:word64]
	word64 rsp_126
	*rspOut = rsp_118 + 0x0000000000000020
	return r14_102
// DataOut: bpl ebx fs r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040E450_exit:
// DataOut: bpl ebx r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040E600(word64 rdi, word64 r8, word64 r11, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rdi
// LiveOut: ebx r12 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040E600_entry:
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E600:
	__errno_location()
	word64 r12_16 = (uint64) Mem0[r8:word32]
	*r12Out = r12_16
	word32 r12d_17 = (word32) r12_16
	word64 rdi_21 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E61E
// DataOut: fs r11 r12 r12d r13 r13b r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E61A_1:
	rdi_21 = rdi
// DataOut: fs r11 r12 r12d r13 r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040E61E:
	word64 rsp_27
	word64 rbp_28
	word64 rdi_29
	word64 rax_30 = fn0000000000410E00(0x0000000000000038, rdi_21, out rsp_27, out rbp_28, out rdi_29)
	Mem31[r11:word32] = r12d_17
	word32 ebx_34
	*ebxOut = (word32) Mem31[rsp_27:word64]
	word64 rbp_36
	*rbpOut = Mem31[rsp_27 + 0x0000000000000008:word64]
	word64 rsp_39
	*rspOut = Mem31[rsp_27 + 0x0000000000000010:word64] + 0x0000000000000008
	return rax_30
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040E600_exit:
// DataOut: ebx r12 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word32 fn000000000040E630(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E630_entry:
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E630:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E63C
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E638_1:
	rax_12 = rdi
// DataOut: fs r11 r13 r13b r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E63C:
	return (word32) (uint64) Mem0[rax_12:word32]
// DataOut: eax fs r11 r13 r13b r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E630_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040E640(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E640_entry:
// DataOut: ebx esi fs r11 r15 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E640:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E64C
// DataOut: ebx esi fs r11 r15 r9 rax rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E648_1:
	rax_12 = rdi
// DataOut: ebx esi fs r11 r15 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E64C:
	Mem11[rax_12:word32] = esi
	return
// DataOut: ebx fs r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040E650(word32 edx, word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi rdi sil
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E650_entry:
// DataOut: ebx edx esi fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E650:
	word64 rax_12 = 0x000000000061B320
	word32 ecx_10 = (word32) (uint64) esi
	branch rdi == 0x0000000000000000 l000000000040E65E
// DataOut: cl ebx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E65A_1:
	rax_12 = rdi
// DataOut: cl ebx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rcx:(uint64) esi

l000000000040E65E:
	word64 rsi_20 = rax_12 + DPB(rsi, (word32) (sil >>u 0x05), 0) * 0x0000000000000004
	word32 edi_25 = (word32) (uint64) Mem0[rsi_20 + 0x0000000000000008:word32]
	byte cl_16 = (byte) (uint64) (ecx_10 & 0x0000001F)
	Mem42[rsi_20 + 0x0000000000000008:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) (edx ^ (word32) ((uint64) ((word32) ((uint64) edi_25) >>u cl_16))) & 0x00000001) << cl_16) ^ edi_25)
	return rsi_20
// DataOut: ebx fs r11 r12 r13 r13b r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:(uint64) esi

fn000000000040E650_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid>



void fn000000000040E6B0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rsp
fn000000000040E6B0_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6B0:
	branch rdi != 0x0000000000000000 l000000000040E6C0
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6BC_1:
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6C0:
	Mem13[0x000000000061B320:word32] = 0x00000008
	branch rsi == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6CB:
	branch rdx == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6DD:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6D0:
	Mem21[0x000000000061B348:word64] = rsi
	Mem22[0x000000000061B350:word64] = rdx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

fn000000000040E6B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rdi:0x000000000061B320



word64 fn000000000040E6F0(word64 rcx, word64 rdx, word32 ebx, word32 ebp, word64 rsi, word64 rdi, word64 r8, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi fs r11 r8 rcx rdi rdx rsi
// LiveOut: ebp esp r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040E6F0_entry:
// DataOut: ebp ebx fs r11 r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6F0:
	branch r8 != 0x0000000000000000 l000000000040E716
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E712_1:
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E716:
	__errno_location()
	word32 r12d_38 = (word32) (uint64) Mem0[r8:word32]
	word64 rsp_58
	word64 rbp_59
	word64 r8_60
	word64 r9_61
	word64 r11_62
	word64 r12_63
	word64 r13_64
	word64 r14_65
	word64 r15_66
	word64 rax_67 = fn000000000040D8A0(rcx, rdx, rsi, rdi, (uint64) Mem0[r11:word32], (word32) (uint64) Mem0[r11 + 0x0000000000000004:word32], fs, rdi, qwLoc20, qwLoc18, out rsp_58, out rbp_59, out r8_60, out r9_61, out r11_62, out r12_63, out r13_64, out r14_65, out r15_66)
	Mem69[r13_64:word32] = r12d_38
	word64 rsp_76 = Mem69[rsp_58 + 0x0000000000000038:word64]
	word64 rbp_78
	*rbpOut = Mem69[rsp_76 + 0x0000000000000008:word64]
	word64 rsi_81
	*rsiOut = Mem69[rsp_76 + 0x0000000000000010:word64]
	word64 rdi_83
	*rdiOut = Mem69[rsp_76 + 0x0000000000000018:word64]
	word64 rsp_84
	*rspOut = rsp_76 + 0x0000000000000020
	return rax_67
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040E6F0_exit:
// DataOut: ebp esp r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn000000000040E930(word64 rdi, word64 r11, selector fs, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: ebx r11 r15 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040E930_entry:
// DataOut: fs r11 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E930:
// DataOut: edi fs r11 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E93F_thunk_fn000000000040E450:
	word32 ebx_14
	word64 rsp_15
	word64 rbp_16
	word64 r8_17
	word64 r9_18
	word64 r11_19
	word64 r12_20
	word64 r13_21
	word64 r14_22
	word64 r15_23
	fn000000000040E450(0x000000000061B320, 0xFFFFFFFFFFFFFFFF, rdi, 0x0000000000000000, r11, fs, out ebx_14, out rsp_15, out rbp_16, out r8_17, out r9_18, out r11_19, out r12_20, out r13_21, out r14_22, out r15_23)
	return ebx_14
// DataOut: ebx fs r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061B320 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040E930_exit:
// DataOut: ebx r11 r15 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040E970(word64 rdx, word32 esi, word32 edi, word64 r11, selector fs, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 rdx
// LiveOut: r11 r15 r9 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040E970_entry:
// DataOut: edi esi fs r11 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E970:
	fn000000000040D740(esi, fp - 0x0000000000000050)
	word32 ebx_23
	word64 rsp_24
	word64 rbp_25
	word64 r8_26
	word64 r9_27
	word64 r11_28
	word64 r12_29
	word64 r13_30
	word64 r14_31
	word64 r15_32
	fn000000000040E450(fp - 0x0000000000000050, 0xFFFFFFFFFFFFFFFF, rdx, (uint64) (word32) (uint64) edi, r11, fs, out ebx_23, out rsp_24, out rbp_25, out r8_26, out r9_27, out r11_28, out r12_29, out r13_30, out r14_31, out r15_32)
	return rsp_24 + 0x0000000000000060
// DataOut: fs r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040E970_exit:
// DataOut: r11 r15 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040EAB0(word64 rdi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: bpl r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040EAB0_entry:
// DataOut: fs r11 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EAB0:
// DataOut: dl fs r11 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EA00:
	word64 r8_8 = (uint64) edx
	word64 r8_15 = DPB(r8_8, (word32) ((byte) r8_8 >>u 0x05), 0)
	word32 r9d_33 = (word32) (uint64) Mem0[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32]
	byte cl_18 = (byte) (uint64) ((word32) (uint64) edx & 0x0000001F)
	Mem52[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) r9d_33 >>u cl_18) ^ 0x00000001) & 0x00000001) << cl_18) ^ r9d_33)
	word32 ebx_55
	word64 rsp_56
	word64 rbp_57
	word64 r8_58
	word64 r9_59
	word64 r11_60
	word64 r12_61
	word64 r13_62
	word64 r14_63
	word64 r15_64
	fn000000000040E450(fp - 0x0000000000000048, 0xFFFFFFFFFFFFFFFF, rdi, 0x0000000000000000, r11, fs, out ebx_55, out rsp_56, out rbp_57, out r8_58, out r9_59, out r11_60, out r12_61, out r13_62, out r14_63, out r15_64)
	word64 rsp_67
	*rspOut = rsp_56 + 0x0000000000000050
	return rbx
// DataOut: bpl fs r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:0x000000000000003A rsi:0xFFFFFFFFFFFFFFFF

fn000000000040EAB0_exit:
// DataOut: bpl r11 r12 r12b r12d r13 r13d r14 r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r8b:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r11:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):<invalid>



word64 fn000000000040EBF0(word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 rdi rsi
// LiveOut: r11 rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EBF0_entry:
// DataOut: edi fs r11 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBF0:
// DataOut: edi fs r11 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBFC_thunk_fn000000000040E450:
	word32 ebx_9
	word64 rsp_10
	word64 rbp_11
	word64 r8_12
	word64 r9_13
	word64 r11_14
	word64 r12_15
	word64 r13_16
	word64 r14_17
	word64 r15_18
	fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, rsi, rdi, r11, fs, out ebx_9, out rsp_10, out rbp_11, out r8_12, out r9_13, out r11_14, out r12_15, out r13_16, out r14_17, out r15_18)
	return rbx
// DataOut: fs r11 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF

fn000000000040EBF0_exit:
// DataOut: r11 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040EC10(word64 rdi, word64 r11, selector fs, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: ebx r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EC10_entry:
	*rbxOut = rbx
// DataOut: fs r11 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC10:
// DataOut: edi fs r11 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC21_thunk_fn000000000040E450:
	word32 ebx_13
	word64 rsp_14
	word64 rbp_15
	word64 r8_16
	word64 r9_17
	word64 r11_18
	word64 r12_19
	word64 r13_20
	word64 r14_21
	word64 r15_22
	return fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, rdi, 0x0000000000000000, r11, fs, out ebx_13, out rsp_14, out rbp_15, out r8_16, out r9_17, out r11_18, out r12_19, out r13_20, out r14_21, out r15_22)
// DataOut: ebx fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040EC10_exit:
// DataOut: ebx r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040EC30(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC30_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC30:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040EC69
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC40:
	word64 rsp_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 r12_62
	word64 rsi_63
	word32 ecx_64
	word64 rax_65
	word32 edx_66
	byte dl_68
	byte SCZO_69
	word32 ebp_70
	word64 rcx_67
	word64 rbx_60
	call __ctype_tolower_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc0C,r12_52,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_68,ebp_70,ecx_64,edx_66,r12_62,rax_65,rbp_58,rbx_60,rcx_67,rdi_59,rdx_55,rsi_63,rsp_54,SCZO_69,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC50:
	rcx_67 = DPB(rcx_67, (word32) Mem0[r12_62 + rbx_60:byte], 0) (alias)
	Mem79[rbp_13 + rbx_60:byte] = (byte) (uint64) Mem0[Mem0[rax_65:word64] + rcx_67 * 0x0000000000000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040EC50
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC69:
	word32 ebp_44
	*ebpOut = (word32) fp
	word64 rsp_48
	*rspOut = qwArg04 + 0x0000000000000008
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC30_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040EC80(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC80_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC80:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040ECB9
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC90:
	word64 rsp_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 r12_62
	word64 rsi_63
	word32 ecx_64
	word64 rax_65
	word32 edx_66
	byte dl_68
	byte SCZO_69
	word32 ebp_70
	word64 rcx_67
	word64 rbx_60
	call __ctype_toupper_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc0C,r12_52,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_68,ebp_70,ecx_64,edx_66,r12_62,rax_65,rbp_58,rbx_60,rcx_67,rdi_59,rdx_55,rsi_63,rsp_54,SCZO_69,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECA0:
	rcx_67 = DPB(rcx_67, (word32) Mem0[r12_62 + rbx_60:byte], 0) (alias)
	Mem79[rbp_13 + rbx_60:byte] = (byte) (uint64) Mem0[Mem0[rax_65:word64] + rcx_67 * 0x0000000000000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040ECA0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECB9:
	word32 ebp_44
	*ebpOut = (word32) fp
	word64 rsp_48
	*rspOut = qwArg04 + 0x0000000000000008
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC80_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040ECD0(word64 rax, word64 rcx, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r9d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & esiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl cl ebp fs r11d r14 r15b r9d rax rcx rdi rdx rsi
// LiveOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040ECD0_entry:
	*r8Out = r8
	*r15Out = r15
	*r14Out = r14
	*r9Out = r9
	*r11Out = r11
// DataOut: bpl cl ebp fs r11 r11d r14 r14d r15 r15b r8 r9 r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ECD0:
	word64 rax_1036 = Mem0[rax + 0x0000000000000030:word64]
	word64 r10_456 = rdx
	word64 r12_1020 = rsi
	*r12Out = r12_1020
	word64 rbx_139 = rcx
	word64 rsp_138 = fp - 0x00000000000004F0
	word32 esi_33 = (word32) (uint64) Mem0[rax_1036 + 0x0000000000000008:word32]
	branch esi_33 <= 0x0000000C l000000000040EEE0
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(0) Local -0008(0) Local -04B0(32)

l000000000040EEE0:
	rax_1036 = 0x000000000000000C
	branch (word32) (uint64) esi_33 == 0x00000000 l000000000040EEEE
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEB_1:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:0x000000000000000C rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEE:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED26:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED2B:
	word64 r14_1029
	word64 rax_108
	word32 eax_49 = (word32) Mem0[rcx:byte]
	word64 rax_215 = DPB(rax_1036, eax_49, 0)
	byte al_308 = (byte) eax_49
	word64 r13_1021 = 0x0000000000000000
	*r13Out = r13_1021
	branch al_308 == 0x00 l000000000040F053
// DataOut: al bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED39:
	*r14Out = rdx
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED85:
	branch al_308 != 0x25 l000000000040ED50
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED50:
	branch r14_1029 - r13_1021 <=u 0x0000000000000001 l000000000040EE98
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED60:
	branch r12_1020 == 0x0000000000000000 l000000000040ED6D
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED65:
	Mem1025[r12_1020:byte] = al_308
	*r12Out = r12_1020 + 0x0000000000000001
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED6D:
	*r13Out = r13_1021 + 0x0000000000000001
	word64 r8_1024
	*r8Out = rbx_139
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED89:
	r9d = (word32) Mem0[rsp_138 + 0x000000000000000F:byte]
	r9 = DPB(r9, r9d, 0) (alias)
	*r9Out = r9
	byte r9b_629 = (byte) r9d
	word64 r11_1012
	*r11Out = 0x0000000000000000
	r11d = 0x00000000 (alias)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED94:
	rbx_139 = rbx_139 + 0x0000000000000001
	byte dil_643 = (byte) (word32) Mem0[rbx_139:byte]
	byte SZO_646 = cond(dil_643 - 0x30)
	branch dil_643 == 0x30 l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA1:
	branch SZO_646 l000000000040EDD0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDD0:
	branch dil_643 != 0x5E l000000000040EE70
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE70:
	branch dil_643 != 0x5F l000000000040EDEE
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE7A:
	r11d = (int32) dil_643
	*r11Out = DPB(r11_1012, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDDA:
	rcx = 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA3:
	branch dil_643 != 0x23 l000000000040EDE8
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDE8:
	branch dil_643 == 0x2D l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDEE:
	word64 rdx_679 = (uint64) ((int32) dil_643 - 0x00000030)
	word32 ebp_678 = 0xFFFFFFFF
	branch (word32) rdx_679 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDFF:
	word64 rbp_940 = 0x0000000000000000
	ebp_678 = 0x00000000 (alias)
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:0x00000000FFFFFFFF rdx:<invalid> r11d:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ebp:0xFFFFFFFF -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE28:
	branch ebp_678 <= 0x0CCCCCCC l000000000040EE08
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE08:
	word32 edx_978 = (int32) Mem0[rbx_139:byte]
	word64 rdx_979 = DPB(rdx_679, edx_978, 0)
	byte dl_980 = (byte) edx_978
	branch ebp_678 == 0x0CCCCCCC l000000000040EE88
// DataOut: dl ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE88:
	branch dl_980 <= 0x37 l000000000040EE0D
// DataOut: ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE8D:
	rbp_940 = 0x000000007FFFFFFF
	ebp_678 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE0D:
	rcx = DPB(rcx, rbp_940 * 0x0000000000000005, 0) (alias)
	ebp_678 = rdx_979 - 0x0000000000000030 + rcx * 0x0000000000000002
	rbp_940 = DPB(rbp_940, ebp_678, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE30:
	rbp_940 = 0x000000007FFFFFFF
	ebp_678 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE15:
	rbx_139 = rbx_139 + 0x0000000000000001
	dil_643 = (byte) (word32) Mem0[rbx_139:byte] (alias)
	rdx_679 = (uint64) ((int32) dil_643 - 0x00000030)
	branch (word32) rdx_679 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> ecx:<invalid> ebp:<invalid> r11d:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE40:
	branch dil_643 == 0x45 l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE4A:
	branch dil_643 == 0x4F l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEC8:
	rbx_139 = rbx_139 + 0x0000000000000001
	dil_643 = (byte) (word32) Mem0[rbx_139:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE52:
	word64 r8_712
	branch dil_643 >u 0x7A l000000000040FF4D
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FF4D:
	r8_712 = rbx_139
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE60:
	switch (DPB(rdx_679, (word32) dil_643, 0)) { l000000000040FEFB }
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FEFB:
	r8_712 = r11_1012 - 0x0000000000000001
	dil_643 = (byte) (word32) Mem0[rbx_139 - 0x0000000000000001:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:(word32) dil rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F39F:
	word64 r15_719
	branch dil_643 != 0x25 l000000000040F0B2
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0B2:
	word64 rax_898 = r8_712 - 0x0000000000000001
	word32 ecx_903 = 0x00000001
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0C1:
	*r15Out = rax_898
	rax_898 = rax_898 - 0x0000000000000001
	ecx_903 = (word32) (uint64) (ecx_903 + 0x00000001) (alias)
	branch Mem0[rax_898 + 0x0000000000000001:byte] != 0x25 l000000000040F0C1
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D1:
	rcx = (int64) ecx_903
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F3A9:
	*r15Out = r8_712
	rcx = 0x0000000000000001
	cl = 0x01 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D7:
	word64 r8_720 = r8_712
	*r8Out = r8_720
	word64 rax_727 = 0x0000000000000000
	byte al_729 = 0x00
	branch ebp_678 < 0x00000000 l000000000040F0E1
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0DE_1:
	rax_727 = (uint64) ebp_678 (alias)
	al_729 = (byte) ebp_678 (alias)
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E1:
	rax_215 = DPB(rax_727, (int16) al_729, 0) (alias)
	rbx_139 = rax_215
	branch rcx <u rax_215 l000000000040F0ED
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E9_1:
	rbx_139 = rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0ED:
	branch rbx_139 >=u r14_1029 - r13_1021 l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0F9:
	branch r12_1020 == 0x0000000000000000 l000000000040F16E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0FE:
	branch rax_215 <=u rcx l000000000040F144
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F103:
	Mem847[rsp_138 + 0x0000000000000030:word64] = rcx
	Mem848[rsp_138 + 0x0000000000000028:word32] = r9d
	Mem853[rsp_138 + 0x0000000000000018:word64] = r8_712
	word64 rbp_849 = (int64) ebp_678 - rcx
	branch r11d == 0x00000030 l000000000040F1C1
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1C1:
	rax_215 = memset(r12_1020, 0x0000000000000030, rbp_849)
	r9 = (uint64) Mem853[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1020 = r12_1020 + rbp_849
	r8_720 = Mem853[rsp_138 + 0x0000000000000018:word64]
	r9d = (word32) r9 (alias)
	r9b_629 = (byte) r9 (alias)
	rcx = Mem853[rsp_138 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F125:
	rax_215 = memset(r12_1020, 0x0000000000000020, rbp_849)
	r9 = (uint64) Mem853[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1020 = r12_1020 + rbp_849
	rcx = Mem853[rsp_138 + 0x0000000000000030:word64]
	r9d = (word32) r9 (alias)
	r9b_629 = (byte) r9 (alias)
	r8_720 = Mem853[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F144:
	Mem804[rsp_138 + 0x0000000000000028:word64] = r8_720
	Mem808[rsp_138 + 0x0000000000000018:word64] = rcx
	branch r9b_629 == 0x00 l000000000040F180
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F180:
	rax_215 = memcpy(r12_1020, r15_719, rcx)
	rcx = Mem808[rsp_138 + 0x0000000000000018:word64]
	word64 r8_842
	*r8Out = Mem808[rsp_138 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F15C:
	word32 ebp_828
	rax_215 = fn000000000040EC80(rax_215, rcx, r15_719, r12_1020, qwLoc04, out rsp_138, out ebp_828, out r12_1020)
	rcx = Mem808[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
	word64 r8_837
	*r8Out = Mem808[rsp_138 + 0x0000000000000028:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16B:
	*r12Out = r12_1020 + rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16E:
	*r13Out = r13_1021 + rbx_139
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> ebp:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED74:
	word32 eax_579 = (word32) Mem0[rax_215 + 0x0000000000000001:byte]
	rax_215 = DPB(rax_215, eax_579, 0) (alias)
	al_308 = (byte) eax_579 (alias)
	rbx_139 = rax_215 + 0x0000000000000001
	branch al_308 == 0x00 l000000000040F050
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F050:
	r10_456 = r14_1029
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F053:
	branch r12_1020 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F05C:
	branch r10_456 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F191:
	rax_108 = r13_1021
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F065:
	Mem501[r12_1020:byte] = 0x00
	rax_108 = r13_1021
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE9A:
	word64 rsi_150 = Mem0[rsp_138 + 0x00000000000004C8:word64] ^ Mem0[fs:0x00000028:word64]
	word32 esi_151 = (word32) rsi_150
	branch rsi_150 != 0x0000000000000000 l00000000004105EA
// DataOut: bpl cl ebp esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004105EA:
	__stack_chk_fail()
	Mem184[rsp_138 + 0x0000000000000018:word32] = 0x00000000
// DataOut: bpl cl ebp esi fs r11d r12 r13 r14 r14d r15 r15b r9d rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F25D:
	Mem185[rsp_138 + 0x00000000000000B2:byte] = cl
	byte dil_187 = (byte) (uint64) esi_151
	word64 rax_190 = rsp_138 + 0x00000000000000B3
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r14d r15 r15b r8 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF37:
	Mem197[rax_190:byte] = dil_187
	Mem200[rax_190 + 0x0000000000000001:byte] = 0x00
	Mem202[rsp_138 + 0x0000000000000038:word32] = r9d
	Mem203[rsp_138 + 0x0000000000000030:word32] = r11d
	Mem204[rsp_138 + 0x0000000000000028:word64] = rbx_139
	word64 rdi_206
	word64 r10_207
	word64 rdx_208
	word64 rsi_209
	word64 rbp_210
	word64 rbx_212
	byte SCZO_214
	word32 esi_217
	byte SZO_218
	byte C_219
	word64 r8_220
	word32 r9d_221
	byte dil_222
	word32 eax_223
	word32 r13d_224
	byte al_226
	byte Z_227
	word32 r11d_229
	word64 r11_230
	word32 edi_231
	word32 edx_232
	word32 ebp_233
	byte CZ_234
	word32 ecx_235
	word64 r9_237
	byte S_238
	word16 ax_239
	byte dl_240
	word64 r15_241
	byte r15b_242
	byte r9b_243
	call strftime (retsize: 8; depth: 8)
		uses: al_192,ax_193,bLoc04E1_39,C_154,cl_196,CZ_145,dil_187,dl_125,dwLoc04_4,dwLoc04AC_37,dwLoc04B0_44,dwLoc08_9,dwLoc0C_12,dwLoc10_15,dwLoc14_18,dwLoc18_21,eax_191,ebp_137,ecx_195,edi_188,edx_124,esi_151,fs_118,qwLoc04A8_40,qwLoc04D0_114,qwLoc04E0_35,qwLoc28_30,r10_119,r11_148,r11d_147,r12_130,r13_134,r13d_135,r14_117,r15_116,r15b_115,r8_189,r9_120,r9b_122,r9d_121,rax_190,rbp_136,rbx_139,rcx_194,rdi_199,rdx_198,rsi_201,rsp_138,S_146,SCZO_144,SZO_152,Z_153
		defs: al_226,ax_239,C_219,cl_236,CZ_234,dil_222,dl_240,eax_223,ebp_233,ecx_235,edi_231,edx_232,esi_217,fs_216,r10_207,r11_230,r11d_229,r12_211,r13_225,r13d_224,r14_228,r15_241,r15b_242,r8_220,r9_237,r9b_243,r9d_221,rax_215,rbp_210,rbx_212,rcx_213,rdi_206,rdx_208,rsi_209,rsp_205,S_238,SCZO_214,SZO_218,Z_227
	word64 r11_248 = (uint64) Mem204[rsp_138 + 0x0000000000000030:word32]
	*r11Out = r11_248
	r9 = (uint64) Mem204[rsp_138 + 0x0000000000000038:word32]
	*r9Out = r9
	word64 r8_247 = Mem204[rsp_138 + 0x0000000000000028:word64]
	*r8Out = r8_247
	r11d = (word32) r11_248 (alias)
	r9d = (word32) r9 (alias)
	byte r9b_252 = (byte) r9
	branch rax_215 == 0x0000000000000000 l000000000040ED74
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> r14:rdx rdx:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF84:
	rbx_139 = rax_215 - 0x0000000000000001
	word64 rax_254 = 0x0000000000000000
	byte al_256 = 0x00
	branch ebp_233 < 0x00000000 l000000000040EF8F
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8C_1:
	rax_254 = (uint64) ebp_233 (alias)
	al_256 = (byte) ebp_233 (alias)
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8F:
	word16 ax_267 = (int16) al_256
	word64 rax_269 = DPB(rax_254, ax_267, 0)
	rcx = rax_215 - 0x0000000000000001
	cl = (byte) (rax_215 - 0x0000000000000001) (alias)
	branch rax_269 <u rax_215 - 0x0000000000000001 l000000000040EF9E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9A_1:
	rcx = rax_269
	cl = (byte) ax_267 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9E:
	branch rcx >=u r14_1029 - r13_1021 l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE98:
	rax_108 = 0x0000000000000000
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFAA:
	branch r12_1020 == 0x0000000000000000 l000000000040F03A
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB3:
	branch rax_215 - 0x0000000000000001 >=u rax_269 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB8:
	rax_269 = (uint64) Mem204[rsp_138 + 0x0000000000000018:word32]
	branch (word32) rax_269 != 0x00000000 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFC0:
	Mem404[rsp_138 + 0x0000000000000030:word64] = rcx
	Mem405[rsp_138 + 0x0000000000000028:word32] = r9d
	Mem410[rsp_138 + 0x0000000000000018:word64] = r8_247
	word64 rbp_406 = (int64) ebp_233 - (rax_215 - 0x0000000000000001)
	branch r11d == 0x00000030 l0000000000410239
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000410239:
	rax_269 = memset(r12_1020, 0x0000000000000030, rbp_406)
	r9 = (uint64) Mem410[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1020 = r12_1020 + rbp_406
	r8_247 = Mem410[rsp_138 + 0x0000000000000018:word64]
	r9d = (word32) r9 (alias)
	r9b_252 = (byte) r9 (alias)
	rcx = Mem410[rsp_138 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFE2:
	rax_269 = memset(r12_1020, 0x0000000000000020, rbp_406)
	r9 = (uint64) Mem410[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1020 = r12_1020 + rbp_406
	rcx = Mem410[rsp_138 + 0x0000000000000030:word64]
	r9d = (word32) r9 (alias)
	r9b_252 = (byte) r9 (alias)
	r8_247 = Mem410[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F001:
	Mem336[rsp_138 + 0x0000000000000028:word64] = rcx
	Mem337[rsp_138 + 0x0000000000000018:word64] = r8_247
	word64 rsi_341 = Mem337[rsp_138 + 0x0000000000000020:word64]
	branch r15b_242 != 0x00 l000000000040F1AD
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1AD:
	word32 ebp_386
	rax_269 = fn000000000040EC30(rax_269, rax_215 - 0x0000000000000001, rsi_341, r12_1020, qwLoc04, out rsp_138, out ebp_386, out r12_1020)
	rcx = Mem337[rsp_138 + 0x0000000000000028:word64]
	word64 r8_392
	*r8Out = Mem337[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F01F:
	branch r9b_252 == 0x00 l000000000040F199
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F199:
	rax_269 = memcpy(r12_1020, rsi_341, rax_215 - 0x0000000000000001)
	rcx = Mem337[rsp_138 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
	word64 r8_384
	*r8Out = Mem337[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F028:
	word32 ebp_367
	rax_269 = fn000000000040EC80(rax_269, rax_215 - 0x0000000000000001, rsi_341, r12_1020, qwLoc04, out rsp_138, out ebp_367, out r12_1020)
	rcx = Mem337[rsp_138 + 0x0000000000000028:word64]
	word64 r8_373
	*r8Out = Mem337[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F037:
	*r12Out = r12_1020 + (rax_215 - 0x0000000000000001)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F03A:
	word32 eax_306 = (word32) Mem204[rax_269 + 0x0000000000000001:byte]
	rax_215 = DPB(rax_269, eax_306, 0) (alias)
	al_308 = (byte) eax_306 (alias)
	*r13Out = r13_1021 + rcx
	rbx_139 = rax_215 + 0x0000000000000001
	branch al_308 != 0x00 l000000000040ED85
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F04E:
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEB1:
	word64 rsp_161 = Mem0[rsp_138 + 0x00000000000004E8:word64]
	word64 rbp_163
	*rbpOut = Mem0[rsp_161 + 0x0000000000000008:word64]
	word32 esi_167
	*esiOut = (word32) Mem0[rsp_161 + 0x0000000000000010:word64]
	word64 rdi_169
	*rdiOut = Mem0[rsp_161 + 0x0000000000000018:word64]
	word64 rsp_172
	*rspOut = rsp_161 + 0x0000000000000020
	return rax_108
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040ECD0_exit:
// DataOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> rdi:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040EDA9:
	rbx_139 = rbx_139 + 0x0000000000000001
	dil_643 = (byte) (word32) Mem0[rbx_139:byte] (alias)
	SZO_646 = cond(dil_643 - 0x30) (alias)
	branch dil_643 != 0x30 l000000000040EDA1
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDBB:
// DataOut: dil fs r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:0x0000000000000001 rsi:<invalid> eax:0x00000001 r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:0x0001 rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDC0:
	r11d = (int32) dil_643
	*r11Out = DPB(r11_1012, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)



word64 fn0000000000410600(word64 rax, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r8d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rbpOut, ptr64 & esiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// LiveOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410600_entry:
// DataOut: bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410600:
	word64 rsp_28
	word64 rbp_29
	word32 esi_30
	word64 rdi_31
	word64 r8_32
	word64 r9_33
	word64 r11_34
	word64 r12_35
	word64 r13_36
	word64 r14_37
	word64 r15_38
	return fn000000000040ECD0(rax, rdx, rsi, ebp, rdi, 0x0000000000000000, (word32) (uint64) r8d, r11d, r14, r15b, fs, out rsp_28, out rbp_29, out esi_30, out rdi_31, out r8_32, out r9_33, out r11_34, out r12_35, out r13_36, out r14_37, out r15_38)
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410600_exit:
// DataOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r10:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> r14:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> rbx:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):r9d



word64 fn0000000000410630(word64 rsi, word64 rdi, word64 r8, word64 r9, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 r9 rdi rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000410630_entry:
// DataOut: r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410630:
	branch rsi == 0x0000000000000000 l0000000000410A30
// DataOut: r11 r12 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A30:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168CC)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410650:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168C0)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041066A:
	dcgettext(0x0000000000000000, 0x00000000004168D3, 0x0000000000000005)
	__fprintf_chk(rdi, 0x0000000000000001, 0x0000000000416BA0)
	word64 rax_46 = dcgettext(0x0000000000000000, 0x0000000000416930, 0x0000000000000005)
	word32 eax_49 = fputs_unlocked(rax_46, rdi)
	branch r9 >u 0x0000000000000009 l0000000000410A50
// DataOut: r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rax:<invalid> eax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A50:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004107A1:
	__fprintf_chk(rdi, 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000416B08, 0x0000000000000005))
	return qwLoc08 + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:<invalid> rbp:rdi rbx:<invalid> r9:<invalid> r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:0x0000000000416B08 rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004106BE:
	word64 rsp_106
	word64 rdi_107
	word64 rsi_108
	word64 rbp_109
	word64 r12_110
	word64 r9_111
	word64 rbx_112
	word64 r8_113
	byte SCZO_114
	byte SZO_115
	byte C_116
	byte Z_117
	word64 rcx_118
	word64 rdx_119
	word32 edx_120
	word32 esi_121
	word32 eax_122
	word64 rax_123
	word32 edi_124
	byte CZ_125
	word64 r10_126
	word64 r11_127
	word64 r13_128
	word64 r15_129
	word64 r14_130
	call Mem0[0x00416B48:word32] (retsize: 4; depth: 116)
		uses: C_28,CZ_51,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_17,dwLoc18_21,eax_49,edi,edx,esi,qwLoc28,qwLoc30,qwLoc38,qwLoc40,qwLoc48,qwLoc50,qwLoc58,qwLoc60,qwLoc68,qwLoc70,r10,r11,r12_15,r13,r14,r15,r8_30,r9_31,rax_46,rbp_18,rbx_23,rcx_37,rdi_48,rdx_44,rsi_47,rsp_24,SCZO_50,SZO_29,Z_26
		defs: C_116,CZ_125,eax_122,edi_124,edx_120,esi_121,r10_126,r11_127,r12_110,r13_128,r14_130,r15_129,r8_113,r9_111,rax_123,rbp_109,rbx_112,rcx_118,rdi_107,rdx_119,rsi_108,rsp_106,SCZO_114,SZO_115,Z_117
	return rsp_106
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410630_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000410AC0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410AC0_entry:
// DataOut: r11 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AC0:
	word64 r9_13 = 0x0000000000000000
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AF3:
	word32 eax_18 = (word32) (uint64) Mem0[rax:word32]
	branch eax_18 <u 0x00000030 l0000000000410AD0
// DataOut: eax r11 r8 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AD0:
	word64 rax_58 = (uint64) (eax_18 + 0x00000008)
	Mem60[rax_58:word32] = (word32) rax_58
	rax = Mem60[rdx:word64]
	Mem66[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax == 0x0000000000000000 l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AFB:
	Mem49[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	rax = Mem49[rdx:word64]
	Mem55[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax != 0x0000000000000000 l0000000000410AE9
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AE9:
	r9_13 = r9_13 + 0x0000000000000001
	branch r9_13 == 0x000000000000000A l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B13:
// DataOut: r11 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B18:
	fn0000000000410630(rsi, rdi, fp - 0x0000000000000058, r9_13, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>

fn0000000000410AC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> rax:<invalid> r10:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> r14:<invalid>



void fn0000000000410B30(byte al, word64 rdx, word64 rsi, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al r11 rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410B30_entry:
// DataOut: al r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B30:
	branch al == 0x00 l0000000000410B7C
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B7C:
	fn0000000000410AC0(fp - 0x00000000000000B8, rdx, rsi, rdi, fp - 0x00000000000000D0, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9

fn0000000000410B30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -208(fp):0x00000020 -204(fp):0x00000030 -200(fp):fp + 0x0000000000000008 -192(fp):fp - 0x00000000000000B8 -152(fp):r8 -144(fp):r9

l0000000000410B45:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9



word64 fn0000000000410C40(word64 rsi, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esp rax rdi rdx rsp sp spl
// Preserved: rbx
fn0000000000410C40_entry:
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C40:
	word64 rax_13 = malloc(rdi)
	branch rax_13 == 0x0000000000000000 l0000000000410C50
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> rax:<invalid> rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C50:
	branch rdi == 0x0000000000000000 l0000000000410C4E
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C55:
	fn0000000000410E50()
	word64 rax_34 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi)
	branch rax_34 <u rdi l0000000000410C7A
// DataOut: eax ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C7A:
	Mem40[fp - 0x0000000000000008:word32] = rax_34
	fn0000000000410E50()
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C71:
	rdi = rdi *s rsi
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C4E:
	word64 rsp_23
	*rspOut = fp + 0x0000000000000004
	return rax_13
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx

fn0000000000410C40_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -4(fp):rbx



word64 fn0000000000410C90(word64 rdx, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: al r8 rax rsp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp r10 r10b r10d r10w r8 r8b r8d r8w rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000410C90_entry:
	*r8Out = r8
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C90:
	branch rsi == 0x0000000000000000 l0000000000410CB0
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB0:
	branch rdi == 0x0000000000000000 l0000000000410C99
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB5:
	free(rdi)
	word64 rsp_221
	*rspOut = fp + 0x0000000000000004
	return 0x0000000000000000
// DataOut: al ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

l0000000000410C99:
	word64 rax_63 = realloc(rdi, rsi)
	branch rax_63 == 0x0000000000000000 l0000000000410CBE
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CBE:
	branch rsi == 0x0000000000000000 l0000000000410CA6
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CC3:
	fn0000000000410E50()
	rdx = (uint64) (0xFFFFFFFFFFFFFFFF % rdx)
	word64 rax_87 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdx)
	branch rax_87 <u rsi l0000000000410CED
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410CED:
	Mem96[fp - 0x0000000000000008:word32] = rax_87
	fn0000000000410E50()
	word64 r8_100
	*r8Out = rdx
	word64 rcx_101 = Mem96[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410D40
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410D40:
	branch rcx_101 != 0x0000000000000000 l0000000000410D29
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D45:
	word64 rax_202 = (uint64) (0x0000000000000080 /u rdx)
	rdx = (uint64) (0x0000000000000080 % rdx)
	rcx_101 = (uint64) (rax_202 == 0x0000000000000000) + rax_202
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D0B:
	word128 rdx_rax_122 = (uint128) (uint64) rax_87
	r8_100 = 0x00000000AAAAAAAA
	*r8Out = r8_100
	rdx = (uint64) (rdx_rax_122 % 0x00000000AAAAAAAA)
	word64 rax_127 = (uint64) (rdx_rax_122 /u 0x00000000AAAAAAAA)
	branch rcx_101 >=u rax_127 l0000000000410D5C
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D5C:
	Mem140[fp - 0x000000000000000C:word32] = rax_127
	fn0000000000410E50()
	word64 rax_144 = Mem140[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410DA0
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410DA0:
	rdx = 0x0000000000000080
	branch rax_144 != 0x0000000000000000 l0000000000410DAC
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DA8_1:
	rax_144 = 0x0000000000000080
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DAC:
	Mem186[rsi:word64] = rax_144
	rsi = rax_144
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D78:
	branch rax_144 >u rdx l0000000000410DB7
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DB7:
	Mem160[fp - 0x0000000000000010:word32] = rax_144
	fn0000000000410E50()
	Mem162[fp - 0x0000000000000014:word32] = rsi
	word64 rsp_173
	*rspOut = rsp_164 + 0x0000000000000008
	word64 rsp_164
	return memset(fn0000000000410C40(rsi, rdi, out rsp_164), 0x0000000000000000, rdi)
// DataOut: al ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// Terminates process

l0000000000410D87:
	rdx = rax_144 + 0x0000000000000001 >>u 0x0000000000000001
	word64 rax_153 = rax_144 + rdx
	Mem156[rsi:word64] = rax_153
	rsi = rax_153
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D1F:
	rcx_101 = rcx_101 + (rcx_101 + 0x0000000000000001 >>u 0x0000000000000001)
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D29:
	Mem116[rsi:word64] = rcx_101
	rsi = rcx_101 *s r8_100
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CE4:
	rsi = rsi *s rdx
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CA6:
	word64 rsp_74
	*rspOut = fp + 0x0000000000000004
	return rax_63
// DataOut: al ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

fn0000000000410C90_exit:
// DataOut: al r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx



word64 fn0000000000410E00(word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: bpl eax ebp rax rbp rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000410E00_entry:
// DataOut: fs r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E00:
	word64 rsp_15
	word64 rax_16 = fn0000000000410C40(rsi, rsi, out rsp_15)
	word64 rbp_24
	*rbpOut = Mem0[rsp_15 + 0x0000000000000010:word64]
	word64 rsp_25
	*rspOut = rsp_15 + 0x0000000000000018
	word64 rdi_26
	*rdiOut = rax_16
	return memcpy(rax_16, rdi, rsi)
// DataOut: bpl eax ebp fs r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410E00_exit:
// DataOut: bpl eax ebp rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rdi:<invalid> rbx:<invalid> rdx:rsi rsi:<invalid> rax:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000410E30(word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: bpl eax ebp rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E30_entry:
// DataOut: fs r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E30:
	word64 rax_11 = DPB(rax, strlen(rdi), 0)
	word64 rsi_13
	*rsiOut = rax_11 + 0x0000000000000001
// DataOut: fs r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000410E41_thunk_fn0000000000410E00:
	word64 rsp_16
	word64 rbp_17
	word64 rdi_18
	return fn0000000000410E00(rax_11 + 0x0000000000000001, rdi, out rsp_16, out rbp_17, out rdi_18)
// DataOut: bpl eax ebp fs r11 r12 r12d r13 r13b r13d r14 r14d r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx eax:<invalid> rdi:rdi rsi:rax + 0x0000000000000001 -4(fp):rbx

fn0000000000410E30_exit:
// DataOut: bpl eax ebp rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> -4(fp):rbx



void fn0000000000410E50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000410E50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000410E50_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E50:
	dcgettext(0x0000000000000000, 0x0000000000416BCF, 0x0000000000000005)
	word64 rsp_16
	byte SCZO_17
	word32 edx_18
	word64 rdx_19
	word32 esi_20
	word64 rsi_21
	word32 edi_22
	word64 rdi_23
	byte SZO_24
	byte C_25
	word64 rax_26
	word64 rcx_27
	word32 eax_28
	call error (retsize: 8; depth: 16)
		uses: C_15,eax_13,rax_12,rcx_9,rdi_8,rdx_10,rsi_11,rsp_2,SZO_14
		defs: C_25,eax_28,edi_22,edx_18,esi_20,rax_26,rcx_27,rdi_23,rdx_19,rsi_21,rsp_16,SCZO_17,SZO_24
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



word32 fn0000000000410E90(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 r8d rdi rsi
// LiveOut: eax ebx r12 r15 r9 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E90_entry:
// DataOut: ebx edx fs r11 r8 r8d rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64)

l0000000000410E90:
	branch edx >u 0x00000024 l00000000004112B0
// DataOut: fs r11 r14d r8 r8d rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l00000000004112B0:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416DC8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EAA:
	branch rsi != 0x0000000000000000 l0000000000410EC2
// DataOut: fs r11 r12 r14d r15 r8d rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l0000000000410EBE_1:
// DataOut: fs r11 r12 r14d r15 r8d rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l0000000000410EC2:
	word64 rsp_40
	word64 rdi_41
	word64 rsi_42
	word32 r14d_43
	word32 edx_44
	word64 r14_45
	word64 rbp_46
	word64 rbx_47
	byte SCZO_48
	byte CZ_49
	word64 rax_50
	word64 r15_51
	byte SZO_52
	byte C_53
	word64 r13_54
	word64 rcx_55
	word64 r12_56
	word64 r8_57
	byte Z_58
	word32 ecx_59
	word64 rdx_60
	word32 esi_61
	word32 edi_62
	word32 ebx_63
	word32 r9d_64
	word32 eax_67
	word32 ebp_68
	byte dl_69
	byte al_70
	byte S_71
	byte cl_73
	word64 r9_66
	byte bl_1003
	word32 r8d_402
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: bl_39,C_31,CZ_24,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_18,dwLoc18_21,ebp_27,ebx_37,edx,r12_35,r13_33,r14_9,r14d_10,r15_28,r8,rax_25,rbp_26,rbx_38,rcx,rdi,rsi,rsp_22,SCZO_23,SZO_29,Z_30
		defs: al_70,bl_65,C_53,cl_73,CZ_49,dl_69,eax_67,ebp_68,ebx_63,ecx_59,edi_62,edx_44,esi_61,r12_56,r13_54,r14_45,r14d_43,r15_51,r8_57,r8d_72,r9_66,r9d_64,rax_50,rbp_46,rbx_47,rcx_55,rdi_41,rdx_60,rsi_42,rsp_40,S_71,SCZO_48,SZO_52,Z_58
	word64 rax_78 = rbp_46
// DataOut: bl fs r11 r12 r14d r15 r8d rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410EDF:
	r9_66 = DPB(r9_66, (word32) bl_1003, 0) (alias)
	*r9Out = r9_66
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_66 * 0x0000000000000002:byte] & 0x20) != 0x00 l0000000000410ED8
// DataOut: bl fs r11 r12 r14d r15 r8d r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410ED8:
	rax_78 = rax_78 + 0x0000000000000001
	bl_1003 = (byte) (word32) Mem0[rax_78:byte] (alias)
// DataOut: bl fs r11 r12 r14d r15 r8d rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410EEB:
	word32 eax_155
	branch bl_1003 != 0x2D l0000000000410F08
// DataOut: fs r11 r12 r14d r15 r8d r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F08:
	word64 rbp_240
	word32 ebp_238
	word32 edx_289
	word64 rax_202 = __errno_location()
	Mem204[rax_202:word32] = 0x00000000
	word64 rax_210 = DPB(rax_202, strtoul(rbp_46, r15_51, (uint64) r14d_43), 0)
	word64 r14_211 = Mem204[r15_51:word64]
	word64 rbx_213 = rax_210
	branch r14_211 == rbp_46 l0000000000410FE7
// DataOut: fs r11 r12 r14 r15 r8d r9 rbp rbx rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FE7:
	branch r12_56 == 0x0000000000000000 l0000000000410EF0
// DataOut: fs r11 r12 r14 r15 r8d r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FF0:
	word32 edx_972 = (word32) Mem204[rbp_46:byte]
	byte dl_975 = (byte) edx_972
	branch dl_975 == 0x00 l0000000000410EF0
// DataOut: dl edx fs r11 r12 r14 r15 r8d r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FFC:
	rbp_240 = 0x0000000000000000
	ebp_238 = 0x00000000 (alias)
	rbx_213 = 0x0000000000000001
	edx_289 = (word32) (uint64) edx_972 (alias)
	branch strchr(r12_56, DPB(r15_51, (int32) dl_975, 0)) != 0x0000000000000000 l0000000000410F94
// DataOut: dl ebp edx fs r11 r12 r14 r15 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041101F:
// DataOut: fs r11 r12 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:0x0000000000000001 rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F3A:
	word32 eax_931 = (word32) (uint64) Mem204[rax_202:word32]
	branch eax_931 != 0x00000000 l0000000000410F68
// DataOut: eax fs r11 r12 r14 r15 r8d r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F68:
	rbp_240 = 0x0000000000000001
	ebp_238 = 0x00000001 (alias)
	branch eax_931 != 0x00000022 l0000000000410EF0
// DataOut: ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F76:
// DataOut: ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F40:
	rbp_240 = 0x0000000000000000
	ebp_238 = 0x00000000 (alias)
// DataOut: ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F42:
	branch r12_56 == 0x0000000000000000 l0000000000410F4F
// DataOut: ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F47:
	word32 edx_942 = (word32) Mem204[r15_51:byte]
	byte dl_945 = (byte) edx_942
	branch dl_945 != 0x00 l0000000000410F78
// DataOut: dl ebp edx fs r11 r12 r14 r15 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F78:
	edx_289 = (word32) (uint64) edx_942 (alias)
	branch strchr(r12_56, DPB(r15_51, (int32) dl_945, 0)) == 0x0000000000000000 l0000000000411028
// DataOut: dl ebp edx fs r11 r12 r14 r15 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F94:
	word32 eax_315
	word64 rax_314
	word32 ecx_310
	word64 rsi_298 = 0x0000000000000030
	word32 edx_307 = (word32) (uint64) edx_289
	branch strchr(r12_56, 0x0000000000000030) == 0x0000000000000000 l0000000000410FCB
// DataOut: dl ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FAE:
	byte al_901 = (byte) (word32) Mem204[0x0000000000000031:byte]
	branch al_901 == 0x44 l0000000000411262
// DataOut: al dl ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FBB:
	branch al_901 == 0x69 l000000000041124A
// DataOut: al dl ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041124A:
	word64 rcx_925 = (uint64) (Mem204[0x0000000000000032:byte] == 0x42)
	rax_314 = 0x0000000000000400
	eax_315 = 0x00000400 (alias)
	ecx_310 = rcx_925 + 0x0000000000000001 + rcx_925
// DataOut: dl eax ebp ecx fs r11 r12 r14 r15 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FC3:
	branch al_901 == 0x42 l0000000000411262
// DataOut: dl ebp fs r11 r12 r14 r15 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411262:
	ecx_310 = 0x00000002 (alias)
	rax_314 = 0x00000000000003E8
	eax_315 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx fs r11 r12 r14 r15 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FCB:
	ecx_310 = 0x00000001 (alias)
	rax_314 = 0x0000000000000400
	eax_315 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx fs r11 r12 r14 r15 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FD5:
	word64 rdx_317 = (uint64) (edx_307 - 0x00000042)
	byte dl_320 = (byte) rdx_317
	branch dl_320 >u 0x35 l0000000000411028
// DataOut: dl eax ebp ecx fs r11 r12 r14 r15 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410FDD:
	word32 edx_333
	word64 rdi_529
	switch (DPB(rdx_317, (word32) dl_320, 0)) { l0000000000411201 l0000000000411028 l0000000000411028 l00000000004111C2 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l000000000041112C l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110BA l000000000041107F l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411064 l0000000000411036 l0000000000411028 l0000000000411028 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411054 }
// DataOut: eax ebp ecx fs r11 r12 r14 r15 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411054:
	branch rbx_213 < 0x0000000000000000 l0000000000411283
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041105D:
	rbx_213 = rbx_213 * 0x0000000000000002
	edx_333 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411036:
	edx_333 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411064:
	branch rbx_213 >u rax_314 l0000000000411283
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411077:
	rbx_213 = rbx_213 << 0x0000000000000009
	edx_333 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041107F:
	word64 rdi_791 = (int64) eax_315
	word64 rax_798 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_791)
	word32 esi_802 = 0x00000007
	edx_333 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110A6:
	branch rax_798 >=u rbx_213 l0000000000411097
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411097:
	rbx_213 = rbx_213 *s rdi_791
	r8d_402 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110AB:
	rbx_213 = 0xFFFFFFFFFFFFFFFF
	rax_798 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041109E:
	rsi_298 = (uint64) (esi_802 - 0x00000001)
	edx_333 = (word32) (uint64) (edx_333 | r8d_402) (alias)
	esi_802 = (word32) rsi_298 (alias)
	branch esi_802 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110BA:
	word64 rdi_723 = (int64) eax_315
	word64 rax_730 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_723)
	word32 esi_734 = 0x00000008
	edx_333 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110E5:
	branch rax_730 >=u rbx_213 l00000000004110D2
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110D2:
	rbx_213 = rbx_213 *s rdi_723
	r8d_402 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110EA:
	rbx_213 = 0xFFFFFFFFFFFFFFFF
	rax_730 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110D9:
	rsi_298 = (uint64) (esi_734 - 0x00000001)
	edx_333 = (word32) (uint64) (edx_333 | r8d_402) (alias)
	esi_734 = (word32) rsi_298 (alias)
	branch esi_734 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004110F9:
	rsi_298 = (int64) eax_315
	word64 rax_662 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_298)
	word32 edi_666 = 0x00000004
	edx_333 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041110F:
	branch rax_662 <u rbx_213 l0000000000411271
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411271:
	rbx_213 = 0xFFFFFFFFFFFFFFFF
	rax_662 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411118:
	rbx_213 = rbx_213 *s rsi_298
	r8d_402 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041111F:
	edx_333 = (word32) (uint64) (edx_333 | r8d_402) (alias)
	edi_666 = (word32) (uint64) (edi_666 - 0x00000001) (alias)
	branch edi_666 != 0x00000000 l000000000041110F
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411127:
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041112C:
	rsi_298 = (int64) eax_315
	word64 rax_594 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_298)
	word32 edi_598 = 0x00000005
	edx_333 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411157:
	branch rax_594 >=u rbx_213 l0000000000411144
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411144:
	rbx_213 = rbx_213 *s rsi_298
	r8d_402 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041115C:
	rbx_213 = 0xFFFFFFFFFFFFFFFF
	rax_594 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041114B:
	edx_333 = (word32) (uint64) (edx_333 | r8d_402) (alias)
	edi_598 = (word32) (uint64) (edi_598 - 0x00000001) (alias)
	branch edi_598 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041116B:
	rdi_529 = (int64) eax_315
	rsi_298 = 0xFFFFFFFFFFFFFFFF
	word64 rax_567 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_529)
	branch rbx_213 >u rax_567 l00000000004112A3
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411186:
	rbx_213 = rbx_213 *s rdi_529
	branch rax_567 <u rbx_213 l00000000004112A3
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004112A3:
	edx_333 = 0x00000001 (alias)
	rbx_213 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041119E:
	rdi_529 = (int64) eax_315
	rsi_298 = 0xFFFFFFFFFFFFFFFF
	branch rbx_213 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_529) l0000000000411193
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411193:
	rsi_298 = 0xFFFFFFFFFFFFFFFF
	rbx_213 = rbx_213 *s rdi_529
	edx_333 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111B5:
	rbx_213 = 0xFFFFFFFFFFFFFFFF
	edx_333 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041121B:
	rsi_298 = (int64) eax_315
	word64 rax_459 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_298)
	word32 edi_463 = 0x00000003
	edx_333 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411231:
	branch rax_459 <u rbx_213 l0000000000411294
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411294:
	rbx_213 = 0xFFFFFFFFFFFFFFFF
	rax_459 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411236:
	rbx_213 = rbx_213 *s rsi_298
	r8d_402 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041123D:
	edx_333 = (word32) (uint64) (edx_333 | r8d_402) (alias)
	edi_463 = (word32) (uint64) (edi_463 - 0x00000001) (alias)
	branch edi_463 != 0x00000000 l0000000000411231
// DataOut: ebp ecx edi edx fs r11 r12 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411245:
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111C2:
	word64 rdi_384 = (int64) eax_315
	word64 rax_391 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_384)
	word32 esi_395 = 0x00000006
	edx_333 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111ED:
	branch rax_391 >=u rbx_213 l00000000004111DA
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111DA:
	rbx_213 = rbx_213 *s rdi_384
	r8d_402 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111F2:
	rbx_213 = 0xFFFFFFFFFFFFFFFF
	rax_391 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l00000000004111E1:
	rsi_298 = (uint64) (esi_395 - 0x00000001)
	edx_333 = (word32) (uint64) (edx_333 | r8d_402) (alias)
	esi_395 = (word32) rsi_298 (alias)
	branch esi_395 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r11 r12 r14 r15 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411028:
	Mem282[rbp_240:word64] = rbx_213
	eax_155 = (word32) (uint64) ((word32) (uint64) ebp_238 | 0x00000002) (alias)
// DataOut: eax fs r11 r12 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411201:
	branch rbx_213 >u rax_314 l0000000000411283
// DataOut: ebp ecx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411283:
	rbx_213 = 0xFFFFFFFFFFFFFFFF
	edx_333 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411210:
	rbx_213 = rbx_213 << 0x000000000000000A
	edx_333 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000411038:
	rbp_240 = (uint64) (ebp_238 | edx_333)
	Mem352[r15_51:word64] = r14_211 + (int64) ecx_310
	ebp_238 = (word32) rbp_240 (alias)
	word32 eax_350 = (word32) (uint64) ((word32) (uint64) ebp_238 | 0x00000002)
	branch Mem352[rsi_298:byte] == 0x00 l000000000041104F
// DataOut: eax ebp fs r11 r12 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041104C_1:
	ebp_238 = eax_350
	rbp_240 = DPB(rbp_240, eax_350, 0) (alias)
// DataOut: ebp fs r11 r12 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000041104F:
// DataOut: ebp fs r11 r12 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410F4F:
	Mem241[rbp_240:word64] = rbx_213
	word32 ebx_249
	*ebxOut = (word32) qwLoc18
	return (word32) (uint64) ebp_238
// DataOut: eax ebx fs r11 r12 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EF0:
	eax_155 = 0x00000004 (alias)
// DataOut: eax fs r11 r12 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l0000000000410EF5:
	word32 ebx_161
	*ebxOut = (word32) qwLoc18
	return eax_155
// DataOut: eax ebx fs r11 r12 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410E90_exit:
// DataOut: eax ebx r12 r15 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rbx:rbx rsi:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn00000000004112D0(word64 rcx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi rcx
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004112D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004112D0_entry:
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004112D0:
	word64 rsi_129
	word64 r10_6 = (int64) esi
	word32 r10d_7 = (word32) r10_6
	branch edi >u 0x00000003 l000000000041133B
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000041133B:
	rsi_129 = 0x0000000000416DD1
	branch edi == 0x00000004 l00000000004112FA
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411345:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:0x0000000000416DD1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l00000000004112EB:
	branch edi >=u 0x00000002 l0000000000411334
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411334:
	rsi_129 = 0x0000000000416E10
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004112F0:
	rsi_129 = 0x0000000000416DEC
	branch (word32) (uint64) (edi - 0x00000001) != 0x00000000 l000000000041132F
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004112FA:
	branch r10d_7 < 0x00000000 l0000000000411347
// DataOut: ebp r10 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411347:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l00000000004112FF:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000041130C:
	dcgettext(0x0000000000000000, rsi_129, 0x0000000000000005)
	word64 rsp_83
	word64 rbp_84
	word64 r10_85
	word32 esi_86
	word64 r12_87
	word64 r8_88
	word64 rbx_89
	byte SCZO_90
	word32 edi_91
	word32 ebp_92
	byte CZ_93
	byte C_94
	word64 rdi_95
	word64 rsi_96
	byte Z_97
	word32 r10d_98
	byte SZO_99
	byte S_100
	word32 ebx_101
	word64 r13_102
	word64 rcx_103
	word32 edx_104
	word64 rdx_105
	word64 rax_106
	word64 r9_107
	word32 eax_108
	byte dl_109
	call error (retsize: 8; depth: 48)
		uses: bLoc27_64,bLoc28_63,C_79,CZ_21,dl,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_17,eax_77,ebp_24,ebx,edi_57,edx,esi_59,r10_6,r10d_7,r12_12,r13_65,r8_72,r9_70,rax_76,rbp_23,rbx_66,rcx_73,rdi_75,rdx_71,rsi_74,rsp_18,S_61,SCZO_58,SZO_78,Z_54
		defs: C_94,CZ_93,dl_109,eax_108,ebp_92,ebx_101,edi_91,edx_104,esi_86,r10_85,r10d_98,r12_87,r13_102,r8_88,r9_107,rax_106,rbp_84,rbx_89,rcx_103,rdi_95,rdx_105,rsi_96,rsp_83,S_100,SCZO_90,SZO_99,Z_97
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r13:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000041132F:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 rbp:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> r13:<invalid> rdx:<invalid> rax:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word32 fn0000000000411360(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebp r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411360_entry:
// DataOut: cl edx fs r11 r8 rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64)

l0000000000411360:
	branch edx >u 0x00000024 l0000000000411788
// DataOut: cl fs r11 r14 r14b r14d r8 rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000411788:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416FE8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041137A:
	branch rsi != 0x0000000000000000 l0000000000411392
// DataOut: fs r11 r12 r13 r13b r14 r14b r14d r15 r8 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l000000000041138E_1:
// DataOut: fs r11 r12 r13 r13b r14 r14b r14d r15 r8 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000411392:
	word64 rsp_40
	word64 rdi_41
	word64 rsi_42
	word32 r14d_43
	word32 edx_44
	word64 r14_45
	word64 rbp_46
	word64 rbx_47
	byte SCZO_48
	byte CZ_49
	word64 rax_50
	word64 r15_51
	byte SZO_52
	byte C_53
	word64 r13_54
	word64 rcx_55
	word64 r12_56
	word64 r8_57
	byte Z_58
	word32 ecx_59
	word64 rdx_60
	word32 esi_61
	word32 edi_62
	word32 ebx_63
	word32 r9d_64
	word32 eax_67
	word32 ebp_68
	byte dl_69
	byte al_70
	byte S_71
	word32 r8d_72
	byte cl_73
	word64 r9_66
	byte bl_1075
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: bl_39,C_31,CZ_24,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_18,dwLoc18_21,ebp_27,ebx_37,edx,r12_35,r13_33,r14_9,r14d_10,r15_28,r8,rax_25,rbp_26,rbx_38,rcx,rdi,rsi,rsp_22,SCZO_23,SZO_29,Z_30
		defs: al_70,bl_65,C_53,cl_73,CZ_49,dl_69,eax_67,ebp_68,ebx_63,ecx_59,edi_62,edx_44,esi_61,r12_56,r13_54,r14_45,r14d_43,r15_51,r8_57,r8d_72,r9_66,r9d_64,rax_50,rbp_46,rbx_47,rcx_55,rdi_41,rdx_60,rsi_42,rsp_40,S_71,SCZO_48,SZO_52,Z_58
	word64 rax_1068 = rbp_46
// DataOut: bl fs r11 r12 r13 r13b r14 r14b r14d r15 r8 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113AF:
	word32 r9d_91 = (word32) bl_1075
	r9_66 = DPB(r9_66, r9d_91, 0) (alias)
	*r9Out = r9_66
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_66 * 0x0000000000000002:byte] & 0x20) != 0x00 l00000000004113A8
// DataOut: bl fs r11 r12 r13 r13b r14 r14b r14d r15 r8 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113A8:
	rax_1068 = rax_1068 + 0x0000000000000001
	bl_1075 = (byte) (word32) Mem0[rax_1068:byte] (alias)
// DataOut: bl fs r11 r12 r13 r13b r14 r14b r14d r15 r8 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113BB:
	word32 eax_173
	branch bl_1075 != 0x2D l00000000004113D8
// DataOut: fs r11 r12 r13 r13b r14 r14b r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113D8:
	word32 ebp_1010
	word64 rbp_1009
	word32 edx_1030
	word64 rax_230 = __errno_location()
	Mem239[rax_230:word32] = 0x00000000
	word64 rsp_244
	word64 rdi_245
	word64 rsi_246
	word32 r14d_247
	word32 edx_248
	word64 r14_249
	word64 rbp_250
	word64 rbx_251
	byte SCZO_252
	byte CZ_253
	word64 rax_254
	word64 r15_255
	byte SZO_256
	byte C_257
	word64 r13_258
	word64 rcx_259
	word64 r12_260
	word64 r8_261
	byte Z_262
	word32 ecx_263
	word64 rdx_264
	word32 esi_265
	word32 edi_266
	word32 ebx_267
	word32 r9d_268
	byte bl_269
	word64 r9_270
	word32 eax_271
	word32 ebp_272
	byte dl_273
	byte al_274
	byte S_275
	word32 r8d_276
	byte cl_277
	call __strtoul_internal (retsize: 8; depth: 72)
		uses: al_232,bl_84,C_236,cl_73,CZ_49,dl_77,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_18,dwLoc18_21,dwLoc38,eax_231,ebp_68,ebx_83,ecx_234,edi_62,edx_76,esi_241,qwLoc08,qwLoc10,qwLoc18,qwLoc28,qwLoc38_243,r12_56,r13_54,r14_45,r14d_43,r15_51,r8_57,r8d_72,r9_92,r9d_91,rax_230,rbp_46,rbx_90,rcx_233,rdi_242,rdx_237,rsi_240,rsp_40,S_71,SCZO_96,SZO_235,Z_97
		defs: al_274,bl_269,C_257,cl_277,CZ_253,dl_273,eax_271,ebp_272,ebx_267,ecx_263,edi_266,edx_248,esi_265,r12_260,r13_258,r14_249,r14d_247,r15_255,r8_261,r8d_276,r9_270,r9d_268,rax_254,rbp_250,rbx_251,rcx_259,rdi_245,rdx_264,rsi_246,rsp_244,S_275,SCZO_252,SZO_256,Z_262
	word64 r14_278 = Mem239[r15_255:word64]
	*r14Out = r14_278
	word64 rbx_1057 = rax_254
	word64 r8_283 = rax_230
	*r8Out = r8_283
	word32 r8d_284 = (word32) rax_230
	branch r14_278 == rbp_250 l00000000004114BF
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114BF:
	branch r12_260 == 0x0000000000000000 l00000000004113C0
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114C8:
	word32 edx_1044 = (word32) Mem239[rbp_250:byte]
	byte dl_1047 = (byte) edx_1044
	branch dl_1047 == 0x00 l00000000004113C0
// DataOut: dl edx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114D4:
	rbp_1009 = 0x0000000000000000
	ebp_1010 = 0x00000000 (alias)
	rbx_1057 = 0x0000000000000001
	edx_1030 = (word32) (uint64) edx_1044 (alias)
	branch strchr(r12_260, DPB(rsi_246, (int32) dl_1047, 0)) != 0x0000000000000000 l000000000041146C
// DataOut: dl ebp edx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114F7:
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:0x0000000000000001 r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041140C:
	word32 eax_1003 = (word32) (uint64) Mem239[rax_254:word32]
	branch eax_1003 != 0x00000000 l0000000000411440
// DataOut: eax fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411440:
	rbp_1009 = 0x0000000000000001
	ebp_1010 = 0x00000001 (alias)
	branch eax_1003 != 0x00000022 l00000000004113C0
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041144E:
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411413:
	rbp_1009 = 0x0000000000000000
	ebp_1010 = 0x00000000 (alias)
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411415:
	branch r12_260 == 0x0000000000000000 l0000000000411422
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041141A:
	word32 edx_1014 = (word32) Mem239[rsi_246:byte]
	byte dl_1017 = (byte) edx_1014
	branch dl_1017 != 0x00 l0000000000411450
// DataOut: dl ebp edx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411450:
	edx_1030 = (word32) (uint64) edx_1014 (alias)
	branch strchr(r12_260, DPB(rsi_246, (int32) dl_1017, 0)) == 0x0000000000000000 l0000000000411500
// DataOut: dl ebp edx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041146C:
	word32 eax_383
	word64 rax_382
	word32 ecx_378
	word64 rsi_366 = 0x0000000000000030
	word32 edx_375 = (word32) (uint64) edx_1030
	branch strchr(r12_260, 0x0000000000000030) == 0x0000000000000000 l00000000004114A3
// DataOut: dl ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411486:
	byte al_973 = (byte) (word32) Mem239[0x0000000000000031:byte]
	branch al_973 == 0x44 l000000000041173A
// DataOut: al dl ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411493:
	branch al_973 == 0x69 l0000000000411722
// DataOut: al dl ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411722:
	word64 rcx_997 = (uint64) (Mem239[0x0000000000000032:byte] == 0x42)
	rax_382 = 0x0000000000000400
	eax_383 = 0x00000400 (alias)
	ecx_378 = rcx_997 + 0x0000000000000001 + rcx_997
// DataOut: dl eax ebp ecx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041149B:
	branch al_973 == 0x42 l000000000041173A
// DataOut: dl ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041173A:
	ecx_378 = 0x00000002 (alias)
	rax_382 = 0x00000000000003E8
	eax_383 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114A3:
	ecx_378 = 0x00000001 (alias)
	rax_382 = 0x0000000000000400
	eax_383 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114AD:
	word64 rdx_385 = (uint64) (edx_375 - 0x00000042)
	byte dl_388 = (byte) rdx_385
	branch dl_388 >u 0x35 l0000000000411500
// DataOut: dl eax ebp ecx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114B5:
	word32 edx_403
	word64 rdi_600
	switch (DPB(rdx_385, (word32) dl_388, 0)) { l00000000004116D9 l0000000000411500 l0000000000411500 l000000000041169A l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411604 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411592 l0000000000411557 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l000000000041153C l000000000041150E l0000000000411500 l0000000000411500 l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l000000000041152C }
// DataOut: eax ebp ecx fs r11 r12 r13 r13b r14 r14b r15 r8 r8d r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041152C:
	branch rbx_1057 < 0x0000000000000000 l000000000041175B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411535:
	rbx_1057 = rbx_1057 * 0x0000000000000002
	edx_403 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041150E:
	edx_403 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041153C:
	word64 r8_930 = 0x00000000FFFFFFFF
	*r8Out = r8_930
	branch rbx_1057 >u rax_382 l000000000041175B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041154F:
	rbx_1057 = rbx_1057 << 0x0000000000000009
	edx_403 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:0x00000000FFFFFFFF edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411557:
	word64 rdi_862 = (int64) eax_383
	word64 rax_869 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_862)
	word32 esi_873 = 0x00000007
	edx_403 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041157E:
	branch rax_869 >=u rbx_1057 l000000000041156F
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041156F:
	rbx_1057 = rbx_1057 *s rdi_862
	word64 r8_926
	*r8Out = 0x0000000000000000
	r8d_284 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411583:
	rbx_1057 = 0xFFFFFFFFFFFFFFFF
	rax_869 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411576:
	rsi_366 = (uint64) (esi_873 - 0x00000001)
	edx_403 = (word32) (uint64) (edx_403 | r8d_284) (alias)
	esi_873 = (word32) rsi_366 (alias)
	branch esi_873 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411592:
	word64 rdi_794 = (int64) eax_383
	word64 rax_801 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_794)
	word32 esi_805 = 0x00000008
	edx_403 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115BD:
	branch rax_801 >=u rbx_1057 l00000000004115AA
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115AA:
	rbx_1057 = rbx_1057 *s rdi_794
	word64 r8_858
	*r8Out = 0x0000000000000000
	r8d_284 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115C2:
	rbx_1057 = 0xFFFFFFFFFFFFFFFF
	rax_801 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115B1:
	rsi_366 = (uint64) (esi_805 - 0x00000001)
	edx_403 = (word32) (uint64) (edx_403 | r8d_284) (alias)
	esi_805 = (word32) rsi_366 (alias)
	branch esi_805 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115D1:
	rsi_366 = (int64) eax_383
	word64 rax_733 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_366)
	word32 edi_737 = 0x00000004
	edx_403 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115E7:
	branch rax_733 <u rbx_1057 l0000000000411749
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411749:
	rbx_1057 = 0xFFFFFFFFFFFFFFFF
	rax_733 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F0:
	rbx_1057 = rbx_1057 *s rsi_366
	word64 r8_783
	*r8Out = 0x0000000000000000
	r8d_284 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F7:
	edx_403 = (word32) (uint64) (edx_403 | r8d_284) (alias)
	edi_737 = (word32) (uint64) (edi_737 - 0x00000001) (alias)
	branch edi_737 != 0x00000000 l00000000004115E7
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115FF:
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411604:
	rsi_366 = (int64) eax_383
	word64 rax_665 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_366)
	word32 edi_669 = 0x00000005
	edx_403 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041162F:
	branch rax_665 >=u rbx_1057 l000000000041161C
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041161C:
	rbx_1057 = rbx_1057 *s rsi_366
	word64 r8_722
	*r8Out = 0x0000000000000000
	r8d_284 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411634:
	rbx_1057 = 0xFFFFFFFFFFFFFFFF
	rax_665 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411623:
	edx_403 = (word32) (uint64) (edx_403 | r8d_284) (alias)
	edi_669 = (word32) (uint64) (edi_669 - 0x00000001) (alias)
	branch edi_669 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411643:
	rdi_600 = (int64) eax_383
	rsi_366 = 0xFFFFFFFFFFFFFFFF
	word64 rax_638 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_600)
	branch rbx_1057 >u rax_638 l000000000041177B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041165E:
	rbx_1057 = rbx_1057 *s rdi_600
	branch rax_638 <u rbx_1057 l000000000041177B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041177B:
	edx_403 = 0x00000001 (alias)
	rbx_1057 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411676:
	rdi_600 = (int64) eax_383
	rsi_366 = 0xFFFFFFFFFFFFFFFF
	branch rbx_1057 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_600) l000000000041166B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041166B:
	rsi_366 = 0xFFFFFFFFFFFFFFFF
	rbx_1057 = rbx_1057 *s rdi_600
	edx_403 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041168D:
	rbx_1057 = 0xFFFFFFFFFFFFFFFF
	edx_403 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116F3:
	rsi_366 = (int64) eax_383
	word64 rax_530 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_366)
	word32 edi_534 = 0x00000003
	edx_403 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411709:
	branch rax_530 <u rbx_1057 l000000000041176C
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041176C:
	rbx_1057 = 0xFFFFFFFFFFFFFFFF
	rax_530 = 0x0000000000000001
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041170E:
	rbx_1057 = rbx_1057 *s rsi_366
	word64 r8_580
	*r8Out = 0x0000000000000000
	r8d_284 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411715:
	edx_403 = (word32) (uint64) (edx_403 | r8d_284) (alias)
	edi_534 = (word32) (uint64) (edi_534 - 0x00000001) (alias)
	branch edi_534 != 0x00000000 l0000000000411709
// DataOut: ebp ecx edi edx fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041171D:
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041169A:
	word64 rdi_455 = (int64) eax_383
	word64 rax_462 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_455)
	word32 esi_466 = 0x00000006
	edx_403 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116C5:
	branch rax_462 >=u rbx_1057 l00000000004116B2
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B2:
	rbx_1057 = rbx_1057 *s rdi_455
	word64 r8_519
	*r8Out = 0x0000000000000000
	r8d_284 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116CA:
	rbx_1057 = 0xFFFFFFFFFFFFFFFF
	rax_462 = 0x0000000000000001
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B9:
	rsi_366 = (uint64) (esi_466 - 0x00000001)
	edx_403 = (word32) (uint64) (edx_403 | r8d_284) (alias)
	esi_466 = (word32) rsi_366 (alias)
	branch esi_466 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r11 r12 r13 r13b r14 r15 r8 r8d r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411500:
	Mem350[rbp_1009:word64] = rbx_1057
	eax_173 = (word32) (uint64) ((word32) (uint64) ebp_1010 | 0x00000002) (alias)
// DataOut: eax fs r11 r12 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116D9:
	word64 r8_442 = 0x00000000FFFFFFFF
	*r8Out = r8_442
	branch rbx_1057 >u rax_382 l000000000041175B
// DataOut: ebp ecx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041175B:
	rbx_1057 = 0xFFFFFFFFFFFFFFFF
	edx_403 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116E8:
	rbx_1057 = rbx_1057 << 0x000000000000000A
	edx_403 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r11 r12 r13 r13b r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:0x00000000FFFFFFFF edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411510:
	rbp_1009 = (uint64) (ebp_1010 | edx_403)
	word64 r14_413 = r14_278 + (int64) ecx_378
	*r14Out = r14_413
	Mem421[r15_255:word64] = r14_413
	ebp_1010 = (word32) rbp_1009 (alias)
	word32 eax_419 = (word32) (uint64) ((word32) (uint64) ebp_1010 | 0x00000002)
	branch Mem421[rsi_366:byte] == 0x00 l0000000000411527
// DataOut: eax ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411524_1:
	ebp_1010 = eax_419
	rbp_1009 = DPB(rbp_1009, eax_419, 0) (alias)
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411527:
// DataOut: ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411422:
	Mem310[rbp_1009:word64] = rbx_1057
	word64 rbp_323
	*rbpOut = Mem310[qwLoc08 + 0x0000000000000008:word64]
	return (word32) (uint64) ebp_1010
// DataOut: eax ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004113C0:
	eax_173 = 0x00000004 (alias)
// DataOut: eax fs r11 r12 r13 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113C5:
	word64 rbp_186
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return eax_173
// DataOut: eax ebp fs r11 r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411360_exit:
// DataOut: eax ebp r12 r13 r13b r14 r14b r15 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn00000000004117B0(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004117B0_entry:
// DataOut: edi fs r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l00000000004117B0:
	word32 eax_16
	branch edi == 0x00000000 l0000000000411800
// DataOut: edi fs r11 r12 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411800:
	Mem78[__errno_location():word32] = 0x0000005F
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117B8:
	word64 rax_24 = (uint64) edi
	byte Z_22 = cond(edi - 0x0000000A)
	eax_16 = (word32) rax_24 (alias)
	branch edi == 0x0000000A l00000000004117C8
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117C8:
	word64 rdx_31 = Mem0[rsi:word64]
	word64 rdi_32 = 0x00000000004137B1
	word64 rcx_34 = 0x000000000000000A
	word64 rsi_35 = rdx_31
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi

l00000000004117D8:
	branch rcx_34 == 0x0000000000000000 l00000000004117DA
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117D8_1:
	Z_22 = cond(Mem0[rsi_82:byte] - Mem0[rdi_81:byte]) (alias)
	rsi_35 = rsi_82 + 0x0000000000000001
	rdi_32 = rdi_81 + 0x0000000000000001
	rcx_34 = rcx_34 - 0x0000000000000001
	word64 rdi_81 = rdi_32
	word64 rsi_82 = rsi_35
	branch Mem0[rsi_82:byte] != Mem0[rdi_81:byte] l00000000004117D8
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DA:
	branch Z_22 l00000000004117BF
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DC:
	word64 rsp_53
	byte SCZO_54
	word32 edi_55
	byte SZO_56
	byte C_57
	byte Z_58
	word64 rax_59
	word64 rsi_60
	word64 rdx_61
	word64 rdi_62
	word64 rcx_63
	word32 eax_64
	call freecon (retsize: 8; depth: 8)
		uses: C_48,eax_25,edi_50,rax_24,rcx_44,rdi_52,rdx_31,rsi_46,rsp_2,SCZO_51,SZO_49,Z_47
		defs: C_57,eax_64,edi_55,rax_59,rcx_63,rdi_62,rdx_61,rsi_60,rsp_53,SCZO_54,SZO_56,Z_58
	Mem66[__errno_location():word32] = 0x0000003D
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117BF:
	return eax_16
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

fn00000000004117B0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:v3 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>



word32 fn0000000000411820(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411820_entry:
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411820:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	word64 rdi_14
	byte SCZO_15
	byte SZO_16
	byte C_17
	byte Z_18
	word64 rax_19
	word64 rdx_20
	word32 ecx_21
	word64 rcx_22
	call getfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: C_17,eax_13,ecx_21,edi_12,rax_19,rbx_10,rcx_22,rdi_14,rdx_20,rsi_11,rsp_9,SCZO_15,SZO_16,Z_18
	word32 edi_25 = (word32) (uint64) eax_13
// DataOut: edi fs r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041182E_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_10, edi_25)
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi rdi:(uint64) eax -4(fp):rbx

fn0000000000411820_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx



word32 fn0000000000411840(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411840_entry:
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411840:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	word64 rdi_14
	call lgetfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: eax_13,edi_12,rbx_10,rdi_14,rsi_11,rsp_9
	word32 edi_17 = (word32) (uint64) eax_13
// DataOut: edi fs r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041184F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_10, edi_17)
// DataOut: eax fs r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi rdi:(uint64) eax -4(fp):rbx

fn0000000000411840_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx



void fn0000000000411880(word64 rdi, word64 r8, word64 r13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411880_entry:
// DataOut: r13 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411880:
	word64 rsp_13
	word64 rbp_14
	word64 rdi_15
	word64 rbx_16
	word32 ebx_17
	word64 r12_18
	word64 rax_19
	byte SZO_20
	byte C_21
	word32 eax_22
	byte dl_23
	byte Z_24
	byte SCZO_25
	byte bl_26
	word64 r8_27
	word64 r13_28
	word64 rsi_29
	call __fpending (retsize: 8; depth: 20)
		uses: dwLoc04_4,dwLoc08_7,dwLoc0C_12,rbp_9,rbx,rdi,rsp_10
		defs: bl_26,C_21,dl_23,eax_22,ebx_17,r12_18,r13_28,r8_27,rax_19,rbp_14,rbx_16,rdi_15,rsi_29,rsp_13,SCZO_25,SZO_20,Z_24
	word32 ebx_35
	word64 rsp_36
	word64 rbp_37
	word64 rsi_38
	word64 r12_39
	word32 eax_40 = fn0000000000411D30(rbp_14, r8_27, r13_28, out ebx_35, out rsp_36, out rbp_37, out rsi_38, out r12_39)
	branch (word32) (uint64) (ebx_35 & 0x00000020) != 0x00000000 l00000000004118C0
// DataOut: dl ebx r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004118C0:
	branch eax_40 != 0x00000000 != 0x00 l00000000004118B4
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118C9:
	Mem105[__errno_location():word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118A6:
	branch eax_40 != 0x00000000 == 0x00 l00000000004118B4
// DataOut: ebx r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118AA:
	branch r12_39 == 0x0000000000000000 l00000000004118E0
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118E0:
	__errno_location()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118B4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:(uint64) ebx bl:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000411900(word64 rsi, word64 r8, word64 r12, word64 r13, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r12 r13 r15 r8 rsi
// LiveOut: r12 r12b r12d r13 r15 r15b r8 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411900_entry:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411900:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rdi = 0x000000000000000E
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v7 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rsp = fp - 0x00000000000000C0
	esp = (word32) rsp (alias)
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	rax = 0x0000000000000000
	eax = (word32) rax (alias)
	SZO = cond(eax)
	C = false
	call nl_langinfo (retsize: 8; depth: 200)
	r14 = Mem0[0x000000000061B358:word64]
	SZO = cond(0x0000000000000000)
	Z = SZO (alias)
	C = false
	rbx = 0x0000000000000000
	ebx = (word32) rbx (alias)
	rax = 0x0000000000416919
	branch Test(NE,Z) l0000000000411944
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411940_1:
	rbx = 0x0000000000416919
	ebx = (word32) rbx (alias)
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411944:
	SZO = cond(r14 & r14)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l000000000041196A
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411949:
// DataOut: fs r12 r12b r12d r13 r14 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119D4:
	rdi = 0x0000000000417002
	rax = getenv(0x0000000000417002)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	r15 = rax
	branch Test(EQ,Z) l00000000004119EF
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C52:
	rdi = rax
	eax = strlen(rdi)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C62:
	rax = rax - 0x0000000000000001
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119EF:
	rax = 0x0000000000000007
	rsp = 0x0000000000000008
	rdi = 0x0000000000416FF3
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	rbp = 0x0000000000000001
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C42:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000000
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> rbp:0x0000000000000001 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A19:
	r13 = r13 + r12
	rdi = 0x000000000000000F
	rax = malloc(0x000000000000000F)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:0x0000000000000001 eax:<invalid> r12:<invalid> r13:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CF2:
	rsi = 0x0000000000416919
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:0x000000000000000F rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	rdx = (uint64) Mem0[rsp + 0x0000000000000008:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
// DataOut: fs r13 r14 r15 r15b rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:0x000000000000000F rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
// DataOut: fs r13 r14 r15 r15b rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A4D:
	r13 = r13 + rbp
	r8 = 0x0000000072616863
	rsi = 0x0000000000020000
	Mem0[rbp + 0x0000000000000000:word64] = rax
	rax = 0x0000000000000073
	Mem0[rbp + 0x0000000000000008:word32] = 0x61696C61
	Mem0[rbp + 0x000000000000000C:word16] = ax
	rdi = rbp
	rax = 0x0000000000000000
	eax = open(rdi, 0x0000000000020000)
	SZO = cond(eax & eax)
	C = false
	r12 = (uint64) eax
	branch Test(SG,S) l0000000000411C28
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A8A:
	rsi = 0x0000000000413A21
	rdi = (uint64) eax
	rax = fdopen(rdi, 0x0000000000413A21)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000020000 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C20:
	rdi = (uint64) r12d
	eax = close(rdi)
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000413A21 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AA2:
	r12 = rsp + 0x0000000000000020
	Mem0[rsp + 0x0000000000000008:word64] = 0x0000000000000000
// DataOut: fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:0x0000000000413A21 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AB0:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
// DataOut: fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C75:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D1D:
	rdi = r15
	call __uflow (retsize: 8; depth: 8)
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
// DataOut: fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ADF:
	rsi = r15
	eax = ungetc(rdi, rsi)
	rcx = rsp + 0x0000000000000060
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = r12
	rsi = 0x0000000000417012
	rdi = r15
	call fscanf (retsize: 8; depth: 8)
	SCZO = cond(0xFFFFFFFF)
	branch Test(LE,SZO) l0000000000411C9C
// DataOut: fs r12 r13 r14 r15 r15b r8 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B07:
	rdx = r12
// DataOut: fs r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B0A:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
// DataOut: al eax fs r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B21:
	rcx = (uint64) eax
	r10 = rsp + 0x0000000000000060
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
// DataOut: al cl fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B30_1:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
// DataOut: al fs r10 r12 r14 r15 r15b r8 rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B37_1:
	rdx = rcx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = rdx - r12
	SCZO = cond(rdx)
// DataOut: fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B44:
	rcx = (uint64) Mem0[rdx:word32]
	r10 = r10 + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
// DataOut: al eax fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B5C:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
// DataOut: al cl fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B66_1:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B69:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
// DataOut: al fs r10 r12 r14 r15 r15b r8 rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B6D_1:
	r10 = rcx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = rsp + 0x0000000000000060
	r10 = r10 - 0x03 - C
	r10 = r10 - rax
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
// DataOut: fs r10 r12 r14 r15 r15b r8 rax rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CBC:
	rax = rax + Mem0[rsp + 0x0000000000000008:word64]
	SCZO = cond(rax)
	rdi = r14
	Mem0[rsp + 0x0000000000000018:word64] = r10
	Mem0[rsp + 0x0000000000000010:word64] = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = realloc(rdi, rsi)
	r10 = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
	rdx = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: fs r10 r12 r13 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000018:word64] = rdx
	Mem0[rsp + 0x0000000000000010:word64] = r10
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = malloc(rdi)
	r10 = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
// DataOut: fs r10 r12 r13 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
// DataOut: fs r10 r12 r13 r14 r15 r15b r8 rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BC1:
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = r12
	rdi = 0xFFFFFFFFFFFFFFFE - rdx
	r14 = r14 - r10
	rdi = rdi + r14
	rdi = rdi + r13
	rax = strcpy(rdi, rsi)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = rsp + 0x0000000000000060
	r14 = r13
	rax = strcpy(rdi, rsi)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C01:
	rdi = r15
	call __uflow (retsize: 8; depth: 8)
	SCZO = cond(eax - 0xFFFFFFFF)
	rdi = (uint64) eax
	branch Test(EQ,Z) l0000000000411C9C
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C9C:
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C28:
	rsi = 0x0000000000416919
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C2E:
	rdi = rbp
	free(rdi)
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rsi:<invalid> ebp:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041196A:
	ebp = (word32) Mem0[rsi:byte]
	rbp = DPB(rbp, ebp, 0) (alias)
	bpl = (byte) ebp (alias)
	SZO = cond(bpl & bpl)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l000000000041199C
// DataOut: bpl fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411973:
	rsi = r14
	rdi = rbx
	eax = strcmp(rdi, rsi)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
// DataOut: bpl fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411988:
	SCZO = cond(Mem0[rsi + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411950:
	rdi = r14
	eax = strlen(rdi)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	eax = strlen(rdi)
	r14 = rbp + 0x0000000000000001 + rax
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041198F:
	rdi = r14
	eax = strlen(rdi)
	rbx = r14 + 0x0000000000000001 + rax
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	rax = 0x0000000000416FFC
	branch Test(NE,Z) l00000000004119A8
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A4_1:
	rbx = 0x0000000000416FFC
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A8:
	rcx = Mem0[rsp + 0x0000000000000098:word64]
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CFD:
	__stack_chk_fail()
// DataOut: fs r13 r14 r15 r15b r8 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D02:
	rdi = r14
	rsi = 0x0000000000416919
	free(rdi)
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119C2:
	rsp = rsp + 168
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411900_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r8 (=> r8Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r15 (=> r15Out)
// DataOut: r12 r12b r12d r13 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C14:
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> eax:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn0000000000411D30(word64 rdi, word64 r8, word64 r13, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rdi
// LiveOut: eax ebx r12 r12b r12d rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411D30_entry:
	*rsiOut = rsi
	*r12Out = r12
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411D30:
	word64 rsp_127 = fp - 0x000000000000000C
	word32 eax_14 = fileno(rdi)
	word64 rdi_128 = rdi
	branch eax_14 < 0x00000000 l0000000000411D9F
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411D43:
	word64 rsp_85
	word64 rbp_86
	word64 rdi_88
	byte SZO_90
	byte C_91
	byte S_92
	byte Z_93
	word64 rax_94
	word32 r12d_95
	word64 r12_97
	word32 esi_99
	word64 rsi_100
	word32 edx_101
	word64 rdx_102
	word32 edi_103
	byte SCZO_104
	word32 ebx_105
	word64 r13_133
	word64 r8_134
	word32 eax_141
	word64 rbx_124
	call __freading (retsize: 8; depth: 20)
		uses: C_19,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_14,ebx_13,edi_21,edx,esi,r12,r12d,r13,r8,rax_16,rbp,rbx_12,rdi_20,rdx,rsi,rsp_8,S_18,SCZO,SZO_17,Z
		defs: C_91,eax_89,ebx_105,edi_103,edx_101,esi_99,r12_97,r12d_95,r13_98,r8_96,rax_94,rbp_86,rbx_87,rdi_88,rdx_102,rsi_100,rsp_85,S_92,SCZO_104,SZO_90,Z_93
	branch eax_141 != 0x00000000 l0000000000411D80
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi eax:<invalid> rdi:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D80:
	word32 eax_175 = fileno(rbx_124)
	word64 rbp_184
	word64 rdi_186
	byte SZO_188
	byte C_189
	byte S_190
	byte Z_191
	word64 rax_192
	word32 r12d_193
	word64 r12_195
	word32 esi_197
	word64 rsi_198
	word32 edx_199
	word64 rdx_200
	word32 edi_201
	byte SCZO_202
	word32 ebx_203
	call lseek (retsize: 8; depth: 20)
		uses: C_180,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_175,ebx_105,edi_103,edx_101,esi_178,r12_97,r12d_95,r13_98,r8_96,rax_176,rbp_86,rbx_87,rdi_182,rdx_181,rsi_177,rsp_85,S_92,SCZO_104,SZO_179,Z_107
		defs: C_189,eax_187,ebx_203,edi_201,edx_199,esi_197,r12_195,r12d_193,r13_196,r8_194,rax_192,rbp_184,rbx_185,rdi_186,rdx_200,rsi_198,rsp_183,S_190,SCZO_202,SZO_188,Z_191
	branch rax_192 != 0xFFFFFFFFFFFFFFFF l0000000000411D4C
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi eax:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D4C:
	word64 rsi_147
	branch fn0000000000411DB0(eax_141, rbx_124, out rsp_127, out rsi_147) == 0x00000000 l0000000000411D9C
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9C:
	rdi_128 = rbx_124
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9F:
	word64 rsp_78 = rsp_127 + 0x0000000000000008
	word32 ebx_77
	*ebxOut = (word32) Mem0[rsp_127:word64]
	word64 rbp_79
	*rbpOut = Mem0[rsp_78:word64]
	word64 rsp_82
	*rspOut = Mem0[rsp_78 + 0x0000000000000008:word64] + 0x0000000000000008
	return fclose(rdi_128)
// DataOut: eax ebx fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D58:
	__errno_location()
	word64 r12_153 = (uint64) Mem0[r8_134:word32]
	*r12Out = r12_153
	word32 r12d_154 = (word32) r12_153
	word32 eax_157 = fclose(rbx_124)
	branch r12d_154 == 0x00000000 l0000000000411D79
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D70:
	Mem171[r13_133:word32] = r12d_154
	eax_157 = 0xFFFFFFFF (alias)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D79:
	word32 ebx_165
	*ebxOut = (word32) Mem0[rsp_127:word64]
	word64 rbp_167
	*rbpOut = Mem0[rsp_127 + 0x0000000000000008:word64]
	word64 rsp_170
	*rspOut = Mem0[rsp_127 + 0x0000000000000010:word64] + 0x0000000000000008
	return eax_157
// DataOut: eax ebx fs r12 r12b r12d r13 r14 r15 r15b r8 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411D30_exit:
// DataOut: eax ebx r12 r12b r12d rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word32 fn0000000000411DB0(word32 eax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi
// LiveOut: eax rsi rsp
// Trashed: SCZO ah al ax bh bl bx dh dl dx eax ebx edx esi esp rax rbx rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411DB0_entry:
	*rsiOut = rsi
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB0:
	word64 rbx_34 = rdi
	branch rdi == 0x0000000000000000 l0000000000411DC2
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB9:
	word64 rsp_41
	word64 rdi_42
	byte SZO_43
	byte C_44
	byte Z_46
	word32 eax_47
	word32 edx_48
	word64 rdx_49
	word32 esi_50
	word64 rsi_51
	call __freading (retsize: 8; depth: 12)
		uses: C_5,dwLoc04_8,eax,edx,esi,qwLoc04,rbx_9,rdi,rdx,rsi,rsp_6,SZO_3,Z_4
		defs: C_44,eax_47,edx_48,esi_50,rbx_45,rdi_42,rdx_49,rsi_51,rsp_41,SZO_43,Z_46
	branch eax_47 != 0x00000000 l0000000000411DD0
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD0:
	branch (Mem0[rbx_34:word32] & 0x00000100) == 0x00000000 l0000000000411DC2
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD8:
	word64 rsi_66
	word64 rsp_70
	*rspOut = fn0000000000411DF0(0x00000001, rbx_34, out rsi_66) + 0x0000000000000008
	return fflush(rbx_34)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l0000000000411DC2:
	word64 rsp_38
	*rspOut = fp + 0x0000000000000004
	return fflush(rbx_34)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

fn0000000000411DB0_exit:
// DataOut: eax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdi:rdi eax:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx



word64 fn0000000000411DF0(word32 edx, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx rdi
// LiveOut: rsi rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi esp rax rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411DF0_entry:
// DataOut: edx fs r12 r12b r12d r13 r14 r15 r15b r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DF0:
	word64 rax_9 = Mem0[rdi + 0x0000000000000008:word64]
	branch Mem0[rdi + 0x0000000000000010:word64] == rax_9 l0000000000411E10
// DataOut: edx fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411E10:
	branch Mem0[rdi + 0x0000000000000028:word64] != Mem0[rdi + 0x0000000000000020:word64] l0000000000411E02
// DataOut: edx fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E1A:
	branch Mem0[rdi + 0x0000000000000048:word64] != 0x0000000000000000 l0000000000411E02
// DataOut: edx fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E21:
	word32 eax_63 = fileno(rdi)
	word64 rsp_68
	word64 rbx_69
	word64 rdi_70
	byte SCZO_71
	word64 rax_72
	byte Z_73
	word32 edx_74
	word64 rsi_75
	word32 eax_76
	word64 rdx_77
	word32 edi_78
	byte SZO_79
	byte C_80
	call lseek (retsize: 8; depth: 28)
		uses: C,dwLoc04_4,dwLoc08_61,eax_63,edi,edx,qwLoc04,qwLoc14_62,rax_64,rbx_6,rdi_67,rdx_65,rsi_66,rsp_7,SCZO_59,SZO,Z_60
		defs: C_80,eax_76,edi_78,edx_74,rax_72,rbx_69,rdi_70,rdx_77,rsi_75,rsp_68,SCZO_71,SZO_79,Z_73
	branch rax_72 == 0xFFFFFFFFFFFFFFFF l0000000000411E4F
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E43:
	Mem91[rbx_69:word32] = Mem0[rbx_69:word32] & 0xFFFFFFEF
	Mem93[rbx_69 + 0x0000000000000090:word64] = rax_72
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E4F:
	return fp + 0x0000000000000004
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx

l0000000000411E02:
	word64 rsp_43
	word64 rbx_44
	word64 rdi_45
	byte SCZO_46
	word64 rax_47
	byte Z_48
	word32 edx_49
	word64 rsi_50
	word32 eax_51
	word64 rdx_52
	word32 edi_53
	byte SZO_54
	byte C_55
	call fseeko (retsize: 8;)
		uses: C,dwLoc04_4,dwLoc08,eax,edi,edx,qwLoc04,qwLoc14,rax_9,rbx_32,rdi_30,rdx,rsi,rsp_33,SCZO_29,SZO,Z_11
		defs: C_55,eax_51,edi_53,edx_49,rax_47,rbx_44,rdi_45,rdx_52,rsi_50,rsp_43,SCZO_46,SZO_54,Z_48
	return rsp_43
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx

fn0000000000411DF0_exit:
// DataOut: rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx



word64 fn0000000000411EE0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rax
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rsp
fn0000000000411EE0_entry:
// DataOut: ebx fs r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EE0:
	branch 0x000000000061A3A8 == 0x0000000000000000 l0000000000411EF6
// DataOut: ebx fs r11 r15 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EF6:
// DataOut: ebx fs r11 r15 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEC:
// DataOut: ebx fs r11 r15 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEF:
	word64 rsp_10
	word64 rax_11
	byte SZO_12
	byte C_13
	byte Z_14
	word64 rdx_15
	word32 esi_16
	word64 rsi_17
	word32 edx_18
	call __cxa_atexit (retsize: 8; depth: 8)
		uses: C_9,esi_7,rax_2,rsi_6,rsp_1,SZO_8,Z_4
		defs: C_13,edx_18,esi_16,rax_11,rdx_15,rsi_17,rsp_10,SZO_12,Z_14
	return rax_11
// DataOut: ebx fs r11 r15 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid>

fn0000000000411EE0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> rsi:<invalid>



void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
_fini_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411EFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

_fini_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



