void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
_init_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402168:
	word64 rax_4 = Mem0[0x0000000000619FF8:word64]
	branch rax_4 == 0x0000000000000000 l000000000040217D
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402178:
	word64 rsp_15
	byte SCZO_16
	word64 rax_17
	byte SZO_18
	byte C_19
	byte Z_20
	call __gmon_start__ (retsize: 8; depth: 16)
		uses: C_7,rax_4,rsp_2,SCZO,SZO_5,Z_6
		defs: C_19,rax_17,rsp_15,SCZO_16,SZO_18,Z_20
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l000000000040217D:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

_init_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn0000000000404890(word64 rax, word64 rdx, word64 qwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdx
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(64)
// Terminates process
fn0000000000404890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000404890_entry:
// DataOut: rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404890:
	__align(fp + 0x0000000000000008)
	word64 rax_22 = DPB(rax, __libc_start_main(0x00000000004028C0, qwArg00, fp + 0x0000000000000008, 0x0000000000411E60, 0x0000000000411ED0, rdx, DPB(qwArg00, fp + 0x0000000000000004, 0)), 0)
	__hlt()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004048C0(word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi esp r8 r8b r8d r8w rax rdi rsp sp spl
// Preserved: rbp
fn00000000004048C0_entry:
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048C0:
	branch false l00000000004048D7
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048D7:
	branch 0x0000000000000000 == 0x0000000000000000 l00000000004048D5
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:0x000000000061A5FF r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004048E1:
	word64 rsp_43
	word32 eax_44
	word64 rax_45
	word64 rbp_46
	word64 r8_47
	byte SCZO_48
	byte CZ_49
	byte SZO_50
	byte C_51
	byte Z_52
	word32 edi_53
	word64 rdi_54
	call eax (retsize: 4;)
		uses: C_39,CZ_9,dwLoc04_5,eax,edi,qwLoc04,r8_7,rax_36,rbp_40,rdi_42,rsp_41,SCZO_8,SZO_37,Z_38
		defs: C_51,CZ_49,eax_44,edi_53,r8_47,rax_45,rbp_46,rdi_54,rsp_43,SCZO_48,SZO_50,Z_52
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:0x0000000000000000 r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

l00000000004048D5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:<invalid> r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

fn00000000004048C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rax:<invalid> r8:<invalid> rbp:rbp rdi:<invalid> -4(fp):rbp



void fn00000000004049E0(word64 rcx, byte dl, word64 r13, word64 r14, word64 r15, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r13 r14 r15 rcx
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx eax ebp ecx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64)
fn00000000004049E0_entry:
// DataOut: dl r13 r14 r15 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l00000000004049E0:
	word64 r8_103 = Mem0[r14:word64]
	word64 rax_106 = 0x0000000000000000
	word32 eax_211 = 0x00000000
	word64 r9_105 = Mem0[r15:word64]
	word64 r10_104 = 0x0000000000000000
	word64 r11_117 = 0x0000000000000000
	word32 r11d_118 = 0x00000000
	byte r11b_119 = 0x00
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A06:
	byte al_267
	byte SZO_161
	byte al_100
	word32 eax_145
	branch eax_211 == 0x00000002 l0000000000404A59
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A59:
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000030) <=u 0x07 l0000000000404A50
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A50:
	r11d_118 = rax_106 - 0x0000000000000030 + r11_117 * 0x0000000000000008
	r11_117 = DPB(r11_117, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
	r8_103 = r8_103 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A0B:
	branch eax_211 <=u 0x00000002 l0000000000404B20
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B20:
	branch eax_211 != 0x00000001 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A11:
	branch eax_211 == 0x00000003 l0000000000404AE0
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AE0:
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	byte cl_383 = (byte) (rax_106 - 0x0000000000000030)
	branch cl_383 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AF0:
	r14 = 0x0000000000000001 << cl_383
	word32 r14d_400 = (word32) r14
	branch (r14d_400 & 0x007E0000) != 0x00000000 l0000000000404B78
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B78:
	word64 r11_423 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000037 + r11_423
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_423, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	cl_383 = (byte) (rax_106 - 0x0000000000000030) (alias)
	branch cl_383 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B95:
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AFF:
	branch (r14 & 0x0000000000000000) != 0x0000000000000000 l0000000000404AD0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AD0:
	word64 r11_416 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000057 + r11_416
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_416, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B04:
	branch (r14d_400 & 0x000003FF) == 0x00000000 l0000000000404A65
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A65:
	Mem350[r9_105:byte] = r11b_119
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B11:
	word64 r11_410 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000030 + r11_410
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_410, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A1A:
	branch eax_211 != 0x00000004 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A22:
	eax_145 = (word32) Mem0[rax_106:byte]
	rax_106 = DPB(rax_106, eax_145, 0) (alias)
	al_267 = (byte) eax_145 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000040) <=u 0x3E l0000000000404AA0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A2E:
	branch al_267 == 0x3F l0000000000404CB0
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CB0:
	Mem329[rcx:byte] = 0x7F
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A70:
	word32 eax_298 = (word32) Mem0[rax_106:byte]
	al_100 = (byte) eax_298 (alias)
	rax_106 = DPB(rax_106, eax_298, 0) (alias)
	SZO_161 = cond(al_100 - 0x3D) (alias)
	branch al_100 == 0x3D l0000000000404ABA
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A78:
	branch SZO_161 l0000000000404B40
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B40:
	branch al_100 == 0x00 l0000000000404B48
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B44:
	branch al_100 != 0x3A l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B48:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A7E:
	branch al_100 == 0x5C l0000000000404CA0
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CA0:
	r8_103 = r8_103 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B29:
	word32 eax_200 = (word32) Mem0[rax_106:byte]
	byte al_202 = (byte) eax_200
	branch al_202 >u 0x78 l0000000000404C90
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404C90:
	r11_117 = (uint64) eax_200
	r11d_118 = (word32) r11_117 (alias)
	r11b_119 = (byte) r11_117 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BD0:
	Mem231[r9_105:byte] = r11b_119
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
	rax_106 = 0x0000000000000000
	eax_211 = 0x00000000 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B35:
	rcx = DPB(rcx, (word32) al_202, 0) (alias)
	switch (rcx) { l0000000000404BF0 }
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BF0:
	rax_106 = 0x0000000000000006
	eax_211 = 0x00000006 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:(word32) al r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BB0:
	r8_103 = r8_103 + 0x0000000000000001
	branch eax_211 <=u 0x00000004 l0000000000404A06
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BBD:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B4D:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A86:
	branch al_100 != 0x5E l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A8E:
	eax_145 = (word32) Mem0[rax_106:byte]
	rax_106 = DPB(rax_106, eax_145, 0) (alias)
	r8_103 = r8_103 + 0x0000000000000001
	al_267 = (byte) eax_145 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000040) >u 0x3E l0000000000404A2E
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A9E:
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AA0:
	word64 rax_149 = (uint64) (eax_145 & 0x0000001F)
	Mem154[rcx:byte] = (byte) rax_149
	word32 eax_155 = (word32) Mem154[rax_149:byte]
	al_100 = (byte) eax_155 (alias)
	r8_103 = r8_103 + 0x0000000000000001
	r10_104 = r10_104 + 0x0000000000000001
	rax_106 = DPB(rax_149, eax_155, 0) (alias)
	r9_105 = r9_105 + 0x0000000000000001
	SZO_161 = cond(al_100 - 0x3D) (alias)
	branch al_100 != 0x3D l0000000000404A78
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404ABA:
	branch dl == 0x00 l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B60:
	Mem109[rcx:byte] = al_100
	r8_103 = r8_103 + 0x0000000000000001
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AC2:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A36:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A38:
	Mem76[r15:word64] = r9_105
	Mem77[r14:word64] = r8_103
	Mem78[r13:word64] = r10_104
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi

fn00000000004049E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:SLICE(rsi, word64, 32) + 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:fp - 0x0000000000000004 rbx:rbx eax:<invalid> ecx:<invalid> rsi:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi



word64 fn0000000000404CD0(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut: al eax rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000404CD0_entry:
// DataOut: ebp ebx edi fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CD0:
	word64 rdi_3 = (uint64) edi
	word64 rax_33 = 0x0000000000000000
	word64 rdx_9 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E0:word64]
	word64 rsi_10 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E8:word64]
	branch rdx_9 == 0x0000000000000000 l0000000000404CFC
// DataOut: al eax ebp ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CEB:
	branch rdx_9 == 0x0000000000000001 l0000000000404D10
// DataOut: ebp ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000000 rdx:<invalid> rsi:<invalid>

l0000000000404D10:
	return (uint64) (Mem0[rsi_10:byte] != 0x30)
// DataOut: al eax ebp ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000000 rdx:<invalid> rsi:<invalid>

l0000000000404CF1:
	byte Z_41 = cond(rdx_9 - 0x0000000000000002)
	rax_33 = 0x0000000000000001
	branch rdx_9 == 0x0000000000000002 l0000000000404D00
// DataOut: al eax ebp ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000000 rdx:<invalid> rsi:<invalid>

l0000000000404D00:
	word64 rdi_45 = 0x0000000000413733
	word64 rcx_47 = 0x0000000000000002
// DataOut: ebp ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000001 rdx:<invalid> rsi:<invalid>

l0000000000404D0A:
	branch rcx_47 == 0x0000000000000000 l0000000000404D0C
// DataOut: ebp ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0A_1:
	Z_41 = cond(Mem0[rsi_84:byte] - Mem0[rdi_85:byte]) (alias)
	rsi_10 = rsi_84 + 0x0000000000000001
	rdi_45 = rdi_85 + 0x0000000000000001
	rcx_47 = rcx_47 - 0x0000000000000001
	word64 rsi_84 = rsi_10
	word64 rdi_85 = rdi_45
	branch Mem0[rsi_84:byte] != Mem0[rdi_85:byte] l0000000000404D0A
// DataOut: ebp ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0C:
	return DPB(0x0000000000000001, Z_41, 0)
// DataOut: al eax ebp ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404CFC:
	return rax_33
// DataOut: al eax ebp ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

fn0000000000404CD0_exit:
// DataOut: al eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:Test(NE,Z) rcx:<invalid>



word64 fn0000000000404D20(word32 edx, word64 rsi, word64 rdi, word64 r11, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx r11 rdi rsi
// LiveOut: r12 r13 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404D20_entry:
// DataOut: dl edx r11 r14d r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D20:
	word64 r13_6 = (uint64) edx
	*r13Out = r13_6
	byte r13b_8 = (byte) r13_6
	word64 r12_13
	*r12Out = rsi
	word64 rbp_17 = rdi
	word64 rsp_24
	word64 rax_25 = fn0000000000410C40(rsi, 0x0000000000000020, out rsp_24)
	word64 rax_27 = 0x0000000000000000
	branch rsi == 0x0000000000000000 l0000000000404D4F
// DataOut: r11 r12 r13 r13b r14d r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404D47:
	word64 rsi_77
	word64 rdi_78
	rax_27 = fn0000000000410E30(0x0000000000000000, rsi, out rsp_24, out rbp_17, out rsi_77, out rdi_78)
// DataOut: r11 r12 r13 r13b r14d r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:0x0000000000000000 rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D4F:
	Mem37[rax_25 + 0x0000000000000008:word64] = rax_27
	word64 rax_38 = 0x0000000000000000
	branch rbp_17 == 0x0000000000000000 l0000000000404D62
// DataOut: r11 r12 r13 r13b r14d r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D5A:
	word64 rbp_69
	word64 rsi_70
	word64 rdi_71
	rax_38 = fn0000000000410E30(0x0000000000000000, rbp_17, out rsp_24, out rbp_69, out rsi_70, out rdi_71)
// DataOut: r11 r12 r13 r13b r14d r15 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:0x0000000000000000 rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D62:
	Mem48[rax_25:word64] = rax_38
	word64 rax_49 = Mem48[0x000000000061B190:word64]
	Mem50[r11 + 0x0000000000000010:byte] = r13b_8
	Mem52[0x000000000061B190:word64] = rax_25
	Mem53[rax_25 + 0x0000000000000018:word64] = rax_49
	word64 rsp_60 = Mem53[rsp_24 + 0x0000000000000018:word64]
	word64 rbp_62
	*rbpOut = Mem53[rsp_60 + 0x0000000000000008:word64]
	return rsp_60 + 0x0000000000000010
// DataOut: r11 r12 r13 r14d r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn0000000000404D20_exit:
// DataOut: r12 r13 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn0000000000404D90(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO di dil edi esp rdi rsp sp spl
// Preserved: rbx
fn0000000000404D90_entry:
// DataOut: r11 r12 r13 r14d rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D90:
	free(Mem0[rdi:word64])
	free(Mem0[rdi + 0x0000000000000008:word64])
	word64 rdi_10 = Mem0[rdi + 0x00000000000000A8:word64]
	branch rdi_10 == 0x000000000061A56A l0000000000404DC0
// DataOut: r11 r12 r13 r14d
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DC0:
	return fp + 0x0000000000000004
// DataOut: r11 r12 r13 r14d rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

l0000000000404DB5:
	word64 rsp_21
	word64 rbx_22
	word64 rdi_23
	byte SCZO_24
	byte Z_25
	call freecon (retsize: 8;)
		uses: dwLoc04_4,qwLoc04,rbx_19,rdi_10,rsp_20,SCZO_11,Z_12
		defs: rbx_22,rdi_23,rsp_21,SCZO_24,Z_25
	return rsp_21
// DataOut: r11 r12 r13 r14d rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

fn0000000000404D90_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> -4(fp):rbx



void fn0000000000404DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx di dil eax ebx edi esp rax rbx rdi rsp sp spl
// Preserved: rbx
fn0000000000404DD0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DD0:
	word64 rbx_33 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000404DFD
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DDD:
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:0x0000000000000000 -4(fp):rbx

l0000000000404DE0:
	fn0000000000404D90(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_33 * 0x0000000000000008:word64])
	rbx_33 = rbx_33 + 0x0000000000000001
	branch Mem0[0x000000000061B1B0:word64] >u rbx_33 l0000000000404DE0
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx

l0000000000404DFD:
	Mem19[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem20[0x000000000061B17C:byte] = 0x00
	Mem21[0x000000000061B178:word32] = 0x00000000
	Mem22[0x000000000061B174:word32] = 0x00000000
	Mem23[0x000000000061B170:word32] = 0x00000000
	Mem24[0x000000000061B168:word32] = 0x00000000
	Mem25[0x000000000061B164:word32] = 0x00000000
	Mem26[0x000000000061B160:word32] = 0x00000000
	Mem27[0x000000000061B16C:word32] = 0x00000000
	Mem28[0x000000000061B15C:word32] = 0x00000000
	Mem29[0x000000000061B158:word32] = 0x00000000
	Mem30[0x000000000061B154:word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx

fn0000000000404DD0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx



void fn0000000000404E80(word64 rsi, word64 r11, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404E80_entry:
// DataOut: r11 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404E80:
	word64 rbx_10 = Mem0[0x000000000061B1B0:word64]
	word64 rbp_12 = rbx_10
	word64 rax_14 = (rbx_10 >>u 0x0000000000000001) + rbx_10
	branch rax_14 >u Mem0[0x000000000061B1A0:word64] l0000000000404F98
// DataOut: al eax r11 r15 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404F98:
	word64 rdi_238 = Mem0[0x000000000061B1A8:word64]
	free(rdi_238)
	branch rbx_10 >u rax_14 l0000000000404FF8
// DataOut: r11 r15 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FF8:
	fn0000000000410E50()
	word64 rax_257 = DPB(rax_14, strcmp(Mem0[rdi_238:word64], Mem0[rsi:word64]), 0)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404FB3:
	word64 rsp_246
	word64 rax_247 = fn0000000000410C40(rsi, rbx_10 * 0x0000000000000018, out rsp_246)
	rbp_12 = Mem0[0x000000000061B1B0:word64]
	Mem249[0x000000000061B1A8:word64] = rax_247
	Mem254[0x000000000061B1A0:word64] = rbp_12 * 0x0000000000000003
// DataOut: al eax r11 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404EA6:
	branch rbp_12 == 0x0000000000000000 l0000000000404ED3
// DataOut: al eax r11 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EAB:
	word64 rax_219 = Mem0[0x000000000061B1A8:word64]
	word64 rdx_223 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_225 = rax_219 + rbp_12 * 0x0000000000000008
// DataOut: r11 r15 rax rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EC0:
	Mem229[rax_219:word64] = rdx_223
	rax_219 = rax_219 + 0x0000000000000008
	rdx_223 = rdx_223 + 192
	branch rax_219 != rcx_225 l0000000000404EC0
// DataOut: al eax r11 r15 rax rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404ED3:
	branch Mem0[0x000000000061B148:word32] == 0xFFFFFFFF l0000000000404F8C
// DataOut: al eax r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404EE0:
	word32 ecx_142
	word64 rdi_137
	word64 rsi_135
	word64 rsp_108
	word64 rbp_109
	word64 rbx_110
	byte SCZO_111
	word64 rax_112
	byte CZ_113
	byte SZO_114
	byte C_115
	byte Z_116
	word64 rdx_117
	word64 rcx_118
	word32 edi_119
	word64 rdi_120
	word32 eax_121
	word32 r8d_122
	word64 rsi_124
	word32 ecx_125
	word32 edx_126
	word16 ax_127
	byte al_128
	word32 esi_129
	word64 r11_130
	word64 r15_131
	word64 r8_123
	call _setjmp (retsize: 8; depth: 8)
		uses: al_67,ax_68,C_60,CZ_47,dwLoc04_4,dwLoc08_7,eax_70,ecx_66,edi_49,edx_69,esi,r11,r15,r8_52,r8d,rax_71,rbp_56,rbx_10,rcx_65,rdi_107,rdx_72,rsi,rsp_57,SCZO_73,SZO_58,Z_74
		defs: al_128,ax_127,C_115,CZ_113,eax_121,ecx_125,edi_119,edx_126,esi_129,r11_130,r15_131,r8_123,r8d_122,rax_112,rbp_109,rbx_110,rcx_118,rdi_120,rdx_117,rsi_124,rsp_108,SCZO_111,SZO_114,Z_116
	branch eax_121 == 0x00000000 l0000000000404F40
// DataOut: al r11 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404F40:
	ecx_142 = (word32) (uint64) Mem0[0x000000000061B148:word32] (alias)
	rsi_135 = Mem0[0x000000000061B1B0:word64]
	rdi_137 = Mem0[0x000000000061B1A8:word64]
// DataOut: al ecx edi r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EEE:
	r8_123 = (uint64) Mem0[0x000000000061B148:word32]
	word32 r8d_170 = (word32) r8_123
	branch r8d_170 == 0x00000003 l0000000000404FDF
// DataOut: r11 r15 r8d
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FDF:
	__assert_fail(0x000000000041373F, 0x0000000000413736, 0x0000000000000DDB, 0x0000000000412C95)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:(uint64) Mem0[0x000000000061B148:word32] rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EFF:
	rsi_135 = Mem0[0x000000000061B1B0:word64]
	rdi_137 = Mem0[0x000000000061B1A8:word64]
	branch rsi_135 == 0x0000000000000000 l0000000000404F33
// DataOut: edi r11 r15 r8d rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:(uint64) Mem0[0x000000000061B148:word32] rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F12:
	word64 rdx_190 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_192 = rdi_137 + rsi_135 * 0x0000000000000008
	word64 rax_194 = rdi_137
// DataOut: edi r11 r15 r8d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:(uint64) Mem0[0x000000000061B148:word32] rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F20:
	Mem200[rax_194:word64] = rdx_190
	rax_194 = rax_194 + 0x0000000000000008
	rdx_190 = rdx_190 + 192
	branch rax_194 != rcx_192 l0000000000404F20
// DataOut: edi r11 r15 r8d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:(uint64) Mem0[0x000000000061B148:word32] rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F33:
	ecx_142 = (word32) (uint64) r8d_170 (alias)
// DataOut: al ecx edi r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:(uint64) Mem0[0x000000000061B148:word32] rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F54:
	branch ecx_142 != 0x00000004 l0000000000404F60
// DataOut: al ecx edi edx r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F59_1:
// DataOut: al ecx edi edx r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:0x0000000000000000 r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F60:
	fn000000000040D690(rsi_135, rdi_137, DPB(r8_123, (word32) Mem0[0x000000000061B10C:byte], 0), r11_130, r15_131)
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F8C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:(word32) Mem0[0x000000000061B10C:byte] eax:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000404E80_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsi:<invalid> rdi:<invalid> rax:<invalid> rsp:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> ax:<invalid> r8d:(word32) Mem0[0x000000000061B10C:byte] eax:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000405020(word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax bp bpl di dil eax ebp edi esi esp rax rbp rdi rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405020_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405020:
	word64 rax_15 = __errno_location()
	Mem16[rax_15:word32] = 0x00000000
	word64 rsp_26
	word64 rbp_27
	word64 rsi_28
	word64 rbx_29
	word64 rdi_30
	byte SCZO_31
	word64 rax_32
	call strcoll (retsize: 8;)
		uses: dwLoc04_4,dwLoc08_9,qwLoc08_11,rax_15,rbp_24,rbx_20,rdi_19,rsi_22,rsp_25,SCZO_18
		defs: rax_32,rbp_27,rbx_29,rdi_30,rsi_28,rsp_26,SCZO_31
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000405020_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rax:<invalid> rdi:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000405090(byte sil, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 rdi sil
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405090_entry:
// DataOut: r11 rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405090:
	word32 r14d_109 = (word32) sil
	word64 r13_116 = rdi
	branch rdi == 0x0000000000000000 l00000000004050C0
// DataOut: r11 r13 r14d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004050AA:
	branch Mem0[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004050C0
// DataOut: r11 r13 r14d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050B4:
	word64 rbp_269
	word64 r12_270
	fn0000000000404D20(0x00000000, rdi, 0x0000000000000000, r11, out rbp_269, out r12_270, out r13_116)
// DataOut: r11 r13 r14d rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050C0:
	word64 rbx_43 = Mem0[0x000000000061B1B0:word64]
// DataOut: r11 r12 r13 r14d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rbp:<invalid> rax:<invalid> rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405108:
	branch rbx_43 == 0x0000000000000000 l00000000004051A8
// DataOut: r11 r12 r13 r14d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051A8:
	word64 rdx_207
	word64 rdi_192 = Mem0[0x000000000061B1B0:word64]
	branch rdi_192 == 0x0000000000000000 l00000000004051F7
// DataOut: rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051F7:
	rdx_207 = 0x0000000000000000
// DataOut: rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051B4:
	word64 rsi_225 = Mem0[0x000000000061B1A8:word64]
	rdx_207 = 0x0000000000000000
	word64 rax_230 = 0x0000000000000000
// DataOut: rax rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051C0:
	word64 rcx_237 = Mem0[rsi_225 + rax_230 * 0x0000000000000008:word64]
	Mem240[rsi_225 + rdx_207 * 0x0000000000000008:word64] = rcx_237
	rax_230 = rax_230 + 0x0000000000000001
	rdx_207 = rdx_207 + DPB(rcx_237, (word32) (Mem0[rcx_237 + 0x00000000000000A0:word32] != 0x00000009), 0)
	branch rax_230 != rdi_192 l00000000004051C0
// DataOut: rax rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051E1:
	Mem210[0x000000000061B1B0:word64] = rdx_207
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000405090_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405111:
	word64 rbp_71 = Mem0[Mem0[0x000000000061B1A8:word64]:word64]
	word32 eax_73 = (word32) (uint64) Mem0[rbp_71 + 0x00000000000000A0:word32]
	branch eax_73 == 0x00000009 l000000000040512C
// DataOut: eax r11 r12 r13 r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405127:
	branch eax_73 != 0x00000003 l0000000000405100
// DataOut: r11 r12 r13 r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040512C:
	word64 rbp_115
	word64 r15_102 = Mem0[r13_116:word64]
	branch r13_116 == 0x0000000000000000 l00000000004050E2
// DataOut: r11 r12 r13 r14d r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405135:
	word64 rsi_142
	word64 rax_143 = fn000000000040A390(r15_102, out rsi_142)
	branch Mem0[rax_143:byte] != 0x2E l00000000004050D8
// DataOut: r11 r12 r13 r14d r15 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405142:
	byte al_184 = (byte) (word32) Mem0[rax_143 + 0x0000000000000001 + (uint64) (Mem0[rax_143 + 0x0000000000000001:byte] == 0x2E):byte]
	branch al_184 == 0x2F l0000000000405100
// DataOut: al r11 r12 r13 r14d r15 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405154:
	branch al_184 == 0x00 l0000000000405100
// DataOut: r11 r12 r13 r14d r15 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405158:
// DataOut: r11 r13 r14d r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050D8:
	branch Mem0[r15_102:byte] != 0x2F l0000000000405160
// DataOut: r11 r13 r14d r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405160:
	word64 rbp_162
	word64 rax_164 = fn000000000040A610(0x0000000000000000, r15_102, r13_116, out rbp_162, out r14d_109)
	word64 r12_171
	fn0000000000404D20((word32) (uint64) r14d_109, Mem0[rbp_162 + 0x0000000000000008:word64], rax_164, r11, out rbp_115, out r12_171, out r13_116)
	free(rax_164)
	branch Mem0[rbp_115 + 0x00000000000000A0:word32] != 0x00000009 l0000000000405100
// DataOut: r11 r12 r13 r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050E2:
	word64 r12_135
	fn0000000000404D20((word32) (uint64) r14d_109, Mem0[rbp_71 + 0x0000000000000008:word64], r15_102, r11, out rbp_115, out r12_135, out r13_116)
	branch Mem0[rbp_115 + 0x00000000000000A0:word32] == 0x00000009 l0000000000405194
// DataOut: r11 r12 r13 r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405194:
	fn0000000000404D90(rbp_115)
// DataOut: r11 r12 r13 r14d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050FE:
// DataOut: r11 r12 r13 r14d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405100:
	rbx_43 = rbx_43 - 0x0000000000000001
// DataOut: r11 r12 r13 r14d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000405200(word64 rsi, word64 rdi, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405200_entry:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405200:
	word64 rbp_143 = rsi
	word64 rbx_109 = rdi
	branch rdi <u rsi l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040526B:
	word64 rcx_137 = Mem0[0x000000000061B0D8:word64]
	branch rcx_137 != 0x0000000000000000 l0000000000405220
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405220:
	word64 rsi_114 = rbx_109 + 0x0000000000000001
	branch (uint64) ((uint128) (uint64) rbp_143 /u rcx_137) <=u (uint64) ((uint128) ((uint64) rsi_114) /u rcx_137) l00000000004052A8
// DataOut: rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052A8:
	rbx_109 = rsi_114
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040523C:
	word64 rdi_128 = Mem0[0x000000000061A610:word64]
	word64 rax_129 = Mem0[rdi_128 + 0x0000000000000028:word64]
	branch rax_129 >=u Mem0[rdi_128 + 0x0000000000000030:word64] l00000000004052B9
// DataOut: rax rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052B9:
	word64 rsp_158
	word64 rsi_160
	word64 rdi_162
	byte SCZO_163
	byte C_164
	word64 rcx_165
	byte SZO_166
	byte Z_167
	word64 rdx_168
	word64 rax_169
	byte CZ_170
	word32 esi_171
	word32 edx_172
	call __overflow (retsize: 8; depth: 24)
		uses: C_132,CZ_127,dwLoc04_4,dwLoc08_9,edx_45,esi_115,qwLoc08,rax_129,rbp_54,rbx_53,rcx_57,rdi_128,rdx_124,rsi_157,rsp_55,SCZO_131,SZO_58,Z_59
		defs: C_164,CZ_170,edx_172,esi_171,rax_169,rbp_159,rbx_161,rcx_165,rdi_162,rdx_168,rsi_160,rsp_158,SCZO_163,SZO_166,Z_167
	rcx_137 = Mem0[0x000000000061B0D8:word64]
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040524D:
	Mem155[rdi_128 + 0x0000000000000028:word64] = rax_129 + 0x0000000000000001
	Mem156[rax_129:byte] = 0x09
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405258:
	rbx_109 = rbx_109 + rcx_137 - (uint64) ((uint128) ((uint64) rbx_109) % rcx_137)
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405277:
	rbx_109 = rbx_109 + 0x0000000000000001
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040527B:
	word64 rdi_82 = Mem0[0x000000000061A610:word64]
	word64 rdx_83 = Mem0[rdi_82 + 0x0000000000000028:word64]
	branch rdx_83 >=u Mem0[rdi_82 + 0x0000000000000030:word64] l00000000004052AD
// DataOut: rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052AD:
	word64 rsp_94
	word64 rsi_96
	word64 rdi_98
	byte SCZO_99
	byte C_100
	word64 rcx_101
	byte SZO_102
	byte Z_103
	word64 rdx_104
	word64 rax_105
	byte CZ_106
	word32 esi_107
	word32 edx_108
	call __overflow (retsize: 8; depth: 24)
		uses: C_87,CZ_80,dwLoc04_4,dwLoc08_9,edx_85,esi_77,qwLoc08,rax_79,rbp_54,rbx_81,rcx_57,rdi_82,rdx_83,rsi_93,rsp_55,SCZO_86,SZO_58,Z_59
		defs: C_100,CZ_106,edx_108,esi_107,rax_105,rbp_95,rbx_97,rcx_101,rdi_98,rdx_104,rsi_96,rsp_94,SCZO_99,SZO_102,Z_103
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405266:
	branch rbp_143 <=u rbx_109 l000000000040529C
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040528C:
	Mem91[rdi_82 + 0x0000000000000028:word64] = rdx_83 + 0x0000000000000001
	Mem92[rdx_83:byte] = 0x20
	branch rbp_143 >u rbx_109 l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405211:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:rdi -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040529C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004052D0(word64 rdx, word32 ebx, word64 rsi, word64 r11, selector fs, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx fs r11 rdx rsi
// LiveOut: ebp edi esi r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004052D0_entry:
// DataOut: ebx fs r11 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004052D0:
	word32 ebp_8 = (word32) (fp - 0x0000000000000004)
	word64 r9_50
	word64 r11_51
	word64 r13_53
	word64 r14_54
	word64 r15_55
	word64 r12_106
	word64 r8_105
	word64 rdi_116
	word64 rbp_118
	word64 rsp_120
	word64 rsi_114
	word64 rax_56 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, ebx, ebp_8, 0x0000000000002000, fp + 0xFFFFFFFFFFFFDFBC, rdx, r11, fs, out rsp_120, out rbp_118, out rsi_114, out rdi_116, out r8_105, out r9_50, out r11_51, out r12_106, out r13_53, out r14_54, out r15_55)
	Mem65[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = rbp_118 + 0xFFFFFFFFFFFFDFC0
	word64 rbx_112 = rax_56
	word32 ebx_58 = (word32) rax_56
	branch rax_56 >u 0x0000000000001FFF l0000000000405590
// DataOut: ebp ebx esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405590:
	Mem872[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = rsp_120 - (rax_56 + 0x000000000000001F & 0xFFFFFFFFFFFFFFF0) + 0x000000000000000F
	Mem874[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = Mem872[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] & 0xFFFFFFFFFFFFFFF0
	word64 r9_884
	word64 r11_885
	word64 r13_887
	word64 r14_888
	word64 r15_889
	fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, r14_54, ebx_58, ebp_8, rax_56 + 0x0000000000000001, Mem874[rbp_118 + 0xFFFFFFFFFFFFDF98:word64], r13_53, r11_51, fs, out rsp_120, out rbp_118, out rsi_114, out rdi_116, out r8_105, out r9_884, out r11_885, out r12_106, out r13_887, out r14_888, out r15_889)
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):fp + 0xFFFFFFFFFFFFDFBC -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405343:
	branch Mem65[0x000000000061B0F0:byte] != 0x00 l0000000000405412
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405412:
	word64 rdx_444
	word64 r14_447
	word64 r13_448
	word32 esi_449
	byte SCZO_451
	word64 rcx_452
	word32 eax_455
	byte SZO_456
	byte C_457
	byte CZ_458
	byte Z_459
	word32 edx_460
	word64 r12_461
	word32 r12d_462
	word16 dx_463
	word64 r15_464
	byte al_465
	byte SO_466
	byte dl_467
	word32 edi_468
	byte S_469
	word32 ecx_470
	byte cl_471
	word16 ax_472
	word32 ebx_473
	word64 r11_474
	word64 r9_475
	word32 ebp_476
	word64 rax_453
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_79,ax_80,C_76,cl,CZ_64,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx,eax_78,ebp_8,ebx_58,ecx,edi_84,edx,esi_82,fs,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_67,r12_74,r12d,r13_70,r14_71,r15_68,r8_73,r9_66,rax_77,rbp_85,rbx_57,rcx_69,rdi_83,rdx_72,rsi_81,rsp_86,S,SCZO_87,SO,SZO_75,Z_88
		defs: al_465,ax_472,C_457,cl_471,CZ_458,dl_467,dx_463,eax_455,ebp_476,ebx_473,ecx_470,edi_468,edx_460,esi_449,fs_454,r11_474,r12_461,r12d_462,r13_448,r14_447,r15_464,r8_443,r9_475,rax_453,rbp_442,rbx_450,rcx_452,rdi_445,rdx_444,rsi_446,rsp_441,S_469,SCZO_451,SO_466,SZO_456,Z_459
	branch rax_453 <=u 0x0000000000000001 l00000000004055D1
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055D1:
	word64 r14_763 = Mem65[r13_448 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_763
	word64 r12_764 = r14_763 + rbx_112
	branch r14_763 >=u r12_764 l0000000000405602
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055E1:
	word64 rdx_807
	word64 r14_810
	word64 r13_811
	word32 esi_812
	byte SCZO_814
	word64 rcx_815
	word64 rax_816
	word32 eax_818
	byte SZO_819
	byte C_820
	byte CZ_821
	byte Z_822
	word32 edx_823
	word64 r12_824
	word32 r12d_825
	word16 dx_826
	word64 r15_827
	byte al_828
	byte SO_829
	byte dl_830
	word32 edi_831
	byte S_832
	word32 ecx_833
	byte cl_834
	word16 ax_835
	word32 ebx_836
	word64 r11_837
	word64 r9_838
	word32 ebp_839
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_465,ax_472,C_767,cl_471,CZ_478,dl_467,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_463,eax_455,ebp_476,ebx_473,ecx_470,edi_468,edx_460,esi_449,fs_454,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_474,r12_764,r12d_765,r13_448,r14_763,r15_464,r8_443,r9_475,rax_453,rbp_442,rbx_450,rcx_452,rdi_445,rdx_444,rsi_446,rsp_441,S_469,SCZO_766,SO_466,SZO_456,Z_459
		defs: al_828,ax_835,C_820,cl_834,CZ_821,dl_830,dx_826,eax_818,ebp_839,ebx_836,ecx_833,edi_831,edx_823,esi_812,fs_817,r11_837,r12_824,r12d_825,r13_811,r14_810,r15_827,r8_806,r9_838,rax_816,rbp_805,rbx_813,rcx_815,rdi_808,rdx_807,rsi_809,rsp_804,S_832,SCZO_814,SO_829,SZO_819,Z_822
	word64 rdx_840 = r14_810
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055E9:
	rsi_114 = DPB(rsi_114, (word32) Mem65[rdx_840:byte], 0) (alias)
	branch (Mem65[Mem65[rax_816:word64] + 0x0000000000000001 + rsi_114 * 0x0000000000000002:byte] & 0x40) != 0x00 l00000000004055F9
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055F6:
	Mem862[rdx_840:byte] = 0x3F
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055F9:
	rdx_840 = rdx_840 + 0x0000000000000001
	branch rdx_840 != r12_824 l00000000004055E9
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405602:
	*r12Out = rbx_112
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405421:
	word64 r15_479 = Mem65[r13_448 + 0xFFFFFFFFFFFFDF98:word64]
	*r15Out = r15_479
	word64 r13_480 = r15_479 + rbx_112
	*r13Out = r13_480
	branch r15_479 >=u r13_480 l0000000000405612
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405612:
	rbx_112 = 0x0000000000000000
	*r12Out = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405435:
	word64 rbx_483 = r15_479
	r12_106 = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405440:
	word32 eax_520 = (word32) Mem65[rdi_116:byte]
	rax_453 = DPB(rax_453, eax_520, 0) (alias)
	byte al_522 = (byte) eax_520
	branch al_522 > 0x3F l0000000000405520
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405520:
	branch al_522 < 0x41 l0000000000405460
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405528:
	branch al_522 <= 0x5F l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040552C:
	branch (byte) (rax_453 - 0x0000000000000061) >u 0x1D l0000000000405460
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040544C:
	branch al_522 >= 0x25 l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405454:
	branch (byte) (rax_453 - 0x0000000000000020) <=u 0x03 l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405538:
	Mem736[rbx_483:byte] = al_522
	r15_479 = r15_479 + 0x0000000000000001
	*r15Out = r15_479
	r12_106 = r12_106 + 0x0000000000000001
	*r12Out = r12_106
	rbx_483 = rbx_483 + 0x0000000000000001
	branch r15_479 <u r13_480 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040554F:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405460:
	Mem569[rbp_118 + 0xFFFFFFFFFFFFDFB0:word64] = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r13 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405470:
	word64 rdx_584
	word64 r14_587
	word32 esi_589
	word64 rbx_590
	byte SCZO_591
	word64 rcx_592
	word32 eax_595
	byte SZO_596
	byte C_597
	byte CZ_598
	byte Z_599
	word32 edx_600
	word64 r12_601
	word32 r12d_602
	word16 dx_603
	word64 r15_604
	byte al_605
	byte SO_606
	byte dl_607
	word32 edi_608
	byte S_609
	word32 ecx_610
	byte cl_611
	word16 ax_612
	word32 ebx_613
	word64 r11_614
	word64 r9_615
	word32 ebp_616
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_522,ax_523,C_509,cl_491,CZ_566,dl_563,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_497,eax_520,ebp_518,ebx_512,ecx_492,edi_576,edx_565,esi_580,fs_500,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_490,r12_506,r12d_507,r13_571,r14_503,r15_570,r8_505,r9_489,rax_521,rbp_572,rbx_511,rcx_574,rdi_575,rdx_577,rsi_579,rsp_519,S_493,SCZO_578,SO_564,SZO_568,Z_508
		defs: al_605,ax_612,C_597,cl_611,CZ_598,dl_607,dx_603,eax_595,ebp_616,ebx_613,ecx_610,edi_608,edx_600,esi_589,fs_594,r11_614,r12_601,r12d_602,r13_588,r14_587,r15_604,r8_583,r9_615,rax_593,rbp_582,rbx_590,rcx_592,rdi_585,rdx_584,rsi_586,rsp_581,S_609,SCZO_591,SO_606,SZO_596,Z_599
	word64 r14_619 = rax_453
	*r14Out = r14_619
	branch rax_453 == 0xFFFFFFFFFFFFFFFF l0000000000405551
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405551:
	Mem723[rbx_590:byte] = 0x3F
	r15_479 = r15_604 + 0x0000000000000001
	*r15Out = r15_479
	r12_106 = r12_601 + 0x0000000000000001
	*r12Out = r12_106
	rbx_483 = rbx_590 + 0x0000000000000001
	branch r15_604 + 0x0000000000000001 <u r13_480 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405569:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405499:
	branch rax_453 == 0xFFFFFFFFFFFFFFFE l000000000040556B
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040556B:
	Mem715[rbx_590:byte] = 0x3F
	r15_479 = r13_480
	*r15Out = r15_479
	r12_106 = r12_601 + 0x0000000000000001
	*r12Out = r12_106
	rbx_483 = rbx_590 + 0x0000000000000001
	branch r13_480 <u r13_480 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405582:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054A3:
	word64 rdi_622 = (uint64) Mem569[rbp_118 + 0xFFFFFFFFFFFFDFAC:word32]
	branch rax_453 != 0x0000000000000000 l00000000004054B5
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054B1_1:
	r14_619 = 0x0000000000000001
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054B5:
	branch false l0000000000405510
// DataOut: al eax ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405510:
	Mem706[rbx_590:byte] = 0x3F
// DataOut: eax ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054BE:
	word64 rsi_679 = r15_604 + r14_619
	word64 rdx_681 = rbx_590
	r15_685 = r15_604
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054C8:
	word64 r15_685
	rdx_681 = rdx_681 + 0x0000000000000001
	Mem696[rdx_681 - 0x0000000000000001:byte] = (byte) (word32) Mem569[rdi_622 - 0x0000000000000001:byte]
	r15_685 = r15_685 + 0x0000000000000001
	branch r15_685 != rsi_679 l00000000004054C8
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054DD:
// DataOut: eax ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054E5:
	word64 rdx_641
	word64 r14_644
	word32 esi_646
	byte SCZO_648
	word64 rcx_649
	word32 eax_652
	byte SZO_653
	byte C_654
	byte CZ_655
	byte Z_656
	word32 edx_657
	word32 r12d_659
	word16 dx_660
	byte al_662
	byte SO_663
	byte dl_664
	word32 edi_665
	byte S_666
	word32 ecx_667
	byte cl_668
	word16 ax_669
	word32 ebx_670
	word64 r11_671
	word64 r9_672
	word32 ebp_673
	call mbsinit (retsize: 8; depth: 8)
		uses: al_631,ax_632,C_635,cl_611,CZ_598,dl_607,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_603,eax_630,ebp_616,ebx_613,ecx_610,edi_637,edx_600,esi_589,fs_594,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_614,r12_601,r12d_602,r13_588,r14_628,r15_604,r8_583,r9_615,rax_629,rbp_582,rbx_590,rcx_592,rdi_636,rdx_584,rsi_586,rsp_581,S_634,SCZO_620,SO_606,SZO_633,Z_625
		defs: al_662,ax_669,C_654,cl_668,CZ_655,dl_664,dx_660,eax_652,ebp_673,ebx_670,ecx_667,edi_665,edx_657,esi_646,fs_651,r11_671,r12_658,r12d_659,r13_645,r14_644,r15_661,r8_640,r9_672,rax_650,rbp_639,rbx_647,rcx_649,rdi_642,rdx_641,rsi_643,rsp_638,S_666,SCZO_648,SO_663,SZO_653,Z_656
	branch eax_652 == 0x00000000 l0000000000405470
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054F9:
	branch r15_479 <u r13_480 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405502:
	rbx_112 = rbx_483 - Mem65[rbp_118 + 0xFFFFFFFFFFFFDF98:word64]
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405350:
	branch Mem65[rbp_118 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l0000000000405379
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040535A:
	word64 rdx_312
	word64 r14_315
	word64 r13_316
	word32 esi_317
	byte SCZO_319
	word64 rcx_320
	word64 rax_321
	word32 eax_323
	byte SZO_324
	byte C_325
	byte CZ_326
	byte Z_327
	word32 edx_328
	word64 r12_329
	word32 r12d_330
	word16 dx_331
	word64 r15_332
	byte al_333
	byte SO_334
	byte dl_335
	word32 edi_336
	byte S_337
	word32 ecx_338
	byte cl_339
	word16 ax_340
	word32 ebx_341
	word64 r11_342
	word64 r9_343
	word32 ebp_344
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_79,ax_80,C_76,cl,CZ_64,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx,eax_78,ebp_8,ebx_58,ecx,edi_84,edx,esi_82,fs,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_67,r12_74,r12d,r13_70,r14_71,r15_68,r8_73,r9_66,rax_77,rbp_85,rbx_57,rcx_69,rdi_83,rdx_72,rsi_81,rsp_86,S,SCZO_299,SO,SZO_75,Z_300
		defs: al_333,ax_340,C_325,cl_339,CZ_326,dl_335,dx_331,eax_323,ebp_344,ebx_341,ecx_338,edi_336,edx_328,esi_317,fs_322,r11_342,r12_329,r12d_330,r13_316,r14_315,r15_332,r8_311,r9_343,rax_321,rbp_310,rbx_318,rcx_320,rdi_313,rdx_312,rsi_314,rsp_309,S_337,SCZO_319,SO_334,SZO_324,Z_327
	branch rax_321 <=u 0x0000000000000001 l00000000004053CD
// DataOut: ebp esp fs r11 r11d r13 r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053CD:
	word64 r14_368 = Mem65[r13_316 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_368
	word64 r13_369 = r14_368 + rbx_112
	*r13Out = r13_369
	branch r14_368 >=u r13_369 l000000000040560A
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040560A:
	*r12Out = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053E1:
	word64 r14_378
	word64 r13_379
	word32 esi_380
	byte SCZO_382
	word64 rcx_383
	word64 rax_384
	word32 eax_386
	byte SZO_387
	byte C_388
	byte CZ_389
	byte Z_390
	word32 edx_391
	word64 r12_392
	word32 r12d_393
	word16 dx_394
	word64 r15_395
	byte al_396
	byte SO_397
	byte dl_398
	word32 edi_399
	byte S_400
	word32 ecx_401
	byte cl_402
	word16 ax_403
	word32 ebx_404
	word64 r11_405
	word64 r9_406
	word32 ebp_407
	word64 rdx_375
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_333,ax_340,C_371,cl_339,CZ_346,dl_335,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_331,eax_323,ebp_344,ebx_341,ecx_338,edi_336,edx_328,esi_317,fs_322,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_342,r12_329,r12d_330,r13_369,r14_368,r15_332,r8_311,r9_343,rax_321,rbp_310,rbx_318,rcx_320,rdi_313,rdx_312,rsi_314,rsp_309,S_337,SCZO_370,SO_334,SZO_324,Z_327
		defs: al_396,ax_403,C_388,cl_402,CZ_389,dl_398,dx_394,eax_386,ebp_407,ebx_404,ecx_401,edi_399,edx_391,esi_380,fs_385,r11_405,r12_392,r12d_393,r13_379,r14_378,r15_395,r8_374,r9_406,rax_384,rbp_373,rbx_381,rcx_383,rdi_376,rdx_375,rsi_377,rsp_372,S_400,SCZO_382,SO_397,SZO_387,Z_390
	r12_106 = 0x0000000000000000
	word64 rcx_412 = Mem65[rax_384:word64]
	word64 rax_415 = r14_378
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053F0:
	rdx_375 = DPB(rdx_375, (word32) Mem65[rax_415:byte], 0) (alias)
	r12_106 = r12_106 - 0xFF - (((word16) ((word32) Mem65[rcx_412 + rdx_375 * 0x0000000000000002:word16]) & 0x4000) <u 0x0001)
	*r12Out = r12_106
	rax_415 = rax_415 + 0x0000000000000001
	branch rax_415 != r13_379 l00000000004053F0
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040540D:
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405365:
	word32 ebx_355
	word64 r12_360
	word64 r13_361
	word64 r14_362
	word64 r15_363
	*r12Out = (int64) (word32) fn000000000040D240(0x00000000, rbx_112, Mem65[rbp_118 + 0xFFFFFFFFFFFFDF98:word64], fs, out ebx_355, out rsp_120, out rbp_118, out rsi_114, out rdi_116, out r12_360, out r13_361, out r14_362, out r15_363)
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405379:
	word64 rcx_121 = Mem65[rbp_118 + 0xFFFFFFFFFFFFDF88:word64]
	branch rcx_121 == 0x0000000000000000 l0000000000405399
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405385:
	word64 rdx_266
	word64 r14_269
	word64 r13_270
	word32 esi_271
	byte SCZO_273
	word64 rcx_274
	word64 rax_275
	word32 eax_277
	byte SZO_278
	byte C_279
	byte CZ_280
	byte Z_281
	word32 edx_282
	word32 r12d_284
	word16 dx_285
	word64 r15_286
	byte al_287
	byte SO_288
	byte dl_289
	word32 edi_290
	byte S_291
	word32 ecx_292
	byte cl_293
	word16 ax_294
	word32 ebx_295
	word64 r11_296
	word64 r9_297
	word32 ebp_298
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_110,ax_111,C_124,cl_91,CZ_99,dl_94,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_97,eax_109,ebp_119,ebx_113,ecx_92,edi_259,edx_98,esi_262,fs_100,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_90,r12_106,r12d_107,r13_102,r14_103,r15_96,r8_105,r9_89,rax_108,rbp_118,rbx_112,rcx_121,rdi_258,rdx_260,rsi_261,rsp_120,S_93,SCZO_101,SO_95,SZO_122,Z_123
		defs: al_287,ax_294,C_279,cl_293,CZ_280,dl_289,dx_285,eax_277,ebp_298,ebx_295,ecx_292,edi_290,edx_282,esi_271,fs_276,r11_296,r12_283,r12d_284,r13_270,r14_269,r15_286,r8_265,r9_297,rax_275,rbp_264,rbx_272,rcx_274,rdi_267,rdx_266,rsi_268,rsp_263,S_291,SCZO_273,SO_288,SZO_278,Z_281
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405399:
	branch Mem65[rbp_118 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l00000000004053A8
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053A5:
	Mem257[r8_105:word64] = r12_106
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053A8:
	word64 rbx_166 = Mem65[rbp_118 - 0x0000000000000038:word64] ^ Mem65[fs:0x00000028:word64]
	branch rbx_166 != 0x0000000000000000 l000000000040561C
// DataOut: ebp ebx esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040561C:
	__stack_chk_fail()
	word64 rsp_219 = rsp_120 - 0x0000000000000004
	Mem220[rsp_219:word32] = rsp_120
	Mem222[rsp_219 - 0x0000000000000004:word32] = rbp_118
	Mem224[rsp_219 - 0x0000000000000008:word32] = rbx_166
	word64 rax_225 = Mem224[rsi_114 + 0x0000000000000018:word64]
	word64 rbp_229 = Mem224[rsi_114 + 0x0000000000000010:word64]
	word64 r12_234 = (uint64) ((word32) (rax_225 - rbp_229) >>u 0x00000003)
	*r12Out = r12_234
	branch r12_234 == 0x0000000000000000 l00000000004056DB
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_248
	word64 rsp_249
	word64 rbp_250
	word64 rsi_251
	word32 edi_252
	return fn000000000040564F(rax_225, rbp_229, rsi_114, rdi_116, r12_234, out rbx_248, out rsp_249, out rbp_250, out rsi_251, out edi_252)
// DataOut: ebp edi esi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_239
	word64 rsp_240
	word64 rbp_241
	word64 rsi_242
	word32 edi_243
	return fn000000000040564F(rax_225, rbp_229, rsi_114, rdi_116, r12_234, out rbx_239, out rsp_240, out rbp_241, out rsi_242, out edi_243)
// DataOut: ebp edi esi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053BE:
	word64 rsp_201 = rbp_118 - 0x0000000000000028
	word64 rsp_205 = Mem65[rsp_201 + 0x0000000000000008:word64]
	word64 rbx_202
	*rbxOut = Mem65[rsp_201:word64]
	word64 rsi_209
	*rsiOut = Mem65[rsp_205 + 0x0000000000000010:word64]
	word32 edi_213
	*ediOut = (word32) Mem65[rsp_205 + 0x0000000000000018:word64]
	word64 rbp_215
	*rbpOut = Mem65[rsp_205 + 0x0000000000000020:word64]
	word64 rsp_217
	*rspOut = rsp_205 + 0x0000000000000028
	return rbx_112
// DataOut: ebp edi esi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

fn00000000004052D0_exit:
// DataOut: ebp edi esi r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp



void fn0000000000405630(word64 rsi, word64 rdi, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn0000000000405630_entry:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l0000000000405630:
	word64 rax_13 = Mem0[rsi + 0x0000000000000018:word64]
	word64 rbp_14 = Mem0[rsi + 0x0000000000000010:word64]
	word64 r12_18 = (uint64) ((word32) (rax_13 - rbp_14) >>u 0x00000003)
	branch r12_18 == 0x0000000000000000 l00000000004056DB_in_fn0000000000405630
// DataOut: r12 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_45
	word64 rsp_46
	word64 rbp_47
	word64 rsi_48
	word32 edi_49
	fn000000000040564F(rax_13, rbp_14, rsi, rdi, r12_18, out rbx_45, out rsp_46, out rbp_47, out rsi_48, out edi_49)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004056DB_in_fn0000000000405630:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_30
	word64 rsp_31
	word64 rbp_32
	word64 rsi_33
	word32 edi_34
	fn000000000040564F(rax_13, rbp_14, rsi, rdi, r12_18, out rbx_30, out rsp_31, out rbp_32, out rsi_33, out edi_34)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040564F(word64 rax, word64 rbp, word64 rsi, word64 rdi, word64 r12, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r12 rax rbp rdi rsi
// LiveOut: ebp edi esi rax rbp rbx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040564F_entry:
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l000000000040564F:
	branch rax == rbp l00000000004056E6
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004056E6:
	Mem117[rsi + 0x0000000000000050:byte] = Mem0[rsi + 0x0000000000000050:byte] | 0x02
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3

l0000000000405658:
	word64 rcx_10 = (int64) Mem0[rsi + 0x0000000000000030:word32]
	word32 edx_18 = (word32) (uint64) ~(word32) (uint64) (word32) rcx_10
	word64 rcx_15 = Mem0[rsi + 0x0000000000000020:word64]
	word64 rdx_20 = (int64) edx_18 & rax + rcx_10
	word64 rax_21 = Mem0[rsi + 0x0000000000000008:word64]
	Mem23[rsi + 0x0000000000000018:word64] = rdx_20
	branch rdx_20 - rax_21 > rcx_15 - rax_21 l00000000004056E0
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3

l00000000004056E0:
	Mem115[rsi + 0x0000000000000018:word64] = rcx_15
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid>

l0000000000405683:
	word64 rax_28 = Mem23[rsi + 0x0000000000000018:word64]
	Mem33[rsi + 0x0000000000000010:word64] = rax_28
	word64 rbx_29 = 0x0000000000000000
	word64 rax_36 = DPB(rax_28, fputs_unlocked(rdi, Mem33[0x000000000061A610:word64]), 0)
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid>

l00000000004056A0:
	word64 rsi_40
	*rsiOut = 0x0000000000413759
	rbx_29 = rbx_29 + 0x0000000000000001
	branch r12 >u rbx_29 l00000000004056A0
// DataOut: esi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:0x0000000000000001

l00000000004056BF:
	word64 rdi_48 = Mem33[0x000000000061A610:word64]
	word32 edi_49 = (word32) rdi_48
	*ediOut = edi_49
	word64 rax_50 = Mem33[rdi_48 + 0x0000000000000028:word64]
	branch rax_50 >=u Mem33[rdi_48 + 0x0000000000000030:word64] l00000000004056EF
// DataOut: edi esi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:0x0000000000000000 rbx:<invalid> rsi:0x0000000000413759 rdi:0x0000000000000001

l00000000004056EF:
	word64 rsp_96
	word64 rax_97
	word64 rbp_98
	byte SCZO_99
	byte Z_100
	word64 rsi_101
	word64 rcx_102
	word32 ecx_103
	word64 rdx_104
	word32 edx_105
	byte SZO_106
	byte C_107
	word64 rbx_108
	word32 ebx_109
	word64 rdi_110
	word32 eax_111
	word64 r12_112
	byte CZ_113
	word32 edi_114
	call __overflow (retsize: 8; depth: 8)
		uses: C_53,CZ_47,eax_51,ebx_89,ecx_16,edi_49,edx_18,r12,rax_50,rbp_91,rbx_88,rcx_15,rdi_48,rdx_38,rsi_95,rsp_94,SCZO_52,SZO_31,Z_5
		defs: C_107,CZ_113,eax_111,ebx_109,ecx_103,edi_114,edx_105,r12_112,rax_97,rbp_98,rbx_108,rcx_102,rdi_110,rdx_104,rsi_101,rsp_96,SCZO_99,SZO_106,Z_100
	return rax_97
// DataOut: ebp edi esi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 rdi:<invalid>

l00000000004056D0:
	Mem79[rdi_48 + 0x0000000000000028:word64] = rax_50 + 0x0000000000000001
	Mem80[rax_50:byte] = 0x0A
// DataOut: edi esi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 rdi:<invalid>

l00000000004056DB:
	word64 rbx_81
	*rbxOut = Mem80[v3:word64]
	word64 rbp_84
	*rbpOut = Mem80[v3 + 0x0000000000000008:word64]
	word64 rsp_87
	*rspOut = Mem80[v3 + 0x0000000000000010:word64] + 0x0000000000000008
	return rax_50
// DataOut: ebp edi esi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:0x0000000000413759 rdi:<invalid>

fn000000000040564F_exit:
// DataOut: ebp edi esi rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid>



word64 fn0000000000405700(word64 rax, word32 edx, word64 rdi, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rax rdi
// LiveOut: r12 r13d r14 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405700_entry:
	*r13dOut = r13d
	*r14Out = r14
	*r12Out = r12
// DataOut: edx fs r11 r11d r12 r13d r14 r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405700:
	word64 rbp_106
	word32 ebx_12 = (word32) (uint64) edx
	word64 rsp_107 = fp - 0x0000000000000010
	branch rdi == 0x0000000000000000 l0000000000405780
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405780:
	rbp_106 = (int64) ebx_12
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi rbx:(uint64) edx -8(fp):rbx -4(fp):rbp

l0000000000405710:
	word32 ebx_60
	word64 rsp_61
	word64 rbp_62
	word64 rsi_63
	word32 edi_64
	word64 r12_65
	word64 r13_66
	word64 r14_67
	word64 r15_68
	word32 eax_70 = (word32) fn000000000040D420(rax, 0x00000000, rdi, fs, qwLoc18, out ebx_60, out rsp_61, out rbp_62, out rsi_63, out edi_64, out r12_65, out r13_66, out r14_67, out r15_68)
	rsp_107 = rsp_61 + 0xFFFFFFFFFFFFFFF8
	word32 ebx_101 = (word32) (uint64) (ebx_60 - eax_70)
	branch ebx_101 >= 0x00000000 l0000000000405728
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi rbx:(uint64) edx -8(fp):rbx -4(fp):rbp

l0000000000405725_1:
	ebx_101 = 0x00000000
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 rdx:<invalid> rdi:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:0x00000000 -8(fp):rbx -4(fp):rbp

l0000000000405728:
	rbp_106 = (int64) ebx_101
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 ebx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:0x00000000 -8(fp):rbx -4(fp):rbp

l0000000000405740:
	word64 rdi_108 = Mem0[0x000000000061A610:word64]
	word64 rcx_110 = Mem0[rdi_108 + 0x0000000000000028:word64]
	branch rcx_110 >=u Mem0[rdi_108 + 0x0000000000000030:word64] l0000000000405799
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405799:
	word64 rdi_144
	word64 rbx_145
	word32 edx_147
	byte SCZO_148
	byte SZO_149
	byte C_150
	byte Z_151
	word32 esi_152
	word64 rsi_153
	word32 eax_154
	word64 rax_155
	byte S_156
	word64 rcx_157
	word32 edi_158
	word64 rdx_159
	selector fs_160
	word64 r12_161
	word32 r13d_162
	word64 r14_163
	word64 r13_164
	word64 r15_165
	call __overflow (retsize: 8; depth: 8)
		uses: C_112,dwLoc04_4,dwLoc08_9,eax_104,ebx_101,edi_109,edx_99,esi_97,fs_94,qwLoc18,r12_93,r13_90,r13d_92,r14_91,r15_89,rax_103,rbp_106,rbx_105,rcx_110,rdi_108,rdx_100,rsi_141,rsp_107,S_95,SCZO_111,SZO_98,Z_102
		defs: C_150,eax_154,ebx_146,edi_158,edx_147,esi_152,fs_160,r12_161,r13_164,r13d_162,r14_163,r15_165,rax_155,rbp_143,rbx_145,rcx_157,rdi_144,rdx_159,rsi_153,rsp_142,S_156,SCZO_148,SZO_149,Z_151
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405751:
	Mem139[rdi_108 + 0x0000000000000028:word64] = rcx_110 + 0x0000000000000001
	Mem140[rcx_110:byte] = 0x20
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040575C:
	ebx_101 = (word32) (uint64) (ebx_101 - 0x00000001) (alias)
	branch ebx_101 != 0xFFFFFFFF l0000000000405740
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405764:
	word64 rax_39 = rbp_106 + 0x0000000000000001 + Mem0[0x000000000061B018:word64]
	Mem41[0x000000000061B018:word64] = rax_39
	word64 rsp_42 = rsp_107 + 0x0000000000000008
	word64 rbp_46
	*rbpOut = Mem41[rsp_42 + 0x0000000000000008:word64]
	word64 rsp_47
	*rspOut = rsp_42 + 0x0000000000000010
	return rax_39
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405700_exit:
// DataOut: r12 r13d r14 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004057B0(byte dl, word64 rsi, word32 edi, word64 r8, word64 r12, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edi esi fs r12 r8 rsi
// LiveOut: r12 r13d r14 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004057B0_entry:
// DataOut: dl edi esi fs r11 r11d r12 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057B0:
	word64 rax_22 = 0x0000000000413764
	branch dl == 0x00 l00000000004057CB
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004057C0:
	rax_22 = 0x0000000000000000
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004057E0
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rax:0x0000000000413764 rbx:(uint64) edi -4(fp):rbx

l00000000004057E0:
	word64 rsp_55
	word64 rsi_56
	word64 r12_57
	rax_22 = fn000000000040C9B0(rsi, edi, r8, r12, out rsp_55, out rsi_56, out r12_57)
	esi = (word32) (uint64) Mem0[rsp_55 + 0x000000000000000C:word32] (alias)
// DataOut: esi fs r11 r11d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rax:0x0000000000000000 rbx:(uint64) edi -4(fp):rbx

l00000000004057CB:
	word32 edx_28 = (word32) (uint64) esi
// DataOut: edx fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> -8(fp):esi -4(fp):rbx

l00000000004057D8_thunk_fn0000000000405700:
	word64 rsp_36
	word64 rbp_37
	word64 r12_38
	word32 r13d_39
	word64 r14_40
	return fn0000000000405700(rax_22, edx_28, rax_22, fs, out rsp_36, out rbp_37, out r12_38, out r13d_39, out r14_40)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rdx:(uint64) esi rsi:<invalid> rdi:<invalid> rbp:<invalid> r12:<invalid> -8(fp):esi -4(fp):rbx

fn00000000004057B0_exit:
// DataOut: r12 r13d r14 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> ebx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> eax:<invalid> -8(fp):esi -4(fp):rbx



word64 fn0000000000405810(word64 rdx, word32 ebp, word32 esi, word32 edi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp edi esi fs r11 rdx
// LiveOut: r12 r14 r15b rax rbp rdi rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405810_entry:
// DataOut: ebp edi esi fs r11 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405810:
	word32 ebx_19 = (word32) rsi
	word64 rbp_23
	word64 r12_24
	word64 r14_25
	byte r15b_26
	word64 rbx_27 = fn000000000040EAB0(ebx_19, ebp, rdx, r11, fs, out rbp_23, out r12_24, out r14_25, out r15b_26)
	__errno_location()
	word64 rsp_42
	word32 r12d_43
	word32 edi_44
	word64 r12_45
	word64 rdi_46
	word64 rdx_47
	word64 rbp_48
	word64 rbx_49
	word64 rsi_50
	word32 esi_52
	byte SZO_53
	byte C_54
	word32 eax_55
	word64 rcx_56
	byte r12b_57
	byte Z_58
	word32 ebp_59
	word64 r11_60
	selector fs_61
	word64 r14_62
	byte r15b_63
	word32 ebx_64
	word64 rax_51
	call error (retsize: 8; depth: 8)
		uses: C_39,dwLoc04_4,dwLoc08_13,dwLoc0C_16,eax_37,ebp,ebx_19,edi_35,esi_33,fs,r11,r12_24,r12b_8,r12d_7,r14_25,r15b_26,rax_36,rbp_29,rbx_27,rcx_40,rdi_34,rdx_41,rsi_32,rsp_14,SZO_38
		defs: C_54,eax_55,ebp_59,ebx_64,edi_44,esi_52,fs_61,r11_60,r12_45,r12b_57,r12d_43,r14_62,r15b_63,rax_51,rbp_48,rbx_49,rcx_56,rdi_46,rdx_47,rsi_50,rsp_42,SZO_53,Z_58
	branch r12b_57 == 0x00 l0000000000405850
// DataOut: fs r12 r14 r15b rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405850:
	rax_51 = (uint64) Mem0[0x000000000061B030:word32]
	branch (word32) rax_51 != 0x00000000 l000000000040584A
// DataOut: fs r12 r14 r15b rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040585A:
	word64 rbp_103
	*rbpOut = Mem0[rsp_42 + 0x0000000000000008:word64]
	Mem106[0x000000000061B030:word32] = 0x00000001
	return rax_51
// DataOut: fs r12 r14 r15b rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:(uint64) Mem0[0x000000000061B030:word32] rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000405840:
	Mem95[0x000000000061B030:word32] = 0x00000002
// DataOut: fs r12 r14 r15b rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040584A:
	word64 rbp_90
	*rbpOut = Mem0[rsp_42 + 0x0000000000000008:word64]
	return rax_51
// DataOut: fs r12 r14 r15b rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405810_exit:
// DataOut: r12 r14 r15b rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word32 fn0000000000405C20(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al eax esi rsi
// Trashed: SCZO ah al ax ch cl cx eax ecx esi rax rcx rsi si sil
// Preserved: rsp
fn0000000000405C20_entry:
	*rsiOut = rsi
// DataOut: dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C20:
	byte cl_129
	word32 eax_107
	branch dil == 0x00 l0000000000405C40
// DataOut: dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C40:
	eax_107 = 0x00000000 (alias)
	branch edx == 0x00000005 l0000000000405C3E
// DataOut: al dil eax ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C47:
	cl_129 = (byte) (uint64) (DPB(ecx, edx == 0x00000009, 0) | (word32) (edx == 0x00000003)) (alias)
// DataOut: cl dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000000

l0000000000405C25:
	word32 eax_102 = (word32) (uint64) ((word32) (uint64) esi & 0x0000F000)
	branch eax_102 != 0x00008000 l0000000000405CA0
// DataOut: dil eax ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405CA0:
	cl_129 = eax_102 == 0x00004000
// DataOut: cl dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:(uint64) (eax & 0x0000F000)

l0000000000405C55:
	eax_107 = 0x0000002F (alias)
	branch cl_129 != 0x00 l0000000000405C3E
// DataOut: al dil eax ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:(uint64) (ecx | eax)

l0000000000405C5E:
	branch Mem0[0x000000000061B12C:word32] == 0x00000001 l0000000000405CF0
// DataOut: dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:(uint64) (ecx | eax)

l0000000000405CF0:
	return 0x00000000
// DataOut: al eax ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:(uint64) (ecx | eax)

l0000000000405C6B:
	word32 eax_53
	branch dil == 0x00 l0000000000405CC0
// DataOut: ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:(uint64) (ecx | eax)

l0000000000405CC0:
	eax_107 = 0x00000040 (alias)
	branch edx == 0x00000006 l0000000000405C3E
// DataOut: al eax ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:(uint64) (ecx | eax)

l0000000000405CCE:
	eax_107 = 0x0000007C (alias)
	branch edx == 0x00000001 l0000000000405C3E
// DataOut: al eax ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:(uint64) (ecx | eax)

l0000000000405CDC:
	eax_53 = DPB(0x0000007C, edx == 0x00000007, 0) (alias)
// DataOut: eax ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:(uint64) (ecx | eax)

l0000000000405C70:
	word64 rsi_61 = (uint64) (esi & 0x0000F000)
	*rsiOut = rsi_61
	word32 esi_62 = (word32) rsi_61
	eax_107 = 0x00000040 (alias)
	branch esi_62 == 0x0000A000 l0000000000405C3E
// DataOut: al eax ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:(uint64) (ecx | eax)

l0000000000405C83:
	eax_107 = 0x0000007C (alias)
	branch esi_62 == 0x00001000 l0000000000405C3E
// DataOut: al eax ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:(uint64) (ecx | eax) rsi:(uint64) (esi & 0x0000F000)

l0000000000405C90:
	eax_53 = DPB(0x0000007C, esi_62 == 0x0000C000, 0) (alias)
// DataOut: eax ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:(uint64) (ecx | eax) rsi:(uint64) (esi & 0x0000F000)

l0000000000405CE2:
	return (word32) (uint64) ((word32) (uint64) -eax_53 & 0x0000003D)
// DataOut: al eax ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:(uint64) (ecx | eax) rsi:(uint64) (esi & 0x0000F000)

l0000000000405C33:
	eax_107 = 0x00000000 (alias)
	branch Mem0[0x000000000061B12C:word32] == 0x00000003 l0000000000405CB0
// DataOut: al eax ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:(uint64) (eax & 0x0000F000)

l0000000000405CB0:
	word64 rsi_114 = (uint64) (esi & 0x00000049)
	*rsiOut = rsi_114
	return (word32) (uint64) ((word32) (uint64) ~(word32) (uint64) (0x00000000 - cond((word32) rsi_114 - 0x00000001)) & 0x0000002A)
// DataOut: al eax ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000000

l0000000000405C3E:
	return eax_107
// DataOut: al eax ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:<invalid> rcx:(uint64) (ecx | eax) rsi:(uint64) (esi & 0x0000F000)

fn0000000000405C20_exit:
// DataOut: al eax esi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:(uint64) (ecx | eax)



byte fn0000000000405D00(word32 edx, word32 esi, byte dil, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al rdi rsi rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D00_entry:
// DataOut: dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D00:
	word32 edi_6 = (word32) dil
	word64 rsi_12
	word32 eax_13 = fn0000000000405C20(edx, esi, (byte) edi_6, out rsi_12)
	word64 rbx_18 = (uint64) eax_13
	word64 rdi_8
	*rdiOut = DPB(rdi, edi_6, 0)
	byte bl_20 = (byte) rbx_18
	branch (byte) eax_13 == 0x00 l0000000000405D33
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D10:
	word64 rdi_49 = Mem0[0x000000000061A610:word64]
	*rdiOut = rdi_49
	word64 rax_52 = Mem0[rdi_49 + 0x0000000000000028:word64]
	branch rax_52 >=u Mem0[rdi_49 + 0x0000000000000030:word64] l0000000000405D3A
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:(word32) dil rbx:(uint64) eax rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D3A:
	word64 rsp_82
	word64 rbx_83
	word32 edi_84
	byte dil_85
	byte al_86
	byte SZO_87
	byte C_88
	word32 ebx_89
	word32 eax_90
	byte Z_91
	word64 rdi_92
	word64 rax_93
	byte SCZO_94
	word64 rdx_95
	word32 esi_97
	word32 edx_98
	word64 rsi_99
	call __overflow (retsize: 8; depth: 12)
		uses: al_53,bl_20,C_56,dil_51,dwLoc04_4,eax_54,ebx_19,edi_50,edx,esi_80,qwLoc04,rax_52,rbx_18,rdi_49,rdx,rsi_81,rsp_2,SCZO_55,SZO_15,Z_16
		defs: al_86,bl_96,C_88,dil_85,eax_90,ebx_89,edi_84,edx_98,esi_97,rax_93,rbx_83,rdi_92,rdx_95,rsi_99,rsp_82,SCZO_94,SZO_87,Z_91
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D21:
	Mem78[rdi_49 + 0x0000000000000028:word64] = rax_52 + 0x0000000000000001
	Mem79[rax_52:byte] = bl_20
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D2B:
	Mem75[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D33:
	word64 rsp_44
	*rspOut = fp + 0x0000000000000004
	return bl_20 != 0x00
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx

fn0000000000405D00_exit:
// DataOut: al rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 edi:<invalid> rbx:rbx al:Test(NE,Z) rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> rcx:<invalid> -4(fp):rbx



word64 fn0000000000405D50(word64 rdi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r12b r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D50_entry:
	*r12bOut = r12b
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D50:
	word64 rbp_253 = rdi
	word32 ebp_7 = (word32) rdi
	word64 rbx_11 = 0x0000000000000000
	word32 ebx_12 = 0x00000000
	word64 rax_18 = 0x0000000000000000
	branch Mem0[0x000000000061B114:byte] == 0x00 l0000000000405D92
// DataOut: ebx fs r11 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D7A:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405EA0
// DataOut: fs r11 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:0x0000000000000000 rax:0x0000000000000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405EA0:
	word64 r14_299
	word64 rax_300 = fn000000000040CD70(fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000018:word64], out r14_299)
	rax_18 = DPB(rax_300, strlen(rax_300), 0)
	rbx_11 = rax_18 + 0x0000000000000001
	ebx_12 = (word32) (rax_18 + 0x0000000000000001) (alias)
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:0x0000000000000000 rax:0x0000000000000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D87:
	word64 rbx_293 = (int64) Mem0[0x000000000061B178:word32]
	rbx_11 = rbx_293 + 0x0000000000000001
	ebx_12 = (word32) (rbx_293 + 0x0000000000000001) (alias)
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:0x0000000000000000 rax:0x0000000000000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D92:
	branch Mem0[0x000000000061B144:byte] == 0x00 l0000000000405DB6
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D9B:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E58
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E58:
	rax_18 = 0x0000000000000002
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000405DB3
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E6A:
	word64 rsp_276
	word64 r8_278
	word64 r9_279
	word32 r14d_281
	word64 r15_282
	word64 rax_283 = fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rdi, fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out rsp_276, out rbp_253, out r8_278, out r9_279, out r11, out r14d_281, out r15_282)
	rax_18 = DPB(rax_283, strlen(rax_283), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:0x0000000000000002 rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DA8:
	rax_18 = (int64) Mem0[0x000000000061B174:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB3:
	rbx_11 = rbx_11 + rax_18
	ebx_12 = (word32) rbx_11 (alias)
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB6:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000405DD6
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DBF:
	word64 rax_216
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E40
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E40:
	rax_216 = DPB(rax_18, strlen(Mem0[rbp_253 + 0x00000000000000A8:word64]), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DC8:
	rax_216 = (int64) Mem0[0x000000000061B16C:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD3:
	ebx_12 = (word32) (rbx_11 + rax_216) (alias)
// DataOut: ebx fs r11 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD6:
	word64 rbx_79
	word64 rsp_80
	word64 rbp_81
	word64 r8_84
	word64 r9_85
	word64 r11_86
	word64 r12_87
	word64 r13_88
	word64 r14_89
	word64 r15_90
	word32 edi_194
	word64 rsi_104
	fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_12, Mem0[rbp_253:word64], r11, fs, out rbx_79, out rsp_80, out rbp_81, out rsi_104, out edi_194, out r8_84, out r9_85, out r11_86, out r12_87, out r13_88, out r14_89, out r15_90)
	word64 rax_92 = (uint64) Mem0[0x000000000061B12C:word32]
	word64 rbx_108 = rbx_79 + Mem0[rsp_80 + 0x0000000000000008:word64]
	branch (word32) rax_92 == 0x00000000 l0000000000405E1C
// DataOut: ebp ebx edi esi fs r11 r12b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DFC:
	edi_194 = (word32) Mem0[rbp_81 + 0x00000000000000B0:byte]
	rbx_108 = rbx_108 + DPB(rax_92, (word32) ((byte) fn0000000000405C20((word32) ((uint64) Mem0[rbp_81 + 0x00000000000000A0:word32]), (word32) ((uint64) Mem0[rbp_81 + 0x0000000000000028:word32]), (byte) edi_194, out rsi_104) != 0x00), 0)
// DataOut: ebp ebx edi esi fs r11 r12b r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:(uint64) Mem0[0x000000000061B12C:word32] rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ecx:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E1C:
	branch (Mem0[rsp_80 + 0x00000000000002A8:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000405EBF
// DataOut: ebp ebx edi esi fs r11 r12b r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EBF:
	__stack_chk_fail()
	Mem152[rsp_80 - 0x0000000000000004:word32] = rsi_104
	word64 rdx_153 = Mem152[0x000000000061B1B0:word64]
	word64 rax_156 = Mem152[0x000000000061B020:word64]
	Mem161[rsp_80 - 0x0000000000000008:word32] = rbp_81
	Mem164[rsp_80 - 0x000000000000000C:word32] = rsp_80 - 0x0000000000000008
	Mem171[rsp_80 - 0x0000000000000010:word32] = rbp_81
	Mem173[rsp_80 - 0x0000000000000014:word32] = rbx_108
	word64 r12_167 = (uint64) edi_194
	branch rax_156 >u rdx_153 l0000000000405EF3
// DataOut: ebp ebx fs r11 r12 r8 rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EEF_thunk_fn0000000000405EF3:
	word64 rsp_186
	word64 rbp_187
	word64 r9_188
	byte r12b_189
	return fn0000000000405EF3(rax_156, rdx_153, rdx_153, ebp_7, rsi_104, r8_84, r11_86, r12_167, fs, out rsp_186, out rbp_187, out r9_188, out r12b_189)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -724(fp):<invalid> -720(fp):rdi -716(fp):fp - 0x00000000000002C8 -712(fp):rdi -708(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EEF_1:
// DataOut: ebp ebx fs r11 r12 r8 rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -724(fp):<invalid> -720(fp):rdi -716(fp):fp - 0x00000000000002C8 -712(fp):rdi -708(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EEF_thunk_fn0000000000405EF3:
	word64 rsp_178
	word64 rbp_179
	word64 r9_180
	byte r12b_181
	return fn0000000000405EF3(rax_156, rdx_153, rax_156, ebp_7, rsi_104, r8_84, r11_86, r12_167, fs, out rsp_178, out rbp_179, out r9_180, out r12b_181)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -724(fp):<invalid> -720(fp):rdi -716(fp):fp - 0x00000000000002C8 -712(fp):rdi -708(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E36:
	word64 rbp_144
	*rbpOut = Mem0[rsp_80 + 0x00000000000002C0:word64]
	word64 rsp_146
	*rspOut = rsp_80 + 0x00000000000002C8
	return rbx_108
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405D50_exit:
// DataOut: r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r12:<invalid> edx:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> sil:<invalid> r10:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -724(fp):<invalid> -720(fp):rdi -716(fp):fp - 0x00000000000002C8 -712(fp):rdi -708(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000405ED0(word32 ebp, word64 rsi, word32 edi, word64 r8, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp edi fs r11 r8 rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000405ED0_entry:
// DataOut: ebp edi fs r11 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405ED0:
	word64 rdx_6 = Mem0[0x000000000061B1B0:word64]
	word64 rax_7 = Mem0[0x000000000061B020:word64]
	word64 r12_17 = (uint64) edi
	branch rax_7 >u rdx_6 l0000000000405EEF_thunk_fn0000000000405EF3
// DataOut: ebp ebx fs r11 r12 r8 rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405EEF_thunk_fn0000000000405EF3:
	word64 rsp_42
	word64 rbp_43
	word64 r9_44
	byte r12b_45
	fn0000000000405EF3(rax_7, rdx_6, rdx_6, ebp, rsi, r8, r11, r12_17, fs, out rsp_42, out rbp_43, out r9_44, out r12b_45)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405EEF_1:
// DataOut: ebp ebx fs r11 r12 r8 rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405EEF_thunk_fn0000000000405EF3:
	word64 rsp_37
	word64 rbp_38
	word64 r9_39
	byte r12b_40
	fn0000000000405EF3(rax_7, rdx_6, rax_7, ebp, rsi, r8, r11, r12_17, fs, out rsp_37, out rbp_38, out r9_39, out r12b_40)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn0000000000405ED0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> dl:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> r9d:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn0000000000405EF3(word64 rax, word64 rdx, word64 rbx, word32 ebp, word64 rsi, word64 r8, word64 r11, word64 r12, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx fs r11 r12 r8 rax rbx rdx rsi
// LiveOut: r12b r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000405EF3_entry:
	*r12bOut = r12b
	*r9Out = r9
// DataOut: ebp ebx fs r11 r12 r12b r8 r9 rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l0000000000405EF3:
	word64 rsi_294
	word64 rax_289
	word64 r8_283
	word64 rsp_1 = v3
	branch rbx <=u Mem0[0x000000000061A660:word64] l00000000004060C8
// DataOut: ebp ebx fs r11 r12 r12b r8 r9 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004060C8:
	rax_289 = 0x0000000000000000
	r8_283 = rdx
	rsi_294 = Mem0[0x000000000061B028:word64]
	branch rbx == 0x0000000000000000 l0000000000406004
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3

l00000000004060DD:
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rax:0x0000000000000000 r8:rdx rsi:<invalid>

l0000000000405F00:
	word64 rdi_323 = Mem0[0x000000000061B028:word64]
	word32 edi_324 = (word32) rdi_323
	branch rbx <u rax >>u 0x0000000000000001 l0000000000406170
// DataOut: ebp ebx edi fs r11 r12 r12b r8 r9 rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3

l0000000000406170:
	r8 = 0x0000000055555555
	branch rbx >u rax l000000000040619D
// DataOut: ebp ebx edi fs r11 r12 r12b r8 r9 rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rdx:rax >>u 0x0000000000000001 rdi:<invalid>

l000000000040617F:
	word32 ebx_488
	Mem492[0x000000000061B028:word64] = fn0000000000410C90(rax >>u 0x0000000000000001, rbx * 0x0000000000000030, rdi_323, out ebx_488, out rsp_1, out r8)
	rbp = rbx * 0x0000000000000002
// DataOut: ebp ebx fs r11 r12 r12b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rdx:rax >>u 0x0000000000000001 rdi:<invalid> r8:0x0000000055555555

l0000000000405F16:
	branch rax >u rax >>u 0x0000000000000001 l000000000040619D
// DataOut: ebp ebx edi fs r11 r12 r12b r8 r9 rax rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rdx:rax >>u 0x0000000000000001 rdi:<invalid>

l0000000000405F29:
	word32 ebx_472
	word64 rax_475 = fn0000000000410C90(rax >>u 0x0000000000000001, rax * 0x0000000000000018, rdi_323, out ebx_472, out rsp_1, out r8)
	rbp = Mem0[0x000000000061B020:word64]
	Mem478[0x000000000061B028:word64] = rax_475
// DataOut: ebp ebx fs r11 r12 r12b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rdx:rax >>u 0x0000000000000001 rdi:<invalid> r10:0x00000000AAAAAAAA

l0000000000405F44:
	word64 rax_389 = Mem0[0x000000000061A660:word64]
	word64 rdi_392 = rbp - rax_389
	rsi = rbp + 0x0000000000000001 + rax_389
	edi_324 = (word32) rdi_392 (alias)
	word64 rcx_395 = rsi *s rdi_392
	branch rbp >u rsi l000000000040619D
// DataOut: ebp ebx edi fs r11 r12 r12b r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rax:<invalid> rcx:<invalid> rbx:<invalid> cl:<invalid>

l0000000000405F66:
	word64 rax_405 = (uint64) ((uint128) (uint64) rcx_395 /u rdi_392)
	branch rsi != rax_405 l000000000040619D
// DataOut: ebp ebx edi fs r11 r12 r12b r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rax:<invalid> rcx:<invalid> rbx:<invalid> cl:<invalid>

l0000000000405F77:
	r8 = 0x00000000FFFFFFFF
	branch rcx_395 >>u 0x0000000000000001 >u rax_405 l000000000040619D
// DataOut: ebp ebx edi fs r11 r12 r12b r8 r9 rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rax:<invalid> rcx:<invalid> rbx:<invalid> cl:<invalid>

l000000000040619D:
	fn0000000000410E50()
	word64 rsp_345 = rsp_1 - 0x0000000000000004
	Mem346[rsp_345:word32] = rbp
	Mem349[rsp_345 - 0x0000000000000004:word32] = rbx
	Mem352[rsp_345 - 0x0000000000000014:word64] = Mem349[fs:0x00000028:word64]
	branch Mem352[0x000000000061B145:byte] == 0x00 l0000000000406248
// DataOut: edi fs r12 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rdi:<invalid> r10:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rax:<invalid> rcx:<invalid> rbx:<invalid> cl:<invalid>
// Terminates process

l00000000004061CF_thunk_fn0000000000406248:
	word64 rbx_370
	word64 rsp_371
	word64 rbp_372
	word64 rsi_373
	word64 r8_374
	word64 r9_375
	word64 r12_376
	word64 r14_377
	word64 r15_378
	return fn0000000000406248(rsi, edi_324, r8, r12, fs, out rbx_370, out rsp_371, out rbp_372, out rsi_373, out r8_374, out r9_375, out r12_376, out r14_377, out r15_378)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsp - 0x0000000000000040 rbp:(uint64) edi rax:0x0000000000000000

l00000000004061CF_thunk_fn0000000000406248:
	word64 rbx_356
	word64 rsp_357
	word64 rbp_358
	word64 rsi_359
	word64 r8_360
	word64 r9_361
	word64 r12_362
	word64 r14_363
	word64 r15_364
	return fn0000000000406248(rsi, edi_324, r8, r12, fs, out rbx_356, out rsp_357, out rbp_358, out rsi_359, out r8_360, out r9_361, out r12_362, out r14_363, out r15_364)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsp - 0x0000000000000040 rbp:(uint64) edi rax:0x0000000000000000

l0000000000405F8D:
	word64 rax_417 = fn0000000000410C40(rsi, (rcx_395 >>u 0x0000000000000001) * 0x0000000000000008, out rsp_1)
	word64 rcx_421 = Mem0[0x000000000061A660:word64]
	branch rbp <=u rcx_421 l0000000000405FE4
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rax:<invalid> rcx:<invalid> rbx:<invalid> cl:<invalid>

l0000000000405FA6:
	word64 rsi_439 = Mem0[0x000000000061B028:word64]
	word64 rcx_442 = rcx_421 * 0x0000000000000008 + 0x00000008
	word64 rdx_443 = rsi_439 + (rcx_421 * 0x0000000000000003) * 0x0000000000000008 + 0x0000000000000010
	word64 rsi_446 = rsi_439 + (rbp * 0x0000000000000003) * 0x0000000000000008
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rax:<invalid> rcx:<invalid> rbx:<invalid> cl:<invalid>

l0000000000405FD0:
	Mem450[rdx_443 + 0x0000000000000000:word64] = rax_417
	rdx_443 = rdx_443 + 0x0000000000000018
	rax_417 = rax_417 + rcx_442
	rcx_442 = rcx_442 + 0x0000000000000008
	branch rdx_443 != rsi_446 l0000000000405FD0
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rax:<invalid> rcx:<invalid> rbx:<invalid> cl:<invalid>

l0000000000405FE4:
	Mem436[0x000000000061A660:word64] = rbp
	rax_289 = 0x0000000000000000
	r8_283 = Mem436[0x000000000061B1B0:word64]
	rsi_294 = Mem436[0x000000000061B028:word64]
	branch rbx != 0x0000000000000000 l00000000004060E0
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rax:<invalid> rcx:<invalid> rbx:<invalid> cl:<invalid>

l00000000004060E0:
	word64 rcx_298 = Mem0[rsi_294 + 0x0000000000000010:word64]
	Mem299[rsi_294:byte] = 0x01
	word64 rdi_296 = rax_289 + 0x0000000000000001
	Mem301[rsi_294 + 0x0000000000000008:word64] = rdi_296 * 0x0000000000000003
	word64 rdx_302 = 0x0000000000000000
// DataOut: fs r11 r12b r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r10:<invalid> rbp:<invalid> rbx:<invalid> cl:<invalid>

l00000000004060F8:
	Mem308[rcx_298 + rdx_302 * 0x0000000000000008:word64] = 0x0000000000000003
	rdx_302 = rdx_302 + 0x0000000000000001
	branch rdx_302 <=u rax_289 l00000000004060F8
// DataOut: fs r11 r12b r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r10:<invalid> rbp:<invalid> rbx:<invalid> cl:<invalid>

l0000000000406109:
	rsi_294 = rsi_294 + 0x0000000000000018
	branch rdi_296 == rbx l0000000000406004
// DataOut: fs r11 r12b r8 r9 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r10:<invalid> rbp:<invalid> rbx:<invalid> cl:<invalid>

l0000000000406116:
	rax_289 = rdi_296
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r10:<invalid> rbp:<invalid> rbx:<invalid> cl:<invalid>

l0000000000406004:
	word64 rbp_155 = 0x0000000000000000
	branch r8_283 == 0x0000000000000000 l000000000040612D
// DataOut: fs r11 r12b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r10:<invalid> rbp:<invalid> rbx:<invalid> cl:<invalid>

l000000000040600F:
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:0x0000000000000000 rdi:<invalid> rcx:<invalid> rdx:<invalid> r10:<invalid> rbx:<invalid> cl:<invalid>

l0000000000406010:
	word64 rbp_162
	byte r12b_164
	word64 r9_163
	word64 rax_165 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbp_155 * 0x0000000000000008:word64], r11, fs, out rsp_1, out rbp_162, out r9_163, out r12b_164)
	r11 = rax_165
	word64 r14_170 = Mem0[0x000000000061B1B0:word64]
	branch rbx == 0x0000000000000000 l0000000000406120
// DataOut: fs r11 r12b r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l0000000000406033:
	word64 r13_192 = Mem0[0x000000000061B0C8:word64]
	word64 rsi_193 = Mem0[0x000000000061B028:word64] + 0x0000000000000010
	word64 rcx_194 = 0x0000000000000001
	rsi_209 = rsi_193
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r10:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l00000000004060A7:
	word64 rsi_209
	r9_163 = r9_163 - 0x0000000000000001
	*r9Out = r9_163
	branch Mem0[rsi_209:byte] == 0x00 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l00000000004060B3:
	word64 r10_234
	branch r12b_164 != 0x00 l0000000000406050
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l0000000000406050:
	r10_234 = (uint64) ((uint128) (uint64) rbp_162 /u (uint64) ((uint128) ((uint64) ((rsi_193 - 0x0000000000000001) + rcx_506)) /u rcx_506))
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l00000000004060B8:
	r10_234 = (uint64) ((uint128) (uint64) rbp_162 % rcx_506)
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l000000000040606A:
	word64 rdx_240 = rax_165 + (uint64) (r9_163 != r10_234) * 0x0000000000000002
	word64 rax_243 = Mem0[rsi_209 + 0x0000000000000000:word64] + r10_234 * 0x0000000000000008
	r9_163 = Mem0[rcx_506:word64]
	*r9Out = r9_163
	branch rdx_240 <=u r9_163 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> al:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l0000000000406086:
	Mem253[r14_170 + 0x0000000000000008:word64] = Mem0[r14_170 + 0x0000000000000008:word64] + (rdx_240 - r9_163)
	Mem254[rax_243:word64] = rdx_240
	Mem257[rsi_209:byte] = Mem254[r14_170 + 0x0000000000000008:word64] <u r13_192
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> r10:<invalid> al:<invalid> edi:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l000000000040609A:
	rsi_209 = rsi_209 + 0x0000000000000018
	rcx_194 = rcx_506 + 0x0000000000000001
	word64 rcx_506 = rcx_194
	branch rbx <=u rcx_506 l0000000000406120
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r10:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l0000000000406120:
	rbp_155 = rbp_162 + 0x0000000000000001
	branch rbp_162 + 0x0000000000000001 <u r14_170 l0000000000406010
// DataOut: fs r11 r12b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l000000000040612D:
	branch rbx <=u 0x0000000000000001 l0000000000406164
// DataOut: fs r12b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l0000000000406133:
	word64 rdx_113 = Mem0[0x000000000061B028:word64]
	branch Mem0[rdx_113 - 0x0000000000000018 + rbx * 0x0000000000000018:byte] != 0x00 l0000000000406164
// DataOut: fs r12b r9 rax rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l0000000000406149:
	word64 rax_122 = rbx * 0x0000000000000018 + rdx_113
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l000000000040615A:
	rbx = rbx - 0x0000000000000001
	branch rbx != 0x0000000000000001 l0000000000406150
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> rbx:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l0000000000406150:
	rax_122 = rax_122 - 0x0000000000000018
	branch Mem0[rax_122 - 0x0000000000000018:byte] != 0x00 l0000000000406164
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> rbx:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

l0000000000406164:
	word64 rsp_104 = Mem0[rsp_1 + 0x0000000000000010:word64]
	word64 rbp_106
	*rbpOut = Mem0[rsp_104 + 0x0000000000000008:word64]
	word64 rsp_110
	*rspOut = rsp_104 + 0x0000000000000018
	return rbx
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rbx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> r12:<invalid> edx:<invalid> r10:<invalid> cl:<invalid> r15:<invalid> dl:<invalid> sil:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>

fn0000000000405EF3_exit:
// DataOut: r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> rbx:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> dl:<invalid> cl:<invalid> sil:<invalid> r12:<invalid> r10:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> r9d:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid>



word64 fn00000000004061B0(word64 rsi, word32 edi, word64 r8, word64 r12, selector fs, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r12 r8 rsi
// LiveOut: eax r12 r14 r15 r15d r8 rax rbp rbx rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004061B0_entry:
// DataOut: edi fs r12 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004061B0:
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004061CF_thunk_fn0000000000406248
// DataOut: edi fs r12 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004061CF_thunk_fn00000000004061D1:
	word64 rbx_60
	word64 rbp_61
	word64 rsi_62
	word64 r8_63
	word64 r9_64
	word64 r12_65
	word64 r14_66
	word64 r15_67
	return fn00000000004061D1(rsi, edi, r8, r12, fs, out rbx_60, out rbp_61, out rsi_62, out r8_63, out r9_64, out r12_65, out r14_66, out r15_67)
// DataOut: eax fs r12 r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rbp:(uint64) edi rax:0x0000000000000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061CF_thunk_fn0000000000406248:
	word64 rbx_49
	word64 rsp_50
	word64 rbp_51
	word64 rsi_52
	word64 r8_53
	word64 r9_54
	word64 r12_55
	word64 r14_56
	word64 r15_57
	return fn0000000000406248(rsi, edi, r8, r12, fs, out rbx_49, out rsp_50, out rbp_51, out rsi_52, out r8_53, out r9_54, out r12_55, out r14_56, out r15_57)
// DataOut: eax fs r12 r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rbp:(uint64) edi rax:0x0000000000000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061CF_thunk_fn00000000004061D1:
	word64 rbx_39
	word64 rbp_40
	word64 rsi_41
	word64 r8_42
	word64 r9_43
	word64 r12_44
	word64 r14_45
	word64 r15_46
	return fn00000000004061D1(rsi, edi, r8, r12, fs, out rbx_39, out rbp_40, out rsi_41, out r8_42, out r9_43, out r12_44, out r14_45, out r15_46)
// DataOut: eax fs r12 r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rbp:(uint64) edi rax:0x0000000000000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn00000000004061B0_exit:
// DataOut: eax r12 r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbx:<invalid> r8:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r12:<invalid> r13:<invalid> r15:<invalid> ecx:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004061D1(word64 rsi, word32 edi, word64 r8, word64 r12, selector fs, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r12 r8 rsi
// LiveOut: eax r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn00000000004061D1_entry:
	rax = fn0000000000406248(rsi, edi, r8, r12, fs, out rbx, out rsp, out rbp, out rsi, out r8, out r9, out r12, out r14, out r15)
	eax = (word32) rax (alias)
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004061D1:
	rsp = v3
	r8 = (uint64) ebp
	rcx = 0x000000000041375A
	rdx = 0x0000000000000015
	rsi = 0x0000000000000001
	rdi = rsp
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = 0x0000000000000000
	rbx = rsp
	rax = rsp
// DataOut: ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbp:<invalid> rax:<invalid> rbx:<invalid> r8:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004061F3:
	rcx = (uint64) Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	edx = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rdx = (uint64) (edx & ecx)
	rdx = (uint64) (edx & 0x80808080)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
// DataOut: dl eax ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:v3 rax:<invalid> rbx:v3 edx:<invalid> rbp:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:0x01 r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:0x00000001 r9d:<invalid> edi:<invalid>

l000000000040620B:
	rcx = (uint64) edx
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
// DataOut: cl dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:v3 rax:<invalid> rbx:v3 edx:<invalid> rbp:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:0x01 r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:0x00000001 r9d:<invalid> edi:<invalid>

l0000000000406216_1:
	edx = ecx
// DataOut: dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:v3 rax:<invalid> rbx:v3 edx:<invalid> rbp:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:0x01 r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:0x00000001 r9d:<invalid> edi:<invalid>

l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
// DataOut: dl eax ebp ebx ecx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:v3 rax:<invalid> rbx:v3 edx:<invalid> rbp:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:0x01 r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:0x00000001 r9d:<invalid> edi:<invalid>

l000000000040621D_1:
	rax = rcx
// DataOut: dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:v3 rax:<invalid> rbx:v3 edx:<invalid> rbp:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:0x01 r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:0x00000001 r9d:<invalid> edi:<invalid>

l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	rdx = (uint64) eax
	rdx = (uint64) (edx - ebx)
	SCZO = cond(edx)
// DataOut: ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:v3 rax:<invalid> rbx:v3 edx:<invalid> rbp:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:0x01 r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:0x00000001 r9d:<invalid> edi:<invalid>

l000000000040622B:
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	rax = (uint64) edx
	branch Test(NE,Z) l0000000000406269
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> dl:<invalid> rbp:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l0000000000406269:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	r9 = rsi
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	sil = Test(EQ,Z)
	rdx = (uint64) (edx | esi)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l00000000004062C8
// DataOut: al dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> rcx:<invalid> rbx:<invalid> dl:<invalid> rbp:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062C8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000000004062A1
// DataOut: al dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062CC:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062A1:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004062B8
// DataOut: dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062A5:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l00000000004062B8
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062B8:
	rsi = Mem0[rdi:word64]
	rdi = Mem0[rcx:word64]
// DataOut: eax ebp ebx esi fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A7D0:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	v30 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v30
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	rax = DPB(rax, strcmp(rdi, rsi), 0)
	r13 = (uint64) eax
	rax = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A7F1:
	edx = (word32) Mem0[rbx:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040AAE7
// DataOut: dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A7FC:
	ecx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	al = 0x01
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A806:
	eax = (word32) dl
	rsi = 0x000000000000002E
	rsi = (uint64) (0x0000002E - eax)
	SCZO = cond(esi)
	branch Test(NE,Z) l000000000040A81D
// DataOut: cl dl esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A812:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A81D:
	eax = (word32) cl
	rdi = 0x000000000000002E
	rdi = (uint64) (0x0000002E - eax)
	SCZO = cond(edi)
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl edi esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A829:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x00)
	rax = 0x0000000000000001
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl eax edi esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A848:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A84C:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A852:
	SCZO = cond(Mem0[rbx + 0x0000000000000002:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A85D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040A9A0
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A9A0:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A9AA:
	SCZO = cond(Mem0[rbp + 0x0000000000000002:byte] - 0x00)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A865:
	SCZO = cond(dl - 0x2E)
	branch Test(EQ,Z) l000000000040AAC0
// DataOut: cl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040AAC0:
	rbx = rbx + 0x0000000000000001
	rbp = rbp + 0x0000000000000001
	SCZO = cond(cl - 0x2E)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A877
// DataOut: eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040AAD6:
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:0x00000000FFFFFFFF r8:<invalid> r9:<invalid> cl:<invalid> al:0xFF dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:0xFFFFFFFF rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A86E:
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A9B4
// DataOut: fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A877:
	rdi = rsp
	Mem0[rsp:word64] = rbx
	Mem0[rsp + 0x0000000000000008:word64] = rbp
	rax = fn000000000040A730(rdi, r14d, out r9)
	rdi = rsp + 0x0000000000000008
	r14 = rax
	r12 = r14
	rax = fn000000000040A730(rdi, r14d, out r9)
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000040A8A0
// DataOut: eax fs r11d r12 r13d r14 r15 r15d r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A89B_1:
	r12 = Mem0[rsp:word64]
// DataOut: eax fs r11d r12 r13d r14 r15 r15d r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:0x0000000000000000 esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8A0:
	r10 = rax
	r10 = r10 - rbp
	r12 = r12 - rbx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AAF1
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:0x0000000000000000 esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AAF1:
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r10 = r10 - rbp
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000040A8BB
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AB02:
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8B2:
	SCZO = cond(r12 - r10)
	branch Test(EQ,Z) l000000000040AA8B
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA8B:
	rdx = r12
	rsi = rbp
	rdi = rbx
	rax = DPB(rax, strncmp(rdi, rsi, rdx), 0)
	SZO = cond(eax & eax)
	C = false
	r10 = r12
	branch Test(NE,Z) l000000000040A8BB
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AAA4:
	r12 = Mem0[rsp:word64]
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r12 = r12 - rbx
	r10 = r10 - rbp
	SCZO = cond(r10)
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8BB:
	rcx = 0x0000000000000000
	r8 = 0x0000000000000000
	SZO = cond(r8d)
	C = false
	rbx = 0x00000000FFFFFFFF
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8C6:
	SCZO = cond(r10 - rcx)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8CF:
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AB07:
	SCZO = cond(r12 - r8)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A971:
	SCZO = cond(r12 - r8)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A97A:
	esi = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	eax = (int32) sil
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: esi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8D8:
	SCZO = cond(r10 - rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8E7:
	eax = (int32) r9b
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9D4:
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	SCZO = cond(dl - 0x30)
	branch Test(EQ,Z) l000000000040A9D0
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9D0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9DE:
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9EA:
	SCZO = cond(r9b - 0x30)
	branch Test(EQ,Z) l000000000040A9E0
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9E0:
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9F0:
	eax = (int32) dl
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	eax = (int32) r9b
	branch Test(UGT,CZ) l000000000040AADB
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AADB:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A8C6
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:(int32) r9b r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA03:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:(int32) r9b r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA0B:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9d rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA22:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AA2C
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9d rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA26:
	eax = (int32) dl
	rax = (uint64) (eax - r9d)
	SCZO = cond(eax)
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA2C:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	esi = (int32) dl
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(ULE,CZ) l000000000040AA10
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA10:
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	esi = (int32) r9b
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9d rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9B4:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rax = 0x0000000000000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040AA44:
	edx = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	rdx = (uint64) (edx - 0x00000030)
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040AAE7
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AAE7:
	rax = 0x00000000FFFFFFFF
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040AA55:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040A8C6
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA5D:
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8F7:
	SCZO = cond(r12 - r8)
	branch Test(EQ,Z) l000000000040AB18
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AB18:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A900:
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A98F:
	rdx = (uint64) esi
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A905:
	esi = (word32) dl
	rax = 0x0000000000000000
	edi = rsi - 0x0000000000000030
	SCZO = cond(edi - 0x00000009)
	branch Test(ULE,CZ) l000000000040A925
// DataOut: dl eax esi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A912:
	rax = (uint64) esi
	rax = (uint64) (eax & 0xFFFFFFDF)
	rax = (uint64) (eax - 0x00000041)
	SCZO = cond(eax - 0x00000019)
	branch Test(UGT,CZ) l000000000040AA68
// DataOut: dl esi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA68:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(dl - 0x7E)
	rax = (uint64) esi
	branch Test(NE,Z) l000000000040AA77
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA73_1:
	eax = r11d
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA77:
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A923:
	rax = (uint64) esi
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A925:
	SCZO = cond(r10 - rcx)
	branch Test(EQ,Z) l000000000040AB1F
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AB1F:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A92E:
	r9d = (word32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A934:
	esi = (word32) r9b
	rdi = 0x0000000000000000
	edx = rsi - 0x0000000000000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A942:
	rdx = (uint64) esi
	rdi = (uint64) esi
	rdx = (uint64) (edx & 0xFFFFFFDF)
	rdx = (uint64) (edx - 0x00000041)
	SCZO = cond(edx - 0x00000019)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A951:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(r9b - 0x7E)
	rdi = (uint64) esi
	branch Test(NE,Z) l000000000040A961
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:(uint64) (word32) r9b rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A95D_1:
	edi = r11d
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:(uint64) ((word32) r9b + 0x00000100) rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A961:
	SCZO = cond(eax - edi)
	branch Test(NE,Z) l000000000040AA80
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA80:
	rax = (uint64) (eax - edi)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040AA86
// DataOut: eax fs r12 r12b r13d r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA82_1:
	eax = r13d
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA86:
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A969:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AB10:
	rax = (uint64) r13d
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A834:
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:0x0000000000000001 r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:0x00000001 rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A838:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> ecx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062AE:
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:0x0000000000000001 r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:0x00000001 r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040623D:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> rcx:<invalid> rbx:<invalid> dl:<invalid> rbp:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

fn00000000004061D1_exit:
	use rbx (=> rbxOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r12 (=> r12Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r13:<invalid> r12:<invalid> ecx:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>



word64 fn0000000000406248(word64 rsi, word32 edi, word64 r8, word64 r12, selector fs, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r12 r8 rsi
// LiveOut: eax r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000406248_entry:
// DataOut: edi fs r12 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406248:
	rsp = v3
	rax = fn000000000040C9B0(rsi, edi, r8, r12, out rsp, out rsi, out r12)
	eax = (word32) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	rdi = rax
	edi = (word32) rdi (alias)
	branch Test(EQ,Z) l00000000004061D1
// DataOut: edi fs r12 r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406253_thunk_fn00000000004061D1:
	rax = fn00000000004061D1(rsi, edi, r8, r12, fs, out rbx, out rbp, out rsi, out r8, out r9, out r12, out r14, out r15)
	eax = (word32) rax (alias)
	al = (byte) rax (alias)
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> rdx:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid>

l0000000000406259:
	rsi = 0x0000000000000000
	esi = (word32) rsi (alias)
	sil = (byte) rsi (alias)
	SZO = cond(esi)
	C = false
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	eax = (word32) rax (alias)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	S = SZO (alias)
	C = false
	branch Test(SG,S) l0000000000406267
// DataOut: edi fs r12 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> rdx:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid>

l0000000000406264_1:
	edx = eax
// DataOut: edi fs r12 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> eax:<invalid>

l0000000000406267:
	rax = fn00000000004061D1(rsi, edi, r8, r12, fs, out rbx, out rbp, out rsi, out r8, out r9, out r12, out r14, out r15)
	eax = (word32) rax (alias)
	al = (byte) rax (alias)
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbp:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> r14:<invalid> eax:<invalid>

fn0000000000406248_exit:
	use rbx (=> rbxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r12 (=> r12Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbp:<invalid> rax:<invalid> rbx:<invalid> r8:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040622B:
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	rax = (uint64) edx
	branch Test(NE,Z) l0000000000406269
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> dl:<invalid> rbp:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l0000000000406269:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	r9 = rsi
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	sil = Test(EQ,Z)
	rdx = (uint64) (edx | esi)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l00000000004062C8
// DataOut: al dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> rcx:<invalid> rbx:<invalid> dl:<invalid> rbp:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062C8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000000004062A1
// DataOut: al dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062CC:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062A1:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004062B8
// DataOut: dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062A5:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l00000000004062B8
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062B8:
	rsi = Mem0[rdi:word64]
	rdi = Mem0[rcx:word64]
// DataOut: eax ebp ebx esi fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A7D0:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	v30 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v30
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	rax = DPB(rax, strcmp(rdi, rsi), 0)
	r13 = (uint64) eax
	rax = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A7F1:
	edx = (word32) Mem0[rbx:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040AAE7
// DataOut: dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A7FC:
	ecx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	al = 0x01
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A806:
	eax = (word32) dl
	rsi = 0x000000000000002E
	rsi = (uint64) (0x0000002E - eax)
	SCZO = cond(esi)
	branch Test(NE,Z) l000000000040A81D
// DataOut: cl dl esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A812:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A81D:
	eax = (word32) cl
	rdi = 0x000000000000002E
	rdi = (uint64) (0x0000002E - eax)
	SCZO = cond(edi)
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl edi esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A829:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x00)
	rax = 0x0000000000000001
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl eax edi esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A848:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A84C:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A852:
	SCZO = cond(Mem0[rbx + 0x0000000000000002:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A85D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040A9A0
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A9A0:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A9AA:
	SCZO = cond(Mem0[rbp + 0x0000000000000002:byte] - 0x00)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A865:
	SCZO = cond(dl - 0x2E)
	branch Test(EQ,Z) l000000000040AAC0
// DataOut: cl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040AAC0:
	rbx = rbx + 0x0000000000000001
	rbp = rbp + 0x0000000000000001
	SCZO = cond(cl - 0x2E)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A877
// DataOut: eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040AAD6:
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:0x00000000FFFFFFFF r8:<invalid> r9:<invalid> cl:<invalid> al:0xFF dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:0xFFFFFFFF rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A86E:
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A9B4
// DataOut: fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A877:
	rdi = rsp
	Mem0[rsp:word64] = rbx
	Mem0[rsp + 0x0000000000000008:word64] = rbp
	rax = fn000000000040A730(rdi, r14d, out r9)
	rdi = rsp + 0x0000000000000008
	r14 = rax
	r12 = r14
	rax = fn000000000040A730(rdi, r14d, out r9)
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000040A8A0
// DataOut: eax fs r11d r12 r13d r14 r15 r15d r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A89B_1:
	r12 = Mem0[rsp:word64]
// DataOut: eax fs r11d r12 r13d r14 r15 r15d r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:0x0000000000000000 esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8A0:
	r10 = rax
	r10 = r10 - rbp
	r12 = r12 - rbx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AAF1
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:0x0000000000000000 esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AAF1:
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r10 = r10 - rbp
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000040A8BB
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AB02:
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8B2:
	SCZO = cond(r12 - r10)
	branch Test(EQ,Z) l000000000040AA8B
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA8B:
	rdx = r12
	rsi = rbp
	rdi = rbx
	rax = DPB(rax, strncmp(rdi, rsi, rdx), 0)
	SZO = cond(eax & eax)
	C = false
	r10 = r12
	branch Test(NE,Z) l000000000040A8BB
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AAA4:
	r12 = Mem0[rsp:word64]
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r12 = r12 - rbx
	r10 = r10 - rbp
	SCZO = cond(r10)
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8BB:
	rcx = 0x0000000000000000
	r8 = 0x0000000000000000
	SZO = cond(r8d)
	C = false
	rbx = 0x00000000FFFFFFFF
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8C6:
	SCZO = cond(r10 - rcx)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8CF:
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AB07:
	SCZO = cond(r12 - r8)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A971:
	SCZO = cond(r12 - r8)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A97A:
	esi = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	eax = (int32) sil
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: esi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8D8:
	SCZO = cond(r10 - rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8E7:
	eax = (int32) r9b
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9D4:
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	SCZO = cond(dl - 0x30)
	branch Test(EQ,Z) l000000000040A9D0
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9D0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9DE:
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9EA:
	SCZO = cond(r9b - 0x30)
	branch Test(EQ,Z) l000000000040A9E0
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9E0:
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9F0:
	eax = (int32) dl
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	eax = (int32) r9b
	branch Test(UGT,CZ) l000000000040AADB
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AADB:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A8C6
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:(int32) r9b r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA03:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:(int32) r9b r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA0B:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9d rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA22:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AA2C
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9d rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA26:
	eax = (int32) dl
	rax = (uint64) (eax - r9d)
	SCZO = cond(eax)
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA2C:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	esi = (int32) dl
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(ULE,CZ) l000000000040AA10
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA10:
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	esi = (int32) r9b
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9d rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A9B4:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rax = 0x0000000000000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040AA44:
	edx = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	rdx = (uint64) (edx - 0x00000030)
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040AAE7
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AAE7:
	rax = 0x00000000FFFFFFFF
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040AA55:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040A8C6
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AA5D:
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A8F7:
	SCZO = cond(r12 - r8)
	branch Test(EQ,Z) l000000000040AB18
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040AB18:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A900:
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A98F:
	rdx = (uint64) esi
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A905:
	esi = (word32) dl
	rax = 0x0000000000000000
	edi = rsi - 0x0000000000000030
	SCZO = cond(edi - 0x00000009)
	branch Test(ULE,CZ) l000000000040A925
// DataOut: dl eax esi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A912:
	rax = (uint64) esi
	rax = (uint64) (eax & 0xFFFFFFDF)
	rax = (uint64) (eax - 0x00000041)
	SCZO = cond(eax - 0x00000019)
	branch Test(UGT,CZ) l000000000040AA68
// DataOut: dl esi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA68:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(dl - 0x7E)
	rax = (uint64) esi
	branch Test(NE,Z) l000000000040AA77
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA73_1:
	eax = r11d
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA77:
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A923:
	rax = (uint64) esi
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A925:
	SCZO = cond(r10 - rcx)
	branch Test(EQ,Z) l000000000040AB1F
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AB1F:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A92E:
	r9d = (word32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A934:
	esi = (word32) r9b
	rdi = 0x0000000000000000
	edx = rsi - 0x0000000000000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A942:
	rdx = (uint64) esi
	rdi = (uint64) esi
	rdx = (uint64) (edx & 0xFFFFFFDF)
	rdx = (uint64) (edx - 0x00000041)
	SCZO = cond(edx - 0x00000019)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A951:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(r9b - 0x7E)
	rdi = (uint64) esi
	branch Test(NE,Z) l000000000040A961
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:(uint64) (word32) r9b rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A95D_1:
	edi = r11d
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:(uint64) ((word32) r9b + 0x00000100) rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A961:
	SCZO = cond(eax - edi)
	branch Test(NE,Z) l000000000040AA80
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA80:
	rax = (uint64) (eax - edi)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040AA86
// DataOut: eax fs r12 r12b r13d r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA82_1:
	eax = r13d
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AA86:
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040A969:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
// DataOut: fs r10 r11d r12 r12b r13d r14 r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid>

l000000000040AB10:
	rax = (uint64) r13d
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid>

l000000000040A834:
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:0x0000000000000001 r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:0x00000001 rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040A838:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> ecx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l00000000004062AE:
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:0x0000000000000001 r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> rbp:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:0x00000001 r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

l000000000040623D:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> rcx:<invalid> rbx:<invalid> dl:<invalid> rbp:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> ecx:<invalid> r14:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>

fn00000000004061D1_exit:
	use rbx (=> rbxOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r12 (=> r12Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r12 r12b r14 r15 r15d r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r13:<invalid> r12:<invalid> ecx:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid>



void fn0000000000406400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406400_entry:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406400:
	branch Mem0[0x000000000061A408:word64] == 0x0000000000000000 l0000000000406418
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406418:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A410)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406439_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:<invalid>

l000000000040640A:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040640F_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A400)
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A400

fn0000000000406400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid>



void fn0000000000406440(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406440_entry:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406440:
	branch Mem0[0x000000000061B128:byte] == 0x00 l0000000000406470
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406470:
	Mem25[0x000000000061B128:byte] = 0x01
	fn0000000000406400()
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018
// LocalsOut: fp(64)

l000000000040644D:
	word64 rsp_16
	byte SCZO_17
	byte Z_18
	word64 rsi_19
	word64 rdi_20
	word64 rcx_21
	word32 edx_22
	word64 rdx_23
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: qwLoc10_8,rcx_11,rdi_13,rdx_12,rsi_10,rsp_14,SCZO_15,Z_5
		defs: edx_22,rcx_21,rdi_20,rdx_23,rsi_19,rsp_16,SCZO_17,Z_18
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdi:rdi rsi:<invalid> rcx:<invalid> rdx:<invalid> -16(fp):rdi

fn0000000000406440_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> -16(fp):rdi



word64 fn0000000000406490()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406490_entry:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406490:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004064EF:
	branch (word32) (uint64) Mem0[0x000000000061B038:word32] != 0x00000000 l0000000000406503
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064F9:
	branch (word32) (uint64) Mem0[0x000000000061B034:word32] == 0x00000000 l0000000000406538
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:(uint64) Mem0[0x000000000061B038:word32] rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406538:
	return fp + 0x0000000000000004
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:(uint64) Mem0[0x000000000061B034:word32] rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx

fn0000000000406490_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rax:(uint64) Mem0[0x000000000061B034:word32] rbx:rbx rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> -4(fp):rbx

l0000000000406503:
	branch Mem0[0x000000000061B128:byte] == 0x00 l00000000004064A0
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040650C:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064A0:
	word64 rsp_37
	word64 rbx_38
	byte SCZO_39
	word32 eax_40
	word64 rax_41
	byte SZO_42
	byte C_43
	byte Z_44
	word32 edi_45
	word64 rdi_46
	word64 rdx_47
	word32 esi_48
	word64 rsi_49
	word32 ebx_50
	word32 edx_51
	call fflush_unlocked (retsize: 8; depth: 140)
		uses: C_30,dwLoc04_4,eax_33,ebx_15,edi_20,edx_14,esi_17,rax_32,rbx_22,rdi_36,rdx_18,rsi_16,rsp_23,SCZO_34,SZO_31,Z_35
		defs: C_43,eax_40,ebx_50,edi_45,edx_51,esi_48,rax_41,rbx_38,rdi_46,rdx_47,rsi_49,rsp_37,SCZO_39,SZO_42,Z_44
	word64 rsp_58
	word64 rbx_59
	byte SCZO_60
	word32 eax_61
	word64 rax_62
	byte SZO_63
	byte C_64
	byte Z_65
	word32 edi_66
	word64 rdi_67
	word64 rdx_68
	word32 esi_69
	word64 rsi_70
	word32 ebx_71
	word32 edx_72
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_55,dwLoc04_4,eax_40,ebx_50,edi_53,edx_51,esi_48,rax_41,rbx_38,rdi_52,rdx_56,rsi_57,rsp_37,SCZO_39,SZO_54,Z_44
		defs: C_64,eax_61,ebx_71,edi_66,edx_72,esi_69,rax_62,rbx_59,rdi_67,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_63,Z_65
	word64 rbx_73 = (uint64) Mem0[0x000000000061B038:word32]
	word64 rax_75 = (uint64) Mem0[0x000000000061B034:word32]
	word32 ebx_74 = (word32) rbx_73
	word32 eax_76 = (word32) rax_75
	branch eax_76 == 0x00000000 l0000000000406528
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406528:
	signal((uint64) ebx_74, 0x0000000000000000)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:(uint64) Mem0[0x000000000061B034:word32] rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:(uint64) Mem0[0x000000000061B038:word32] -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064CB:
	Mem123[0x000000000061B034:word32] = (word32) (uint64) (eax_76 - 0x00000001)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:(uint64) Mem0[0x000000000061B034:word32] rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:(uint64) Mem0[0x000000000061B038:word32] -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064D9:
	word64 rsp_82
	word64 rbx_83
	byte SCZO_84
	word32 eax_85
	word64 rax_86
	byte SZO_87
	byte C_88
	byte Z_89
	word32 edi_90
	word64 rdi_91
	word64 rdx_92
	word32 esi_93
	word64 rsi_94
	word32 ebx_95
	word32 edx_96
	call raise (retsize: 8; depth: 140)
		uses: C_79,dwLoc04_4,eax_76,ebx_80,edi_66,edx_72,esi_69,rax_75,rbx_73,rdi_81,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_77,Z_78
		defs: C_88,eax_85,ebx_95,edi_90,edx_96,esi_93,rax_86,rbx_83,rdi_91,rdx_92,rsi_94,rsp_82,SCZO_84,SZO_87,Z_89
	word64 rsp_103
	word64 rbx_104
	byte SCZO_105
	word32 eax_106
	word64 rax_107
	byte SZO_108
	byte C_109
	byte Z_110
	word32 edi_111
	word64 rdi_112
	word64 rdx_113
	word32 esi_114
	word64 rsi_115
	word32 ebx_116
	word32 edx_117
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_100,dwLoc04_4,eax_85,ebx_95,edi_90,edx_98,esi_93,rax_86,rbx_83,rdi_102,rdx_97,rsi_101,rsp_82,SCZO_84,SZO_99,Z_89
		defs: C_109,eax_106,ebx_116,edi_111,edx_117,esi_114,rax_107,rbx_104,rdi_112,rdx_113,rsi_115,rsp_103,SCZO_105,SZO_108,Z_110
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)



word64 fn0000000000406540(word64 rcx, word64 rdx, byte sil, word64 rdi, word64 r11, word32 r14d, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14d r15 rcx rdi rdx sil
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rax
fn0000000000406540_entry:
// DataOut: fs r11 r14d r15 rcx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406540:
	word32 r15d_472
	byte r15b_470
	word32 edx_454
	word32 r14d_474
	word64 rbp_423
	word64 rbx_24 = rdx
	word32 ebx_166 = (word32) rdx
	word64 rdx_32 = Mem0[rdi:word64]
	word64 r12_163 = Mem0[r15 + 0x0000000000000008:word64]
	branch sil == 0x00 l00000000004069BD
// DataOut: ebx fs r11 r12 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004069BD:
	branch Mem0[0x000000000061B129:byte] != 0x00 l00000000004069D8
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069D8:
	branch Mem0[0x000000000061B198:byte] == 0x00 l0000000000406A08
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A08:
	r14d = (word32) Mem0[rcx + 0x00000000000000B1:byte]
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069E1:
	branch Mem0[rdi + 0x00000000000000B1:byte] == 0x00 l0000000000406A20
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A20:
	r14d = 0x00000000 (alias)
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A10:
	word64 r15_887 = (uint64) Mem0[rcx + 0x0000000000000028:word32]
	r15d_472 = (word32) r15_887 (alias)
	r15b_470 = (byte) r15_887 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r14:0x0000000000000000 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069EA:
	word64 r15_892 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r15d_472 = (word32) r15_892 (alias)
	r15b_470 = (byte) r15_892 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069F7:
	word64 r14_874 = (uint64) (r14d ^ 0x00000001)
	r14d_474 = (word32) r14_874 (alias)
	r14b = (byte) r14_874 (alias)
	r12_163 = rdx_32
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r15:<invalid> rsi:0x0000000000000001 r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r14:0x0000000000000000 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069C6:
	r12_163 = rdx_32
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406567:
	branch Mem0[0x000000000061B129:byte] != 0x00 l0000000000406580
// DataOut: ebx fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406580:
	r14d_474 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
	word64 r15_841 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r14b = (byte) r14d_474 (alias)
	r15d_472 = (word32) r15_841 (alias)
	r15b_470 = (byte) r15_841 (alias)
	branch r14b != 0x00 l00000000004065B0
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406594:
	edx_454 = 0x0000000C (alias)
	branch (byte) fn0000000000404CD0(0x0000000C) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r15:(uint64) Mem0[rcx + 0x00000000000000A4:word32] -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065AB:
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000C r12:<invalid> r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r15:(uint64) Mem0[rcx + 0x00000000000000A4:word32] rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B0:
	word64 rax_495
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l0000000000406628
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406628:
	word32 eax_629 = (word32) (uint64) ((word32) (uint64) r15d_472 & 0x0000F000)
	branch eax_629 == 0x00008000 l0000000000406868
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406868:
	branch (r15d_472 & 0x00000800) == 0x00000000 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406871:
	branch (byte) fn0000000000404CD0(0x00000010) == 0x00 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068B8:
	branch (r15d_472 & 0x00000400) == 0x00000000 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068C1:
	branch (byte) fn0000000000404CD0(0x00000011) == 0x00 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040693B:
	rax_495 = fn0000000000404CD0(0x00000015)
	branch (byte) rax_495 == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406949:
	branch Mem0[rdi + 0x00000000000000B8:byte] == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040695C:
	branch (word32) (uint64) (r15d_472 & 0x00000049) == 0x00000000 l000000000040697A
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406962:
	rax_495 = fn0000000000404CD0(0x0000000E)
	branch (byte) rax_495 == 0x00 l000000000040697A
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000049) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040697A:
	branch Mem0[rdi + 0x0000000000000020:word64] <=u 0x0000000000000001 l00000000004065CF
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000049) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406985:
	rax_495 = fn0000000000404CD0(0x00000016)
	branch (byte) rax_495 == 0x00 l00000000004065CF
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000049) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406997:
	edx_454 = 0x00000016 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000049) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406970:
	edx_454 = 0x0000000E (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000049) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406952:
	edx_454 = 0x00000015 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068CF:
	edx_454 = 0x00000011 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040687F:
	edx_454 = 0x00000010 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040663B:
	branch eax_629 == 0x00004000 l00000000004068E0
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068E0:
	branch (word32) (uint64) ((word32) (uint64) r15d_472 & 0x00000202) == 0x00000202 l00000000004069A1
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069A1:
	edx_454 = 0x00000014 (alias)
	branch (byte) fn0000000000404CD0(0x00000014) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x00000202) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069B8:
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000014 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F3:
	branch (r15b_470 & 0x02) == 0x00 l0000000000406910
// DataOut: ebx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F9:
	edx_454 = 0x00000013 (alias)
	branch (byte) fn0000000000404CD0(0x00000013) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406910:
	edx_454 = 0x00000006 (alias)
	branch (word32) (uint64) (r15d_472 & 0x00000200) == 0x00000000 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406922:
	edx_454 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x00000012) - 0x01)) & 0xFFFFFFF4) + 0x00000012) (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000006 r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000200) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406646:
	branch eax_629 == 0x0000A000 l0000000000406859
// DataOut: eax ebx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406859:
	edx_454 = 0x00000007 (alias)
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406651:
	edx_454 = 0x00000008 (alias)
	branch eax_629 == 0x00001000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040665D:
	edx_454 = 0x00000009 (alias)
	branch eax_629 == 0x0000C000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000008 r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406666:
	edx_454 = 0x0000000A (alias)
	branch eax_629 == 0x00006000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) dl:0x09 rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040666F:
	word64 rdx_659 = (uint64) (eax_629 != 0x00002000)
	edx_454 = rdx_659 + 0x000000000000000B + rdx_659
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) dl:0x0A rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B9:
	rax_495 = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	word32 eax_607 = (word32) rax_495
	edx_454 = (word32) (uint64) Mem0[rax_495 * 0x0000000000000004 + 0x00412C60:word32] (alias)
	branch edx_454 != 0x00000005 l0000000000406680
// DataOut: ebx edx fs r11 r12 r14d rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406680:
	r14b = (byte) (uint64) (r14d_474 & DPB(eax_607, edx_454 == 0x00000007, 0)) (alias)
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:(uint64) Mem0[0x00412C60 + (uint64) Mem0[rdi + 0x00000000000000A0:word32] * 0x0000000000000004:word32] r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) Mem0[rdi + 0x00000000000000A0:word32] rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406689:
	branch r14b == 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040668E:
	edx_454 = 0x0000000D (alias)
	branch Mem0[0x000000000061B198:byte] != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040669C:
	edx_454 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x0000000D) - 0x01)) & 0xFFFFFFFA) + 0x0000000D) (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000D r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065CF:
	word64 rax_498 = DPB(rax_495, strlen(r12_163), 0)
	word64 rbp_502 = Mem0[0x000000000061B120:word64]
	r14b = (byte) strlen(r12_163) (alias)
	word64 r15_507 = r12_163 + rax_498
	branch rbp_502 == 0x0000000000000000 l0000000000406619
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065EA:
	rax_532 = rax_498
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F0:
	word64 rax_532
	word64 rdx_537 = Mem0[rbp_502:word64]
	branch rax_498 <u rdx_537 l0000000000406610
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F9:
	word64 rsi_554 = Mem0[rbp_502 + 0x0000000000000008:word64]
	word64 rdi_556 = r15_507 - rdx_537
	rax_532 = DPB(rax_532, strncmp(rdi_556, rsi_554, rdx_537), 0)
	branch strncmp(rdi_556, rsi_554, rdx_537) == 0x00000000 l00000000004068A0
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A0:
	branch rbp_502 == 0x0000000000000000 l0000000000406619
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A9:
	rbp_423 = rbp_502 + 0x0000000000000010
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406610:
	rbp_502 = Mem0[rbp_502 + 0x0000000000000020:word64]
	branch rbp_502 != 0x0000000000000000 l00000000004065F0
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406619:
	edx_454 = 0x00000005 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066B0:
	rbp_423 = ((uint64) edx_454 << 0x0000000000000004) + 6398944
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066C0:
	branch Mem0[rbp_423 + 0x0000000000000008:word64] == 0x0000000000000000 l0000000000406890
// DataOut: ebx edi fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406890:
	fn0000000000404CD0(0x00000004)
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066D0:
	branch (byte) fn0000000000404CD0(0x00000004) != 0x00 l0000000000406840
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406840:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066DD:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(rbp_423)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406570:
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066FF:
	word64 rbp_197
	word64 r13_186
	branch rdx == 0x0000000000000000 l00000000004067D8
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067D8:
	word64 rbx_388
	word64 rsp_389
	word64 rbp_390
	word64 rsi_391
	word32 edi_392
	word64 r8_393
	word64 r9_394
	word64 r11_395
	word64 r12_396
	word64 r14_398
	word64 r15_399
	word64 rax_400 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_166, r12_163, r11, fs, out rbx_388, out rsp_389, out rbp_390, out rsi_391, out edi_392, out r8_393, out r9_394, out r11_395, out r12_396, out r13_186, out r14_398, out r15_399)
	Mem404[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + rax_400
	rbp_197 = rax_400
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406708:
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406732
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406711:
	word64 rax_290 = Mem0[rdx + 0x0000000000000018:word64]
	branch Mem0[rdx + 0x0000000000000020:word64] <u rax_290 + 0x0000000000000008 l0000000000406820
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406820:
	word64 rsp_341
	word64 rdi_342
	word64 rsi_343
	word64 rbp_344
	word64 r13_345
	word64 rcx_346
	word64 rdx_348
	byte SCZO_349
	byte sil_350
	byte SZO_351
	byte C_352
	word64 r15_354
	byte Z_355
	word32 r14d_356
	word64 r14_357
	word64 rax_358
	word32 r15d_359
	word32 esi_360
	word32 ecx_361
	word32 eax_362
	word32 edx_363
	word32 ebp_365
	word32 edi_366
	byte al_367
	byte dl_368
	byte r15b_369
	byte CZ_370
	word64 r8_373
	word64 r9_374
	call _obstack_newchunk (retsize: 8; depth: 40)
		uses: al_292,C_296,CZ_39,dl_50,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_17,dwLoc18_22,eax_291,ebp_56,ebx_25,ecx,edi_59,edx_49,esi,fs,r11,r12_46,r13_12,r14_43,r14b_41,r14d_44,r15_45,r15b_40,r15d_42,r8,r9,rax_290,rbp_55,rbx_24,rcx,rdi_340,rdx_293,rsi_339,rsp_26,SCZO_295,sil,SZO_60,Z_152
		defs: al_367,C_352,CZ_370,dl_368,eax_362,ebp_365,ebx_375,ecx_361,edi_366,edx_363,esi_360,fs_372,r11_371,r12_353,r13_345,r14_357,r14b_364,r14d_356,r15_354,r15b_369,r15d_359,r8_373,r9_374,rax_358,rbp_344,rbx_347,rcx_346,rdi_342,rdx_348,rsi_343,rsp_341,SCZO_349,sil_350,SZO_351,Z_355
	rax_290 = Mem0[rbx_24 + 0x0000000000000018:word64]
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406723:
	Mem335[rax_290:word64] = Mem0[0x000000000061B018:word64]
	Mem337[rbx_24 + 0x0000000000000018:word64] = Mem335[rbx_24 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: ebx fs r11 r12
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406732:
	word64 rsp_178
	word64 rbp_179
	word64 rsi_180
	word32 edi_181
	word64 r8_182
	word64 r9_183
	word64 r11_184
	word64 r12_185
	word64 r14_187
	word64 r15_188
	word64 rbx_177
	word64 rax_189 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_166, r12_163, r11, fs, out rbx_177, out rsp_178, out rbp_179, out rsi_180, out edi_181, out r8_182, out r9_183, out r11_184, out r12_185, out r13_186, out r14_187, out r15_188)
	word64 rdx_191 = rax_189 + Mem0[0x000000000061B018:word64]
	Mem199[0x000000000061B018:word64] = rdx_191
	rbp_197 = rax_189
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406781
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406767:
	word64 rax_200 = Mem199[rbx_177 + 0x0000000000000018:word64]
	branch Mem199[rbx_177 + 0x0000000000000020:word64] <u rax_200 + 0x0000000000000008 l0000000000406800
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406800:
	word64 rsp_248
	word64 rdi_249
	word64 rsi_250
	word64 rcx_253
	word64 rdx_255
	byte SCZO_256
	byte sil_257
	byte SZO_258
	byte C_259
	word64 r12_260
	word64 r15_261
	byte Z_262
	word32 r14d_263
	word64 r14_264
	word64 rax_265
	word32 r15d_266
	word32 esi_267
	word32 ecx_268
	word32 eax_269
	word32 edx_270
	word32 ebp_272
	word32 edi_273
	byte al_274
	byte dl_275
	byte r15b_276
	byte CZ_277
	word64 r11_278
	selector fs_279
	word64 r8_280
	word64 r9_281
	word32 ebx_282
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_203,C_206,CZ_158,dl_194,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_17,dwLoc18_22,eax_202,ebp_198,ebx_166,ecx_173,edi_181,edx_193,esi_168,fs_156,r11_184,r12_185,r13_186,r14_187,r14b_160,r14d_162,r15_188,r15b_159,r15d_161,r8_182,r9_183,rax_200,rbp_197,rbx_177,rcx_204,rdi_247,rdx_191,rsi_246,rsp_178,SCZO_205,sil_167,SZO_174,Z_196
		defs: al_274,C_259,CZ_277,dl_275,eax_269,ebp_272,ebx_282,ecx_268,edi_273,edx_270,esi_267,fs_279,r11_278,r12_260,r13_252,r14_264,r14b_271,r14d_263,r15_261,r15b_276,r15d_266,r8_280,r9_281,rax_265,rbp_251,rbx_254,rcx_253,rdi_249,rdx_255,rsi_250,rsp_248,SCZO_256,sil_257,SZO_258,Z_262
	rax_200 = Mem199[rbx_177 + 0x0000000000000018:word64]
	rdx_191 = Mem199[0x000000000061B018:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406779:
	Mem242[rax_200:word64] = rdx_191
	Mem244[rbx_177 + 0x0000000000000018:word64] = Mem242[rbx_177 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406781:
	word64 rsp_95 = fn0000000000406490()
	branch r14b != 0x00 l00000000004067A0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067A0:
	fn0000000000406400()
	word64 rcx_134 = Mem0[0x000000000061B0C8:word64]
	branch (uint64) ((uint128) (uint64) r13_186 /u rcx_134) == (uint64) ((uint128) ((uint64) ((rbp_197 - 0x0000000000000001) + r13_186)) /u rcx_134) l000000000040678B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067C6:
	fn0000000000406440(0x000000000061A550)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040678B:
	word64 rsp_111 = Mem0[rsp_95 + 0x0000000000000018:word64]
	word64 rbp_113
	*rbpOut = Mem0[rsp_111 + 0x0000000000000008:word64]
	word64 rsi_116
	*rsiOut = Mem0[rsp_111 + 0x0000000000000010:word64]
	word64 rdi_120
	*rdiOut = Mem0[rsp_111 + 0x0000000000000018:word64]
	word64 rsp_122
	*rspOut = rsp_111 + 0x0000000000000020
	return Mem0[rsp_95 + 0x0000000000000008:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406540_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000406A30()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406A30_entry:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A30:
	branch Mem0[0x000000000061B129:byte] == 0x00 l0000000000406A4F
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A39:
	branch (byte) fn0000000000404CD0(0x00000004) != 0x00 l0000000000406A58
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A58:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A420)
// DataOut: fs r11 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A75_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> al:<invalid>

l0000000000406A4B:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A4F:
	return
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

fn0000000000406A30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> al:<invalid>



word64 fn0000000000406A80(word32 ecx, word64 rdx, word64 rsi, word64 rdi, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx fs r11d r14 r15b rdi rdx rsi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406A80_entry:
// DataOut: ecx edx fs r11d r14 r15b rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A80:
	word64 r12_15 = rdi
	word32 ebp_20 = (word32) rdx
	word64 rbx_200 = rsi
	word64 rsp_191 = fp - 0x0000000000000124
	word64 rax_130 = 0x0000000000000000
	branch Mem0[0x000000000061A748:word64] == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406AB8:
	rax_130 = strstr(rsi, 0x0000000000413766)
	r14 = rax_130
	branch rax_130 == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:0x0000000000000000 -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406ACD:
	rax_130 = DPB(rax_130, strlen(rsi), 0)
	branch rax_130 <=u 0x0000000000000065 l0000000000406B20
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406B20:
	word64 rsp_155
	word64 rsi_156
	word64 rbp_157
	word32 r13d_158
	word32 ecx_159
	word64 r13_160
	word64 r12_161
	word64 rdi_162
	word64 rdx_163
	word64 rbx_164
	byte SCZO_165
	word64 rax_166
	selector fs_167
	word32 eax_168
	byte SZO_169
	byte C_170
	byte Z_171
	word32 esi_172
	word64 r14_173
	byte CZ_174
	word32 r8d_175
	word64 r8_176
	word64 rcx_177
	word32 r9d_178
	word64 r9_179
	word32 r11d_180
	byte r15b_181
	word64 r11_182
	word64 r15_183
	word32 ebp_184
	call __mempcpy_chk (retsize: 8; depth: 300)
		uses: C_134,CZ_140,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_17,dwLoc14_23,eax_138,ebp_20,ecx,esi,fs,qwLoc1C_29,r11,r11d,r12_15,r13_9,r13d_10,r14_135,r15,r15b,r8,r8d,r9,r9d,rax_137,rbp_19,rbx_147,rcx_143,rdi_146,rdx_144,rsi_142,rsp_25,SCZO_145,SZO_132,Z_133
		defs: C_170,CZ_174,eax_168,ebp_184,ecx_159,esi_172,fs_167,r11_182,r11d_180,r12_161,r13_160,r13d_158,r14_173,r15_183,r15b_181,r8_176,r8d_175,r9_179,r9d_178,rax_166,rbp_157,rbx_164,rcx_177,rdi_162,rdx_163,rsi_156,rsp_155,SCZO_165,SZO_169,Z_171
	word64 rsi_192
	word64 rbp_193
	word32 r13d_194
	word32 ecx_195
	word64 r13_196
	word64 rdi_198
	word64 rdx_199
	byte SCZO_201
	word64 rax_202
	word32 eax_204
	byte SZO_205
	byte C_206
	byte Z_207
	word32 esi_208
	byte CZ_210
	word32 r8d_211
	word64 r8_212
	word64 rcx_213
	word32 r9d_214
	word64 r9_215
	word64 r11_218
	word64 r15_219
	call stpcpy (retsize: 8; depth: 300)
		uses: C_170,CZ_174,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_17,dwLoc14_23,eax_168,ebp_184,ecx_159,esi_172,fs_167,qwLoc1C_29,r11_182,r11d_180,r12_161,r13_160,r13d_158,r14_173,r15_183,r15b_181,r8_176,r8d_175,r9_179,r9d_178,rax_166,rbp_157,rbx_164,rcx_185,rdi_186,rdx_188,rsi_190,rsp_155,SCZO_189,SZO_169,Z_171
		defs: C_206,CZ_210,eax_204,ebp_220,ecx_195,esi_208,fs_203,r11_218,r11d_216,r12_197,r13_196,r13d_194,r14_209,r15_219,r15b_217,r8_212,r8d_211,r9_215,r9d_214,rax_202,rbp_193,rbx_200,rcx_213,rdi_198,rdx_199,rsi_192,rsp_191,SCZO_201,SZO_205,Z_207
	rax_130 = strcpy(rax_202, rsi_192 + 0x0000000000000002)
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406ADB:
	word64 rbp_63
	word64 rsi_64
	word64 rdi_65
	word64 r8_66
	word64 r9_67
	word64 r11_68
	word64 r12_69
	word64 r13_70
	word64 r14_71
	word64 r15_72
	word64 rax_73 = fn0000000000410600(rax_130, rbx_200, ebp_20, 0x00000000000003E9, r12_15, 0x00000000, r11d, r14, r15b, fs, out rbp_63, out rsi_64, out rdi_65, out r8_66, out r9_67, out r11_68, out r12_69, out r13_70, out r14_71, out r15_72)
	branch (Mem0[rsp_191 + 0x0000000000000108:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000406B66
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rdx:<invalid> rcx:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B66:
	__stack_chk_fail()
// DataOut: fs r11 r11d r14 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> r10:<invalid> eax:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B6B_thunk_fn0000000000406B70:
	word64 rsp_117
	word64 rbp_118
	word64 r8_119
	word64 r9_120
	word64 r11_121
	word64 r12_122
	word64 r13_123
	word64 r14_124
	word64 r15_125
	return fn0000000000406B70(rbp_63, rsi_64, rdi_65, r11_68, r14_71, fs, out rsp_117, out rbp_118, out r8_119, out r9_120, out r11_121, out r12_122, out r13_123, out r14_124, out r15_125)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> r10:<invalid> eax:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B07:
	word64 rsp_110 = Mem0[rsp_191 + 0x0000000000000120:word64]
	word64 rbp_112
	*rbpOut = Mem0[rsp_110 + 0x0000000000000008:word64]
	word64 rsp_116
	*rspOut = rsp_110 + 0x0000000000000018
	return rax_73
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> r10:<invalid> eax:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn0000000000406A80_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> r10:<invalid> eax:<invalid> r11:<invalid> ax:<invalid> dil:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> ebx:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> sil:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn0000000000406B70(word64 rbp, word64 rsi, word64 rdi, word64 r11, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r11d r14 rbp rdi rsi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000406B70_entry:
// DataOut: fs r11 r11d r14 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406B70:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000012D0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406E00
// DataOut: fs r11 r11d r14 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406E00:
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	r13 = fp - 0x0000000000001290
	rcx = 0x0000000000003F3F
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	bLoc1290 = al
	r8 = 0x000000003F3F3F3F
	qwLoc128F = rax
	Mem0[rbp + 0x0000000000000009:word16] = cx
	bLoc1285 = 0x00
	branch Test(EQ,Z) l0000000000406BC2
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406BA4:
	r13 = fp - 0x0000000000001290
	rdi = rdi + 0x0000000000000010
	rsi = fp - 0x0000000000001290
	fn000000000040A600(rsi, rdi)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	branch Test(NE,Z) l0000000000406E41
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406E41:
	rax = (uint64) Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000407138
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:(word32) Mem0[(uint64) Mem0[rdi + 0x00000000000000A0:word32] + 0x0000000000413728:byte] r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000407138:
	bLoc1286 = 0x2E
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[rdi + 0x00000000000000B4:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[rdi + 0x00000000000000B4:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406E59:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	bLoc1286 = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[rdi + 0x00000000000000B4:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406E6D:
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):0x2B -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406BC2:
	bLoc1286 = 0x00
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:(word32) Mem0[(uint64) Mem0[rdi + 0x00000000000000A0:word32] + 0x0000000000413728:byte] r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406BC7:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406E90:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = fp - 0x0000000000000E70
	rbp = fp - 0x0000000000000E70
	branch Test(NE,Z) l0000000000407060
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rcx = 0x0000000000413764
	branch Test(EQ,Z) l0000000000407085
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
// DataOut: dil fs r11 r11d r13 r13d r14 rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000413764 eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000407078:
	rsi = fp - 0x0000000000001260
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000413764 eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000407085:
	r12 = fp - 0x0000000000000E70
	r8 = (uint64) Mem0[0x000000000061B178:word32]
	rdx = 0x0000000000000E3B
	rcx = 0x0000000000413779
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = fp - 0x0000000000000E70
	rax = 0x0000000000000000
	rdx = fp - 0x0000000000000E70
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l00000000004070B0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
// DataOut: al eax fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l00000000004070C7:
	rcx = (uint64) eax
	rbp = rdx + 0x0000000000000002
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
// DataOut: al cl fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:(uint64) ~ecx eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l00000000004070D5_1:
	eax = ecx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:(uint64) (ecx >>u 0x00000010) eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:(uint64) (ecx >>u 0x00000010) eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l00000000004070D8_1:
	rbp = rdx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:(uint64) (ecx >>u 0x00000010) eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:(uint64) (ecx >>u 0x00000010) eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rsi = 0x0000000000413764
	branch Test(NE,Z) l0000000000407288
// DataOut: fs r11 r11d r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(64) Local -0008(64)

l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = fp - 0x0000000000001260
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	rcx = 0x0000000000000200
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:0x0000000000413764 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C2B:
	r15 = (uint64) Mem0[0x000000000061B174:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	r15 = (uint64) (r15d - eax)
	SZO = cond(r15d & r15d)
	C = false
	rax = (uint64) r15d
	branch Test(LE,SZO) l0000000000406F50
// DataOut: eax fs r11 r11d r12 r13 r13d r14 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> al:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C4B:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406F50:
	rdx = rbp
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = 0x0000000000413764
	branch Test(NE,Z) l0000000000407120
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = rsp + 0x0000000000000070
	rax = fn000000000040CD70(rsi, rdi, out r14)
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:0x0000000000413764 r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:0x3764 al:0x64 r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CA1:
	r9 = (uint64) Mem0[0x000000000061B170:word32]
	rdi = rbp
	Mem0[rsp:word64] = rax
	r8 = r13
	rcx = 0x0000000000413769
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	rax = 0x0000000000000000
	rdi = rbp
	rax = 0x0000000000000000
	rbp = rbp + 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> ax:0x3764 al:0x64 r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	rdi = 0x0000000000413771
	call fwrite_unlocked (retsize: 8; depth: 8)
	v35 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v35
	SCZO = cond(v35)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:0x0000000000413769 eax:<invalid> r8:<invalid> rdx:0xFFFFFFFFFFFFFFFF r12:<invalid> rbp:<invalid> r9:(uint64) Mem0[0x000000000061B170:word32] r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:0xFFFFFFFF r11:<invalid> r10:<invalid> cl:0x69 ah:<invalid> r15d:<invalid> ecx:0x00413769 r14d:<invalid> dl:0xFF sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407155:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D01:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = r12
	rbp = rbp - r12
	rax = DPB(rax, fputs_unlocked(rdi, rsi), 0)
	v33 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v33
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rsi = (uint64) Mem0[0x000000000061B168:word32]
	rax = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rsp, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = (uint64) Mem0[rbx + 0x0000000000000030:word32]
	rdi = 0x0000000000413764
	rdx = (uint64) Mem0[0x000000000061B164:word32]
	rsi = (uint64) eax
	branch Test(EQ,Z) l0000000000407238
// DataOut: eax edx fs r11 r11d r12 r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407229:
	rdi = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
// DataOut: eax edx fs r11 r11d r12 r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000413764 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:(uint64) Mem0[0x000000000061B164:word32] r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00413764 -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407415:
	rdi = (uint64) eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	rax = fn000000000040CB40(rax, rsi, edi, r8, r12, out rsp, out rbp, out r12)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	rdx = (uint64) Mem0[rsp + 0x0000000000000010:word32]
// DataOut: edx fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:(uint64) Mem0[0x000000000061B164:word32] r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407238:
	rax = fn0000000000405700(rax, edx, rdi, fs, out rsp, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rbp = r12
	rsi = (uint64) Mem0[0x000000000061B160:word32]
	rax = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rsp, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = r12
	branch Test(NE,Z) l00000000004071F5
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	rdx = (uint64) Mem0[0x000000000061B16C:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rax = fn0000000000405700(rax, edx, rdi, fs, out rsp, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406F60:
	rsi = 0x0000000000413764
// DataOut: fs r11 r11d r14 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D65:
	rax = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
// DataOut: fs r11 r11d r12 r13d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	rbp = 0x00000000FFFFFFFE
	r13 = (uint64) (r13d - Mem0[0x000000000061B15C:word32])
	r13 = (uint64) (r13d - Mem0[0x000000000061B158:word32])
	rdi = rax
	eax = (word32) al
	r13 = (uint64) (r13d + Mem0[0x000000000061B154:word32])
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14 = (uint64) Mem0[0x000000000061B158:word32]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	rax = (uint64) edx
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r8 = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407324_1:
	r8d = r13d
// DataOut: fs r11 r11d r12 r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:(uint64) (r13d + Mem0[0x000000000061B154:word32]) rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:0x0000000000000000 rdx:<invalid> r12:<invalid> rbp:0x00000000FFFFFFFE r9:<invalid> dil:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407328:
	r8 = (uint64) (r8d + Mem0[0x000000000061B15C:word32])
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	rcx = 0x0000000000413774
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rdi = 0x00000000FFFFFFFE
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = 0x0000000000000000
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = 0xFFFFFFFFFFFFFFFF + rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:(uint64) (r13d + Mem0[0x000000000061B154:word32]) rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:0x00000000FFFFFFFE r9:<invalid> dil:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> r8d:r13d edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D9B:
	r13 = (uint64) Mem0[0x000000000061B154:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	r13 = (uint64) (r13d - eax)
	SZO = cond(r13d & r13d)
	C = false
	rax = (uint64) r13d
	branch Test(LE,SZO) l0000000000406DDC
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DB7:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:(uint64) r13d r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	r13 = r13 + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[rbp + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
// DataOut: eax fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0xFE r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407380:
	rdi = 0x000000000061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rsp = fn000000000040AB30(eax, rdi)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEC:
	r8 = rdi
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEF:
	rdi = rdx + 0xFFFFFFFFFF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407268:
	rdi = 0x0000000000000000
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040727C:
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	rdi = 0x0000000000000001
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000001 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x01 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000001 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F0E:
	rdi = (uint64) ecx
	rdi = (uint64) (edi - r8d)
	rdi = (uint64) (edi >>u 0x0000001F)
	SCZO = cond(edi)
// DataOut: ecx edi fs r11d r13 r14 r15b rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F6B:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	rax = fn000000000040CCD0(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F7F:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F80:
	rcx = 0x0000000000413764
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F86:
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:(uint64) Mem0[0x000000000061A3C4:word32] rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	rcx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = rax
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
// DataOut: fs r11 r12 r13 r14d r15 r8d r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:(uint64) Mem0[0x000000000061A3C4:word32] rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407436:
	rdi = rsp + 0x0000000000000070
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	rax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsp, out rbp, out rsi, out rdi, out r12, out r13, out r14, out r15)
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8 = (uint64) eax
// DataOut: fs r11 r12 r13 r14d r15 r8d rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:(uint64) Mem0[0x000000000061A3C4:word32] rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8 = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F96:
	rdi = r13
	rcx = 0x0000000000413779
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	rax = 0x0000000000000000
	rdi = r13
	rax = 0x0000000000000000
	r13 = r13 + 0x0000000000000000
	SCZO = cond(r13)
// DataOut: fs r11 r12 r13 r14d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = r8 + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
// DataOut: fs r11 r12 r13 r14d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - r12
	rdi = r12
	rax = DPB(rax, fputs_unlocked(rdi, rsi), 0)
	rdx = 0x000000000061AFC0
	rsi = 0x0000000000000000
	rcx = r13
	rdi = rbx
	v39 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v39
	SCZO = cond(v39)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	rdx = (uint64) Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000004
	rsi = 0x0000000000000001
	rdi = 0x000000000041377E
	call fwrite_unlocked (retsize: 8; depth: 8)
	rcx = r13 + 0x0000000000000004 + rbp
	rdx = 0x0000000000000000
	rsi = 0x0000000000000001
	rdi = rbx
	v40 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v40
	SCZO = cond(v40)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	rdx = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004071B0:
	rsi = (uint64) Mem0[rbx + 0x00000000000000A4:word32]
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = 0x0000000000000001
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:(uint64) Mem0[0x000000000061B12C:word32] r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FF9:
	rax = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rsi = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:(uint64) Mem0[0x000000000061B12C:word32] r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040745A:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rax = (uint64) (eax | r8d)
	dl = dl | cl
	SZO = cond(dl)
	C = false
	branch Test(NE,Z) l00000000004074B0
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B0:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040748F
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B4:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040748F:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004074C0
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C0:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000407493
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407493:
	rcx = Mem0[rdi + 0x0000000000000040:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000040:word64] - rcx)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rdi:word64]
	branch Test(GT,SZO) l00000000004074B8
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdx rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B8:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A3:
	branch Test(LT,SO) l00000000004074C4
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C4:
	rax = 0x0000000000000001
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A5:
	rsi = rdx
	rdi = rax
	rax = DPB(rax, strcmp(rdi, rsi), 0)
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406B70_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r8b:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DF5:
	rbp = r13
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000407870(word64 rsi, word64 rdi, word64 r11, word32 r14d, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14d r15 rdi rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407870_entry:
// DataOut: fs r11 r14d r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407870:
	fn0000000000406A30()
	word64 rbp_161 = rsi
	branch Mem0[0x000000000061B114:byte] != 0x00 l0000000000407970
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407970:
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000407992
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040797E:
	word64 rdi_212 = Mem0[rdi + 0x0000000000000018:word64]
	branch rdi_212 == 0x0000000000000000 l0000000000407992
// DataOut: dil fs r11 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407987:
	word64 r14_219
	fn000000000040CD70(fp - 0x00000000000002B0, rdi_212, out r14_219)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407992:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004079A7
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A0_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:0x0000000000000000 rsi:0x0000000000413779 r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A7:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078A4:
	branch Mem0[0x000000000061B144:byte] == 0x00 l00000000004078E0
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078AD:
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l00000000004079C0
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079C0:
	word64 rsp_180
	word64 r8_182
	word64 r9_183
	fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rsi, fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out rsp_180, out rbp_161, out r8_182, out r9_183, out r11, out r14d, out r15)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078BF:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004078D4
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078CD_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 rdi:<invalid> r8:<invalid> edx:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078D4:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E0:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000407911
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E9:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000407900
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078F9_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407900:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407911:
	word64 rbp_77
	word64 rsi_78
	word64 rdi_79
	word64 r8_80
	word64 r9_81
	word64 r11_82
	word64 r12_83
	word64 r13_84
	word64 r14_85
	word64 r15_86
	word64 rsp_105
	word64 rbx_87 = fn0000000000406540(rbp_161, 0x0000000000000000, 0x00, rdi, r11, r14d, r15, fs, out rsp_105, out rbp_77, out rsi_78, out rdi_79, out r8_80, out r9_81, out r11_82, out r12_83, out r13_84, out r14_85, out r15_86)
	branch (word32) (uint64) Mem0[0x000000000061B12C:word32] == 0x00000000 l0000000000407948
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040792D:
	word64 rsi_130
	word64 rdi_131
	fn0000000000405D00((word32) (uint64) Mem0[rbx_87 + 0x00000000000000A0:word32], (word32) (uint64) Mem0[rbx_87 + 0x0000000000000028:word32], (byte) (word32) Mem0[rbx_87 + 0x00000000000000B0:byte], out rsp_105, out rsi_130, out rdi_131)
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:(uint64) Mem0[0x000000000061B12C:word32] rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> al:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407948:
	branch (Mem0[rsp_105 + 0x0000000000000298:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004079E6
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079EB_thunk_fn00000000004079F0:
	fn00000000004079F0()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407962:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000407870_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



void fn00000000004079F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax esp rax rsp sp spl
// Preserved:
fn00000000004079F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F0:
	branch Mem0[0x000000000061B150:word32] >u 0x00000004 l0000000000407A46
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407A46:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004079F9:
	word64 rax_39 = (uint64) Mem0[0x000000000061B150:word32]
	word64 rsp_41
	byte SCZO_42
	byte CZ_43
	word64 rdi_44
	word64 rsi_45
	word64 rbp_46
	word64 rbx_47
	word32 eax_48
	word64 rax_49
	call Mem0[rax_39 * 0x0000000000000008 + 0x00412308:word32] (retsize: 4; depth: 84)
		uses: CZ_4,dwLoc04_22,dwLoc08_25,dwLoc0C_28,dwLoc10_31,dwLoc14_33,dwLoc18_36,eax,rax_39,rbp,rbx,rdi,rsi,rsp_37,SCZO_38
		defs: CZ_43,eax_48,rax_49,rbp_46,rbx_47,rdi_44,rsi_45,rsp_41,SCZO_42
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn00000000004079F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000407EA0(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r14, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi fs r11 r14 r15 r8 rbp rcx rdi rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407EA0_entry:
// DataOut: edx esi fs r11 r14 r15 r8 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407EA0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = fp - 0x0000000000000004
	rsp = fp - 0x0000000000000008
	dwLoc08 = rdi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rsi
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x0000000000000004
	r13 = (uint64) esi
	v9 = fp - 0x0000000000000010
	rsp = fp - 0x0000000000000014
	dwLoc14 = fp - 0x0000000000000010
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000390
	dwLoc0388 = edx
	rdx = rcx
	rax = Mem0[fs:0x00000028:word64]
	qwLoc3C = rax
	rax = 0x0000000000000000
	rcx = Mem0[0x000000000061B1B0:word64]
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
	SCZO = cond(rcx - Mem0[0x000000000061B1B8:word64])
	Z = SCZO (alias)
	r9 = Mem0[0x000000000061B1C0:word64]
	r9d = (word32) r9 (alias)
	r9w = (word16) r9 (alias)
	branch Test(EQ,Z) l0000000000408400
// DataOut: cl ebp ebx fs r11 r13 r13d r14 r15 r8 r9 r9b rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408400:
	r8 = 0x00000000AAAAAAAA
	rdi = Mem0[0x000000000061B1C0:word64]
	SCZO = cond(rcx - 0x0000000000000000)
	branch Test(UGT,CZ) l0000000000408C7B
// DataOut: ebp fs r11 r13 r13d r14 r15 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l000000000040841A:
	rsi = rcx + rcx * 0x0000000000000002
	qwLoc0394 = rdx
	rsi = rsi << 0x0000000000000007
	SCZO = cond(rsi)
	rax = fn0000000000410C90(rdx, rsi, rdi, out ebx, out rsp, out r8)
	v29 = Mem0[0x000000000061B1B8:word64] << 0x0000000000000001
	Mem0[0x000000000061B1B8:word64] = v29
	SCZO = cond(v29)
	Mem0[0x000000000061B1C0:word64] = rax
	r9 = rax
	rcx = Mem0[0x000000000061B1B0:word64]
	rdx = qwLoc0394
// DataOut: cl ebp ebx fs r11 r13 r13d r15 r8 r9 r9b rbp rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> r8:0x00000000AAAAAAAA rdi:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407EED:
	rcx = rcx + rcx * 0x0000000000000002
	rsi = 0x00000000000000C0
	rcx = rcx << 0x0000000000000006
	r14 = r9 + rcx
	SZO = cond(r14b & 0x01)
	C = false
	rdi = r14
	branch Test(NE,Z) l0000000000408A18
// DataOut: dil ebp ebx esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408A18:
	Mem0[0x00000000000000C0:byte] = 0x00
	rdi = 0x00000000000000C1
	sil = 0xBF
// DataOut: dil ebp ebx esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000000000C0 r14:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F0B:
	SZO = cond(dil & 0x02)
	C = false
	branch Test(NE,Z) l00000000004089E0
// DataOut: dil ebp ebx esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l00000000004089E0:
	r9 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	rsi = (uint64) (esi - 0x00000002)
	Mem0[r15 - 0x0000000000000002:word16] = r9w
	SZO = cond(dil & 0x04)
	C = false
	branch Test(EQ,Z) l0000000000407F1F
// DataOut: ebp ebx esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l00000000004089F9:
// DataOut: ebp ebx esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:0x0000000000000000 rsi:(uint64) (esi - 0x00000002) r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F15:
	SZO = cond(dil & 0x04)
	C = false
	branch Test(NE,Z) l0000000000408A00
// DataOut: ebp ebx esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408A00:
	Mem0[rdi:word32] = 0x00000000
	rsi = (uint64) (esi - 0x00000004)
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
// DataOut: ebp ebx esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F1F:
	rcx = (uint64) esi
	rax = 0x0000000000000000
	rcx = (uint64) (ecx >>u 0x00000003)
	SZO = cond(sil & 0x04)
	C = false
// DataOut: eax ebp ebx esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F2A:
	branch rcx == 0x0000000000000000 l0000000000407F2D
// DataOut: eax ebp ebx esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F2D:
	branch Test(NE,Z) l0000000000408360
// DataOut: eax ebp ebx esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408360:
	Mem0[rdi:word32] = 0x00000000
	rdi = rdi + 0x0000000000000004
	SZO = cond(sil & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000407F3D
// DataOut: eax ebp ebx esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408374:
// DataOut: eax ebp ebx esi fs r11 r13 r13d r14 r15 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F33:
	SZO = cond(sil & 0x02)
	C = false
	branch Test(NE,Z) l0000000000408340
// DataOut: eax ebp ebx esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408340:
	r8 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	Mem0[r15 - 0x0000000000000002:word16] = r8w
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000407F46
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408355:
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:0x0000000000000000 sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F3D:
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000408338
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408338:
	Mem0[rdi:byte] = 0x00
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F46:
	SCZO = cond(bLoc0388 - 0x00)
	Mem0[rsi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r14 + 0x00000000000000A0:word32] = r13d
	branch Test(EQ,Z) l0000000000408220
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408220:
	SCZO = cond(Mem0[0x000000000061B0C1:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l000000000040822D:
	SCZO = cond(r13d - 0x00000003)
	branch Test(EQ,Z) l0000000000408910
// DataOut: ebp ebx fs r11 r13 r13d r14 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408910:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408237
// DataOut: ebp ebx fs r11 r13 r13d r14 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l000000000040891D:
	rdi = 0x0000000000000013
	qwLoc0394 = rdx
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0) Local -0394(64)

l000000000040893D:
	rdi = 0x0000000000000012
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0) Local -0394(64)

l0000000000408956:
	rdi = 0x0000000000000014
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l000000000040896F:
// DataOut: ebp ebx fs r11 r13 r13d r14 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408237:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000408818
// DataOut: al eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408818:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000408246
// DataOut: al eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408246:
	SZO = cond(r13d & r13d)
	C = false
	sil = Test(EQ,Z)
	branch Test(EQ,Z) l0000000000408255
// DataOut: al eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l000000000040824F:
	SCZO = cond(r13d - 0x00000006)
	branch Test(NE,Z) l0000000000408280
// DataOut: al eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408255:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
	SCZO = cond(ecx - 0x00000005)
	branch Test(EQ,Z) l0000000000408BD0
// DataOut: al eax ebp ebx ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408BD0:
	rcx = 0x0000000000000005
// DataOut: eax ebp ebx ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) Mem0[0x000000000061B110:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408264:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ebp ebx ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) Mem0[0x000000000061B110:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408271:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ebp ebx ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) Mem0[0x000000000061B110:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l000000000040827E:
// DataOut: al eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) Mem0[0x000000000061B110:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408280:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408288:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408825
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408825:
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408295:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l000000000040829E:
	r12 = 0x0000000000000000
	SCZO = cond(r13d - 0x00000005)
	branch Test(NE,Z) l00000000004081E1
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l00000000004082AB:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000407F62
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l00000000004082B8:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081E1
// DataOut: ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l00000000004082C5:
	rdi = 0x000000000000000E
	qwLoc0394 = rdx
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0) Local -0394(64)

l00000000004082E5:
	rdi = 0x0000000000000010
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0) Local -0394(64)

l00000000004082FE:
	rdi = 0x0000000000000011
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0) Local -0394(64)

l0000000000408317:
	rdi = 0x0000000000000015
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax ebp ebx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408330:
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407F62:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
// DataOut: eax ebp ebx ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] r12:0x0000000000000000 cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F68:
	esi = (word32) Mem0[rbx:byte]
	r12 = rbx
	SCZO = cond(sil - 0x2F)
	branch Test(EQ,Z) l0000000000407F81
// DataOut: eax ebp ebx ecx esi fs r11 r12 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] r12:0x0000000000000000 cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F74:
	r15d = (word32) Mem0[0x00000000AAAAAAA9:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000408670
// DataOut: eax ebp ebx ecx esi fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> al:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408670:
	rdi = rbx
	dwLoc0398 = ecx
	dwLoc038C = esi
	qwLoc0394 = rdx
	rax = DPB(rax, strlen(rdi), 0)
	rdx = qwLoc0394
	r12 = rax
	rdi = rdx
	rax = DPB(rax, strlen(rdi), 0)
	rax = r12 + 0x0000000000000020 + rax
	rdx = qwLoc0394
	rsi = (uint64) dwLoc038C
	rcx = (uint64) dwLoc0398
	rax = rax & 0xFFFFFFFFFFFFFFF0
	rsp = rsp - rax
	rax = rsp + 0x000000000000000F
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SCZO = cond(r15b - 0x2E)
	r12 = rax
	branch Test(EQ,Z) l0000000000408B30
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408B30:
	SCZO = cond(Mem0[rdx + 0x0000000000000001:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408705
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408B3A:
// DataOut: ebp ebx ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l00000000004086D2:
	rsi = rdx
// DataOut: ebp ebx ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l00000000004086D8:
	rax = rax + 0x0000000000000001
	rsi = rsi + 0x0000000000000001
	Mem0[r8 - 0x0000000000000001:byte] = r15b
	r15d = (word32) Mem0[r14:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004086D8
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l00000000004086ED:
	SCZO = cond(rdx - rsi)
	rdi = rax
	branch Test(UGE,C) l0000000000408702
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l00000000004086F5:
	SCZO = cond(Mem0[rsi - 0x0000000000000001:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408702
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l00000000004086FB:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rdi:byte] = 0x2F
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408702:
	esi = (word32) Mem0[rbx:byte]
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 rax rbp rbx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408705:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000408724
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 rax rbp rbx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l000000000040870A:
	rdx = rbx
// DataOut: ebp ebx ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408710:
	rax = rax + 0x0000000000000001
	rdx = rdx + 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = sil
	esi = (word32) Mem0[rdx:byte]
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000408710
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000408724:
	Mem0[rax:byte] = 0x00
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F81:
	SCZO = cond(ecx - 0x00000003)
	branch Test(ULT,C) l0000000000407FFD
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407F86:
	SCZO = cond(ecx - 0x00000004)
	branch Test(ULE,CZ) l0000000000407FF0
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)

l0000000000407FF0:
	SCZO = cond(bLoc0388 - 0x00)
	branch Test(NE,Z) l00000000004088B0
// DataOut: eax ebp ebx ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004088B0:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	dwLoc0394 = ecx
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rcx = (uint64) dwLoc0394
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SCZO = cond(ecx - 0x00000003)
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax ebp ebx edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004088E0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408B5E
// DataOut: eax ebp ebx edx fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B5E:
	dwLoc0394 = eax
	rax = __errno_location()
	SCZO = cond(Mem0[rax:word32] - 0x00000002)
	rdx = (uint64) dwLoc0394
	al = Test(EQ,Z)
// DataOut: al eax ebp ebx edx fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004088E8:
	rax = (uint64) Mem0[0x0000000000000029:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00004000)
	al = Test(NE,Z)
// DataOut: al eax ebp ebx edx fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004088F9:
	SZO = cond(al & al)
	C = false
	rsi = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax ebp ebx edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408906:
// DataOut: eax ebp ebx fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407F8B:
	SCZO = cond(ecx - 0x00000005)
	branch Test(NE,Z) l0000000000407FFD
// DataOut: eax ebp ebx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407FFD:
	r15 = r14 + 0x0000000000000010
// DataOut: eax ebp ebx fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408001:
	rdx = r15
	rsi = r12
	rdi = 0x0000000000000001
	call __lxstat (retsize: 8; depth: 8)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = (uint64) eax
// DataOut: ebp ebx edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408015:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000407FB1
// DataOut: ebp ebx edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407F92:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408019
// DataOut: ebp ebx edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408019:
	SCZO = cond(r13d - 0x00000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
// DataOut: ebp ebx edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040802B:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
// DataOut: ebp ebx edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408380:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l000000000040803F
// DataOut: ebp ebx edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040838D:
	rdi = 0x0000000000000015
	dwLoc038C = esi
	dwLoc0394 = edx
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = (uint64) dwLoc0394
	rsi = (uint64) dwLoc038C
	branch Test(EQ,Z) l000000000040803F
// DataOut: ebp ebx edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -038C(64) Local -0394(64)

l00000000004083B7:
	r13 = Mem0[r14 + 0x0000000000000010:word64]
	SCZO = cond(r13 - Mem0[0x000000000061A678:word64])
	branch Test(EQ,Z) l0000000000408C1F
// DataOut: ebp ebx edx esi fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[fp - 0x0000000000000004 - 0x0000000000000388:word32] r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -038C(64) Local -0394(64)

l0000000000408C1F:
	rax = __errno_location()
	rdx = (uint64) dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	rsi = (uint64) dwLoc038C
// DataOut: ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[fp - 0x0000000000000004 - 0x0000000000000388:word32] r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004083C8:
	dwLoc038C = esi
	dwLoc0394 = edx
	rax = __errno_location()
	rsi = (uint64) dwLoc038C
	rdx = (uint64) dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	Mem0[0x000000000061A678:word64] = r13
// DataOut: ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[fp - 0x0000000000000004 - 0x0000000000000388:word32] r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004083F2:
	Mem0[rsi + 0x00000000000000B8:byte] = 0x00
// DataOut: ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[fp - 0x0000000000000004 - 0x0000000000000388:word32] r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040803F:
	rcx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
// DataOut: ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408049:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
// DataOut: ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408056:
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	dwLoc0394 = edx
	branch Test(EQ,Z) l0000000000408C52
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0394(64)

l0000000000408C52:
	rax = __errno_location()
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0394
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
// DataOut: ebp ebx edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040806D:
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0394(64)

l0000000000408458:
	eax = fn0000000000411840(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0394
	branch Test(NS,S) l0000000000408093
// DataOut: ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408080:
	eax = fn0000000000411820(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0394
	branch Test(SG,S) l000000000040846B
// DataOut: ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040846B:
	dwLoc0394 = edx
	rax = __errno_location()
	rax = (uint64) Mem0[rax:word32]
	rdx = (uint64) dwLoc0394
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
// DataOut: eax ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408483:
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
// DataOut: eax ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004089C0:
	SCZO = cond(eax - 0x0000005F)
	branch Test(NE,Z) l0000000000408497
// DataOut: eax ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004089C9:
// DataOut: eax ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040848C:
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
// DataOut: eax ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408497:
	SCZO = cond(eax - 0x0000005F)
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
	branch Test(EQ,Z) l00000000004089D0
// DataOut: eax ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004084AB:
	SCZO = cond(eax - 0x0000003D)
	branch Test(EQ,Z) l00000000004089D0
// DataOut: ebp ebx edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004089D0:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
// DataOut: ebp ebx edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004084B4:
	Mem0[rsi + 0x00000000000000B4:word32] = 0x00000000
// DataOut: ebp ebx fs r11 r12
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408093:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rsi = 0x00000000004137B1
	rcx = 0x000000000000000A
// DataOut: ebp ebx edx fs r11 r12 r14 r15 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004080A4:
	branch rcx == 0x0000000000000000 l00000000004080A6
// DataOut: ebp ebx edx fs r11 r12 r14 r15 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004080A4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004080A4
// DataOut: ebp ebx edx fs r11 r12 r14 r15 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004080A6:
	r13b = Test(NE,Z)
// DataOut: ebp ebx edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004080AA:
	rax = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000408830
// DataOut: ebp ebx edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408830:
	rax = Mem0[0x000000000061A668:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000408B40
// DataOut: ebp ebx edx fs r11 r12 r13 r13b r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:(uint64) Mem0[0x000000000061B150:word32] rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B40:
	dwLoc0394 = edx
	rax = __errno_location()
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0394
// DataOut: cl ebp ebx edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408841:
	dwLoc038C = edx
	rax = __errno_location()
	rsi = r15
	Mem0[rax:word32] = 0x00000000
	rdi = r12
	qwLoc0394 = rax
	rax = fn0000000000409CC0(rsi)
	SZO = cond(eax & eax)
	C = false
	rcx = 0x0000000000000001
	r8 = Mem0[r13 - 0x0000000000000390:word64]
	rdx = (uint64) dwLoc038C
	branch Test(GT,SZO) l00000000004080BA
// DataOut: cl eax ebp ebx edx fs r11 r12 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040887E:
	rdx = (uint64) Mem0[rax:word32]
	SCZO = cond(edx - 0x00000016)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax ebp ebx edx fs r11 r12 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040888A:
	SCZO = cond(edx - 0x00000026)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax ebp ebx edx fs r11 r12 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408893:
	SCZO = cond(edx - 0x0000005F)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax ebp ebx fs r11 r12 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408C3B:
	rdx = Mem0[rsi + 0x0000000000000010:word64]
	rax = (uint64) (eax >>u 0x0000001F)
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[0x000000000061A668:word64] = rdx
	rdx = (uint64) eax
// DataOut: cl ebp ebx edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040889C:
	rax = (uint64) (eax >>u 0x0000001F)
	SCZO = cond(eax)
	rdx = (uint64) eax
// DataOut: ebp ebx edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004080B8:
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
// DataOut: cl ebp ebx edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004080BA:
	rsi = (uint64) ecx
	rax = 0x0000000000000000
	sil = sil | r13b
	SZO = cond(sil)
	C = false
	branch Test(EQ,Z) l00000000004080D9
// DataOut: cl eax ebp ebx edx fs r11 r12 r13b r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004080C3:
	rcx = (uint64) (ecx ^ 0x00000001)
	r13b = r13b & cl
	SZO = cond(r13b)
	C = false
	rax = (uint64) r13d
	branch Test(EQ,Z) l00000000004080D0
// DataOut: eax ebp ebx edx fs r11 r12 r13d r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004080CC_2:
	esi = r13d
// DataOut: eax ebp ebx edx fs r11 r12 r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:(uint64) (ecx ^ 0x00000001) r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004080D0:
	rax = (uint64) (eax << 0x0000001F)
	rax = (uint64) (eax >> 0x0000001F)
	rax = (uint64) (eax + 0x00000002)
	SCZO = cond(eax)
// DataOut: eax ebp ebx edx fs r11 r12 r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:(uint64) (ecx ^ 0x00000001) r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004080D9:
	v46 = Mem0[0x000000000061B17C:byte] | sil
	Mem0[0x000000000061B17C:byte] = v46
	SZO = cond(Mem0[0x000000000061B17C:byte])
	SZO = cond(edx & edx)
	C = false
	Mem0[rsi + 0x00000000000000B4:word32] = eax
	branch Test(NE,Z) l00000000004084BF
// DataOut: ebp ebx fs r11 r12 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004084BF:
	rdi = r12
	rbx = fn000000000040EAB0(ebx, ebp, rdi, r11, fs, out rbp, out r12, out r14, out r15b)
	r13 = rax
	rax = __errno_location()
	rsi = (uint64) Mem0[rax:word32]
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rcx = r13
	rdx = 0x0000000000415E54
	call error (retsize: 8; depth: 8)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004084F6:
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004080EF:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000408500
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408500:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000408519
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040850C:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l000000000040862A
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408519:
	rsi = Mem0[rsi + 0x0000000000000040:word64]
	rdi = r12
	rax = fn0000000000409D20(rsi, out rbp, out rsi, out r11, out r12, out r14)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	Mem0[rsi + 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000408BDA
// DataOut: ebp fs r11 r12 r13 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BDA:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x0000000000413794
	rax = dcgettext(0x0000000000000000, 0x0000000000413794, 0x0000000000000005)
	edi = (word32) Mem0[rbp - 0x0000000000000384:byte]
	rdx = r12
	rsi = rax
	rax = fn0000000000405810(rdx, ebp, esi, edi, r11, fs, out rbp, out rsi, out rdi, out r12, out r14, out r15b)
	r13 = Mem0[r14 + 0x0000000000000008:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000408535
// DataOut: fs r12 r13 r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000FFFFFFFF rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:0x00000000FFFFFFFE r11:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0A:
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408535:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408C0F
// DataOut: fs r12 r13 r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0F:
	rdi = r13
	rax = fn0000000000410E30(rax, rdi, out rsp, out rbp, out rsi, out rdi)
	r13 = rax
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408540:
	rdi = r12
	rax = fn000000000040A2B0(rdi, qwLoc08, out rbp, out rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	rdi = r13
	branch Test(EQ,Z) l0000000000408B98
// DataOut: fs r12 r13 r14 r15 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B98:
	rax = fn0000000000410E30(rax, rdi, out rsp, out rbp, out rsi, out rdi)
	r13 = rax
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408557:
	rax = DPB(rax, strlen(rdi), 0)
	rdi = r15 + 0x0000000000000002 + rax
	rax = fn0000000000410C40(rsi, rdi, out rsp)
	rcx = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[r12 - 0x0000000000000001 + r15:byte] - 0x2F)
	rdi = rcx
	rsi = r12
	Mem0[rbp - 0x0000000000000390:word64] = rcx
	al = Test(NE,Z)
	r15 = r15 + rax
	SCZO = cond(r15)
	rdx = r15
	call stpncpy (retsize: 8; depth: 8)
	rsi = r13
	rdi = rax
	rax = strcpy(rdi, rsi)
	rcx = Mem0[rbp - 0x0000000000000390:word64]
	r13 = rcx
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085A1:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085A6:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(ULE,CZ) l0000000000408B80
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B80:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B8D:
// DataOut: eax fs r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085B3:
	rdx = rbp - 0x0000000000000380
	rsi = r13
	rdi = 0x0000000000000001
	call __xstat (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000408607
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085CB:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	Mem0[rsi + 0x00000000000000B1:byte] = 0x01
	rax = (uint64) Mem0[rbp - 0x0000000000000368:word32]
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085E2:
	rdx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085EC:
	rdx = (uint64) eax
	rdx = (uint64) (edx & 0x0000F000)
	SCZO = cond(edx - 0x00004000)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:(uint64) Mem0[0x000000000061B150:word32] rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004085FC:
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408600:
	Mem0[rsi + 0x00000000000000A4:word32] = eax
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408607:
	rdi = r13
	free(rdi)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408623:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040862A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000006
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408103:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l0000000000408978
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408978:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	branch Test(EQ,Z) l00000000004089A8
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408981:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(NE,Z) l00000000004089A8
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004089A8:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000003
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040898A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000009
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040810E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000005
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408120:
	SZO = cond(r13d & r13d)
	C = false
	r12 = Mem0[r14 + 0x0000000000000050:word64]
	branch Test(EQ,Z) l0000000000408132
// DataOut: eax fs r12 r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408129:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081A8
// DataOut: eax fs r12 r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408132:
	r8 = Mem0[0x000000000061B138:word64]
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	r15 = r13 - 0x00000000000002D0
	rcx = 0x0000000000000200
	rdi = r12
	rsi = r15
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(eax - Mem0[0x000000000061B174:word32])
	branch Test(LE,SZO) l000000000040816E
// DataOut: eax fs r12 r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408168:
	Mem0[0x000000000061B174:word32] = eax
// DataOut: eax fs r12 r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040816E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(NE,Z) l00000000004081A8
// DataOut: eax fs r12 r13 r13d r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040817A:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000408B10
// DataOut: eax fs r12 r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B10:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rsi, edi, r8, r12, fs, out rbx, out rbp, out rsi, out r8, out r12, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B168:word32])
	branch Test(LE,SZO) l0000000000408187
// DataOut: eax fs r12 r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B25:
	Mem0[0x000000000061B168:word32] = eax
// DataOut: eax fs r12 r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408187:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A90
// DataOut: eax fs r12 r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408A90:
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	r13 = (uint64) Mem0[r14 + 0x0000000000000030:word32]
	branch Test(EQ,Z) l0000000000408BA8
// DataOut: fs r12 r13d r14 r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BA8:
	rdi = (uint64) r13d
	rax = fn000000000040CB40(rax, rsi, edi, r8, r12, out rsp, out rbp, out r12)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l0000000000408AA1
// DataOut: fs r12 r13d r14 r15 r15d r8 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BBC:
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408BCA
// DataOut: eax edx fs r12 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BC7_1:
	edx = eax
// DataOut: eax edx fs r12 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BCA:
// DataOut: eax edx fs r12 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AA1:
	rdx = 0x0000000000000015
	r8 = (uint64) r13d
	rcx = 0x000000000041375A
	rsi = 0x0000000000000001
	rdi = r15
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = 0x0000000000000000
	rdx = r15
// DataOut: fs r12 r14 r15d r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AC0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000408AC0
// DataOut: al eax edx fs r12 r14 r15d r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AD7:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000408AE4
// DataOut: al cl edx fs r12 r14 r15d r8 rbp rbx rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AE1_1:
	eax = ecx
// DataOut: al edx fs r12 r14 r15d r8 rbp rbx rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AE4:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000408AEC
// DataOut: al ecx edx fs r12 r14 r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AE8_1:
	rdx = rcx
// DataOut: al edx fs r12 r14 r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AEC:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = (uint64) (edx - r15d)
	SCZO = cond(edx)
// DataOut: eax edx fs r12 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408AF5:
	SCZO = cond(Mem0[0x000000000061B164:word32] - edx)
	branch Test(GE,SO) l0000000000408194
// DataOut: eax edx fs r12 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B01:
	Mem0[0x000000000061B164:word32] = edx
// DataOut: eax fs r12 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408194:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A70
// DataOut: eax fs r12 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408A70:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rsi, edi, r8, r12, fs, out rbx, out rbp, out rsi, out r8, out r12, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B160:word32])
	branch Test(LE,SZO) l00000000004081A1
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408A85:
	Mem0[0x000000000061B160:word32] = eax
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004081A1:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004081A8:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081C9
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004081B1:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B16C:word32])
	branch Test(GT,SZO) l0000000000408730
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408730:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[0x000000000061B16C:word32] = eax
	branch Test(NE,Z) l00000000004081D2
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004081C9:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040873F
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040873F:
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp - 0x00000000000002F0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
// DataOut: eax fs r13 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040875F:
	Mem0[0x000000000061B170:word32] = eax
// DataOut: fs r13 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408765:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(NE,Z) l0000000000408A30
// DataOut: fs r13 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408A30:
	rdi = Mem0[rsi + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rbp - 0x00000000000002D0
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out edi, out r12, out r13, out r14, out r15)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408A68:
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408779:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	r15 = r13 - 0x00000000000002D0
	rsi = r15
	rdi = rax
	rax = rax >>u 0x0000000000000008
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B15C:word32])
	branch Test(LE,SZO) l00000000004087BA
// DataOut: eax fs r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087B4:
	Mem0[0x000000000061B15C:word32] = eax
// DataOut: fs r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087BA:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	rsi = r15
	rdi = rax
	eax = (word32) al
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	rdx = (uint64) Mem0[0x000000000061B158:word32]
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l00000000004087F0
// DataOut: eax edx fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087E8:
	Mem0[0x000000000061B158:word32] = eax
	rdx = (uint64) eax
// DataOut: edx fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:(uint64) Mem0[0x000000000061B158:word32] rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087F0:
	rax = (uint64) Mem0[0x000000000061B15C:word32]
	eax = rdx + 0x0000000000000002 + rax
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408806:
	Mem0[0x000000000061B154:word32] = eax
// DataOut: fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> dil:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081D2:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408640
// DataOut: fs r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408640:
	rdi = Mem0[rsi + 0x0000000000000018:word64]
	rsi = rbp - 0x00000000000002D0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B178:word32])
	branch Test(LE,SZO) l00000000004081E1
// DataOut: eax fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408664:
	Mem0[0x000000000061B178:word32] = eax
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407FB1:
	rdi = 0x0000000000000000
	rdx = 0x0000000000000005
	rsi = 0x0000000000413783
	rax = dcgettext(0x0000000000000000, 0x0000000000413783, 0x0000000000000005)
	r15 = (uint64) Mem0[r13 - 0x0000000000000384:word32]
	rdx = r12
	rsi = rax
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
	edi = (word32) r15b
	rax = fn0000000000405810(rdx, ebp, esi, edi, r11, fs, out rbp, out rsi, out rdi, out r12, out r14, out r15b)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004081F4
// DataOut: fs r14 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407FE4:
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081E1:
	rdi = rbx
	rax = fn0000000000410E30(rax, rdi, out rsp, out rbp, out rsi, out rdi)
	v43 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v43
	SCZO = cond(v43)
	Mem0[rsi:word64] = rax
// DataOut: fs r14 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> sil:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081F4:
	rbx = Mem0[rbp - 0x0000000000000038:word64]
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	rax = r12
	branch Test(NE,Z) l0000000000408C76
// DataOut: r14 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408C76:
	__stack_chk_fail()
// DataOut: r14 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408C7B:
	fn0000000000410E50()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rdx = (uint64) (edx | r8d)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0000000000408CE8
// DataOut: al dl rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rsi:<invalid> r14:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// Terminates process

l0000000000408CE8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000408CAF
// DataOut: al dl rdi rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CEC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CAF:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408CC0
// DataOut: dl rdi rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CB3:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408CC0
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CC0:
	rcx = Mem0[rsi + 0x0000000000000068:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000068:word64] - rcx)
	rax = Mem0[rdi + 0x0000000000000070:word64]
	rdx = Mem0[rsi + 0x0000000000000070:word64]
	branch Test(GT,SZO) l0000000000408CF0
// DataOut: eax edx rdi rsi
// DataOut (flags): SO
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CF0:
	rax = 0x00000000FFFFFFFF
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD2:
	branch Test(LT,SO) l0000000000408D00
// DataOut: eax edx rdi rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408D00:
	rax = 0x0000000000000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD4:
	rdx = (uint64) (edx - eax)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000408D06
// DataOut: edx rdi rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408D06:
	rax = (uint64) edx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx - eax) rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD8:
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx - eax) rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CDB_thunk_fn0000000000405020:
	fn0000000000405020(qwArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx - eax) rcx:<invalid> rsi:<invalid> rdi:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CBC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:0x0000000000000001 r8:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040820A:
	rsp = rbp - 0x0000000000000028
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

fn0000000000407EA0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> r9:<invalid> r14:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407F2A_1:
	Mem0[rdi:word64] = 0x0000000000000000
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
// DataOut: eax ebp ebx esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64) Local -0388(0)



void fn0000000000409750(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000409750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000409750_entry:
// DataOut: edi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409750:
	word64 rbx_10 = (uint64) edi
	word32 ebx_11 = (word32) rbx_10
	branch edi == 0x00000000 l0000000000409794
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409794:
	dcgettext(0x0000000000000000, 0x0000000000413D88, 0x0000000000000005)
	word64 rbp_59 = Mem0[0x000000000061A610:word64]
	word64 rax_63 = dcgettext(0x0000000000000000, 0x0000000000413DB0, 0x0000000000000005)
	word64 rax_66 = DPB(rax_63, fputs_unlocked(rax_63, rbp_59), 0)
	word64 rbp_67 = Mem0[0x000000000061A610:word64]
	word64 rax_71 = dcgettext(0x0000000000000000, 0x0000000000413E40, 0x0000000000000005)
	word64 rax_74 = DPB(rax_71, fputs_unlocked(rax_71, rbp_67), 0)
	word64 rbp_75 = Mem0[0x000000000061A610:word64]
	word64 rax_79 = dcgettext(0x0000000000000000, 0x0000000000413E90, 0x0000000000000005)
	word64 rax_82 = DPB(rax_79, fputs_unlocked(rax_79, rbp_75), 0)
	word64 rbp_83 = Mem0[0x000000000061A610:word64]
	word64 rax_87 = dcgettext(0x0000000000000000, 0x0000000000413FA0, 0x0000000000000005)
	word64 rax_90 = DPB(rax_87, fputs_unlocked(rax_87, rbp_83), 0)
	word64 rbp_91 = Mem0[0x000000000061A610:word64]
	word64 rax_95 = dcgettext(0x0000000000000000, 0x00000000004141E8, 0x0000000000000005)
	word64 rax_98 = DPB(rax_95, fputs_unlocked(rax_95, rbp_91), 0)
	word64 rbp_99 = Mem0[0x000000000061A610:word64]
	word64 rax_103 = dcgettext(0x0000000000000000, 0x0000000000414398, 0x0000000000000005)
	word64 rax_106 = DPB(rax_103, fputs_unlocked(rax_103, rbp_99), 0)
	word64 rbp_107 = Mem0[0x000000000061A610:word64]
	word64 rax_111 = dcgettext(0x0000000000000000, 0x0000000000414540, 0x0000000000000005)
	word64 rax_114 = DPB(rax_111, fputs_unlocked(rax_111, rbp_107), 0)
	word64 rbp_115 = Mem0[0x000000000061A610:word64]
	word64 rax_119 = dcgettext(0x0000000000000000, 0x0000000000414580, 0x0000000000000005)
	word64 rax_122 = DPB(rax_119, fputs_unlocked(rax_119, rbp_115), 0)
	word64 rbp_123 = Mem0[0x000000000061A610:word64]
	word64 rax_127 = dcgettext(0x0000000000000000, 0x0000000000414670, 0x0000000000000005)
	word64 rax_130 = DPB(rax_127, fputs_unlocked(rax_127, rbp_123), 0)
	word64 rbp_131 = Mem0[0x000000000061A610:word64]
	word64 rax_135 = dcgettext(0x0000000000000000, 0x0000000000414780, 0x0000000000000005)
	word64 rax_138 = DPB(rax_135, fputs_unlocked(rax_135, rbp_131), 0)
	word64 rbp_139 = Mem0[0x000000000061A610:word64]
	word64 rax_143 = dcgettext(0x0000000000000000, 0x0000000000414928, 0x0000000000000005)
	word64 rax_146 = DPB(rax_143, fputs_unlocked(rax_143, rbp_139), 0)
	word64 rbp_147 = Mem0[0x000000000061A610:word64]
	word64 rax_151 = dcgettext(0x0000000000000000, 0x0000000000414AC0, 0x0000000000000005)
	word64 rax_154 = DPB(rax_151, fputs_unlocked(rax_151, rbp_147), 0)
	word64 rbp_155 = Mem0[0x000000000061A610:word64]
	word64 rax_159 = dcgettext(0x0000000000000000, 0x0000000000414C28, 0x0000000000000005)
	word64 rax_162 = DPB(rax_159, fputs_unlocked(rax_159, rbp_155), 0)
	word64 rbp_163 = Mem0[0x000000000061A610:word64]
	word64 rax_167 = dcgettext(0x0000000000000000, 0x0000000000414DA0, 0x0000000000000005)
	word64 rax_170 = DPB(rax_167, fputs_unlocked(rax_167, rbp_163), 0)
	word64 rbp_171 = Mem0[0x000000000061A610:word64]
	word64 rax_175 = dcgettext(0x0000000000000000, 0x0000000000414F58, 0x0000000000000005)
	word64 rax_178 = DPB(rax_175, fputs_unlocked(rax_175, rbp_171), 0)
	word64 rbp_179 = Mem0[0x000000000061A610:word64]
	word64 rax_183 = dcgettext(0x0000000000000000, 0x0000000000415020, 0x0000000000000005)
	word64 rax_186 = DPB(rax_183, fputs_unlocked(rax_183, rbp_179), 0)
	word64 rbp_187 = Mem0[0x000000000061A610:word64]
	word64 rax_191 = dcgettext(0x0000000000000000, 0x00000000004151F0, 0x0000000000000005)
	word64 rax_194 = DPB(rax_191, fputs_unlocked(rax_191, rbp_187), 0)
	word64 rbp_195 = Mem0[0x000000000061A610:word64]
	word64 rax_199 = dcgettext(0x0000000000000000, 0x00000000004153F0, 0x0000000000000005)
	word64 rax_202 = DPB(rax_199, fputs_unlocked(rax_199, rbp_195), 0)
	word64 rbp_203 = Mem0[0x000000000061A610:word64]
	word64 rax_207 = dcgettext(0x0000000000000000, 0x0000000000415480, 0x0000000000000005)
	word64 rax_210 = DPB(rax_207, fputs_unlocked(rax_207, rbp_203), 0)
	word64 rbp_211 = Mem0[0x000000000061A610:word64]
	word64 rax_215 = dcgettext(0x0000000000000000, 0x00000000004155E8, 0x0000000000000005)
	word64 rax_218 = DPB(rax_215, fputs_unlocked(rax_215, rbp_211), 0)
	word64 rbp_219 = Mem0[0x000000000061A610:word64]
	word64 rax_223 = dcgettext(0x0000000000000000, 0x0000000000415748, 0x0000000000000005)
	word64 rax_226 = DPB(rax_223, fputs_unlocked(rax_223, rbp_219), 0)
	word64 rbp_227 = Mem0[0x000000000061A610:word64]
	word64 rax_231 = dcgettext(0x0000000000000000, 0x0000000000415778, 0x0000000000000005)
	word64 rax_234 = DPB(rax_231, fputs_unlocked(rax_231, rbp_227), 0)
	word64 rbp_235 = Mem0[0x000000000061A610:word64]
	word64 rax_239 = dcgettext(0x0000000000000000, 0x00000000004157B0, 0x0000000000000005)
	word64 rax_242 = DPB(rax_239, fputs_unlocked(rax_239, rbp_235), 0)
	word64 rbp_243 = Mem0[0x000000000061A610:word64]
	word64 rax_247 = dcgettext(0x0000000000000000, 0x0000000000415850, 0x0000000000000005)
	word64 rax_250 = DPB(rax_247, fputs_unlocked(rax_247, rbp_243), 0)
	word64 rbp_251 = Mem0[0x000000000061A610:word64]
	word64 rax_258 = dcgettext(0x0000000000000000, 0x0000000000415970, 0x0000000000000005)
	word64 rax_261 = DPB(rax_258, fputs_unlocked(rax_258, rbp_251), 0)
	word64 rsi_263
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_263)
	dcgettext(0x0000000000000000, 0x00000000004137BB, 0x0000000000000005)
	dcgettext(0x0000000000000000, 0x00000000004137E8, 0x0000000000000005)
	word64 rbp_283 = Mem0[0x000000000061A610:word64]
	word64 rax_287 = dcgettext(0x0000000000000000, 0x0000000000415A30, 0x0000000000000005)
	word64 rax_290 = DPB(rax_287, fputs_unlocked(rax_287, rbp_283), 0)
	word64 rsp_296
	word64 rbp_297
	word32 edx_298
	word64 rdx_299
	word64 rbx_300
	word32 edi_302
	byte SCZO_303
	byte SZO_304
	byte C_305
	byte Z_306
	word32 esi_307
	word64 rsi_308
	word64 rdi_309
	word64 rax_310
	word64 rcx_311
	word32 eax_312
	word32 ecx_313
	call setlocale (retsize: 8; depth: 24)
		uses: C_294,dwLoc04_4,dwLoc08_8,eax_291,ebx_11,ecx,edi_254,edx,esi,rax_290,rbp_283,rbx_10,rcx_278,rdi_295,rdx_284,rsi_292,rsp_12,SCZO,SZO_293,Z_14
		defs: C_305,eax_312,ebx_301,ecx_313,edi_302,edx_298,esi_307,rax_310,rbp_297,rbx_300,rcx_311,rdi_309,rdx_299,rsi_308,rsp_296,SCZO_303,SZO_304,Z_306
	branch rax_310 == 0x0000000000000000 l0000000000409BC8
// DataOut: eax ebx rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BB2:
	word64 rax_337 = DPB(rax_310, strncmp(rax_310, 0x000000000041380A, 0x0000000000000003), 0)
	branch strncmp(rax_310, 0x000000000041380A, 0x0000000000000003) != 0x00000000 l0000000000409BFF
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BFF:
	word64 rsi_343
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_343)
	dcgettext(0x0000000000000000, 0x0000000000415A70, 0x0000000000000005)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000003 rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:0x000000000041380A rax:<invalid> rcx:<invalid> edx:0x00000003 ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BC8:
	word64 rsi_320
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_320)
	dcgettext(0x0000000000000000, 0x0000000000415AB8, 0x0000000000000005)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409768:
	dcgettext(0x0000000000000000, 0x0000000000413D60, 0x0000000000000005)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040978D:
	exit((uint64) ebx_11)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000409CC0(word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: eax rax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000409CC0_entry:
// DataOut: ebp ebx fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409CC0:
	word64 rax_6 = (uint64) ((word32) (uint64) Mem0[rsi + 0x0000000000000018:word32] & 0x0000F000)
	word32 eax_7 = (word32) rax_6
	branch eax_7 == 0x0000A000 l0000000000409D10
// DataOut: eax ebp ebx fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D10:
	return 0x0000000000000000
// DataOut: eax ebp ebx fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:(uint64) (eax & 0x0000F000)

l0000000000409CCF:
	word64 rsp_26
	word32 eax_27
	word64 rsi_28
	byte SZO_30
	byte C_31
	byte SCZO_32
	byte Z_33
	byte S_34
	byte al_35
	word64 rax_29
	call acl_extended_file (retsize: 8; depth: 16)
		uses: al_8,C,eax_7,rax_6,rsi,rsp_21,S,SCZO_22,SZO,Z_10
		defs: al_35,C_31,eax_27,rax_29,rsi_28,rsp_26,S_34,SCZO_32,SZO_30,Z_33
	branch eax_27 < 0x00000000 l0000000000409CE8
// DataOut: eax ebp ebx fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:(uint64) (eax & 0x0000F000)
// LocalsOut: fp(64)

l0000000000409CE8:
	word32 eax_48 = (word32) (uint64) Mem0[__errno_location():word32]
	branch eax_48 == 0x0000005F l0000000000409D18
// DataOut: eax ebp ebx fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF4:
	branch eax_48 == 0x00000026 l0000000000409D18
// DataOut: eax ebp ebx fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF9:
	branch eax_48 == 0x00000016 l0000000000409D18
// DataOut: eax ebp ebx fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409D18:
	return 0x0000000000000000
// DataOut: eax ebp ebx fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

l0000000000409CFE:
	rax_29 = (uint64) -(word32) (eax_48 != 0x00000010)
// DataOut: eax ebp ebx fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CDC:
	return rax_29
// DataOut: eax ebp ebx fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> al:<invalid> eax:<invalid>

fn0000000000409CC0_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> al:<invalid> eax:<invalid>



word64 fn0000000000409D20(word64 rsi, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: ebp r11 r12 r14 rax rbp rsi
// Trashed: SCZO ah al ax bp bpl dh di dil dl dx eax ebp edi edx esi esp r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409D20_entry:
	*r12Out = r12
	*r11Out = r11
// DataOut: fs r11 r12 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D20:
	word64 r14_11
	*r14Out = 0x00000000FFFFFFFF
	word64 rbx_157 = 0x0000000000000401
	branch rsi >u 0x0000000000000400 l0000000000409D59
// DataOut: fs r11 r12 r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D55_1:
	rbx_157 = rsi + 0x0000000000000001
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:0x0000000000000401 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D59:
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D60:
	branch malloc(rbx_157) == 0x0000000000000000 l0000000000409DAB
// DataOut: fs r11 r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D70:
	word64 rsp_149
	word64 rdi_150
	word64 rsi_151
	word64 rax_152
	word64 r15_153
	word64 r14_154
	word64 rbp_155
	word64 r13_156
	word32 ebx_158
	byte SCZO_159
	byte CZ_160
	byte SZO_161
	byte C_162
	byte Z_163
	word64 rdx_164
	word64 r12_165
	byte S_166
	word32 eax_167
	word64 r11_168
	word32 edx_169
	call readlink (retsize: 8; depth: 56)
		uses: C_55,CZ_43,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_23,dwLoc24,eax_52,ebx_45,edx_42,qwLoc08,qwLoc10,qwLoc18,qwLoc30,r11_44,r12_40,r13_143,r14_37,r15_38,rax_144,rbp_56,rbx_145,rdi_148,rdx_146,rsi_147,rsp_49,S_39,SCZO_46,SZO_53,Z_54
		defs: C_162,CZ_160,eax_167,ebx_158,edx_169,r11_168,r12_165,r13_156,r14_154,r15_153,rax_152,rbp_155,rbx_157,rdi_150,rdx_164,rsi_151,rsp_149,S_166,SCZO_159,SZO_161,Z_163
	word64 r12_173 = rax_152
	*r12Out = r12_173
	branch rax_152 < 0x0000000000000000 l0000000000409DD8
// DataOut: fs r11 r12 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DD8:
	word64 rax_232 = __errno_location()
	word32 edx_235 = (word32) (uint64) Mem0[rax_232:word32]
	branch edx_235 == 0x00000022 l0000000000409D86
// DataOut: edx fs r11 r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DE4:
	free(rbp_155)
	Mem244[rax_232:word32] = (word32) (uint64) edx_235
// DataOut: fs r11 r12 r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D86:
	branch rbx_157 >u rax_152 l0000000000409E08
// DataOut: fs r11 r12 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E08:
	Mem215[rbp_155:byte] = 0x00
	word64 rbp_226
	*rbpOut = Mem215[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_228
	*rsiOut = Mem215[qwLoc08 + 0x0000000000000010:word64]
	return rbp_155
// DataOut: ebp fs r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409D8B:
	free(rbp_155)
	branch rbx_157 >u 0x00000000FFFFFFFF l0000000000409DC0
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DC0:
	branch rbx_157 >u 0x00000000FFFFFFFE l0000000000409E20
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E20:
	Mem197[__errno_location():word32] = 0x0000000C
	word64 rbp_209
	*rbpOut = Mem197[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_211
	*rsiOut = Mem197[qwLoc08 + 0x0000000000000010:word64]
	return 0x0000000000000000
// DataOut: ebp fs r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409DC5:
	word64 r11_195
	*r11Out = 0x00000000FFFFFFFF
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D98:
	branch malloc(rbx_157 * 0x0000000000000002) != 0x0000000000000000 l0000000000409D70
// DataOut: fs r11 r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAB:
// DataOut: fs r11 r12 r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAD:
	word64 rbp_114
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_116
	*rsiOut = Mem0[qwLoc08 + 0x0000000000000010:word64]
	return 0x0000000000000000
// DataOut: ebp fs r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:0x0000000000000000 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -48(fp):<invalid> -36(fp):edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409D20_exit:
// DataOut: ebp r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:rbx rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> r11:<invalid> -48(fp):<invalid> -36(fp):edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409E50(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rcx rdi rdx rsi
// LiveOut: al eax ebp r12 r12d r14 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409E50_entry:
// DataOut: fs r11 r8 rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409E50:
	word64 qwLoc38_115
	word64 rax_111
	word64 rax_29 = DPB(rax, strlen(rdi), 0)
	word64 r12_16
	*r12Out = rcx
	word64 rbp_133 = rdx
	word64 r14_129 = Mem0[rsi:word64]
	*r14Out = r14_129
	branch r14_129 == 0x0000000000000000 l0000000000409F72
// DataOut: eax fs r11 r12 r12d r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0040(64)

l0000000000409F72:
	qwLoc38_115 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r11 r12 r12d r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx rax:DPB(rax, <invalid>, 0) r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64)

l0000000000409E81:
	byte bLoc29_114 = 0x00
	qwLoc38_115 = 0xFFFFFFFFFFFFFFFF
	word64 rbx_116 = 0x0000000000000000
	rax_130 = rax_29
// DataOut: eax fs r11 r12 r12d r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx rax:DPB(rax, <invalid>, 0) r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EE8:
	word64 rax_130
	rax_130 = DPB(rax_130, strncmp(r14_129, rdi, rax_29), 0)
	branch strncmp(r14_129, rdi, rax_29) != 0x00000000 l0000000000409ED8
// DataOut: eax fs r11 r12 r12d r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EFB:
	rax_130 = DPB(rax_130, strlen(r14_129), 0)
	branch rax_130 == rax_29 l0000000000409F60
// DataOut: eax fs r11 r12 r12d r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(0) Local -0040(64)

l0000000000409F60:
	word32 ebp_235
	*ebpOut = (word32) Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rbx_116
// DataOut: al eax ebp fs r11 r12 r12d r14 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409F08:
	branch qwLoc38_115 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
// DataOut: eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409EA0:
	rax_130 = rdx
	branch rdx == 0x0000000000000000 l0000000000409F50
// DataOut: eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409F50:
	bLoc29_114 = 0x01
// DataOut: eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:rdx r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EAE:
	word64 rdi_205 = qwLoc38_115 *s rcx + rdx
	word64 rax_206 = DPB(rdx, memcmp(rdi_205, rbp_133, rcx), 0)
	byte cl_210 = (byte) (word32) bLoc29_114
	rax_130 = 0x0000000000000001
	branch memcmp(rdi_205, rbp_133, rcx) == 0x00000000 l0000000000409ED4
// DataOut: al cl eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:rdx r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED1_1:
	cl_210 = 0x01 (alias)
// DataOut: cl eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED4:
	bLoc29_114 = cl_210
// DataOut: eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409ED8:
	rbx_116 = rbx_116 + 0x0000000000000001
	rbp_133 = rbp_133 + rcx
	r14_129 = Mem0[rsi + rbx_116 * 0x0000000000000008:word64]
	*r14Out = r14_129
	branch r14_129 == 0x0000000000000000 l0000000000409F28
// DataOut: eax fs r11 r12 r12d r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F10:
	rbx_116 = rbx_116 + 0x0000000000000001
	qwLoc38_115 = rbx_116
	rbp_133 = rbp_133 + rcx
	r14_129 = Mem0[rsi + rbx_116 * 0x0000000000000008:word64]
	*r14Out = r14_129
	branch r14_129 != 0x0000000000000000 l0000000000409EE8
// DataOut: eax fs r11 r12 r12d r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F25:
// DataOut: fs r11 r12 r12d r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0029(0) Local -0038(64)

l0000000000409F28:
	rax_111 = 0xFFFFFFFFFFFFFFFE
	branch bLoc29_114 != 0x00 l0000000000409F3B
// DataOut: al eax fs r11 r12 r12d r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64)

l0000000000409F36:
	rax_111 = qwLoc38_115
// DataOut: al eax fs r11 r12 r12d r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409F3B:
	word32 ebp_87
	*ebpOut = (word32) Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rax_111
// DataOut: al eax ebp fs r11 r12 r12d r14 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409E50_exit:
// DataOut: al eax ebp r12 r12d r14 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> r13:DPB(rax, <invalid>, 0) rdx:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409F80(word64 rdx, word32 esi, word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r11 rdi rdx
// LiveOut: r11 r15 rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000409F80_entry:
// DataOut: esi fs r11 rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409F80:
	word32 ebp_14 = (word32) rdi
	word32 ebx_20 = (word32) rsi
	branch rdx == 0xFFFFFFFFFFFFFFFF l0000000000409FE0
// DataOut: ebp ebx fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409FE0:
	dcgettext(0x0000000000000000, 0x0000000000415DFD, 0x0000000000000005)
// DataOut: ebp ebx fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409F95:
	dcgettext(0x0000000000000000, 0x0000000000415E18, 0x0000000000000005)
// DataOut: ebp ebx fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409FA4:
	word64 r11_28
	word64 rbx_29 = fn000000000040EBF0(ebx_20, ebp_14, rdi, 0x00000001, r11, fs, out r11_28)
	word64 r11_38
	word64 r15_39
	fn000000000040E970(rbx_29, 0x00000006, 0x00000000, r11_28, fs, out r11_38, out r15_39)
	word64 rsp_58
	word64 rdx_59
	byte SCZO_60
	word32 edx_61
	word64 rbp_62
	word64 rdi_63
	word64 rbx_64
	word64 rsi_65
	byte Z_66
	word32 esi_67
	word32 edi_68
	byte SZO_69
	byte C_70
	word64 rax_71
	word64 r12_72
	word64 r8_73
	word64 rcx_74
	word32 eax_75
	word64 r11_76
	selector fs_77
	word64 r15_78
	word32 ebx_79
	word32 ebp_80
	call error (retsize: 8; depth: 8)
		uses: C_57,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_49,ebx_43,edi_34,esi_32,fs,r11_38,r12_21,r15_39,r8_45,rax_55,rbp_48,rbx_42,rcx_47,rdi_54,rdx_46,rsi_53,rsp_52,SCZO_6,SZO_56,Z_7
		defs: C_70,eax_75,ebp_80,ebx_79,edi_68,edx_61,esi_67,fs_77,r11_76,r12_72,r15_78,r8_73,rax_71,rbp_62,rbx_64,rcx_74,rdi_63,rdx_59,rsi_65,rsp_58,SCZO_60,SZO_69,Z_66
	return rbx_64
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi rsi:<invalid> rdi:0x0000000000000000 rax:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000409F80_exit:
// DataOut: r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040A000(word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A000_entry:
// DataOut: fs r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A000:
	word64 rbx_31 = Mem0[0x000000000061A650:word64]
	word64 rax_32 = dcgettext(0x0000000000000000, 0x0000000000415E35, 0x0000000000000005)
	word64 rax_157 = DPB(rax_32, fputs_unlocked(rax_32, rbx_31), 0)
	word64 r14_10 = 0x0000000000000000
	word64 r13_158 = rdx
	word64 rbp_165 = rsi
	word32 ebp_151 = (word32) rsi
	word64 rbx_164 = 0x0000000000000000
	word64 r12_155 = Mem0[rdi:word64]
	branch r12_155 != 0x0000000000000000 l000000000040A086
// DataOut: eax ebp ebx fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A086:
	word64 r13_180
	branch rbx_164 == 0x0000000000000000 l000000000040A050
// DataOut: eax ebp ebx fs r11 r12 r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A08B:
	word64 rax_201 = DPB(rax_157, memcmp(r14_10, rbp_165, r13_158), 0)
	branch memcmp(r14_10, rbp_165, r13_158) != 0x00000000 l000000000040A050
// DataOut: ebp ebx fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A050:
	rbp_165 = rbp_178 + r13_180
	word64 rbp_178
	word64 r15_182
	rbx_164 = fn000000000040EC10((word32) (rbx_164 + 0x0000000000000001), ebp_151, r12_155, r11, fs, out rbp_178, out r11, out r13_180, out r14_10, out r15_182)
	ebp_151 = (word32) rbp_165 (alias)
	rax_157 = 0x0000000000000000
	r12_155 = Mem0[r15_182 + rbx_164 * 0x0000000000000008:word64]
	r13_158 = r13_180
	branch r12_155 == 0x0000000000000000 l000000000040A0D0
// DataOut: eax ebp ebx fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A09D:
	ebp_151 = (word32) (rbp_165 + r13_158) (alias)
	word64 r15_216
	rbx_164 = fn000000000040EC10((word32) (rbx_164 + 0x0000000000000001), ebp_151, r12_155, r11, fs, out rbp_165, out r11, out r13_158, out r14_10, out r15_216)
	rax_157 = 0x0000000000000000
	r12_155 = Mem0[r15_216 + rbx_164 * 0x0000000000000008:word64]
	branch r12_155 != 0x0000000000000000 l000000000040A086
// DataOut: eax ebp ebx fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A047:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:rdi rdi:<invalid> r14:0x0000000000000000 r13:rdx rdx:0x0000000000000005 rbp:rsi rsi:<invalid> rbx:0x0000000000000000 rax:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0D0:
	word64 rdi_61 = Mem0[0x000000000061A650:word64]
	word64 rax_63 = Mem0[rdi_61 + 0x0000000000000028:word64]
	branch rax_63 >=u Mem0[rdi_61 + 0x0000000000000030:word64] l000000000040A0FB
// DataOut: rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0FB:
	word64 rsp_126
	word64 rdi_127
	word64 r15_128
	word32 edi_129
	byte SZO_130
	byte C_131
	word64 rsi_132
	word32 r14d_133
	word64 r14_134
	word64 rbp_135
	word64 r13_136
	word64 rdx_137
	word32 edx_138
	word32 esi_139
	word64 rbx_140
	byte SCZO_141
	word64 rax_142
	word32 ebx_143
	word64 r12_144
	byte Z_145
	word32 eax_146
	word64 rcx_147
	word64 r11_148
	selector fs_149
	word32 ebp_150
	call __overflow (retsize: 8; depth: 8)
		uses: C_66,dwLoc04_4,dwLoc08_9,dwLoc0C_14,dwLoc10_20,dwLoc14_22,dwLoc18_28,eax_64,ebp_46,ebx_51,edi_62,edx,esi,fs,r11_47,r12_50,r13_52,r14_53,r14d_54,r15_56,rax_63,rbp_120,rbx_114,rcx_48,rdi_124,rdx_57,rsi_122,rsp_125,SCZO_113,SZO_55,Z_49
		defs: C_131,eax_146,ebp_150,ebx_143,edi_129,edx_138,esi_139,fs_149,r11_148,r12_144,r13_136,r14_134,r14d_133,r15_128,rax_142,rbp_135,rbx_140,rcx_147,rdi_127,rdx_137,rsi_132,rsp_126,SCZO_141,SZO_130,Z_145
	return rsp_126
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0E1:
	Mem93[rdi_61 + 0x0000000000000028:word64] = rax_63 + 0x0000000000000001
	Mem94[rax_63:byte] = 0x0A
	return Mem94[fp - 0x0000000000000008:word64] + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A000_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040A120(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 r8, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rax rcx rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A120_entry:
// DataOut: fs r11 r8 rax rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A120:
	word64 rsp_37
	word32 ebp_38
	word64 r12_39
	word64 r14_40
	word64 rax_41 = fn0000000000409E50(rax, r8, rcx, rdx, rsi, out rsp_37, out ebp_38, out r12_39, out r14_40)
	branch rax_41 < 0x0000000000000000 l000000000040A165
// DataOut: fs r11 r12d r14 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A165:
	word32 esi_84 = (word32) r12_39
	word64 rbp_86
	word64 r11_87
	word64 r15_88
	word64 rbx_89 = fn0000000000409F80(rax_41, esi_84, r14_40, r11, fs, out rbp_86, out r11_87, out r15_88)
	word64 rsp_93 = fn000000000040A000(r15_88, rbp_86, rbx_89, r11_87, fs)
	word64 rsp_94
	word64 rdi_95
	word64 r15_96
	word64 r8_97
	word64 rsi_98
	word64 r14_99
	word64 rbp_100
	word64 r13_101
	word64 r9_102
	word64 r12_103
	word64 rcx_104
	word64 rbx_105
	word64 rdx_106
	byte SCZO_107
	word64 rax_108
	byte SZO_109
	byte C_110
	byte S_111
	word32 r13d_112
	word64 r11_113
	selector fs_114
	word32 ebp_115
	word32 esi_116
	call r13d (retsize: 4; depth: 4)
		uses: C_44,dwLoc04_4,dwLoc08_9,dwLoc0C_13,dwLoc10_18,dwLoc14_22,dwLoc18_29,ebp_38,esi_84,fs,r11_87,r12_39,r13_15,r13d,r14_40,r15_88,r8,r9,rax_41,rbp_86,rbx_89,rcx_26,rdi_92,rdx_90,rsi_91,rsp_93,S_43,SCZO_35,SZO_42
		defs: C_110,ebp_115,esi_116,fs_114,r11_113,r12_103,r13_101,r13d_112,r14_99,r15_96,r8_97,r9_102,rax_108,rbp_100,rbx_105,rcx_104,rdi_95,rdx_106,rsi_98,rsp_94,S_111,SCZO_107,SZO_109
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:r8 rbx:rdx rdx:<invalid> rsi:<invalid> rax:<invalid> ecx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A156:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> eax:0xFFFFFFFF al:0xFF cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A120_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> eax:0xFFFFFFFF al:0xFF cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040A2B0(word64 rdi, word64 qwArg00, ptr64 & rbpOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rbp rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esi esp rax rbp rcx rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64)
fn000000000040A2B0_entry:
// DataOut: fs r12 r13 r14 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2B0:
	word64 rdx_27
	word64 rbp_16 = (uint64) (Mem0[rdi:byte] == 0x2F)
	word64 rsi_19
	word64 rax_20 = fn000000000040A390(rdi, out rsi_19)
	word64 rcx_22 = rax_20 - rdi
	branch rcx_22 <=u rbp_16 l000000000040A2FD
// DataOut: fs r12 r13 r14 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2D2:
	rdx_27 = rcx_22 - 0x0000000000000001
	branch Mem0[rax_20 - 0x0000000000000001:byte] == 0x2F l000000000040A2EE
// DataOut: fs r12 r13 r14 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2EE:
	branch rbp_16 <u rdx_27 l000000000040A2E0
// DataOut: fs r12 r13 r14 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2E0:
	word64 rax_55 = rdx_27 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rdx_27:byte] != 0x2F l000000000040A2F3
// DataOut: fs r12 r13 r14 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2EB:
	rdx_27 = rax_55
// DataOut: fs r12 r13 r14 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2DC:
// DataOut: fs r12 r13 r14 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2FD:
	rdx_27 = rcx_22
// DataOut: fs r12 r13 r14 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0000(64)

l000000000040A2F3:
	word64 rbp_35
	*rbpOut = qwArg00
	return rdx_27
// DataOut: fs r12 r13 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

fn000000000040A2B0_exit:
// DataOut: rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx bpl:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040A390(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A390_entry:
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A390:
	word32 edx_107 = (word32) Mem0[rdi:byte]
	word64 rax_104 = rdi
	branch (byte) edx_107 != 0x2F l000000000040A3AC
// DataOut: dl ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A39B:
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:(word32) Mem0[rdi:byte] rax:rdi

l000000000040A3A0:
	rax_104 = rax_104 + 0x0000000000000001
	edx_107 = (word32) Mem0[rax_104:byte]
	branch (byte) edx_107 == 0x2F l000000000040A3A0
// DataOut: dl ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3AC:
	word64 rsi_16 = 0x0000000000000000
	*rsiOut = rsi_16
	byte sil_102 = 0x00
	word64 rdx_19 = rax_104
	branch (byte) (uint64) edx_107 == 0x00 l000000000040A3F7
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3F7:
	return rax_104
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:0x0000000000000000 rdx:<invalid>

l000000000040A3B7:
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:0x0000000000000000 rdx:<invalid>

l000000000040A3C0:
	rdx_19 = rdx_19 + 0x0000000000000001
	byte cl_52 = (byte) (word32) Mem0[rdx_19:byte]
	branch cl_52 == 0x00 l000000000040A3E5
// DataOut: cl ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3CB:
	branch cl_52 == 0x2F l000000000040A3F0
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3F0:
	word64 rsi_100
	*rsiOut = 0x0000000000000001
	sil_102 = 0x01 (alias)
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D0:
	branch sil_102 == 0x00 l000000000040A3C0
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D5:
	rdx_19 = rdx_19 + 0x0000000000000001
	rax_104 = rdx_19
	cl_52 = (byte) (word32) Mem0[rdx_19:byte] (alias)
	word64 rsi_94 = 0x0000000000000000
	*rsiOut = rsi_94
	sil_102 = 0x00 (alias)
	branch cl_52 != 0x00 l000000000040A3CB
// DataOut: cl ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3E5:
	return rax_104
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

fn000000000040A390_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>



word64 fn000000000040A400(word64 rax, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh dl dx eax edx esp rax rdx rsp sp spl
// Preserved: rbx
fn000000000040A400_entry:
// DataOut: r11 r12 r14 r14d r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A400:
	word64 rax_23 = DPB(rax, strlen(rdi), 0)
	branch rax_23 <=u 0x0000000000000001 l000000000040A41A
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A40F:
	word64 rdx_31 = rax_23 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rax_23:byte] == 0x2F l000000000040A420
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A420:
	rax_23 = rdx_31
	branch rdx_31 != 0x0000000000000001 l000000000040A40F
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A429:
	return rdx_31
// DataOut: r11 r12 r14 r14d r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx

l000000000040A41A:
	return rax_23
// DataOut: r11 r12 r14 r14d r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx

fn000000000040A400_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdx:<invalid> -4(fp):rbx



void fn000000000040A600(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rsp
fn000000000040A600_entry:
// DataOut: fs r11 r11d r13 r13d r14 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A600:
	word32 edi_5 = (word32) (uint64) Mem0[rdi + 0x0000000000000018:word32]
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A430:
	byte dl_15
	word32 eax_9 = (word32) (uint64) ((word32) (uint64) edi_5 & 0x0000F000)
	branch eax_9 == 0x00008000 l000000000040A5B0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32]

l000000000040A5B0:
	dl_15 = 0x2D (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A442:
	branch eax_9 == 0x00004000 l000000000040A5C0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A5C0:
	dl_15 = 0x64 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A44D:
	branch eax_9 == 0x00006000 l000000000040A5D0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A5D0:
	dl_15 = 0x62 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A458:
	branch eax_9 == 0x00002000 l000000000040A5A0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A5A0:
	dl_15 = 0x63 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A463:
	branch eax_9 == 0x0000A000 l000000000040A5E0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A5E0:
	dl_15 = 0x6C (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A46E:
	branch eax_9 == 0x00001000 l000000000040A5F0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A5F0:
	dl_15 = 0x70 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A479:
	dl_15 = 0x73 (alias)
	branch eax_9 == 0x0000C000 l000000000040A48B
// DataOut: al dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A488_1:
	dl_15 = 0x3F (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:0x000000000000003F rdx:0x0000000000000073

l000000000040A48B:
	byte al_180
	Mem18[rsi:byte] = dl_15
	Mem30[rsi + 0x0000000000000001:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000100)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem43[rsi + 0x0000000000000002:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000080)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_51 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000040)) - 0x00000001))
	branch (edi_5 & 0x00000800) == 0x00000000 l000000000040A590
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A590:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4CD:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4D3:
	byte al_168
	Mem57[rsi + 0x0000000000000003:byte] = al_180
	Mem70[rsi + 0x0000000000000004:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000020)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem83[rsi + 0x0000000000000005:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000010)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_91 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000008)) - 0x00000001))
	branch (edi_5 & 0x00000400) == 0x00000000 l000000000040A580
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A580:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A50E:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A514:
	Mem97[rsi + 0x0000000000000006:byte] = al_168
	Mem110[rsi + 0x0000000000000007:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000004)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem126[rsi + 0x0000000000000008:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000002)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	branch (edi_5 & 0x00000200) == 0x00000000 l000000000040A560
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A560:
	Mem151[rsi + 0x000000000000000A:byte] = 0x20
	Mem152[rsi + 0x000000000000000B:byte] = 0x00
	Mem163[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFB5) + 0x00000078)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax + 0x00000077) rdx:<invalid> edx:eax

l000000000040A545:
	Mem136[rsi + 0x000000000000000A:byte] = 0x20
	Mem137[rsi + 0x000000000000000B:byte] = 0x00
	Mem148[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFE0) + 0x00000074)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax + 0x00000077) rdx:<invalid> edx:eax

fn000000000040A600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) (edi & 0x00000001) rax:<invalid> rdx:<invalid> edx:eax



word64 fn000000000040A610(word64 rdx, word64 rsi, word64 rdi, ptr64 & rbpOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rbp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040A610_entry:
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A610:
	word64 rdx_7
	word64 rsp_8
	word64 rbp_9
	word64 rsi_10
	word64 rdi_11
	word32 r14d_12
	word64 rax_13 = fn000000000040A630(rdx, rsi, rdi, out rdx_7, out rsp_8, out rbp_9, out rsi_10, out rdi_11, out r14d_12)
	branch rax_13 == 0x0000000000000000 l000000000040A623
// DataOut: r11 r14d rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A623:
	fn0000000000410E50()
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>
// Terminates process

l000000000040A628_thunk_fn000000000040A630:
	word64 rdx_29
	word64 rsp_30
	word64 rbp_31
	word64 rsi_32
	word64 rdi_33
	word32 r14d_34
	return fn000000000040A630(rdx_7, rsi_10, rdi_11, out rdx_29, out rsp_30, out rbp_31, out rsi_32, out rdi_33, out r14d_34)
// DataOut: r11 r14d rax rbp
// DataOut (flags): 
// SymbolicIn:

l000000000040A61E:
	return rax_13
// DataOut: r11 r14d rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>

fn000000000040A610_exit:
// DataOut: r14d rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>



word64 fn000000000040A630(word64 rdx, word64 rsi, word64 rdi, ptr64 & rdxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rbp rdi rdx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A630_entry:
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A630:
	word64 rsi_28
	word64 rax_29 = fn000000000040A390(rdi, out rsi_28)
	word64 rsp_32
	word64 rax_33 = fn000000000040A400(rax_29, rax_29, out rsp_32)
	word64 rdx_37 = rax_29 - rdi
	*rdxOut = rdx_37
	Mem42[rsp_32:word64] = rdx_37 + rax_33
	word64 r14_10 = 0x0000000000000000
	word32 r14d_11
	*r14dOut = 0x00000000
	branch rax_33 == 0x0000000000000000 l000000000040A679
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A66D:
	byte r14b_135 = Mem42[rax_29 - 0x0000000000000001 + rax_33:byte] != 0x2F
	r14_10 = (uint64) r14b_135 (alias)
	word32 r14d_137
	*r14dOut = (word32) r14b_135
// DataOut: r11 r12 r14 r14d r15 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:0x0000000000000000 r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A679:
	word64 rbx_125 = rsi + 0x0000000000000001
	branch Mem42[rsi:byte] == 0x2F l000000000040A700
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A700:
	rbx_125 = rbx_125 + 0x0000000000000000
	branch Mem42[rbx_125:byte] != 0x2F l000000000040A682
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A70D:
	rbx_125 = rbx_125 + 0x0000000000000001
	branch Mem42[rbx_125 + 0x0000000000000001:byte] != 0x2F l000000000040A682
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A71A:
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A682:
	word64 rax_108
	word64 rax_52 = DPB(rax_33, strlen(rbx_125), 0)
	word64 rcx_53 = Mem42[rsp_32:word64]
	Mem54[rsp_32 + 0x0000000000000008:word64] = rax_52
	word64 rax_57 = malloc(rcx_53 + 0x0000000000000001 + r14_10 + rax_52)
	branch rax_57 == 0x0000000000000000 l000000000040A720
// DataOut: r11 r12 r13 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A720:
	rax_108 = 0x0000000000000000
// DataOut: r11 r14d rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6A8:
	word64 rax_95 = mempcpy(rax_57, rdi, Mem54[rsp_32:word64])
	Mem99[rax_95:byte] = 0x2F
	word64 rdi_100 = rax_95 + r14_10
	branch rdx == 0x0000000000000000 l000000000040A6D5
// DataOut: r11 r13 r14d rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6C3:
	Mem119[rdi_100:word64] = rdi_100 - (uint64) (Mem99[rsi:byte] == 0x2F)
// DataOut: r11 r13 r14d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6D5:
	word64 rdx_104 = Mem99[rsp_32 + 0x0000000000000008:word64]
	*rdxOut = rdx_104
	Mem107[mempcpy(rdi_100, rbx_125, rdx_104):byte] = 0x00
	rax_108 = rax_57
// DataOut: r11 r14d rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> al:Test(EQ,Z) edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6E8:
	word64 rsp_78 = Mem54[rsp_32 + 0x0000000000000028:word64]
	word64 rbp_80
	*rbpOut = Mem54[rsp_78 + 0x0000000000000008:word64]
	word64 rsi_82
	*rsiOut = Mem54[rsp_78 + 0x0000000000000010:word64]
	word64 rdi_84
	*rdiOut = Mem54[rsp_78 + 0x0000000000000018:word64]
	word64 rsp_85
	*rspOut = rsp_78 + 0x0000000000000020
	return rax_108
// DataOut: r11 r14d rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A630_exit:
// DataOut: r14d rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040A730(word64 rdi, word32 r14d, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r14d rdi
// LiveOut: eax r9 rax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A730_entry:
	*r9Out = r9
// DataOut: fs r11d r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A730:
	word64 rdx_124 = Mem0[rdi:word64]
	byte cl_127 = (byte) (word32) Mem0[rdx_124:byte]
	branch cl_127 == 0x00 l000000000040A7CD
// DataOut: cl fs r11d r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A7CD:
	return 0x0000000000000000
// DataOut: eax fs r11d r12 r13d r14 r15 r15d r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A73E:
	byte r8b_140 = 0x00
	word64 rax_107 = 0x0000000000000000
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A776:
	branch r8b_140 != 0x00 l000000000040A750
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A750:
	r8b_140 = 0x00 (alias)
	branch (word32) (uint64) ((word32) (uint64) ((int32) cl_127 & 0xFFFFFFDF) - 0x00000041) <=u 0x00000019 l000000000040A768
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A77B:
	branch cl_127 == 0x2E l000000000040A7B8
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7B8:
	branch rax_107 == 0x0000000000000000 l000000000040A7C8
// DataOut: fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7C8:
// DataOut: fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7BD:
	rax_107 = 0x0000000000000001
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A780:
	word32 esi_111 = (int32) cl_127
	r9 = DPB(r9, r14 - 0x0000000000000030, 0) (alias)
	*r9Out = r9
	branch r14 <=u 0x0000000000000039 l000000000040A768
// DataOut: cl eax esi fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A78D:
	branch (word32) (uint64) ((word32) (uint64) (esi_111 & 0xFFFFFFDF) - 0x00000041) >u 0x00000019 l000000000040A761
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:(int32) cl r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A761:
	branch cl_127 == 0x7E l000000000040A768
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A764_1:
	rax_107 = 0x0000000000000000
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A768:
	rdx_124 = rdx_124 + 0x0000000000000001
	Mem91[rdi:word64] = rdx_124
	cl_127 = (byte) (word32) Mem91[rdx_124:byte] (alias)
	branch cl_127 == 0x00 l000000000040A7B0
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A798:
	rdx_124 = rdx_124 + 0x0000000000000001
	Mem125[rdi:word64] = rdx_124
	cl_127 = (byte) (word32) Mem125[rdx_124:byte] (alias)
	branch cl_127 != 0x00 l000000000040A776
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7A6:
// DataOut: eax fs r11d r12 r13d r14 r15 r15d r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7B0:
	return rax_107
// DataOut: eax fs r11d r12 r13d r14 r15 r15d r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

fn000000000040A730_exit:
// DataOut: eax r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> rax:<invalid> r8:0x0000000000000000 r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030



word64 fn000000000040AB30(word32 eax, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi
// LiveOut: rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AB30_entry:
// DataOut: eax fs r11d r13 r14 r15b rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB30:
	word64 rax_11 = DPB(rax, clock_gettime(0x0000000000000000, rdi), 0)
	word32 eax_12 = clock_gettime(0x0000000000000000, rdi)
	branch eax_12 == 0x00000000 l000000000040AB67
// DataOut: fs r11d r13 r14 r15b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB46:
	word64 rsp_38
	word64 rbx_39
	word64 rsi_40
	word64 rdi_41
	word32 edi_42
	byte SZO_43
	byte C_44
	byte SCZO_45
	word64 rax_46
	word32 eax_47
	byte Z_48
	word32 esi_49
	call gettimeofday (retsize: 8; depth: 28)
		uses: C_35,dwLoc04_4,eax_12,edi,esi_33,qwLoc04,rax_11,rbx_7,rdi_36,rsi_32,rsp_9,SCZO,SZO_34,Z_14
		defs: C_44,eax_47,edi_42,esi_49,rax_46,rbx_39,rdi_41,rsi_40,rsp_38,SCZO_45,SZO_43,Z_48
	Mem52[rbx_39:word64] = qwLoc14
	Mem57[rbx_39 + 0x0000000000000008:word64] = qwLoc0C *s 1000
// DataOut: fs r11d r13 r14 r15b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:rdi rbx:rdi rdi:0x0000000000000000 rax:DPB(rax, <invalid>, 0) -4(fp):rbx
// LocalsOut: fp(64)

l000000000040AB67:
	return fp + 0x0000000000000004
// DataOut: fs r11d r13 r14 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:<invalid> rbx:rdi rdi:<invalid> rax:<invalid> -4(fp):rbx

fn000000000040AB30_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rsi:<invalid> rbx:rbx rdi:<invalid> rax:<invalid> -4(fp):rbx



void fn000000000040AB70(word64 rax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi rax rcx rdi rsi si sil
// Preserved: rsp
fn000000000040AB70_entry:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AB70:
	word64 rsp_7
	byte SCZO_8
	word32 esi_9
	word64 rsi_10
	byte SZO_11
	byte C_12
	word64 rax_13
	byte Z_14
	word32 eax_15
	word32 edi_16
	word64 rdi_17
	word32 ecx_18
	word64 rcx_19
	byte al_20
	call setlocale (retsize: 8; depth: 16)
		uses: C_6,esi_4,rsi_3,rsp_2,SZO_5
		defs: al_20,C_12,eax_15,ecx_18,edi_16,esi_9,rax_13,rcx_19,rdi_17,rsi_10,rsp_7,SCZO_8,SZO_11,Z_14
	branch rax_13 == 0x0000000000000000 l000000000040ABB0
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ABB0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

l000000000040AB80:
	branch Mem0[rax_13:byte] != 0x43 l000000000040AB98
// DataOut: rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB85:
	branch Mem0[rax_13 + 0x0000000000000001:byte] != 0x00 l000000000040AB98
// DataOut: rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB98:
	word64 rsi_46 = rax_13
	word64 rdi_48 = 0x0000000000415E6A
	word64 rcx_50 = 0x0000000000000006
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5:
	branch rcx_50 == 0x0000000000000000 l000000000040ABA7
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5_1:
	rsi_46 = rsi_94 + 0x0000000000000001
	rdi_48 = rdi_95 + 0x0000000000000001
	rcx_50 = rcx_50 - 0x0000000000000001
	word64 rsi_94 = rsi_46
	word64 rdi_95 = rdi_48
	branch Mem0[rsi_94:byte] != Mem0[rdi_95:byte] l000000000040ABA5
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA7:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040AB8B:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

fn000000000040AB70_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid> al:Test(NE,Z)



word64 fn000000000040ABC0(word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040ABC0_entry:
// DataOut: r11 r12 r13 r14 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABC0:
	word64 rdi_119
	branch rdi >u 0x0000000000000009 l000000000040AC4F
// DataOut: r11 r12 r13 r14 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC4F:
	rdi_119 = rdi | 0x0000000000000001
	branch (rdi | 0x0000000000000001) != 0xFFFFFFFFFFFFFFFF l000000000040ABCF
// DataOut: r11 r12 r13 r14 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC5D:
// DataOut: r11 r12 r13 r14 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:rdi | 0x0000000000000001

l000000000040ABCA:
	rdi_119 = 0x000000000000000B
// DataOut: r11 r12 r13 r14 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABCF:
// DataOut: r11 r12 r13 r14 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040ABE0:
	word64 rcx_103
	branch rdi_119 <=u 0x0000000000000009 l000000000040AC48
// DataOut: r11 r12 r13 r14 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC48:
	rcx_103 = 0x0000000000000003
// DataOut: r11 r12 r13 r14 r8 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040ABE6:
	word64 rdx_rax_82 = rdi_119 *u 0x00000000AAAAAAAB
	branch rdi_119 == (rdx_rax_82 >>u 0x0000000000000001) + (rdx_rax_82 >>u 0x0000000000000001) * 0x0000000000000002 l000000000040AC3A
// DataOut: r11 r12 r13 r14 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040ABF8:
	word64 rsi_101 = 0x0000000000000009
	rcx_103 = 0x0000000000000003
// DataOut: r11 r12 r13 r14 r8 rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC21:
	rsi_101 = rsi_101 + r8
	rcx_103 = rcx_103 + 0x0000000000000002
	branch rsi_101 <u rdi_119 l000000000040AC10
// DataOut: r11 r12 r13 r14 r8 rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC10:
	r8 = r8 + 0x0000000000000008
	branch (uint64) (rdi_119 % rcx_103) == 0x0000000000000000 l000000000040AC3A
// DataOut: r11 r12 r13 r14 r8 rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC2D:
	branch (uint64) (rdi_119 % rcx_103) != 0x0000000000000000 l000000000040AC44
// DataOut: r11 r12 r13 r14 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC3A:
	rdi_119 = rdi_119 + 0x0000000000000002
	branch rdi_119 != 0xFFFFFFFFFFFFFFFF l000000000040ABE0
// DataOut: r11 r12 r13 r14 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC44:
	return rdi_119
// DataOut: r11 r12 r13 r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

fn000000000040ABC0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r9:0x00000000AAAAAAAB Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>



word64 fn000000000040AC80(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: al rax rsi rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AC80_entry:
// DataOut: r11 r12 r13 r13b r14 r15b r8 rax rbp rdi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC80:
	word64 rsp_11
	word64 rbx_12
	word64 rdi_13
	word64 rsi_14
	word64 rax_15
	byte SCZO_16
	byte C_17
	call Mem0[rdi + 0x0000000000000030:word32] (retsize: 4; depth: 8)
		uses: dwLoc04_4,rbx_6,rdi_8,rsi_10,rsp_2
		defs: C_17,rax_15,rbx_12,rdi_13,rsi_14,rsp_11,SCZO_16
	branch rax_15 >=u Mem0[rbx_12 + 0x0000000000000010:word64] l000000000040AC9D
// DataOut: r11 r12 r13 r13b r14 r15b r8 rax rbp rbx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC9D:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

l000000000040AC94:
	word64 rsp_25
	*rspOut = fp + 0x0000000000000004
	return (rax_15 << 0x0000000000000004) + Mem0[rbx_12:word64]
// DataOut: al r11 r12 r13 r13b r14 r15b r8 rax rbp rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

fn000000000040AC80_exit:
// DataOut: al rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx



word64 fn000000000040ACB0(word64 rax, word32 ecx, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rspOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cl ecx r11 r8 rax rdi rsi
// LiveOut: r12 rax rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040ACB0_entry:
// DataOut: cl ecx r11 r8 rax rdi rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACB0:
	word64 r13_11 = (uint64) ecx
	word64 rsi_27
	word64 rsp_122
	word64 rax_28 = fn000000000040AC80(rax, rdi, out rsp_122, out rsi_27)
	Mem30[rsi_27:word64] = rax_28
	byte r13b_13 = (byte) r13_11
	word64 r12_17 = rsi
	*r12Out = r12_17
	word64 rbp_151 = rdi
	word64 rsi_121 = Mem30[rax_28:word64]
	word64 rbx_150 = rax_28
	branch rsi_121 == 0x0000000000000000 l000000000040AD4F
// DataOut: al r11 r12 r13b r8 rbp rbx rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ACD7:
	branch rsi == rsi_121 l000000000040ACE9
// DataOut: al r11 r12 r13b r8 rbp rbx rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACDC:
	word64 rsi_175
	word64 r14_176
	word64 rdx_177
	word32 r13d_179
	word32 ecx_180
	word64 r13_181
	word64 rdi_183
	word64 rax_185
	byte SZO_186
	byte C_187
	byte Z_188
	byte SCZO_189
	byte al_190
	word32 esi_191
	word64 r9_193
	word64 r10_195
	word64 rcx_197
	word64 r12_182
	call Mem30[rdi + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_29,C_36,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_24,ecx,esi_32,r10,r11,r12_17,r13_11,r13b_13,r13d_12,r14_6,r8,r9,rax_28,rbp_21,rbx_33,rcx,rdi_173,rdx,rsi_31,rsp_26,SCZO_101,SZO_34,Z_102
		defs: al_190,C_187,ecx_180,esi_191,r10_195,r11_196,r12_182,r13_181,r13b_192,r13d_179,r14_176,r8_194,r9_193,rax_185,rbp_178,rbx_184,rcx_197,rdi_183,rdx_177,rsi_175,rsp_174,SCZO_189,SZO_186,Z_188
	branch al_190 == 0x00 l000000000040AD46
// DataOut: r11 r12 r13b r8 rbp rbx rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD46:
	word64 rax_222 = Mem30[rbx_150 + 0x0000000000000008:word64]
	branch rax_222 != 0x0000000000000000 l000000000040AD30
// DataOut: al r12 r13b rax rbp rbx rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD30:
	rsi_121 = Mem30[rax_222:word64]
	branch rsi_121 == r12_182 l000000000040AD67
// DataOut: al r12 r13b rax rbp rbx rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD38:
	word64 rsi_275
	word64 r14_276
	word64 rdx_277
	word32 r13d_279
	word32 ecx_280
	word64 r13_281
	word64 rdi_283
	word64 rax_285
	byte SZO_286
	byte C_287
	byte Z_288
	byte SCZO_289
	byte al_290
	word32 esi_291
	word64 r9_293
	word64 r8_294
	word64 r10_295
	word64 r11_296
	word64 rcx_297
	call Mem30[rbp_151 + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_223,C_226,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_24,ecx_210,esi_228,r10_216,r11_203,r12_208,r13_209,r13b_205,r13d_211,r14_213,r8_204,r9_215,rax_222,rbp_219,rbx_218,rcx_217,rdi_273,rdx_212,rsi_227,rsp_221,SCZO_229,SZO_224,Z_230
		defs: al_290,C_287,ecx_280,esi_291,r10_295,r11_296,r12_282,r13_281,r13b_292,r13d_279,r14_276,r8_294,r9_293,rax_285,rbp_278,rbx_284,rcx_297,rdi_283,rdx_277,rsi_275,rsp_274,SCZO_289,SZO_286,Z_288
	branch al_290 != 0x00 l000000000040AD60
// DataOut: r12 r13b rbp rbx rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD60:
	rax_222 = Mem30[rbx_150 + 0x0000000000000008:word64]
	rsi_121 = Mem30[rax_222:word64]
// DataOut: r12 r13b rax rbp rbx rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD67:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: r12 rax rbp rbx rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD6C:
	Mem256[rbx_150 + 0x0000000000000008:word64] = Mem30[rax_222 + 0x0000000000000008:word64]
	Mem257[rax_222:word64] = 0x0000000000000000
	Mem259[rax_222 + 0x0000000000000008:word64] = Mem257[rbp_151 + 0x0000000000000048:word64]
	Mem260[rbp_151 + 0x0000000000000048:word64] = rax_222
	word64 rsp_272
	*rspOut = Mem260[rsp_122 + 0x0000000000000010:word64] + 0x0000000000000018
	return rsi_121
// DataOut: r12 rax rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD42:
	rbx_150 = Mem30[rbx_150 + 0x0000000000000008:word64]
// DataOut: r12 r13b rbp rbx rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD4F:
	word64 rsp_100
	*rspOut = Mem30[rsp_122 + 0x0000000000000010:word64] + 0x0000000000000018
	return 0x0000000000000000
// DataOut: r12 rax rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE6:
	rsi_121 = Mem30[rbx_150:word64]
// DataOut: r11 r12 r13b r8 rbp rbx rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE9:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: r11 r12 r8 rbp rbx rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACEE:
	word64 rax_159 = Mem30[rbx_150 + 0x0000000000000008:word64]
	branch rax_159 == 0x0000000000000000 l000000000040AD98
// DataOut: r11 r12 r8 rax rbp rbx rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD98:
	Mem172[rbx_150:word64] = 0x0000000000000000
// DataOut: r12 rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACFB:
	word64 r10_165 = Mem30[r8 + 0x0000000000000008:word64]
	Mem166[r11:word64] = Mem30[r8:word64]
	Mem167[r11 + 0x0000000000000008:word64] = r10_165
	Mem168[rax_159:word64] = 0x0000000000000000
	Mem170[rax_159 + 0x0000000000000008:word64] = Mem168[rbp_151 + 0x0000000000000048:word64]
	Mem171[rbp_151 + 0x0000000000000048:word64] = rax_159
// DataOut: r12 rsi rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD1C:
	word64 rsp_134
	*rspOut = Mem30[rsp_122 + 0x0000000000000010:word64] + 0x0000000000000018
	return rsi_121
// DataOut: r12 rax rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn000000000040ACB0_exit:
// DataOut: r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



byte fn000000000040ADB0(word64 rdi, word64 r8, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & xmm0Out, ptr64 & xmm1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi xmm0 xmm1 xmm2 xmm3
// LiveOut: al xmm0 xmm1
// Trashed: SCZOP ah al ax eax rax xmm0 xmm1 xmm2 xmm3
// Preserved: rsp
fn000000000040ADB0_entry:
	*xmm0Out = xmm0
	*xmm1Out = xmm1
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ADB0:
	word64 rax_4 = Mem0[rdi:word64]
	branch r8 == 0x0000000000415EE0 l000000000040AE30
// DataOut: r11 r12 r13 r14 r15 r15d r8 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE30:
// DataOut: al r11 r12 r13 r14 r15 r15d r8 rbp rbx xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADBB:
	word128 xmm0_35 = DPB(xmm0, Mem0[rax_4 + 0x0000000000000008:real32], 0)
	*xmm0Out = xmm0_35
	branch Mem0[rax_4 + 0x0000000000000008:real32] <=u Mem0[0x0000000000415EF4:real32] l000000000040AE20
// DataOut: r11 r12 r13 r14 r15 r15d r8 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADC9:
	word128 xmm1_52
	*xmm1Out = DPB(xmm1, Mem0[0x0000000000415EF8:real32], 0)
	branch Mem0[0x0000000000415EF8:real32] <=u xmm0_35 l000000000040AE20
// DataOut: r11 r12 r13 r14 r15 r15d r8 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid>

l000000000040ADD6:
	word128 xmm1_55
	*xmm1Out = DPB(xmm1, Mem0[rax_4 + 0x000000000000000C:real32], 0)
	branch Mem0[rax_4 + 0x000000000000000C:real32] <=u Mem0[0x0000000000415EFC:real32] l000000000040AE20
// DataOut: r11 r12 r13 r14 r15 r15d r8 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:DPB(xmm1, <invalid>, 0)

l000000000040ADE4:
	word128 xmm1_58
	*xmm1Out = DPB(xmm1, Mem0[rax_4:real32], 0)
	branch Mem0[rax_4:real32] <u Mem0[0x0000000000415F00:real32] l000000000040AE20
// DataOut: r11 r12 r13 r14 r15 r15d r8 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADF1:
	word128 xmm1_62 = DPB(xmm1, Mem0[rax_4:real32] + Mem0[0x0000000000415EF4:real32], 0)
	*xmm1Out = xmm1_62
	word128 xmm2_63 = DPB(xmm2, Mem0[rax_4 + 0x0000000000000004:real32], 0)
	branch Mem0[rax_4 + 0x0000000000000004:real32] <=u xmm1_62 l000000000040AE20
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040AE03:
	branch Mem0[0x0000000000415F04:real32] <u xmm2_63 l000000000040AE20
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp rbx rdi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid>

l000000000040AE10:
	branch Mem0[rax_4 + 0x0000000000000008:real32] >u xmm1_62 l000000000040AE35
// DataOut: al r11 r12 r13 r14 r15 r15d r8 rbp rbx rdi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:DPB(xmm3, <invalid>, 0)

l000000000040AE35:
	return 0x01
// DataOut: al r11 r12 r13 r14 r15 r15d r8 rbp rbx xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:DPB(xmm3, <invalid>, 0)

l000000000040AE1A:
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp rbx rdi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:DPB(xmm3, <invalid>, 0)

l000000000040AE20:
	Mem46[rdi:word64] = 0x0000000000415EE0
	return 0x00
// DataOut: al r11 r12 r13 r14 r15 r15d r8 rbp rbx xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:DPB(xmm3, <invalid>, 0)

fn000000000040ADB0_exit:
// DataOut: al xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:DPB(xmm3, <invalid>, 0)



void fn000000000040AE40(word64 rax, word32 edx, word64 rbp, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx rax rbp rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AE40_entry:
// DataOut: dl edx rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AE40:
	byte r15b_8 = (byte) (uint64) edx
	word64 r13_108 = Mem0[rsi:word64]
	branch r13_108 >=u Mem0[rsi + 0x0000000000000008:word64] l000000000040AEEF
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE64:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE68:
	rbp = Mem0[rbp:word64]
	branch rbp == 0x0000000000000000 l000000000040AEE1
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE71:
	word64 rbx_111 = Mem0[rbp + 0x0000000000000008:word64]
	branch rbx_111 != 0x0000000000000000 l000000000040AE94
// DataOut: r12 r13 r14 r15b rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE94:
	word64 rbp_201 = Mem0[rbx_111:word64]
	word64 rsp_204
	word64 rsi_205
	rax = fn000000000040AC80(rax, rdi, out rsp_204, out rsi_205)
	word64 rdx_210 = Mem0[rbx_111 + 0x0000000000000008:word64]
	branch Mem0[rax:word64] != 0x0000000000000000 l000000000040AE80
// DataOut: r12 r13 r14 r15b rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE80:
	Mem241[rbx_111 + 0x0000000000000008:word64] = Mem0[rax + 0x0000000000000008:word64]
	Mem242[rax + 0x0000000000000008:word64] = rbx_111
	branch rdx_210 == 0x0000000000000000 l000000000040AED0
// DataOut: r12 r13 r14 r15b rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEAC:
	Mem226[rax:word64] = rbp_201
	Mem228[rdi + 0x0000000000000018:word64] = Mem226[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	Mem232[rbx_111:word64] = 0x0000000000000000
	rax = Mem232[rdi + 0x0000000000000048:word64]
	Mem235[rbx_111 + 0x0000000000000008:word64] = rax
	Mem236[rdi + 0x0000000000000048:word64] = rbx_111
	branch rdx_210 != 0x0000000000000000 l000000000040AE91
// DataOut: r12 r13 r14 r15b rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE91:
	rbx_111 = rdx_210
// DataOut: r12 r13 r14 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AECF:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED0:
	rbp = Mem0[rbp_201:word64]
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE7A:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED4:
	Mem129[rbp + 0x0000000000000008:word64] = 0x0000000000000000
	branch r15b_8 == 0x00 l000000000040AF08
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF08:
	word64 rsp_132
	word64 rsi_133
	rax = fn000000000040AC80(rax, rdi, out rsp_132, out rsi_133)
	branch Mem129[rax:word64] == 0x0000000000000000 l000000000040AF5B
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF5B:
	Mem192[rax:word64] = rbp
	Mem194[rdi + 0x0000000000000018:word64] = Mem192[rdi + 0x0000000000000018:word64] + 0x0000000000000001
// DataOut: r12 r13 r14 r15b rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF1C:
	rax = Mem129[rdi + 0x0000000000000048:word64]
	branch rax == 0x0000000000000000 l000000000040AF66
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF66:
	rax = malloc(0x0000000000000010)
	branch rax != 0x0000000000000000 l000000000040AF2F
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF75:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:0x0000000000000010 rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF26:
	Mem168[rdi + 0x0000000000000048:word64] = Mem129[rax + 0x0000000000000008:word64]
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF2F:
	word64 rdx_163 = Mem129[rax + 0x0000000000000008:word64]
	Mem164[rax:word64] = rbp
	Mem165[rax + 0x0000000000000008:word64] = rdx_163
	Mem166[rax + 0x0000000000000008:word64] = rax
// DataOut: r12 r13 r14 r15b rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF3E:
	Mem146[rbp:word64] = 0x0000000000000000
	Mem148[rsi_133 + 0x0000000000000018:word64] = Mem146[rsi_133 + 0x0000000000000018:word64] - 0x0000000000000001
	r13_108 = r13_108 + 0x0000000000000010
	branch Mem148[rsi + 0x0000000000000008:word64] >u r13_108 l000000000040AE68
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF59:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEE1:
	r13_108 = r13_108 + 0x0000000000000010
	branch Mem0[rsi + 0x0000000000000008:word64] >u r13_108 l000000000040AE68
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEEF:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040AE40_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rax:<invalid> rbx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040AFB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: ah al ax eax rax
// Preserved: rsp
fn000000000040AFB0_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AFB0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040AFB0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040B400(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// LiveOut:
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi rsp si sil sp spl xmm0 xmm1 xmm2 xmm3
// Preserved: rbx
fn000000000040B400_entry:
// DataOut: r11 r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B400:
	word64 r13_18 = rdx
	word64 r12_192 = rcx
	word64 rbp_185 = rsi
	branch rdx != 0x0000000000000000 l000000000040B42E
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l000000000040B42A_1:
	r13_18 = 0x000000000040AC60
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:rdx r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B42E:
	branch rcx != 0x0000000000000000 l000000000040B43A
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B436_1:
	r12_192 = 0x000000000040AC70
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B43A:
	word64 rax_40 = malloc(0x0000000000000050)
	branch rax_40 == 0x0000000000000000 l000000000040B598
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B598:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B44B:
	branch rsi != 0x0000000000000000 l000000000040B45B
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B457_1:
	rbp_185 = 0x0000000000415EE0
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B45B:
	Mem98[rax_40 + 0x0000000000000028:word64] = rbp_185
	word128 xmm0_103
	word128 xmm1_104
	branch fn000000000040ADB0(rax_40 + 0x0000000000000028, r8, xmm0, xmm1, xmm2, xmm3, out xmm0_103, out xmm1_104) == 0x00 l000000000040B548
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbp rbx xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B46C:
	branch Mem98[rbp_185 + 0x0000000000000010:byte] != 0x00 l000000000040B4C0
// DataOut: r11 r12 r13 r14 r15 r15d r8 rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B4C0:
	word64 rax_154 = fn000000000040ABC0(rdi, r8)
	branch rax_154 >u rax_154 l000000000040B540
// DataOut: r11 r12 r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B540:
	Mem184[rax_40 + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B4DA:
	Mem162[rax_40 + 0x0000000000000010:word64] = rax_154
	branch rax_154 == 0x0000000000000000 l000000000040B548
// DataOut: r11 r12 r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B4E3:
	word64 rax_165 = calloc(rax_154, 0x0000000000000010)
	Mem171[rax_40:word64] = rax_165
	branch rax_165 == 0x0000000000000000 l000000000040B548
// DataOut: r11 r12 r13 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B548:
	free(rax_40)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040B4F8:
	Mem173[rax_40 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem174[rax_40 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem177[r11 + 0x0000000000000030:word64] = r13_18
	Mem179[r11 + 0x0000000000000038:word64] = r12_192
	Mem180[rax_40 + 0x0000000000000008:word64] = rax_165 + (rax_154 << 0x0000000000000004)
	Mem181[r11 + 0x0000000000000040:word64] = r8
	Mem183[rax_40 + 0x0000000000000048:word64] = 0x0000000000000000
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040B52A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040B400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:rbx rsi:<invalid> xmm0:<invalid> xmm1:<invalid> r8:0x00000000FFFFFFFF xmm2:<invalid> xmm3:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040B477:
	branch rdi < 0x0000000000000000 l000000000040B578
// DataOut: r15 r15d xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040B578:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040B485:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:rdi >>u 0x0000000000000001 | (uint64) (r15d & 0x00000001) r15:(uint64) (r15d & 0x00000001) rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040B480:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040B640(word64 rdi, word64 r13, word64 r15, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r15 rdi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl eax ebp esp r12 r12b r12d r12w rax rbp rsp sp spl
// Preserved: rbx rdi
// Stack args: Stack +0004(64)
fn000000000040B640_entry:
// DataOut: r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B640:
	word64 rax_119
	word64 rbp_102 = rdi
	branch Mem0[rdi + 0x0000000000000040:word64] == 0x0000000000000000 l000000000040B655
// DataOut: r13 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B64E:
	branch Mem0[rdi + 0x0000000000000020:word64] != 0x0000000000000000 l000000000040B6C6
// DataOut: r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6C6:
	word64 r12_111 = Mem0[r15:word64]
	branch r12_111 >=u Mem0[r15 + 0x0000000000000008:word64] l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6CF:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6D0:
	word64 rdi_104 = Mem0[r12_111:word64]
	branch rdi_104 != 0x0000000000000000 l000000000040B6E3
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6E3:
	word64 rsp_123
	word64 rdi_125
	word64 rbx_126
	byte SCZO_127
	byte Z_128
	word64 rax_129
	byte C_132
	byte SZO_133
	byte CZ_134
	word64 r15_135
	call Mem0[rbp_102 + 0x0000000000000040:word32] (retsize: 4; depth: 16)
		uses: C_108,CZ_101,dwLoc04_4,dwLoc08_7,dwLoc0C_12,qwLoc0C,r12_99,r13_97,r15_96,rax_98,rbp_102,rbx_105,rdi_104,rsp_103,SCZO_100,SZO_106,Z_107
		defs: C_132,CZ_134,r12_130,r13_131,r15_135,rax_129,rbp_124,rbx_126,rdi_125,rsp_123,SCZO_127,SZO_133,Z_128
	branch Mem0[rbx_126 + 0x0000000000000008:word64] != 0x0000000000000000 l000000000040B6E0
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6E0:
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6DC:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6EF:
	rax_119 = Mem0[rbp_102 + 0x0000000000000008:word64]
	r12_111 = r12_111 + 0x0000000000000010
	branch rax_119 >u r12_111 l000000000040B6D0
// DataOut: r12 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6FC:
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B655:
	rax_119 = Mem0[rdi + 0x0000000000000008:word64]
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B659:
	word64 r12_58 = Mem0[r13:word64] + 0x0000000000000008
	branch r12_58 >=u rax_119 l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B662:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B668:
	word64 rdi_65 = Mem0[r12_58 + 0x0000000000000000:word64]
	branch rdi_65 != 0x0000000000000000 l000000000040B67B
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B67B:
	word64 rbx_78 = Mem0[rdi_65 + 0x0000000000000008:word64]
	free(rdi_65)
	branch rbx_78 != 0x0000000000000000 l000000000040B678
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B678:
	rdi_65 = rbx_78
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B672:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B689:
	r12_58 = r12_58 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_58 l000000000040B668
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B693:
	word64 rdi_25 = Mem0[rbp_102 + 0x0000000000000048:word64]
	branch rdi_25 != 0x0000000000000000 l000000000040B6A3
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6A3:
	word64 rbx_43 = Mem0[rdi_25 + 0x0000000000000008:word64]
	free(rdi_25)
	branch rbx_43 != 0x0000000000000000 l000000000040B6A0
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6A0:
	rdi_25 = rbx_43
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B69C:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040B6B1:
	free(Mem0[rbp_102:word64])
	free(rbp_102)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040B640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp r12:<invalid> rax:<invalid> rdi:rdi rbx:rbx -12(fp):rbx -8(fp):rbp -4(fp):fp



word32 fn000000000040B8F0(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rsi xmm0 xmm1
// LiveOut: eax rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040B8F0_entry:
// DataOut: r11 r8 rax rdi rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B8F0:
	branch rsi == 0x0000000000000000 l000000000040BA67
// DataOut: r11 r8 rax rdi rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BA67:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000001C rbp:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B904:
	word64 rsp_29
	word64 r12_30
	word64 rax_31 = fn000000000040ACB0(rax, 0x00000000, rsi, rdi, r8, r11, out rsp_29, out r12_30)
	branch rax_31 == 0x0000000000000000 l000000000040B938
// DataOut: r12 rax rbx rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000001C rbp:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B938:
	branch Mem0[rdi + 0x0000000000000018:word64] < 0x0000000000000000 l000000000040BA70
// DataOut: eax rax rbx xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BA70:
// DataOut: rbx xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B945:
// DataOut: rbx xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B94A:
	branch Mem0[rdi + 0x0000000000000010:word64] < 0x0000000000000000 l000000000040BA90
// DataOut: eax rax xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BA90:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B960:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:(uint64) (eax & 0x00000001) xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B95B:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B91B:
	branch r12_30 == 0x0000000000000000 l000000000040B9B8
// DataOut: r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B9B8:
	word64 rsp_70
	*rspOut = Mem0[rsp_29 + 0x0000000000000020:word64] + 0x0000000000000008
	return 0x00000000
// DataOut: eax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040B924:
	Mem48[r12_30:word64] = rax_31
	word64 rsp_58
	*rspOut = Mem48[rsp_29 + 0x0000000000000020:word64] + 0x0000000000000008
	return 0x00000000
// DataOut: eax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040B8F0_exit:
// DataOut: eax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rdx:fp - 0x0000000000000014 rcx:<invalid> rbx:<invalid> rax:0x0000000000000000 r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



void fn000000000040BB50(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rsi xmm0 xmm1
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040BB50_entry:
// DataOut: r11 r8 rax rdi rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BB50:
	word64 rsp_16
	word32 eax_17 = fn000000000040B8F0(rax, rsi, rdi, r8, r11, xmm0, xmm1, out rsp_16)
	branch eax_17 == 0xFFFFFFFF l000000000040BB80
// DataOut: eax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040BB80:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rax:0x0000000000000000 r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -4(fp):rbx

l000000000040BB67:
	branch eax_17 != 0x00000000 l000000000040BB72
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rax:0x0000000000000000 r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -4(fp):rbx

l000000000040BB6C_1:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -4(fp):rbx

l000000000040BB72:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -4(fp):rbx

fn000000000040BB50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> r14:<invalid> r13:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -4(fp):rbx



void fn000000000040BB90(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rsi xmm0 xmm1
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040BB90_entry:
// DataOut: r11 r8 rax rdi rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BB90:
	word64 rsp_22
	word64 r12_23
	branch fn000000000040ACB0(rax, 0x00000001, rsi, rdi, r8, r11, out rsp_22, out r12_23) == 0x0000000000000000 l000000000040BD08
// DataOut: rbx rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040BD08:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBB6:
	word64 rdx_44 = Mem0[rsp_22 + 0x0000000000000008:word64]
	Mem46[rdi + 0x0000000000000020:word64] = Mem0[rdi + 0x0000000000000020:word64] - 0x0000000000000001
	branch Mem46[rdx_44:word64] == 0x0000000000000000 l000000000040BBD0
// DataOut: rbx rsp xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBD0:
	word64 rax_50 = Mem46[rdi + 0x0000000000000018:word64]
	Mem56[rdi + 0x0000000000000018:word64] = rax_50 - 0x0000000000000001
	branch rax_50 < 0x0000000000000001 l000000000040BCE8
// DataOut: eax rax rbx xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCE8:
// DataOut: rbx xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBE5:
// DataOut: rbx xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBEA:
	branch Mem56[rdi + 0x0000000000000010:word64] < 0x0000000000000000 l000000000040BCC8
// DataOut: eax rax xmm1
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCC8:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BC00:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:(uint64) (eax & 0x00000001) xmm0:<invalid> xmm1:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBFB:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBC6:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040BB90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040BD70(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r14dOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs r8 rbp rcx rdi rsi
// LiveOut: r11 r11d r14d r15 r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040BD70_entry:
	def fp
	def rdi
	def edx
	def rsi
	def rbp
	def rbx
	def rcx
	def r8
	def fs
	def Mem0
	def bLocB0
	def qwLoc18
	def qwLoc10
	def qwLoc08
	def rspOut
	def rbpOut
	def r8Out
	def r9Out
	def r11Out
	def r14dOut
	def r15Out
	def dwLoc74
	def qwLoc90
	def qwLoc98
	def rLoc4
	def wLoc6A
	def wLoc6C
	def rLoc90
	def rLoc3
	def rLoc2
	def qwLoc68
	def rLoc1
	def rLocD0
// DataOut: edx fs r8 r9 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BD70:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000004
	dwLoc04_4 = rdi
	rax_6 = (uint64) edx
	eax_7 = (word32) rax_6 (alias)
	rax_8 = (uint64) (eax_7 & 0x00000003)
	eax_9 = (word32) rax_8 (alias)
	rsp_10 = fp - 0x0000000000000008
	dwLoc08_12 = rsi
	r14_13 = rsi
	r14d_14 = (word32) r14_13 (alias)
	rsp_15 = fp - 0x000000000000000C
	dwLoc0C_17 = rbp
	v12_18 = fp - 0x000000000000000C
	rsp_19 = fp - 0x0000000000000010
	dwLoc10_20 = fp - 0x000000000000000C
	r12_21 = rdi
	r12d_22 = (word32) r12_21 (alias)
	rsp_23 = fp - 0x0000000000000014
	dwLoc14_24 = rbp
	rsp_25 = fp - 0x0000000000000018
	dwLoc18_27 = rbx
	rbx_29 = rcx
	ebx_30 = (word32) rbx_29 (alias)
	rsp_31 = fp - 0x00000000000000D0
	dwLoc98_32 = eax_9
	rax_33 = (uint64) edx
	eax_34 = (word32) rax_33 (alias)
	qwLocA0_35 = rsi
	rax_36 = (uint64) (eax_34 & 0x00000020)
	eax_37 = (word32) rax_36 (alias)
	dwLocB0_38 = edx
	qwLocA8_40 = r8
	rcx_43 = Mem0[fs:0x00000028:word64]
	qwLoc28_44 = rcx_43
	rcx_45 = 0x0000000000000000
	SCZO_46 = cond(eax_37 - 0x00000001)
	C_47 = SCZO_46 (alias)
	dwLoc78_48 = eax_37
	rax_49 = (uint64) (0x00000000 - C_47)
	eax_50 = (word32) rax_49 (alias)
	dwLocAC_51 = eax_50
	v20_52 = dwLocAC_51 & 0xFFFFFFE8
	dwLocAC_53 = v20_52
	SZO_54 = cond(dwLocAC_53)
	v21_55 = dwLocAC_53 + 0x00000400
	dwLocAC_56 = v21_55
	SCZO_57 = cond(v21_55)
	call localeconv (retsize: 8; depth: 216)
		uses: C_47,dwLoc04_4,dwLoc08_12,dwLoc0C_17,dwLoc10_20,dwLoc14_24,dwLoc18_27,dwLoc78_48,dwLoc98_32,dwLocAC_56,dwLocB0_38,eax_50,ebx_30,edx,fs,qwLoc28_44,qwLocA0_35,qwLocA8_40,r12_21,r12d_22,r14_13,r14d_14,r8,rax_49,rbp,rbx_29,rcx_45,rdi,rsi,rsp_31,SCZO_57,SZO_54
		defs: ah_92,al_98,ax_93,C_64,cl_85,CZ_79,CZP_90,dil_97,dl_95,eax_60,ebx_82,ecx_74,edi_84,edx_61,esi_88,fs_73,P_94,r10_83,r10b_101,r10d_100,r11_77,r12_68,r12d_89,r13_76,r14_66,r14d_91,r15_75,r15d_99,r8_72,r9_87,r9d_86,rax_62,rbp_67,rbx_69,rcx_70,rdi_59,rdx_78,rsi_65,rsp_58,S_81,SCZO_71,sil_96,SZO_63,Z_80
	r15_102 = Mem0[r8_72:word64]
	r15d_103 = (word32) r15_102 (alias)
	r13_104 = rax_62
	rdi_105 = r15_102
	rax_106 = DPB(rax_62, strlen(rdi_105), 0)
	rbp_107 = Mem0[rbp_67 + 0x0000000000000010:word64]
	r11_108 = rax_106
	r13_109 = Mem0[r13_104 + 0x0000000000000008:word64]
	rax_110 = rax_106 - 0x0000000000000001
	rdx_111 = 0x0000000000000001
	edx_112 = (word32) rdx_111 (alias)
	dl_113 = (byte) rdx_111 (alias)
	SCZO_114 = cond(rax_110 - 0x0000000000000010)
	C_115 = SCZO_114 (alias)
	SZO_116 = SCZO_114 (alias)
	Z_117 = SCZO_114 (alias)
	CZ_118 = SCZO_114 (alias)
	S_119 = SCZO_114 (alias)
	CZP_120 = SCZO_114 (alias)
	rdi_121 = r13_109
	rax_122 = 0x0000000000413990
	rdx_rax_123 = SEQ(rdx_111, rax_122) (alias)
	edx_eax_124 = rax_122 (alias)
	branch rax_110 <u 0x0000000000000010 l000000000040BE0A
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE06_1:
	r11_1858 = 0x0000000000000001
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0A:
	r11_125 = PHI(r11_108, r11_1858)
	branch rax_110 <u 0x0000000000000010 l000000000040BE0E
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0A_1:
	r15_1856 = 0x0000000000413990
	r15d_1857 = (word32) r15_1856 (alias)
// DataOut: bx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0E:
	r15_126 = PHI(r15_102, r15_1856)
	r15d_127 = PHI(r15d_103, r15d_1857)
	qwLoc80_128 = r11_125
	rax_129 = 0x0000000000413990
	SCZO_130 = cond(0x000000000041397F)
	C_131 = SCZO_130 (alias)
	rax_132 = 0x0000000000416919
	rdx_rax_133 = SEQ(rdx_111, rax_132) (alias)
	edx_eax_134 = rax_132 (alias)
	r11_135 = qwLoc80_128
	branch 0x000000000041397F <u 0x0000000000000000 l000000000040BE2A
// DataOut: bx fs r11 r11d r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE26_1:
	r13_1855 = 0x0000000000416919
// DataOut: bx fs r11 r11d r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE2A:
	r13_136 = PHI(r13_109, r13_1855)
	rax_137 = r14_66
	rdx_rax_138 = SEQ(rdx_111, rax_137) (alias)
	edx_eax_139 = rax_137 (alias)
	r8_140 = r8_72 + 648
	SCZO_141 = cond(qwLocA8_40 - rbx_69)
	CZ_142 = SCZO_141 (alias)
	qwLocB8_143 = rax_137
	branch qwLocA8_40 >u rbx_69 l000000000040C0E0
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0E0:
	SZO_1789 = cond(rbx_69 & rbx_69)
	Z_1790 = SZO_1789 (alias)
	C_1791 = false
	branch Test(EQ,Z_1790) l000000000040BE59
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0E9:
	rax_1792 = qwLocA8_40
	rdx_1793 = 0x0000000000000000
	rdx_rax_1794 = SEQ(rdx_1793, rax_1792) (alias)
	v35_1795 = rdx_rax_1794
	rdx_1796 = (uint64) (v35_1795 % rbx_69)
	edx_1797 = (word32) rdx_1796 (alias)
	dl_1798 = (byte) rdx_1796 (alias)
	rax_1799 = (uint64) (v35_1795 /u rbx_69)
	rdx_rax_1800 = SEQ(rdx_1796, rax_1799) (alias)
	edx_eax_1801 = rax_1799 (alias)
	SZO_1802 = cond(rdx_1796 & rdx_1796)
	Z_1803 = SZO_1802 (alias)
	C_1804 = false
	rsi_1805 = rax_1799
	sil_1806 = (byte) rsi_1805 (alias)
	esi_1807 = (word32) rsi_1805 (alias)
	branch Test(NE,Z_1803) l000000000040BE59
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0FF:
	rdx_1808 = 0x0000000000000000
	rax_1809 = r12_68
	rdx_rax_1810 = SEQ(rdx_1808, rax_1809) (alias)
	v36_1811 = rdx_rax_1810
	rdx_1812 = (uint64) (v36_1811 % rsi_1805)
	rax_1813 = (uint64) (v36_1811 /u rsi_1805)
	rdi_1814 = rdx_1812 + rdx_1812 * 0x0000000000000004
	r10_1815 = rax_1813
	r10d_1816 = (word32) r10_1815 (alias)
	r10b_1817 = (byte) r10_1815 (alias)
	rdx_1818 = 0x0000000000000000
	rax_1819 = rdi_1814 + rdi_1814
	rdx_rax_1820 = SEQ(rdx_1818, rax_1819) (alias)
	v38_1821 = rdx_rax_1820
	rdx_1822 = (uint64) (v38_1821 % rsi_1805)
	rax_1823 = (uint64) (v38_1821 /u rsi_1805)
	eax_1824 = (word32) rax_1823 (alias)
	rdx_1825 = rdx_1822 + rdx_1822
	edx_1826 = (word32) rdx_1825 (alias)
	rdx_rax_1827 = SEQ(rdx_1825, rax_1823) (alias)
	edx_eax_1828 = rdx_1825 (alias)
	dl_1829 = (byte) rdx_1825 (alias)
	rdi_1830 = (uint64) eax_1824
	edi_1831 = (word32) rdi_1830 (alias)
	dil_1832 = (byte) rdi_1830 (alias)
	SCZO_1833 = cond(rsi_1805 - rdx_1825)
	C_1834 = SCZO_1833 (alias)
	SZO_1835 = SCZO_1833 (alias)
	Z_1836 = SCZO_1833 (alias)
	CZ_1837 = SCZO_1833 (alias)
	S_1838 = SCZO_1833 (alias)
	CZP_1839 = SCZO_1833 (alias)
	branch Test(ULE,CZ_1837) l000000000040C6E0
// DataOut: edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) (rdx_rax /u rcx) r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:(uint64) (rdx_rax % rcx) r8:r8 + 648 rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C6E0:
	rcx_1847 = (uint64) (0x00000000 - C_1834)
	ecx_1848 = (word32) rcx_1847 (alias)
	rcx_1849 = (uint64) ~ecx_1848
	ecx_1850 = (word32) rcx_1849 (alias)
	rcx_1851 = (uint64) (ecx_1850 + 0x00000003)
	ecx_1852 = (word32) rcx_1851 (alias)
	cl_1853 = (byte) rcx_1851 (alias)
	SCZO_1854 = cond(ecx_1852)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) eax rbp:<invalid> r11:<invalid> rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) + (uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) r8:r8 + 648 rsi:(uint64) (rdx_rax /u rcx) r10:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C125:
	rcx_1840 = 0x0000000000000000
	SZO_1841 = cond(rdx_1825 & rdx_1825)
	Z_1842 = SZO_1841 (alias)
	C_1843 = false
	cl_1844 = Test(NE,Z_1842)
	rcx_1845 = DPB(rcx_1840, cl_1844, 0) (alias)
	ecx_1846 = DPB(ecx_74, cl_1844, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) eax rbp:<invalid> r11:<invalid> rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) + (uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) r8:r8 + 648 rsi:(uint64) (rdx_rax /u rcx) r10:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040BE43:
	rdx_1745 = 0x0000000000000000
	rax_1746 = rbx_69
	rdx_rax_1747 = SEQ(rdx_1745, rax_1746) (alias)
	v28_1748 = rdx_rax_1747
	rdx_1749 = (uint64) (v28_1748 % qwLocA8_40)
	edx_1750 = (word32) rdx_1749 (alias)
	dl_1751 = (byte) rdx_1749 (alias)
	rax_1752 = (uint64) (v28_1748 /u qwLocA8_40)
	eax_1753 = (word32) rax_1752 (alias)
	rdx_rax_1754 = SEQ(rdx_1749, rax_1752) (alias)
	edx_eax_1755 = rax_1752 (alias)
	ah_1756 = SLICE(rax_1752, byte, 8) (alias)
	ax_1757 = (word16) rax_1752 (alias)
	al_1758 = (byte) rax_1752 (alias)
	SZO_1759 = cond(rdx_1749 & rdx_1749)
	Z_1760 = SZO_1759 (alias)
	C_1761 = false
	rcx_1762 = rax_1752
	ecx_1763 = (word32) rcx_1762 (alias)
	cl_1764 = (byte) rcx_1762 (alias)
	branch Test(EQ,Z_1760) l000000000040C2F0
// DataOut: bx fs r11 r11d r12 r12d r13 r14d r15 r9 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C2F0:
	r10_1765 = rax_1752
	rdx_1766 = 0x0000000000000000
	r10_1767 = r10_1765 *s r12_68
	r10d_1768 = (word32) r10_1767 (alias)
	r10b_1769 = (byte) r10_1767 (alias)
	rax_1770 = r10_1767
	rdx_rax_1771 = SEQ(rdx_1766, rax_1770) (alias)
	v72_1772 = rdx_rax_1771
	rdx_1773 = (uint64) (v72_1772 % rcx_1762)
	edx_1774 = (word32) rdx_1773 (alias)
	dl_1775 = (byte) rdx_1773 (alias)
	rax_1776 = (uint64) (v72_1772 /u rcx_1762)
	rdx_rax_1777 = SEQ(rdx_1773, rax_1776) (alias)
	edx_eax_1778 = rax_1776 (alias)
	SCZO_1779 = cond(rax_1776 - r12_68)
	Z_1780 = SCZO_1779 (alias)
	branch Test(NE,Z_1780) l000000000040BE59
// DataOut: bx fs r10 r10b r10d r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) (rdx_rax /u r8) r14:rsi r12:rdi rbx:rcx rcx:(uint64) (rdx_rax /u (r8 + 648)) r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:(uint64) (rdx_rax % r8) r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C308:
	rcx_1781 = 0x0000000000000000
	ecx_1782 = (word32) rcx_1781 (alias)
	cl_1783 = (byte) rcx_1781 (alias)
	rdi_1784 = 0x0000000000000000
	edi_1785 = (word32) rdi_1784 (alias)
	dil_1786 = (byte) rdi_1784 (alias)
	SZO_1787 = cond(edi_1785)
	C_1788 = false
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u (r8 + 1296))) r14:rsi r12:rdi rbx:rcx rcx:(uint64) (rdx_rax /u (r8 + 648)) r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u (r8 + 1296))) r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C12D:
	r10b_1288 = PHI(r10b_1817, r10b_1817, r10b_1769)
	r10d_1289 = PHI(r10d_1816, r10d_1816, r10d_1768)
	dil_1290 = PHI(dil_1832, dil_1832, dil_1786)
	sil_1291 = PHI(sil_1806, sil_1806, sil_96)
	CZP_1292 = PHI(CZP_1839, CZP_1839, CZP_120)
	esi_1293 = PHI(esi_1807, esi_1807, esi_88)
	edi_1294 = PHI(edi_1831, edi_1831, edi_1785)
	r10_1295 = PHI(r10_1815, r10_1815, r10_1767)
	S_1296 = PHI(S_1838, S_1838, S_119)
	CZ_1297 = PHI(CZ_1837, CZ_1837, CZ_142)
	ecx_1298 = PHI(ecx_1846, ecx_1852, ecx_1782)
	rcx_1299 = PHI(rcx_1845, rcx_1851, rcx_1781)
	cl_1300 = PHI(cl_1844, cl_1853, cl_1783)
	rax_1301 = PHI(rax_1823, rax_1823, rax_1776)
	eax_1302 = PHI(eax_1824, eax_1824, eax_1753)
	ah_1303 = PHI(ah_92, ah_92, ah_1756)
	ax_1304 = PHI(ax_93, ax_93, ax_1757)
	al_1305 = PHI(al_98, al_98, al_1758)
	rdx_1306 = PHI(rdx_1825, rdx_1825, rdx_1773)
	edx_1307 = PHI(edx_1826, edx_1826, edx_1774)
	rdx_rax_1308 = PHI(rdx_rax_1827, rdx_rax_1827, rdx_rax_1777)
	edx_eax_1309 = PHI(edx_eax_1828, edx_eax_1828, edx_eax_1778)
	dl_1310 = PHI(dl_1829, dl_1829, dl_1775)
	SCZO_1311 = PHI(SCZO_1833, SCZO_1854, SCZO_1779)
	rsi_1312 = PHI(rsi_1805, rsi_1805, rsi_65)
	rdi_1313 = PHI(rdi_1830, rdi_1830, rdi_1784)
	r9_1314 = (uint64) dwLocB0_38
	r9d_1315 = (word32) r9_1314 (alias)
	r8_1316 = qwLocB8_143
	rbx_1317 = 0x00000000FFFFFFFF
	ebx_1318 = (word32) rbx_1317 (alias)
	r9_1319 = (uint64) (r9d_1315 & 0x00000010)
	r9d_1320 = (word32) r9_1319 (alias)
	SZO_1321 = cond(r9d_1320)
	Z_1322 = SZO_1321 (alias)
	C_1323 = false
	branch Test(EQ,Z_1322) l000000000040C530
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C146:
	rsi_1519 = (uint64) dwLocAC_56
	sil_1520 = (byte) rsi_1519 (alias)
	esi_1521 = (word32) rsi_1519 (alias)
	SCZO_1522 = cond(r10_1295 - rsi_1519)
	C_1523 = SCZO_1522 (alias)
	branch Test(ULT,C_1523) l000000000040C710
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:(uint64) (rdx_rax /u rcx) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C710:
	r8_1740 = qwLocB8_143
	rbx_1741 = 0x0000000000000000
	ebx_1742 = (word32) rbx_1741 (alias)
	SZO_1743 = cond(ebx_1742)
	C_1744 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C153:
	rbx_1524 = 0x0000000000000000
	ebx_1525 = (word32) rbx_1524 (alias)
	SZO_1526 = cond(ebx_1525)
	C_1527 = false
	r12_1528 = (uint64) dwLocAC_56
	r12d_1529 = (word32) r12_1528 (alias)
// DataOut: ebx ecx edi fs r10 r11 r11d r12d r13 r15 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C17D:
	r10_1530 = PHI(r10_1295, r10_1550)
	r14_1531 = PHI(r14_66, r14_1569)
	ebx_1532 = PHI(ebx_1525, ebx_1585)
	ecx_1533 = PHI(ecx_1298, ecx_1578)
	SZO_1534 = PHI(SZO_1526, SZO_1581)
	Z_1535 = PHI(Z_1322, Z_1593)
	C_1536 = PHI(C_1527, C_1583)
	edx_1537 = PHI(edx_1307, edx_1559)
	rbx_1538 = PHI(rbx_1524, rbx_1584)
	rdi_1539 = PHI(rdi_1313, rdi_1570)
	rax_1540 = r10_1530
	rdx_1541 = 0x0000000000000000
	rdx_rax_1542 = SEQ(rdx_1541, rax_1540) (alias)
	v48_1543 = rdx_rax_1542
	rdx_1544 = (uint64) (v48_1543 % rsi_1519)
	rax_1545 = (uint64) (v48_1543 /u rsi_1519)
	r8_1546 = rax_1545
	eax_1547 = rdx_1544 + rdx_1544 * 0x0000000000000004
	rax_1548 = DPB(rax_1545, eax_1547, 0) (alias)
	rdx_1549 = 0x0000000000000000
	r10_1550 = r8_1546
	r10d_1551 = (word32) r10_1550 (alias)
	r10b_1552 = (byte) r10_1550 (alias)
	eax_1553 = rdi_1539 + rax_1548 * 0x0000000000000002
	edx_eax_1554 = SEQ(edx_1537, eax_1553) (alias)
	rdi_1555 = (uint64) ecx_1533
	edi_1556 = (word32) rdi_1555 (alias)
	rdi_1557 = (uint64) (edi_1556 >> 0x00000001)
	v50_1558 = edx_eax_1554
	edx_1559 = (uint32) (v50_1558 % r12d_1529)
	rdx_1560 = DPB(rdx_1549, edx_1559, 0) (alias)
	eax_1561 = (uint32) (v50_1558 /u r12d_1529)
	rax_1562 = DPB(rax_1548, eax_1561, 0) (alias)
	rdx_rax_1563 = DPB(rdx_rax_1542, eax_1561, 0) (alias)
	edx_eax_1564 = SEQ(edx_1559, eax_1561) (alias)
	ah_1565 = SLICE(eax_1561, byte, 8) (alias)
	ax_1566 = (word16) eax_1561 (alias)
	al_1567 = (byte) eax_1561 (alias)
	r14d_1568 = rdi_1557 + rdx_1560 * 0x0000000000000002
	r14_1569 = DPB(r14_1531, r14d_1568, 0) (alias)
	rdi_1570 = (uint64) eax_1561
	edi_1571 = (word32) rdi_1570 (alias)
	dil_1572 = (byte) rdi_1570 (alias)
	rcx_1573 = (uint64) (ecx_1533 + r14d_1568)
	ecx_1574 = (word32) rcx_1573 (alias)
	cl_1575 = (byte) rcx_1573 (alias)
	SCZO_1576 = cond(r12d_1529 - r14d_1568)
	CZ_1577 = SCZO_1576 (alias)
	branch Test(UGT,CZ_1577) l000000000040C160
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) cl:<invalid> eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C160:
	SZO_1733 = cond(ecx_1574 & ecx_1574)
	Z_1734 = SZO_1733 (alias)
	C_1735 = false
	cl_1736 = Test(NE,Z_1734)
	ecx_1737 = (word32) cl_1736
	rcx_1738 = DPB(rcx_1573, ecx_1737, 0) (alias)
	cl_1739 = (byte) ecx_1737 (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1A8:
	SCZO_1723 = cond(r12d_1529 - ecx_1574)
	C_1724 = SCZO_1723 (alias)
	rcx_1725 = (uint64) (0x00000000 - C_1724)
	ecx_1726 = (word32) rcx_1725 (alias)
	rcx_1727 = (uint64) ~ecx_1726
	ecx_1728 = (word32) rcx_1727 (alias)
	rcx_1729 = (uint64) (ecx_1728 + 0x00000003)
	ecx_1730 = (word32) rcx_1729 (alias)
	cl_1731 = (byte) rcx_1729 (alias)
	SCZO_1732 = cond(ecx_1730)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C168:
	ecx_1578 = PHI(ecx_1730, ecx_1737)
	rcx_1579 = PHI(rcx_1729, rcx_1738)
	cl_1580 = PHI(cl_1731, cl_1739)
	SZO_1581 = PHI(SZO_1534, SZO_1733)
	Z_1582 = PHI(Z_1535, Z_1734)
	C_1583 = PHI(C_1724, C_1735)
	rbx_1584 = (uint64) (ebx_1532 + 0x00000001)
	ebx_1585 = (word32) rbx_1584 (alias)
	SCZO_1586 = cond(rsi_1519 - r8_1546)
	CZ_1587 = SCZO_1586 (alias)
	branch Test(UGT,CZ_1587) l000000000040C49F
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C49F:
	SCZO_1594 = cond(r8_1546 - 0x0000000000000009)
	CZ_1595 = SCZO_1594 (alias)
	branch Test(UGT,CZ_1595) l000000000040C768
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4A9:
	SCZO_1596 = cond(dwLoc98_32 - 0x00000001)
	Z_1597 = SCZO_1596 (alias)
	branch Test(EQ,Z_1597) l000000000040C7B0
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7B0:
	rdx_1710 = (uint64) eax_1561
	edx_1711 = (word32) rdx_1710 (alias)
	rdx_1712 = (uint64) (edx_1711 & 0x00000001)
	edx_1713 = (word32) rdx_1712 (alias)
	rdx_1714 = (uint64) (edx_1713 + ecx_1578)
	edx_1715 = (word32) rdx_1714 (alias)
	SCZO_1716 = cond(edx_1715 - 0x00000002)
	SZO_1717 = SCZO_1716 (alias)
	dl_1718 = Test(GT,SZO_1717)
	edx_1719 = DPB(edx_1715, dl_1718, 0) (alias)
	rdx_1720 = DPB(rdx_1714, dl_1718, 0) (alias)
	rdx_rax_1721 = DPB(rdx_rax_1563, dl_1718, 64) (alias)
	edx_eax_1722 = DPB(edx_eax_1564, dl_1718, 32) (alias)
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4B4:
	r12_1694 = (uint64) dwLoc98_32
	r12d_1695 = (word32) r12_1694 (alias)
	SZO_1696 = cond(ecx_1578 & ecx_1578)
	dl_1697 = Test(GT,SZO_1696)
	edx_1698 = DPB(edx_1559, dl_1697, 0) (alias)
	SZO_1699 = cond(r12d_1695 & r12d_1695)
	Z_1700 = SZO_1699 (alias)
	sil_1701 = Test(EQ,Z_1700)
	esi_1702 = DPB(esi_1521, sil_1701, 0) (alias)
	rdx_1703 = (uint64) (edx_1698 & esi_1702)
	edx_1704 = (word32) rdx_1703 (alias)
	rdx_rax_1705 = SEQ(rdx_1703, rax_1562) (alias)
	edx_eax_1706 = rdx_1703 (alias)
	dl_1707 = (byte) rdx_1703 (alias)
	SZO_1708 = cond(edx_1704)
	C_1709 = false
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4C7:
	sil_1598 = PHI(sil_1701, sil_1520)
	esi_1599 = PHI(esi_1702, esi_1521)
	r12_1600 = PHI(r12_1694, r12_1528)
	r12d_1601 = PHI(r12d_1695, r12d_1529)
	rdx_1602 = PHI(rdx_1703, rdx_1720)
	edx_1603 = PHI(edx_1704, edx_1719)
	rdx_rax_1604 = PHI(rdx_rax_1705, rdx_rax_1721)
	edx_eax_1605 = PHI(edx_eax_1706, edx_eax_1722)
	dl_1606 = PHI(dl_1707, dl_1718)
	SCZO_1607 = PHI(SCZO_1596, SCZO_1716)
	SZO_1608 = cond(dl_1606 & dl_1606)
	Z_1609 = SZO_1608 (alias)
	C_1610 = false
	branch Test(EQ,Z_1609) l000000000040C788
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C788:
	SZO_1691 = cond(eax_1561 & eax_1561)
	Z_1692 = SZO_1691 (alias)
	C_1693 = false
	branch Test(NE,Z_1692) l000000000040C4DB
// DataOut: dil ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4CF:
	edi_1667 = rax_1562 + 0x0000000000000001
	rdi_1668 = DPB(rdi_1570, edi_1667, 0) (alias)
	dil_1669 = (byte) edi_1667 (alias)
	SCZO_1670 = cond(edi_1667 - 0x0000000A)
	Z_1671 = SCZO_1670 (alias)
	branch Test(EQ,Z_1671) l000000000040C7CE
// DataOut: dil ebx fs r10 r10d r11 r11d r13 r14d r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7CE:
	r10_1672 = r8_1546 + 0x0000000000000001
	r10d_1673 = (word32) r10_1672 (alias)
	r10b_1674 = (byte) r10_1672 (alias)
	SCZO_1675 = cond(r10_1672 - 0x000000000000000A)
	Z_1676 = SCZO_1675 (alias)
	branch Test(NE,Z_1676) l000000000040C7FF
// DataOut: ebx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7FF:
	rcx_1686 = 0x0000000000000000
	ecx_1687 = (word32) rcx_1686 (alias)
	cl_1688 = (byte) rcx_1686 (alias)
	SZO_1689 = cond(0x00000000)
	C_1690 = false
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) + 0x0000000000000001 r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C790:
	r10b_1643 = PHI(r10b_1674, r10b_1552)
	r10d_1644 = PHI(r10d_1673, r10d_1551)
	dil_1645 = PHI(dil_1669, dil_1572)
	edi_1646 = PHI(edi_1667, edi_1571)
	r10_1647 = PHI(r10_1672, r10_1550)
	ecx_1648 = PHI(ecx_1687, ecx_1578)
	rcx_1649 = PHI(rcx_1686, rcx_1579)
	cl_1650 = PHI(cl_1688, cl_1580)
	SCZO_1651 = PHI(SCZO_1675, SCZO_1607)
	rdi_1652 = PHI(rdi_1668, rdi_1570)
	SZO_1653 = cond(bLocB0 & 0x08)
	Z_1654 = SZO_1653 (alias)
	C_1655 = false
	branch Test(NE,Z_1654) l000000000040C7C2
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7C2:
	r8_1661 = qwLocB8_143
	rdi_1662 = 0x0000000000000000
	edi_1663 = (word32) rdi_1662 (alias)
	dil_1664 = (byte) rdi_1662 (alias)
	SZO_1665 = cond(0x00000000)
	C_1666 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C797:
	rdi_1656 = 0x0000000000000000
	edi_1657 = (word32) rdi_1656 (alias)
	dil_1658 = (byte) rdi_1656 (alias)
	SZO_1659 = cond(0x00000000)
	C_1660 = false
// DataOut: dil ebx fs r10 r10d r11 r13 r14d r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7D8:
	r8_1677 = qwLocB8_143
	rcx_1678 = 0x0000000000000000
	ecx_1679 = (word32) rcx_1678 (alias)
	cl_1680 = (byte) rcx_1678 (alias)
	rdi_1681 = 0x0000000000000000
	edi_1682 = (word32) rdi_1681 (alias)
	dil_1683 = (byte) rdi_1681 (alias)
	SZO_1684 = cond(0x00000000)
	C_1685 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) + 0x0000000000000001 r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4DB:
	edi_1611 = PHI(edi_1667, edi_1571, edi_1657)
	r10_1612 = PHI(r10_1550, r10_1550, r10_1647)
	Z_1613 = PHI(Z_1671, Z_1692, Z_1654)
	SCZO_1614 = PHI(SCZO_1670, SCZO_1607, SCZO_1651)
	rax_1615 = qwLocA0_35
	rdi_1616 = (uint64) (edi_1611 + 0x00000030)
	dil_1617 = (byte) rdi_1616 (alias)
	rdx_1618 = r11_135
	rsi_1619 = r15_126
	dwLoc74_1620 = r9d_1320
	qwLoc90_1621 = r10_1612
	qwLoc80_1622 = r11_135
	r8_1623 = r8_1546 + 0x0000000000000287
	Mem1624[rax_1615 + 0x0000000000000287:byte] = dil_1617
	r8_1625 = r8_1623 - r11_135
	rdi_1626 = r8_1625
	rax_1627 = memcpy(rdi_1626, rsi_1619, rdx_1618)
	r11_1628 = qwLoc80_1622
	r10_1629 = qwLoc90_1621
	r10d_1630 = (word32) r10_1629 (alias)
	r10b_1631 = (byte) r10_1629 (alias)
	r8_1632 = rax_1627
	r9_1633 = (uint64) dwLoc74_1620
	r9d_1634 = (word32) r9_1633 (alias)
	rcx_1635 = 0x0000000000000000
	ecx_1636 = (word32) rcx_1635 (alias)
	cl_1637 = (byte) rcx_1635 (alias)
	rdi_1638 = 0x0000000000000000
	edi_1639 = (word32) rdi_1638 (alias)
	dil_1640 = (byte) rdi_1638 (alias)
	SZO_1641 = cond(0x00000000)
	C_1642 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C174:
	SCZO_1592 = cond(ebx_1585 - 0x00000008)
	Z_1593 = SCZO_1592 (alias)
	branch Test(EQ,Z_1593) l000000000040C768
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C768:
	CZ_1588 = PHI(CZ_1587, CZ_1595)
	Z_1589 = PHI(Z_1593, Z_1582)
	SCZO_1590 = PHI(SCZO_1592, SCZO_1594)
	r8_1591 = qwLocB8_143
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C530:
	dwLoc74_1324 = PHI(dwLoc74, dwLoc74, dwLoc74_1620, dwLoc74, dwLoc74, dwLoc74)
	qwLoc90_1325 = PHI(qwLoc90, qwLoc90, qwLoc90_1621, qwLoc90, qwLoc90, qwLoc90)
	qwLoc80_1326 = PHI(qwLoc80_128, qwLoc80_128, qwLoc80_1622, qwLoc80_128, qwLoc80_128, qwLoc80_128)
	r10b_1327 = PHI(r10b_1288, r10b_1552, r10b_1631, r10b_1674, r10b_1643, r10b_1288)
	r10d_1328 = PHI(r10d_1289, r10d_1551, r10d_1630, r10d_1673, r10d_1644, r10d_1289)
	dil_1329 = PHI(dil_1290, dil_1572, dil_1640, dil_1683, dil_1664, dil_1290)
	sil_1330 = PHI(sil_1520, sil_1520, sil_1598, sil_1598, sil_1598, sil_1291)
	esi_1331 = PHI(esi_1521, esi_1521, esi_1599, esi_1599, esi_1599, esi_1293)
	edi_1332 = PHI(edi_1294, edi_1571, edi_1639, edi_1682, edi_1663, edi_1294)
	r10_1333 = PHI(r10_1295, r10_1550, r10_1629, r10_1672, r10_1647, r10_1295)
	r11_1334 = PHI(r11_135, r11_135, r11_1628, r11_135, r11_135, r11_135)
	r8_1335 = PHI(r8_1740, r8_1591, r8_1632, r8_1677, r8_1661, r8_1316)
	r9_1336 = PHI(r9_1319, r9_1319, r9_1633, r9_1319, r9_1319, r9_1319)
	r9d_1337 = PHI(r9d_1320, r9d_1320, r9d_1634, r9d_1320, r9d_1320, r9d_1320)
	r12_1338 = PHI(r12_68, r12_1528, r12_1600, r12_1600, r12_1600, r12_68)
	r12d_1339 = PHI(r12d_89, r12d_1529, r12d_1601, r12d_1601, r12d_1601, r12d_89)
	r14_1340 = PHI(r14_66, r14_1569, r14_1569, r14_1569, r14_1569, r14_66)
	r14d_1341 = PHI(r14d_91, r14d_1568, r14d_1568, r14d_1568, r14d_1568, r14d_91)
	CZ_1342 = PHI(CZ_1297, CZ_1588, CZ_1595, CZ_1595, CZ_1595, CZ_1297)
	ebx_1343 = PHI(ebx_1742, ebx_1585, ebx_1585, ebx_1585, ebx_1585, ebx_1318)
	ecx_1344 = PHI(ecx_1298, ecx_1578, ecx_1636, ecx_1679, ecx_1648, ecx_1298)
	rcx_1345 = PHI(rcx_1299, rcx_1579, rcx_1635, rcx_1678, rcx_1649, rcx_1299)
	cl_1346 = PHI(cl_1300, cl_1580, cl_1637, cl_1680, cl_1650, cl_1300)
	SZO_1347 = PHI(SZO_1743, SZO_1581, SZO_1641, SZO_1684, SZO_1665, SZO_1321)
	C_1348 = PHI(C_1744, C_1583, C_1642, C_1685, C_1666, C_1323)
	rax_1349 = PHI(rax_1301, rax_1562, rax_1627, rax_1562, rax_1562, rax_1301)
	eax_1350 = PHI(eax_1302, eax_1561, eax_1561, eax_1561, eax_1561, eax_1302)
	ah_1351 = PHI(ah_1303, ah_1565, ah_1565, ah_1565, ah_1565, ah_1303)
	ax_1352 = PHI(ax_1304, ax_1566, ax_1566, ax_1566, ax_1566, ax_1304)
	al_1353 = PHI(al_1305, al_1567, al_1567, al_1567, al_1567, al_1305)
	rdx_1354 = PHI(rdx_1306, rdx_1560, rdx_1618, rdx_1602, rdx_1602, rdx_1306)
	edx_1355 = PHI(edx_1307, edx_1559, edx_1603, edx_1603, edx_1603, edx_1307)
	rdx_rax_1356 = PHI(rdx_rax_1308, rdx_rax_1563, rdx_rax_1604, rdx_rax_1604, rdx_rax_1604, rdx_rax_1308)
	edx_eax_1357 = PHI(edx_eax_1309, edx_eax_1564, edx_eax_1605, edx_eax_1605, edx_eax_1605, edx_eax_1309)
	dl_1358 = PHI(dl_1310, dl_1310, dl_1606, dl_1606, dl_1606, dl_1310)
	rbx_1359 = PHI(rbx_1741, rbx_1584, rbx_1584, rbx_1584, rbx_1584, rbx_1317)
	rsi_1360 = PHI(rsi_1519, rsi_1519, rsi_1619, rsi_1519, rsi_1519, rsi_1312)
	rdi_1361 = PHI(rdi_1313, rdi_1570, rdi_1638, rdi_1681, rdi_1662, rdi_1313)
	SCZO_1362 = cond(dwLoc98_32 - 0x00000001)
	Z_1363 = SCZO_1362 (alias)
	branch Test(EQ,Z_1363) l000000000040C6F0
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> eax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C6F0:
	rax_1498 = r10_1333
	eax_1499 = (word32) rax_1498 (alias)
	rcx_1500 = (int64) ecx_1344
	ecx_1501 = (word32) rcx_1500 (alias)
	cl_1502 = (byte) rcx_1500 (alias)
	rax_1503 = (uint64) (eax_1499 & 0x00000001)
	rax_1504 = rax_1503 + rcx_1500
	SCZO_1505 = cond(rax_1504)
	Z_1506 = SCZO_1505 (alias)
	al_1507 = Test(NE,Z_1506)
	eax_1508 = (word32) al_1507
	rdi_1509 = (uint64) (edi_1332 + eax_1508)
	edi_1510 = (word32) rdi_1509 (alias)
	SCZO_1511 = cond(edi_1510 - 0x00000005)
	SZO_1512 = SCZO_1511 (alias)
	al_1513 = Test(GT,SZO_1512)
	eax_1514 = DPB(eax_1508, al_1513, 0) (alias)
	rax_1515 = DPB(rax_1504, al_1513, 0) (alias)
	rdx_rax_1516 = DPB(rdx_rax_1356, al_1513, 0) (alias)
	edx_eax_1517 = DPB(edx_eax_1357, al_1513, 0) (alias)
	ax_1518 = DPB(ax_1352, al_1513, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> eax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C53B:
	rsi_1476 = (uint64) dwLoc98_32
	esi_1477 = (word32) rsi_1476 (alias)
	rax_1478 = 0x0000000000000000
	eax_1479 = (word32) rax_1478 (alias)
	rdx_rax_1480 = SEQ(rdx_1354, rax_1478) (alias)
	edx_eax_1481 = rax_1478 (alias)
	ax_1482 = (word16) rax_1478 (alias)
	al_1483 = (byte) rax_1478 (alias)
	SZO_1484 = cond(esi_1477 & esi_1477)
	Z_1485 = SZO_1484 (alias)
	C_1486 = false
	branch Test(NE,Z_1485) l000000000040C54C
// DataOut: al ebx ecx edi fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> eax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C545:
	rcx_1487 = (uint64) (ecx_1344 + edi_1332)
	ecx_1488 = (word32) rcx_1487 (alias)
	cl_1489 = (byte) rcx_1487 (alias)
	SZO_1490 = cond(ecx_1488 & ecx_1488)
	C_1491 = false
	al_1492 = Test(GT,SZO_1490)
	eax_1493 = DPB(eax_1479, al_1492, 0) (alias)
	rax_1494 = DPB(rax_1478, al_1492, 0) (alias)
	rdx_rax_1495 = DPB(rdx_rax_1480, al_1492, 0) (alias)
	edx_eax_1496 = DPB(edx_eax_1481, al_1492, 0) (alias)
	ax_1497 = DPB(ax_1482, al_1492, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:(uint64) eax cl:<invalid> eax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C54C:
	esi_1364 = PHI(esi_1477, esi_1477, esi_1331)
	edi_1365 = PHI(edi_1332, edi_1332, edi_1510)
	ecx_1366 = PHI(ecx_1344, ecx_1488, ecx_1501)
	rcx_1367 = PHI(rcx_1345, rcx_1487, rcx_1500)
	cl_1368 = PHI(cl_1346, cl_1489, cl_1502)
	rax_1369 = PHI(rax_1478, rax_1494, rax_1515)
	eax_1370 = PHI(eax_1479, eax_1493, eax_1514)
	ax_1371 = PHI(ax_1482, ax_1497, ax_1518)
	al_1372 = PHI(al_1483, al_1492, al_1513)
	rdx_rax_1373 = PHI(rdx_rax_1480, rdx_rax_1495, rdx_rax_1516)
	edx_eax_1374 = PHI(edx_eax_1481, edx_eax_1496, edx_eax_1517)
	SCZO_1375 = PHI(SCZO_1362, SCZO_1362, SCZO_1511)
	rsi_1376 = PHI(rsi_1476, rsi_1476, rsi_1360)
	rdi_1377 = PHI(rdi_1361, rdi_1361, rdi_1509)
	SZO_1378 = cond(al_1372 & al_1372)
	Z_1379 = SZO_1378 (alias)
	C_1380 = false
	branch Test(EQ,Z_1379) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C550:
	r10_1438 = r10_1333 + 0x0000000000000001
	r10d_1439 = (word32) r10_1438 (alias)
	r10b_1440 = (byte) r10_1438 (alias)
	SZO_1441 = cond(r9d_1337 & r9d_1337)
	Z_1442 = SZO_1441 (alias)
	C_1443 = false
	branch Test(EQ,Z_1442) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C559:
	rax_1444 = (uint64) dwLocAC_56
	eax_1445 = (word32) rax_1444 (alias)
	rdx_rax_1446 = SEQ(rdx_1354, rax_1444) (alias)
	edx_eax_1447 = rax_1444 (alias)
	ah_1448 = SLICE(rax_1444, byte, 8) (alias)
	ax_1449 = (word16) rax_1444 (alias)
	al_1450 = (byte) rax_1444 (alias)
	SCZO_1451 = cond(rax_1444 - r10_1438)
	Z_1452 = SCZO_1451 (alias)
	branch Test(NE,Z_1452) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C562:
	SCZO_1453 = cond(ebx_1343 - 0x00000008)
	Z_1454 = SCZO_1453 (alias)
	branch Test(EQ,Z_1454) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C567:
	rbx_1455 = (uint64) (ebx_1343 + 0x00000001)
	ebx_1456 = (word32) rbx_1455 (alias)
	SZO_1457 = cond(bLocB0 & 0x08)
	Z_1458 = SZO_1457 (alias)
	C_1459 = false
	rdx_1460 = 0x0000000000000001
	rdx_rax_1461 = SEQ(rdx_1460, rax_1444) (alias)
	edx_eax_1462 = rdx_1460 (alias)
	branch Test(NE,Z_1458) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C577:
	rax_1463 = rax_1444 - 0x0000000000000001
	Mem1464[rax_1463 - 0x0000000000000001:byte] = 0x30
	rdx_1465 = r11_1334
	rsi_1466 = r15_126
	qwLoc98_1467 = r10_1438
	rax_1468 = rax_1463 - r11_1334
	SCZO_1469 = cond(rax_1468)
	rdi_1470 = rax_1468
	rax_1471 = memcpy(rdi_1470, rsi_1466, rdx_1465)
	r10_1472 = qwLoc98_1467
	r10d_1473 = (word32) r10_1472 (alias)
	r10b_1474 = (byte) r10_1472 (alias)
	r8_1475 = rax_1471
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:0x00000001 r14d:<invalid> ecx:<invalid> dl:0x01 sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5A0:
	qwLoc98_1381 = PHI(qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98_1467)
	r10b_1382 = PHI(r10b_1327, r10b_1440, r10b_1440, r10b_1440, r10b_1440, r10b_1474)
	r10d_1383 = PHI(r10d_1328, r10d_1439, r10d_1439, r10d_1439, r10d_1439, r10d_1473)
	r10_1384 = PHI(r10_1333, r10_1438, r10_1438, r10_1438, r10_1438, r10_1472)
	r8_1385 = PHI(r8_1335, r8_1335, r8_1335, r8_1335, r8_1335, r8_1475)
	ebx_1386 = PHI(ebx_1343, ebx_1343, ebx_1343, ebx_1343, ebx_1456, ebx_1456)
	SZO_1387 = PHI(SZO_1378, SZO_1441, SZO_1441, SZO_1441, SZO_1457, SZO_1457)
	Z_1388 = PHI(Z_1379, Z_1442, Z_1452, Z_1454, Z_1458, Z_1458)
	C_1389 = PHI(C_1380, C_1443, C_1443, C_1443, C_1459, C_1459)
	rax_1390 = PHI(rax_1369, rax_1369, rax_1444, rax_1444, rax_1444, rax_1471)
	eax_1391 = PHI(eax_1370, eax_1370, eax_1445, eax_1445, eax_1445, eax_1445)
	ah_1392 = PHI(ah_1351, ah_1351, ah_1448, ah_1448, ah_1448, ah_1448)
	ax_1393 = PHI(ax_1371, ax_1371, ax_1449, ax_1449, ax_1449, ax_1449)
	al_1394 = PHI(al_1372, al_1372, al_1450, al_1450, al_1450, al_1450)
	rdx_1395 = PHI(rdx_1354, rdx_1354, rdx_1354, rdx_1354, rdx_1460, rdx_1465)
	rdx_rax_1396 = PHI(rdx_rax_1373, rdx_rax_1373, rdx_rax_1446, rdx_rax_1446, rdx_rax_1461, rdx_rax_1461)
	edx_eax_1397 = PHI(edx_eax_1374, edx_eax_1374, edx_eax_1447, edx_eax_1447, edx_eax_1462, edx_eax_1462)
	SCZO_1398 = PHI(SCZO_1375, SCZO_1375, SCZO_1451, SCZO_1453, SCZO_1453, SCZO_1469)
	rbx_1399 = PHI(rbx_1359, rbx_1359, rbx_1359, rbx_1359, rbx_1455, rbx_1455)
	rsi_1400 = PHI(rsi_1376, rsi_1376, rsi_1376, rsi_1376, rsi_1376, rsi_1466)
	rdi_1401 = PHI(rdi_1377, rdi_1377, rdi_1377, rdi_1377, rdi_1377, rdi_1470)
	r12_1402 = r8_1385
	r12d_1403 = (word32) r12_1402 (alias)
	r9_1404 = 0x00000000CCCCCCCD
	r9d_1405 = (word32) r9_1404 (alias)
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r14d r15 r8 r9 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5B0:
	r10_1406 = PHI(r10_1384, r10_1430)
	r12_1407 = PHI(r12_1402, r12_1409)
	rax_1408 = r10_1406
	r12_1409 = r12_1407 - 0x0000000000000001
	r12d_1410 = (word32) r12_1409 (alias)
	rdx_rax_1411 = rcx_1367 *u rax_1408
	rdx_1412 = SLICE(rdx_rax_1411, word64, 64) (alias)
	rdx_1413 = rdx_1412 >>u 0x0000000000000003
	rax_1414 = rdx_1413 + rdx_1413 * 0x0000000000000004
	rax_1415 = rax_1414 + rax_1414
	eax_1416 = (word32) rax_1415 (alias)
	rdx_rax_1417 = SEQ(rdx_1413, rax_1415) (alias)
	edx_eax_1418 = rax_1415 (alias)
	ah_1419 = SLICE(rax_1415, byte, 8) (alias)
	ax_1420 = (word16) rax_1415 (alias)
	al_1421 = (byte) rax_1415 (alias)
	r10_1422 = r10_1406 - rax_1415
	r10d_1423 = (word32) r10_1422 (alias)
	r10_1424 = (uint64) (r10d_1423 + 0x00000030)
	r10b_1425 = (byte) r10_1424 (alias)
	SZO_1426 = cond(rdx_1413 & rdx_1413)
	Z_1427 = SZO_1426 (alias)
	C_1428 = false
	Mem1429[r12_1409:byte] = r10b_1425
	r10_1430 = rdx_1413
	r10d_1431 = (word32) r10_1430 (alias)
	r10b_1432 = (byte) r10_1430 (alias)
	branch Test(NE,Z_1427) l000000000040C5B0
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r14d r15 r8 r9 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD rsi:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5D8:
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD rsi:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BE59:
	r10b_623 = PHI(r10b_101, r10b_101, r10b_101, r10b_1769)
	r10d_624 = PHI(r10d_100, r10d_100, r10d_100, r10d_1768)
	sil_625 = PHI(sil_96, sil_96, sil_1806, sil_96)
	esi_626 = PHI(esi_88, esi_88, esi_1807, esi_88)
	r10_627 = PHI(r10_83, r10_83, r10_83, r10_1767)
	ecx_628 = PHI(ecx_1763, ecx_74, ecx_74, ecx_1763)
	rcx_629 = PHI(rcx_1762, rcx_70, rcx_70, rcx_1762)
	cl_630 = PHI(cl_1764, cl_85, cl_85, cl_1764)
	Z_631 = PHI(Z_1760, Z_1790, Z_1803, Z_1780)
	rax_632 = PHI(rax_1752, rax_137, rax_1799, rax_1776)
	eax_633 = PHI(eax_1753, eax_60, eax_60, eax_1753)
	ah_634 = PHI(ah_1756, ah_92, ah_92, ah_1756)
	ax_635 = PHI(ax_1757, ax_93, ax_93, ax_1757)
	al_636 = PHI(al_1758, al_98, al_98, al_1758)
	rdx_637 = PHI(rdx_1749, rdx_111, rdx_1796, rdx_1773)
	edx_638 = PHI(edx_1750, edx_112, edx_1797, edx_1774)
	rdx_rax_639 = PHI(rdx_rax_1754, rdx_rax_138, rdx_rax_1800, rdx_rax_1777)
	edx_eax_640 = PHI(edx_eax_1755, edx_eax_139, edx_eax_1801, edx_eax_1778)
	dl_641 = PHI(dl_1751, dl_113, dl_1798, dl_1775)
	SCZO_642 = PHI(SCZO_141, SCZO_141, SCZO_141, SCZO_1779)
	rsi_643 = PHI(rsi_65, rsi_65, rsi_1805, rsi_65)
	qwLoc68_644 = r12_68
	SZO_645 = cond(r12_68 & r12_68)
	S_646 = SZO_645 (alias)
	C_647 = false
	rLoc1_648 = (real64) qwLoc68_644
	branch (r12_68 & r12_68) < 0x0000000000000000 l000000000040C5F0
// DataOut: bx fs r11 r11d r13 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5F0:
	rLoc1_1282 = rLoc1_648 + Mem0[0x0000000000415F08:real32]
	qwLoc68_1283 = rbx_69
	SZO_1284 = cond(rbx_69 & rbx_69)
	S_1285 = SZO_1284 (alias)
	C_1286 = false
	rLoc2_1287 = (real64) qwLoc68_1283
	branch Test(NS,S_1285) l000000000040BE7D
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE6B:
	qwLoc68_1277 = rbx_69
	SZO_1278 = cond(rbx_69 & rbx_69)
	S_1279 = SZO_1278 (alias)
	C_1280 = false
	rLoc2_1281 = (real64) qwLoc68_1277
	branch Test(SG,S_1279) l000000000040C608
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C608:
	rLoc2_1270 = PHI(rLoc2_1281, rLoc2_1287)
	qwLoc68_1271 = PHI(qwLoc68_1277, qwLoc68_1283)
	rLoc1_1272 = PHI(rLoc1_648, rLoc1_1282)
	S_1273 = PHI(S_1279, S_1285)
	SZO_1274 = PHI(SZO_1278, SZO_1284)
	C_1275 = PHI(C_1280, C_1286)
	rLoc2_1276 = rLoc2_1270 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE7D:
	rLoc2_649 = PHI(rLoc2_1281, rLoc2_1276, rLoc2_1287)
	rLoc1_650 = PHI(rLoc1_648, rLoc1_1272, rLoc1_1282)
	rax_651 = qwLocA8_40
	rdx_rax_652 = SEQ(rdx_637, rax_651) (alias)
	edx_eax_653 = rax_651 (alias)
	qwLoc68_654 = rax_651
	SZO_655 = cond(rax_651 & rax_651)
	S_656 = SZO_655 (alias)
	C_657 = false
	rLoc3_658 = (real64) qwLoc68_654
	branch (rax_651 & rax_651) < 0x0000000000000000 l000000000040C5E0
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5E0:
	rLoc3_1269 = rLoc3_658 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE94:
	rLoc3_659 = PHI(rLoc3_658, rLoc3_1269)
	SZO_660 = cond(bLocB0 & 0x10)
	Z_661 = SZO_660 (alias)
	C_662 = false
	rLoc2_663 = rLoc2_649 / rLoc3_659
	rLoc1_664 = rLoc1_650 * rLoc2_663
	branch (bLocB0 & 0x10) == 0x00 l000000000040C1B8
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C1B8:
	SCZO_1104 = cond(dwLoc98_32 - 0x00000001)
	Z_1105 = SCZO_1104 (alias)
	branch Test(EQ,Z_1105) l000000000040C1CD
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1BF:
	rLoc2_1147 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_1148 = cond(rLoc2_1147 - rLoc1_664)
	CZ_1149 = CZP_1148 (alias)
	branch Test(UGT,CZ_1149) l000000000040C408
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C408:
	rLoc2_1150 = (real64) Mem0[0x0000000000415F0C:real32]
	v70_1151 = rLoc2_1150
	rLoc2_1152 = rLoc1_664
	rLoc1_1153 = v70_1151
	CZP_1154 = cond(rLoc2_1152 - rLoc1_1153)
	C_1155 = CZP_1154 (alias)
	branch Test(UGE,C_1155) l000000000040C6A0
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C6A0:
	wLoc6A_1247 = __fstcw()
	eax_1248 = (word32) wLoc6A_1247
	ah_1249 = SLICE(eax_1248, byte, 8) (alias)
	rLoc2_1250 = rLoc2_1152 - rLoc1_1153
	v71_1251 = rLoc2_1250
	rLoc2_1252 = rLoc1_1153
	rLoc1_1253 = v71_1251
	r10_1254 = 0x0000000000000000
	ah_1255 = ah_1249 | 0x0C
	ax_1256 = DPB(ax_635, ah_1255, 8) (alias)
	wLoc6C_1257 = ax_1256
	__fldcw(wLoc6C_1257)
	qwLoc68_1258 = (int64) rLoc2_1252
	__fldcw(wLoc6A_1247)
	rax_1259 = qwLoc68_1258
	rax_1260 = rax_1259 ^ rdx_637
	eax_1261 = (word32) rax_1260 (alias)
	rdx_rax_1262 = SEQ(rdx_637, rax_1260) (alias)
	edx_eax_1263 = rax_1260 (alias)
	ah_1264 = SLICE(rax_1260, byte, 8) (alias)
	ax_1265 = (word16) rax_1260 (alias)
	al_1266 = (byte) rax_1260 (alias)
	SZO_1267 = cond(rax_1260)
	C_1268 = false
// DataOut: ax fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C418:
	rLoc1_1229 = rLoc2_1152
	wLoc6A_1230 = __fstcw()
	eax_1231 = (word32) wLoc6A_1230
	ah_1232 = SLICE(eax_1231, byte, 8) (alias)
	ah_1233 = ah_1232 | 0x0C
	ax_1234 = DPB(ax_635, ah_1233, 8) (alias)
	SZO_1235 = cond(ah_1233)
	C_1236 = false
	wLoc6C_1237 = ax_1234
	rLoc2_1238 = rLoc2_1152
	__fldcw(wLoc6C_1237)
	qwLoc68_1239 = (int64) rLoc2_1238
	__fldcw(wLoc6A_1230)
	rax_1240 = qwLoc68_1239
	eax_1241 = (word32) rax_1240 (alias)
	rdx_rax_1242 = SEQ(rdx_637, rax_1240) (alias)
	edx_eax_1243 = rax_1240 (alias)
	ah_1244 = SLICE(rax_1240, byte, 8) (alias)
	ax_1245 = (word16) rax_1240 (alias)
	al_1246 = (byte) rax_1240 (alias)
// DataOut: ax fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C43E:
	wLoc6A_1156 = PHI(wLoc6A_1230, wLoc6A_1247)
	wLoc6C_1157 = PHI(wLoc6C_1237, wLoc6C_1257)
	rLoc2_1158 = PHI(rLoc2_1238, rLoc2_1252)
	qwLoc68_1159 = PHI(qwLoc68_1239, qwLoc68_1258)
	rLoc1_1160 = PHI(rLoc1_1229, rLoc1_1253)
	r10_1161 = PHI(r10_627, r10_1254)
	rax_1162 = PHI(rax_1240, rax_1260)
	eax_1163 = PHI(eax_1241, eax_1261)
	ah_1164 = PHI(ah_1244, ah_1264)
	ax_1165 = PHI(ax_1245, ax_1265)
	al_1166 = PHI(al_1246, al_1266)
	rsi_1167 = (uint64) dwLoc98_32
	esi_1168 = (word32) rsi_1167 (alias)
	rdx_1169 = 0x0000000000000000
	edx_1170 = (word32) rdx_1169 (alias)
	rdx_rax_1171 = SEQ(rdx_1169, rax_1162) (alias)
	edx_eax_1172 = rdx_1169 (alias)
	dl_1173 = (byte) rdx_1169 (alias)
	SZO_1174 = cond(esi_1168 & esi_1168)
	Z_1175 = SZO_1174 (alias)
	C_1176 = false
	branch Test(NE,Z_1175) l000000000040C470
// DataOut: ax fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C470:
	rLoc1_1228 = rLoc1_1160
// DataOut: fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C448:
	qwLoc68_1196 = rax_1162
	SZO_1197 = cond(rax_1162 & rax_1162)
	S_1198 = SZO_1197 (alias)
	C_1199 = false
	rLoc2_1200 = (real64) qwLoc68_1196
	branch Test(SG,S_1198) l000000000040C772
// DataOut: fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C772:
	rLoc2_1227 = rLoc2_1200 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C45A:
	rLoc2_1201 = PHI(rLoc2_1200, rLoc2_1227)
	rcx_1202 = 0x0000000000000000
	ecx_1203 = (word32) rcx_1202 (alias)
	SZO_1204 = cond(ecx_1203)
	rdx_1205 = 0x0000000000000001
	edx_1206 = (word32) rdx_1205 (alias)
	rdx_rax_1207 = SEQ(rdx_1205, rax_1162) (alias)
	edx_eax_1208 = rdx_1205 (alias)
	dl_1209 = (byte) rdx_1205 (alias)
	CZP_1210 = cond(rLoc2_1201 - rLoc1_1160)
	Z_1211 = CZP_1210 (alias)
	P_1212 = CZP_1210 (alias)
	rLoc1_1213 = rLoc1_1160
	cl_1214 = Test(PE,P_1212)
	rcx_1215 = DPB(rcx_1202, cl_1214, 0) (alias)
	ecx_1216 = DPB(ecx_1203, cl_1214, 0) (alias)
	branch Test(NE,Z_1211) l000000000040C46C
// DataOut: fs r11 r11d r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C468_1:
	rdx_1222 = rcx_1215
	edx_1223 = (word32) rdx_1222 (alias)
	rdx_rax_1224 = SEQ(rdx_1222, rax_1162) (alias)
	edx_eax_1225 = rdx_1222 (alias)
	dl_1226 = (byte) rdx_1222 (alias)
// DataOut: fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C46C:
	rdx_1217 = PHI(rdx_1205, rdx_1222)
	edx_1218 = PHI(edx_1206, edx_1223)
	rdx_rax_1219 = PHI(rdx_rax_1207, rdx_rax_1224)
	edx_eax_1220 = PHI(edx_eax_1208, edx_eax_1225)
	dl_1221 = PHI(dl_1209, dl_1226)
// DataOut: fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C472:
	rLoc2_1177 = PHI(rLoc2_1201, rLoc2_1158)
	P_1178 = PHI(P_1212, P_94)
	CZP_1179 = PHI(CZP_1210, CZP_1154)
	ecx_1180 = PHI(ecx_1216, ecx_628)
	rcx_1181 = PHI(rcx_1215, rcx_629)
	cl_1182 = PHI(cl_1214, cl_630)
	Z_1183 = PHI(Z_1211, Z_1175)
	rdx_1184 = PHI(rdx_1217, rdx_1169)
	edx_1185 = PHI(edx_1218, edx_1170)
	rdx_rax_1186 = PHI(rdx_rax_1219, rdx_rax_1171)
	edx_eax_1187 = PHI(edx_eax_1220, edx_eax_1172)
	dl_1188 = PHI(dl_1221, dl_1173)
	rax_1189 = rax_1162 + rdx_1184
	qwLoc68_1190 = rax_1189
	SZO_1191 = cond(rax_1189 & rax_1189)
	S_1192 = SZO_1191 (alias)
	C_1193 = false
	rLoc1_1194 = (real64) qwLoc68_1190
	branch Test(NS,S_1192) l000000000040C1CD
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C487:
	rLoc1_1195 = rLoc1_1194 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1CD:
	wLoc6A_1106 = PHI(wLoc6A, wLoc6A, wLoc6A_1156, wLoc6A_1156)
	wLoc6C_1107 = PHI(wLoc6C, wLoc6C, wLoc6C_1157, wLoc6C_1157)
	rLoc2_1108 = PHI(rLoc2_663, rLoc2_1147, rLoc2_1177, rLoc2_1177)
	qwLoc68_1109 = PHI(qwLoc68_654, qwLoc68_654, qwLoc68_1190, qwLoc68_1190)
	rLoc1_1110 = PHI(rLoc1_664, rLoc1_664, rLoc1_1194, rLoc1_1195)
	P_1111 = PHI(P_94, P_94, P_1178, P_1178)
	CZP_1112 = PHI(CZP_120, CZP_1148, CZP_1179, CZP_1179)
	esi_1113 = PHI(esi_626, esi_626, esi_1168, esi_1168)
	r10_1114 = PHI(r10_627, r10_627, r10_1161, r10_1161)
	S_1115 = PHI(S_656, S_656, S_1192, S_1192)
	CZ_1116 = PHI(CZ_142, CZ_1149, CZ_1149, CZ_1149)
	ecx_1117 = PHI(ecx_628, ecx_628, ecx_1180, ecx_1180)
	cl_1118 = PHI(cl_630, cl_630, cl_1182, cl_1182)
	Z_1119 = PHI(Z_1105, Z_1105, Z_1183, Z_1183)
	eax_1120 = PHI(eax_633, eax_633, eax_1163, eax_1163)
	ah_1121 = PHI(ah_634, ah_634, ah_1164, ah_1164)
	ax_1122 = PHI(ax_635, ax_635, ax_1165, ax_1165)
	al_1123 = PHI(al_636, al_636, al_1166, al_1166)
	edx_1124 = PHI(edx_638, edx_638, edx_1185, edx_1185)
	rdx_rax_1125 = PHI(rdx_rax_652, rdx_rax_652, rdx_rax_1186, rdx_rax_1186)
	edx_eax_1126 = PHI(edx_eax_653, edx_eax_653, edx_eax_1187, edx_eax_1187)
	dl_1127 = PHI(dl_641, dl_641, dl_1188, dl_1188)
	rLocD0_1128 = (real80) rLoc1_1110
	rbx_1129 = qwLocA0_35
	rcx_1130 = 0x0000000000415F18
	rdx_1131 = 0xFFFFFFFFFFFFFFFF
	rsi_1132 = 0x0000000000000001
	rax_1133 = 0x0000000000000000
	r14_1134 = 0x0000000000000000
	r14d_1135 = (word32) r14_1134 (alias)
	SZO_1136 = cond(r14d_1135)
	C_1137 = false
	rdi_1138 = rbx_1129
	rax_1139 = 0x0000000000000000
	rdi_1140 = rbx_1129
	rbx_1141 = 0x00000000FFFFFFFF
	ebx_1142 = (word32) rbx_1141 (alias)
	rax_1143 = 0x0000000000000000
	r15_1144 = 0x0000000000000000
	r15d_1145 = (word32) r15_1144 (alias)
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> eax:<invalid> ah:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEA3:
	rLoc2_715 = (real64) dwLocAC_56
	rbx_716 = 0x0000000000000000
	ebx_717 = (word32) rbx_716 (alias)
	SZO_718 = cond(ebx_717)
	C_719 = false
	rLoc3_720 = rLoc3_659
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEB4:
	rLoc4_722 = PHI(rLoc4, rLoc4_733)
	rLoc3_723 = PHI(rLoc3_720, rLoc3_1100)
	rLoc1_724 = PHI(rLoc1_664, rLoc1_1101)
	ebx_725 = PHI(ebx_717, ebx_729)
	Z_726 = PHI(Z_661, Z_1095)
	rLoc4_727 = rLoc4_722
	rbx_728 = (uint64) (ebx_725 + 0x00000001)
	ebx_729 = (word32) rbx_728 (alias)
	SCZO_730 = cond(ebx_729)
	rLoc4_731 = rLoc4_727 * rLoc2_715
	v46_732 = rLoc4_731
	rLoc4_733 = rLoc1_724
	rLoc1_734 = v46_732
	CZP_735 = cond(rLoc4_733 - rLoc1_734)
	C_736 = CZP_735 (alias)
	branch rLoc4_733 <u rLoc1_734 l000000000040BED0
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BED0:
	rLoc2_1102 = rLoc4_733
	rLoc1_1103 = rLoc3_723
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEC1:
	SCZO_1094 = cond(ebx_729 - 0x00000008)
	Z_1095 = SCZO_1094 (alias)
	branch Test(NE,Z_1095) l000000000040BEB0
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEB0:
	rLoc3_1098 = rLoc4_733
	v56_1099 = rLoc3_1098
	rLoc3_1100 = rLoc1_734
	rLoc1_1101 = v56_1099
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEC6:
	rLoc2_1096 = rLoc4_733
	rLoc1_1097 = rLoc3_723
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BED4:
	rLoc2_737 = PHI(rLoc2_1096, rLoc2_1102)
	rLoc1_738 = PHI(rLoc1_1097, rLoc1_1103)
	rLoc1_739 = rLoc2_737 / rLoc1_738
	SCZO_740 = cond(dwLoc98_32 - 0x00000001)
	Z_741 = SCZO_740 (alias)
	rLoc2_742 = rLoc2_737
	branch dwLoc98_32 == 0x00000001 l000000000040BF70
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF70:
	v67_1091 = rLoc2_742
	rLoc2_1092 = rLoc1_739
	rLoc1_1093 = v67_1091
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEE3:
	rLoc2_967 = rLoc2_742
	rLoc2_968 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_969 = cond(rLoc2_968 - rLoc1_739)
	CZ_970 = CZP_969 (alias)
	branch Test(ULE,CZ_970) l000000000040C498
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C498:
	rLoc2_1088 = rLoc2_968
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEF3:
	rLoc2_971 = (real64) Mem0[0x0000000000415F0C:real32]
	v52_972 = rLoc2_971
	rLoc2_973 = rLoc1_739
	rLoc1_974 = v52_972
	CZP_975 = cond(rLoc2_973 - rLoc1_974)
	C_976 = CZP_975 (alias)
	branch Test(UGE,C_976) l000000000040C660
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C660:
	wLoc6A_1066 = __fstcw()
	eax_1067 = (word32) wLoc6A_1066
	ah_1068 = SLICE(eax_1067, byte, 8) (alias)
	rLoc2_1069 = rLoc2_973 - rLoc1_974
	v61_1070 = rLoc2_1069
	rLoc2_1071 = rLoc1_974
	rLoc1_1072 = v61_1070
	r10_1073 = 0x0000000000000000
	ah_1074 = ah_1068 | 0x0C
	ax_1075 = DPB(ax_635, ah_1074, 8) (alias)
	wLoc6C_1076 = ax_1075
	__fldcw(wLoc6C_1076)
	qwLoc68_1077 = (int64) rLoc2_1071
	__fldcw(wLoc6A_1066)
	rax_1078 = qwLoc68_1077
	rax_1079 = rax_1078 ^ rdx_637
	eax_1080 = (word32) rax_1079 (alias)
	rdx_rax_1081 = SEQ(rdx_637, rax_1079) (alias)
	edx_eax_1082 = rax_1079 (alias)
	ah_1083 = SLICE(rax_1079, byte, 8) (alias)
	ax_1084 = (word16) rax_1079 (alias)
	al_1085 = (byte) rax_1079 (alias)
	SZO_1086 = cond(rax_1079)
	C_1087 = false
// DataOut: al ax ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF03:
	rLoc1_1048 = rLoc2_973
	wLoc6A_1049 = __fstcw()
	eax_1050 = (word32) wLoc6A_1049
	ah_1051 = SLICE(eax_1050, byte, 8) (alias)
	ah_1052 = ah_1051 | 0x0C
	ax_1053 = DPB(ax_635, ah_1052, 8) (alias)
	SZO_1054 = cond(ah_1052)
	C_1055 = false
	wLoc6C_1056 = ax_1053
	rLoc2_1057 = rLoc2_973
	__fldcw(wLoc6C_1056)
	qwLoc68_1058 = (int64) rLoc2_1057
	__fldcw(wLoc6A_1049)
	rax_1059 = qwLoc68_1058
	eax_1060 = (word32) rax_1059 (alias)
	rdx_rax_1061 = SEQ(rdx_637, rax_1059) (alias)
	edx_eax_1062 = rax_1059 (alias)
	ah_1063 = SLICE(rax_1059, byte, 8) (alias)
	ax_1064 = (word16) rax_1059 (alias)
	al_1065 = (byte) rax_1059 (alias)
// DataOut: al ax ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF29:
	wLoc6A_977 = PHI(wLoc6A_1049, wLoc6A_1066)
	wLoc6C_978 = PHI(wLoc6C_1056, wLoc6C_1076)
	rLoc2_979 = PHI(rLoc2_1057, rLoc2_1071)
	qwLoc68_980 = PHI(qwLoc68_1058, qwLoc68_1077)
	rLoc1_981 = PHI(rLoc1_1048, rLoc1_1072)
	r10_982 = PHI(r10_627, r10_1073)
	rax_983 = PHI(rax_1059, rax_1079)
	eax_984 = PHI(eax_1060, eax_1080)
	ah_985 = PHI(ah_1063, ah_1083)
	ax_986 = PHI(ax_1064, ax_1084)
	al_987 = PHI(al_1065, al_1085)
	rcx_988 = (uint64) dwLoc98_32
	ecx_989 = (word32) rcx_988 (alias)
	rdx_990 = 0x0000000000000000
	edx_991 = (word32) rdx_990 (alias)
	rdx_rax_992 = SEQ(rdx_990, rax_983) (alias)
	edx_eax_993 = rdx_990 (alias)
	dl_994 = (byte) rdx_990 (alias)
	SZO_995 = cond(ecx_989 & ecx_989)
	Z_996 = SZO_995 (alias)
	C_997 = false
	branch Test(NE,Z_996) l000000000040BF55
// DataOut: al ax ebx fs r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF33:
	qwLoc68_1022 = rax_983
	SZO_1023 = cond(rax_983 & rax_983)
	S_1024 = SZO_1023 (alias)
	C_1025 = false
	rLoc2_1026 = (real64) qwLoc68_1022
	branch Test(SG,S_1024) l000000000040C77D
// DataOut: ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:(uint64) eax r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C77D:
	rLoc2_1047 = rLoc2_1026 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:(uint64) eax r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF45:
	rLoc2_1027 = PHI(rLoc2_1026, rLoc2_1047)
	rcx_1028 = 0x0000000000000000
	ecx_1029 = (word32) rcx_1028 (alias)
	SZO_1030 = cond(ecx_1029)
	rdx_1031 = 0x0000000000000001
	edx_1032 = (word32) rdx_1031 (alias)
	rdx_rax_1033 = SEQ(rdx_1031, rax_983) (alias)
	edx_eax_1034 = rdx_1031 (alias)
	dl_1035 = (byte) rdx_1031 (alias)
	CZP_1036 = cond(rLoc2_1027 - rLoc1_981)
	Z_1037 = CZP_1036 (alias)
	P_1038 = CZP_1036 (alias)
	cl_1039 = Test(PE,P_1038)
	rcx_1040 = DPB(rcx_1028, cl_1039, 0) (alias)
	ecx_1041 = DPB(ecx_1029, cl_1039, 0) (alias)
	branch Test(NE,Z_1037) l000000000040BF55
// DataOut: ebx fs r11 r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:(uint64) eax r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF51_1:
	rdx_1042 = rcx_1040
	edx_1043 = (word32) rdx_1042 (alias)
	rdx_rax_1044 = SEQ(rdx_1042, rax_983) (alias)
	edx_eax_1045 = rdx_1042 (alias)
	dl_1046 = (byte) rdx_1042 (alias)
// DataOut: ebx fs r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> cl:Test(PE,P) rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF55:
	P_998 = PHI(P_1038, P_1038, P_94)
	CZP_999 = PHI(CZP_1036, CZP_1036, CZP_975)
	ecx_1000 = PHI(ecx_1041, ecx_1041, ecx_989)
	rcx_1001 = PHI(rcx_1040, rcx_1040, rcx_988)
	cl_1002 = PHI(cl_1039, cl_1039, cl_630)
	Z_1003 = PHI(Z_1037, Z_1037, Z_996)
	rdx_1004 = PHI(rdx_1031, rdx_1042, rdx_990)
	edx_1005 = PHI(edx_1032, edx_1043, edx_991)
	rdx_rax_1006 = PHI(rdx_rax_1033, rdx_rax_1044, rdx_rax_992)
	edx_eax_1007 = PHI(edx_eax_1034, edx_eax_1045, edx_eax_993)
	dl_1008 = PHI(dl_1035, dl_1046, dl_994)
	rax_1009 = rax_983 + rdx_1004
	qwLoc68_1010 = rax_1009
	SZO_1011 = cond(rax_1009 & rax_1009)
	S_1012 = SZO_1011 (alias)
	C_1013 = false
	rLoc2_1014 = (real64) qwLoc68_1010
	branch Test(SG,S_1012) l000000000040C758
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C758:
	rLoc2_1018 = rLoc2_1014 + Mem0[0x0000000000415F08:real32]
	v63_1019 = rLoc2_1018
	rLoc2_1020 = rLoc1_981
	rLoc1_1021 = v63_1019
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF6A:
	v60_1015 = rLoc2_1014
	rLoc2_1016 = rLoc1_981
	rLoc1_1017 = v60_1015
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF72:
	wLoc6A_743 = PHI(wLoc6A_977, wLoc6A_977, wLoc6A, wLoc6A)
	wLoc6C_744 = PHI(wLoc6C_978, wLoc6C_978, wLoc6C, wLoc6C)
	rLoc2_745 = PHI(rLoc2_1016, rLoc2_1020, rLoc2_1088, rLoc2_1092)
	qwLoc68_746 = PHI(qwLoc68_1010, qwLoc68_1010, qwLoc68_654, qwLoc68_654)
	rLoc1_747 = PHI(rLoc1_1017, rLoc1_1021, rLoc1_739, rLoc1_1093)
	P_748 = PHI(P_998, P_998, P_94, P_94)
	CZP_749 = PHI(CZP_999, CZP_999, CZP_969, CZP_735)
	r10_750 = PHI(r10_982, r10_982, r10_627, r10_627)
	S_751 = PHI(S_1012, S_1012, S_656, S_656)
	ecx_752 = PHI(ecx_1000, ecx_1000, ecx_628, ecx_628)
	cl_753 = PHI(cl_1002, cl_1002, cl_630, cl_630)
	C_754 = PHI(C_1013, C_1013, C_736, C_736)
	eax_755 = PHI(eax_984, eax_984, eax_633, eax_633)
	ah_756 = PHI(ah_985, ah_985, ah_634, ah_634)
	ax_757 = PHI(ax_986, ax_986, ax_635, ax_635)
	r14_758 = qwLocA0_35
	rdx_759 = 0xFFFFFFFFFFFFFFFF
	rcx_760 = 0x0000000000415F1E
	rsi_761 = 0x0000000000000001
	rax_762 = 0x0000000000000000
	qwLoc80_763 = r11_135
	rdi_764 = r14_758
	rLoc90_765 = (real80) rLoc2_745
	rLocD0_766 = (real80) rLoc1_747
	rax_767 = 0x0000000000000000
	rdi_768 = r14_758
	rax_769 = 0x0000000000000000
	r11_770 = qwLoc80_763
	rdx_771 = (uint64) dwLoc78_48
	edx_772 = (word32) rdx_771 (alias)
	dl_773 = (byte) rdx_771 (alias)
	r15_774 = 0x0000000000000000
	r15d_775 = (word32) r15_774 (alias)
	rax_776 = 0x0000000000000000
	rLoc1_777 = (real64) rLoc90_765
	SZO_778 = cond(edx_772 & edx_772)
	Z_779 = SZO_778 (alias)
	r14_780 = r11_770 + 0x0000000000000001
	r14d_781 = (word32) r14_780 (alias)
	al_782 = (edx_772 & edx_772) == 0x00000000
	rax_783 = DPB(rax_776, al_782, 0) (alias)
	rax_784 = r14_780 + 0x0000000000000001 + rax_783
	rdx_rax_785 = SEQ(rdx_771, rax_784) (alias)
	edx_eax_786 = rax_784 (alias)
	SCZO_787 = cond(0x0000000000000000 - rax_784)
	CZ_788 = SCZO_787 (alias)
	branch 0x0000000000000000 >u rax_784 l000000000040BFF0
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) eax:<invalid> ah:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFCB:
	SZO_957 = cond(bLocB0 & 0x08)
	Z_958 = SZO_957 (alias)
	C_959 = false
	branch Test(EQ,Z_958) l000000000040C208
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C208:
	rLoc1_966 = rLoc1_777
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFD6:
	rax_960 = qwLocA0_35
	rdx_rax_961 = SEQ(rdx_771, rax_960) (alias)
	edx_eax_962 = rax_960 (alias)
	SCZO_963 = cond(Mem0[rax_960 - 0x0000000000000001 + r15_774:byte] - 0x30)
	Z_964 = SCZO_963 (alias)
	branch Test(NE,Z_964) l000000000040C210
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C210:
	rLoc1_965 = rLoc1_777
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFE7:
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFF0:
	SZO_789 = PHI(SZO_778, SZO_957)
	C_790 = PHI(C_754, C_959)
	rax_791 = PHI(rax_784, rax_960)
	rdx_rax_792 = PHI(rdx_rax_785, rdx_rax_961)
	edx_eax_793 = PHI(edx_eax_786, edx_eax_962)
	SCZO_794 = cond(dwLoc98_32 - 0x00000001)
	Z_795 = SCZO_794 (alias)
	rLoc1_796 = rLoc1_777 * Mem0[0x0000000000415F84:real32]
	branch dwLoc98_32 == 0x00000001 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C001:
	rLoc2_835 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_836 = cond(rLoc2_835 - rLoc1_796)
	CZ_837 = CZP_836 (alias)
	branch rLoc2_835 <=u rLoc1_796 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C00F:
	rLoc2_838 = (real64) Mem0[0x0000000000415F0C:real32]
	v64_839 = rLoc2_838
	rLoc2_840 = rLoc1_796
	rLoc1_841 = v64_839
	CZP_842 = cond(rLoc2_840 - rLoc1_841)
	C_843 = CZP_842 (alias)
	branch rLoc2_840 >=u rLoc1_841 l000000000040C720
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C720:
	wLoc6A_935 = __fstcw()
	eax_936 = (word32) wLoc6A_935
	ah_937 = SLICE(eax_936, byte, 8) (alias)
	rLoc2_938 = rLoc2_840 - rLoc1_841
	v65_939 = rLoc2_938
	rLoc2_940 = rLoc1_841
	rLoc1_941 = v65_939
	r10_942 = 0x0000000000000000
	ah_943 = ah_937 | 0x0C
	ax_944 = DPB(ax_757, ah_943, 8) (alias)
	wLoc6C_945 = ax_944
	__fldcw(wLoc6C_945)
	qwLoc68_946 = (int64) rLoc2_940
	__fldcw(wLoc6A_935)
	rax_947 = qwLoc68_946
	rax_948 = rax_947 ^ rdx_771
	eax_949 = (word32) rax_948 (alias)
	rdx_rax_950 = SEQ(rdx_771, rax_948) (alias)
	edx_eax_951 = rax_948 (alias)
	ah_952 = SLICE(rax_948, byte, 8) (alias)
	ax_953 = (word16) rax_948 (alias)
	al_954 = (byte) rax_948 (alias)
	SZO_955 = cond(rax_948)
	C_956 = false
// DataOut: ax eax ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C01F:
	rLoc1_917 = rLoc2_840
	wLoc6A_918 = __fstcw()
	eax_919 = (word32) wLoc6A_918
	ah_920 = SLICE(eax_919, byte, 8) (alias)
	ah_921 = ah_920 | 0x0C
	ax_922 = DPB(ax_757, ah_921, 8) (alias)
	SZO_923 = cond(ah_921)
	C_924 = false
	wLoc6C_925 = ax_922
	rLoc2_926 = rLoc2_840
	__fldcw(wLoc6C_925)
	qwLoc68_927 = (int64) rLoc2_926
	__fldcw(wLoc6A_918)
	rax_928 = qwLoc68_927
	eax_929 = (word32) rax_928 (alias)
	rdx_rax_930 = SEQ(rdx_771, rax_928) (alias)
	edx_eax_931 = rax_928 (alias)
	ah_932 = SLICE(rax_928, byte, 8) (alias)
	ax_933 = (word16) rax_928 (alias)
	al_934 = (byte) rax_928 (alias)
// DataOut: ax eax ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C045:
	wLoc6A_844 = PHI(wLoc6A_918, wLoc6A_935)
	wLoc6C_845 = PHI(wLoc6C_925, wLoc6C_945)
	rLoc2_846 = PHI(rLoc2_926, rLoc2_940)
	qwLoc68_847 = PHI(qwLoc68_927, qwLoc68_946)
	rLoc1_848 = PHI(rLoc1_917, rLoc1_941)
	r10_849 = PHI(r10_750, r10_942)
	rax_850 = PHI(rax_928, rax_948)
	eax_851 = PHI(eax_929, eax_949)
	ah_852 = PHI(ah_932, ah_952)
	ax_853 = PHI(ax_933, ax_953)
	al_854 = PHI(al_934, al_954)
	r14_855 = (uint64) dwLoc98_32
	r14d_856 = (word32) r14_855 (alias)
	rdx_857 = 0x0000000000000000
	edx_858 = (word32) rdx_857 (alias)
	rdx_rax_859 = SEQ(rdx_857, rax_850) (alias)
	edx_eax_860 = rdx_857 (alias)
	dl_861 = (byte) rdx_857 (alias)
	SZO_862 = cond(r14d_856 & r14d_856)
	Z_863 = SZO_862 (alias)
	C_864 = false
	branch (r14d_856 & r14d_856) != 0x00000000 l000000000040C080
// DataOut: ax eax ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C080:
	rLoc1_916 = rLoc1_848
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C051:
	qwLoc68_884 = rax_850
	SZO_885 = cond(rax_850 & rax_850)
	S_886 = SZO_885 (alias)
	C_887 = false
	rLoc2_888 = (real64) qwLoc68_884
	branch (rax_850 & rax_850) < 0x0000000000000000 l000000000040C79E
// DataOut: ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C79E:
	rLoc2_915 = rLoc2_888 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C063:
	rLoc2_889 = PHI(rLoc2_888, rLoc2_915)
	rcx_890 = 0x0000000000000000
	ecx_891 = (word32) rcx_890 (alias)
	SZO_892 = cond(ecx_891)
	rdx_893 = 0x0000000000000001
	edx_894 = (word32) rdx_893 (alias)
	rdx_rax_895 = SEQ(rdx_893, rax_850) (alias)
	edx_eax_896 = rdx_893 (alias)
	dl_897 = (byte) rdx_893 (alias)
	CZP_898 = cond(rLoc2_889 - rLoc1_848)
	Z_899 = CZP_898 (alias)
	P_900 = CZP_898 (alias)
	rLoc1_901 = rLoc1_848
	cl_902 = Test(PE,P_900)
	rcx_903 = DPB(rcx_890, cl_902, 0) (alias)
	ecx_904 = DPB(ecx_891, cl_902, 0) (alias)
	branch rLoc2_889 != rLoc1_848 l000000000040C075
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C071_1:
	rdx_910 = rcx_903
	edx_911 = (word32) rdx_910 (alias)
	rdx_rax_912 = SEQ(rdx_910, rax_850) (alias)
	edx_eax_913 = rdx_910 (alias)
	dl_914 = (byte) rdx_910 (alias)
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C075:
	rdx_905 = PHI(rdx_893, rdx_910)
	edx_906 = PHI(edx_894, edx_911)
	rdx_rax_907 = PHI(rdx_rax_895, rdx_rax_912)
	edx_eax_908 = PHI(edx_eax_896, edx_eax_913)
	dl_909 = PHI(dl_897, dl_914)
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C082:
	rLoc2_865 = PHI(rLoc2_889, rLoc2_846)
	P_866 = PHI(P_900, P_748)
	CZP_867 = PHI(CZP_898, CZP_842)
	ecx_868 = PHI(ecx_904, ecx_752)
	rcx_869 = PHI(rcx_903, rcx_760)
	cl_870 = PHI(cl_902, cl_753)
	Z_871 = PHI(Z_899, Z_863)
	rdx_872 = PHI(rdx_905, rdx_857)
	edx_873 = PHI(edx_906, edx_858)
	rdx_rax_874 = PHI(rdx_rax_907, rdx_rax_859)
	edx_eax_875 = PHI(edx_eax_908, edx_eax_860)
	dl_876 = PHI(dl_909, dl_861)
	rax_877 = rax_850 + rdx_872
	qwLoc68_878 = rax_877
	SZO_879 = cond(rax_877 & rax_877)
	S_880 = SZO_879 (alias)
	C_881 = false
	rLoc1_882 = (real64) qwLoc68_878
	branch (rax_877 & rax_877) >= 0x0000000000000000 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C093:
	rLoc1_883 = rLoc1_882 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C0A0:
	wLoc6A_797 = PHI(wLoc6A_743, wLoc6A_743, wLoc6A_844, wLoc6A_844)
	wLoc6C_798 = PHI(wLoc6C_744, wLoc6C_744, wLoc6C_845, wLoc6C_845)
	rLoc2_799 = PHI(rLoc2_745, rLoc2_835, rLoc2_865, rLoc2_865)
	qwLoc68_800 = PHI(qwLoc68_746, qwLoc68_746, qwLoc68_878, qwLoc68_878)
	rLoc1_801 = PHI(rLoc1_796, rLoc1_796, rLoc1_882, rLoc1_883)
	P_802 = PHI(P_748, P_748, P_866, P_866)
	CZP_803 = PHI(CZP_749, CZP_836, CZP_867, CZP_867)
	r10_804 = PHI(r10_750, r10_750, r10_849, r10_849)
	S_805 = PHI(S_751, S_751, S_880, S_880)
	CZ_806 = PHI(CZ_788, CZ_837, CZ_837, CZ_837)
	ecx_807 = PHI(ecx_752, ecx_752, ecx_868, ecx_868)
	cl_808 = PHI(cl_753, cl_753, cl_870, cl_870)
	Z_809 = PHI(Z_795, Z_795, Z_871, Z_871)
	eax_810 = PHI(eax_755, eax_755, eax_851, eax_851)
	ah_811 = PHI(ah_756, ah_756, ah_852, ah_852)
	ax_812 = PHI(ax_757, ax_757, ax_853, ax_853)
	al_813 = PHI(al_782, al_782, al_854, al_854)
	edx_814 = PHI(edx_772, edx_772, edx_873, edx_873)
	rdx_rax_815 = PHI(rdx_rax_792, rdx_rax_792, rdx_rax_874, rdx_rax_874)
	edx_eax_816 = PHI(edx_eax_793, edx_eax_793, edx_eax_875, edx_eax_875)
	dl_817 = PHI(dl_773, dl_773, dl_876, dl_876)
	rLoc1_818 = rLoc1_801 / Mem0[0x0000000000415F84:real32]
	r14_819 = qwLocA0_35
	rcx_820 = 0x0000000000415F18
	rdx_821 = 0xFFFFFFFFFFFFFFFF
	rsi_822 = 0x0000000000000001
	rax_823 = 0x0000000000000000
	rdi_824 = r14_819
	rLocD0_825 = (real80) rLoc1_818
	rax_826 = 0x0000000000000000
	rdi_827 = r14_819
	r14_828 = 0x0000000000000000
	r14d_829 = (word32) r14_828 (alias)
	SZO_830 = cond(r14d_829)
	C_831 = false
	rax_832 = 0x0000000000000000
	r15_833 = 0x0000000000000000
	r15d_834 = (word32) r15_833 (alias)
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C218:
	rLoc4_665 = PHI(rLoc4_733, rLoc4_733, rLoc4_733, rLoc4)
	rLoc3_666 = PHI(rLoc3_723, rLoc3_723, rLoc3_723, rLoc3_659)
	qwLoc80_667 = PHI(qwLoc80_763, qwLoc80_763, qwLoc80_763, qwLoc80_128)
	rLoc90_668 = PHI(rLoc90_765, rLoc90_765, rLoc90_765, rLoc90)
	wLoc6A_669 = PHI(wLoc6A_743, wLoc6A_743, wLoc6A_797, wLoc6A_1106)
	wLoc6C_670 = PHI(wLoc6C_744, wLoc6C_744, wLoc6C_798, wLoc6C_1107)
	rLoc2_671 = PHI(rLoc2_745, rLoc2_745, rLoc2_799, rLoc2_1108)
	qwLoc68_672 = PHI(qwLoc68_746, qwLoc68_746, qwLoc68_800, qwLoc68_1109)
	rLoc1_673 = PHI(rLoc1_965, rLoc1_966, rLoc1_818, rLoc1_1110)
	rLocD0_674 = PHI(rLocD0_766, rLocD0_766, rLocD0_825, rLocD0_1128)
	P_675 = PHI(P_748, P_748, P_802, P_1111)
	CZP_676 = PHI(CZP_749, CZP_749, CZP_803, CZP_1112)
	esi_677 = PHI(esi_626, esi_626, esi_626, esi_1113)
	r10_678 = PHI(r10_750, r10_750, r10_804, r10_1114)
	S_679 = PHI(S_751, S_751, S_805, S_1115)
	r11_680 = PHI(r11_770, r11_770, r11_770, r11_135)
	r15_681 = PHI(r15_774, r15_774, r15_833, r15_1144)
	r14_682 = PHI(r14_780, r14_780, r14_828, r14_1134)
	r14d_683 = PHI(r14d_781, r14d_781, r14d_829, r14d_1135)
	CZ_684 = PHI(CZ_788, CZ_788, CZ_806, CZ_1116)
	ebx_685 = PHI(ebx_729, ebx_729, ebx_729, ebx_1142)
	ecx_686 = PHI(ecx_752, ecx_752, ecx_807, ecx_1117)
	rcx_687 = PHI(rcx_760, rcx_760, rcx_820, rcx_1130)
	cl_688 = PHI(cl_753, cl_753, cl_808, cl_1118)
	SZO_689 = PHI(SZO_957, SZO_957, SZO_830, SZO_1136)
	Z_690 = PHI(Z_964, Z_958, Z_809, Z_1119)
	C_691 = PHI(C_959, C_959, C_831, C_1137)
	edx_692 = PHI(edx_772, edx_772, edx_814, edx_1124)
	dl_693 = PHI(dl_773, dl_773, dl_817, dl_1127)
	rbx_694 = PHI(rbx_728, rbx_728, rbx_728, rbx_1141)
	r12_695 = qwLocB8_143
	rsi_696 = qwLocA0_35
	rdx_697 = r15_681
	r12_698 = r12_695 - r15_681
	r12d_699 = (word32) r12_698 (alias)
	r15_700 = r15_681 - r14_682
	r15d_701 = (word32) r15_700 (alias)
	SCZO_702 = cond(r15_700)
	rdi_703 = r12_698
	rax_704 = memmove(rdi_703, rsi_696, rdx_697)
	eax_705 = (word32) rax_704 (alias)
	rdx_rax_706 = SEQ(rdx_697, rax_704) (alias)
	edx_eax_707 = rax_704 (alias)
	ah_708 = SLICE(rax_704, byte, 8) (alias)
	ax_709 = (word16) rax_704 (alias)
	al_710 = (byte) rax_704 (alias)
	r8_711 = r12_698 + r15_700
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 r10:<invalid> al:<invalid> eax:<invalid> ah:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C237:
	dwLoc74_144 = PHI(dwLoc74, dwLoc74_1324)
	qwLoc90_145 = PHI(qwLoc90, qwLoc90_1325)
	rLoc4_146 = PHI(rLoc4_665, rLoc4)
	rLoc3_147 = PHI(rLoc3_666, rLoc3)
	qwLoc80_148 = PHI(qwLoc80_667, qwLoc80_1326)
	rLoc90_149 = PHI(rLoc90_668, rLoc90)
	wLoc6A_150 = PHI(wLoc6A_669, wLoc6A)
	wLoc6C_151 = PHI(wLoc6C_670, wLoc6C)
	rLoc2_152 = PHI(rLoc2_671, rLoc2)
	qwLoc68_153 = PHI(qwLoc68_672, qwLoc68)
	rLoc1_154 = PHI(rLoc1_673, rLoc1)
	rLocD0_155 = PHI(rLocD0_674, rLocD0)
	qwLoc98_156 = PHI(qwLoc98, qwLoc98_1381)
	r10b_157 = PHI(r10b_623, r10b_1432)
	r10d_158 = PHI(r10d_624, r10d_1431)
	dil_159 = PHI(dil_97, dil_1329)
	sil_160 = PHI(sil_625, sil_1330)
	P_161 = PHI(P_675, P_94)
	CZP_162 = PHI(CZP_676, CZP_1292)
	esi_163 = PHI(esi_677, esi_1364)
	edi_164 = PHI(edi_84, edi_1365)
	r10_165 = PHI(r10_678, r10_1430)
	S_166 = PHI(S_679, S_1296)
	r11_167 = PHI(r11_680, r11_1334)
	r8_168 = PHI(r8_711, r8_1385)
	r15_169 = PHI(r15_700, r15_126)
	r15d_170 = PHI(r15d_701, r15d_127)
	r9_171 = PHI(r9_87, r9_1404)
	r9d_172 = PHI(r9d_86, r9d_1405)
	r12_173 = PHI(r12_698, r12_1409)
	r12d_174 = PHI(r12d_699, r12d_1410)
	r14_175 = PHI(r14_682, r14_1340)
	r14d_176 = PHI(r14d_683, r14d_1341)
	CZ_177 = PHI(CZ_684, CZ_1342)
	ebx_178 = PHI(ebx_685, ebx_1386)
	ecx_179 = PHI(ecx_686, ecx_1366)
	rcx_180 = PHI(rcx_687, rcx_1367)
	cl_181 = PHI(cl_688, cl_1368)
	rax_182 = PHI(rax_704, rax_1415)
	eax_183 = PHI(eax_705, eax_1416)
	ah_184 = PHI(ah_708, ah_1419)
	ax_185 = PHI(ax_709, ax_1420)
	al_186 = PHI(al_710, al_1421)
	rdx_187 = PHI(rdx_697, rdx_1413)
	edx_188 = PHI(edx_692, edx_1355)
	rdx_rax_189 = PHI(rdx_rax_706, rdx_rax_1417)
	edx_eax_190 = PHI(edx_eax_707, edx_eax_1418)
	dl_191 = PHI(dl_693, dl_1358)
	SCZO_192 = PHI(SCZO_702, SCZO_1398)
	rbx_193 = PHI(rbx_694, rbx_1399)
	rsi_194 = PHI(rsi_696, rsi_1400)
	rdi_195 = PHI(rdi_703, rdi_1401)
	SZO_197 = cond(bLocB0 & 0x04)
	Z_198 = SZO_197 (alias)
	C_199 = false
	branch (bLocB0 & 0x04) != 0x00 l000000000040C318
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C318:
	r8_487 = r8_168 - r12_173
	SCZO_488 = cond(r8_487)
	rdi_489 = r13_136
	r15_490 = 0xFFFFFFFFFFFFFFFF
	r15d_491 = (word32) r15_490 (alias)
	r14_492 = r8_487
	r14d_493 = (word32) r14_492 (alias)
	rax_494 = DPB(rax_182, strlen(rdi_489), 0)
	rdi_495 = fp - 0x0000000000000060
	rsi_496 = r12_173
	rcx_497 = 0x0000000000000029
	rdx_498 = r14_492
	qwLoc98_499 = rax_494
	call __memcpy_chk (retsize: 8; depth: 216)
		uses: ah_184,al_186,ax_185,bLocB0,C_199,cl_181,CZ_177,CZP_162,dil_159,dl_191,dwLoc04_4,dwLoc08_12,dwLoc0C_17,dwLoc10_20,dwLoc14_24,dwLoc18_27,dwLoc74_144,dwLoc78_48,dwLoc98_32,dwLocAC_56,dwLocB0_38,eax_183,ebx_178,ecx_179,edi_164,edx_188,esi_163,fs_73,P_161,qwLoc08,qwLoc10,qwLoc18,qwLoc28_44,qwLoc68_153,qwLoc80_148,qwLoc90_145,qwLoc98_499,qwLocA0_35,qwLocA8_40,qwLocB8_143,r10_165,r10b_157,r10d_158,r11_167,r12_173,r12d_174,r13_136,r14_492,r14d_493,r15_490,r15d_491,r8_487,r9_171,r9d_172,rax_494,rbp_107,rbx_193,rcx_497,rdi_495,rdx_498,rLoc90_149,rLocD0_155,rsi_496,rsp_58,S_166,SCZO_488,sil_160,SZO_197,wLoc6A_150,wLoc6C_151,Z_198
		defs: ah_534,al_540,ax_535,C_506,cl_527,CZ_521,CZP_532,dil_539,dl_537,eax_502,ebx_524,ecx_516,edi_526,edx_503,esi_530,fs_515,P_536,r10_525,r10b_543,r10d_542,r11_519,r12_510,r12d_531,r13_518,r14_508,r14d_533,r15_517,r15d_541,r8_514,r9_529,r9d_528,rax_504,rbp_509,rbx_511,rcx_512,rdi_501,rdx_520,rsi_507,rsp_500,S_523,SCZO_513,sil_538,SZO_505,Z_522
	r9_544 = r12_510 + r14_508
	r9d_545 = (word32) r9_544 (alias)
	r12_546 = r13_518
	r12d_547 = (word32) r12_546 (alias)
	r13_548 = qwLoc98_499
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C36C:
	r15_549 = PHI(r15_517, r15_581)
	r15d_550 = PHI(r15d_541, r15d_582)
	r9_551 = PHI(r9_544, r9_609)
	r9d_552 = PHI(r9d_545, r9d_610)
	r14_553 = PHI(r14_508, r14_583)
	r14d_554 = PHI(r14d_533, r14d_584)
	CZ_555 = PHI(CZ_521, CZ_579)
	rax_556 = PHI(rax_504, rax_608)
	eax_557 = PHI(eax_502, eax_590)
	ah_558 = PHI(ah_534, ah_593)
	ax_559 = PHI(ax_535, ax_594)
	al_560 = PHI(al_540, al_595)
	rdx_561 = PHI(rdx_520, rdx_605)
	rdx_rax_562 = PHI(rdx_rax_189, rdx_rax_591)
	SCZO_563 = PHI(SCZO_513, SCZO_604)
	rbp_564 = PHI(rbp_509, rbp_577)
	rsi_565 = PHI(rsi_507, rsi_606)
	rdi_566 = PHI(rdi_501, rdi_607)
	edx_567 = (word32) Mem0[rbp_564 + 0x0000000000000000:byte]
	rdx_568 = DPB(rdx_561, edx_567, 0) (alias)
	rdx_rax_569 = DPB(rdx_rax_562, edx_567, 64) (alias)
	edx_eax_570 = SEQ(edx_567, eax_557) (alias)
	dl_571 = (byte) edx_567 (alias)
	SZO_572 = cond(dl_571 & dl_571)
	Z_573 = SZO_572 (alias)
	C_574 = false
	branch (dl_571 & dl_571) == 0x00 l000000000040C383
// DataOut: dl ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C374:
	SCZO_613 = cond(dl_571 - 0x7E)
	CZ_614 = SCZO_613 (alias)
	r15d_615 = (word32) dl_571
	r15_616 = DPB(r15_549, r15d_615, 0) (alias)
	branch dl_571 <=u 0x7E l000000000040C37F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C37B_1:
	r15_621 = r14_553
	r15d_622 = (word32) r15_621 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C37F:
	r15_617 = PHI(r15_616, r15_621)
	r15d_618 = PHI(r15d_615, r15d_622)
	rbp_619 = rbp_564 + 0x0000000000000001
	SCZO_620 = cond(rbp_619)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C383:
	r15_575 = PHI(r15_549, r15_617)
	r15d_576 = PHI(r15d_550, r15d_618)
	rbp_577 = PHI(rbp_564, rbp_619)
	SCZO_578 = cond(r15_575 - r14_553)
	CZ_579 = SCZO_578 (alias)
	rax_580 = fp - 0x0000000000000060
	branch r15_575 <=u r14_553 l000000000040C38F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C38B_1:
	r15_611 = r14_553
	r15d_612 = (word32) r15_611 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:fp - 0x0000000000000060 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C38F:
	r15_581 = PHI(r15_575, r15_611)
	r15d_582 = PHI(r15d_576, r15d_612)
	r14_583 = r14_553 - r15_581
	r14d_584 = (word32) r14_583 (alias)
	r9_585 = r9_551 - r15_581
	rdx_586 = r15_581
	rsi_587 = fp - 0x0000000000000060 + r14_583
	rdi_588 = r9_585
	rax_589 = memcpy(rdi_588, rsi_587, rdx_586)
	eax_590 = (word32) rax_589 (alias)
	rdx_rax_591 = SEQ(rdx_586, rax_589) (alias)
	edx_eax_592 = rax_589 (alias)
	ah_593 = SLICE(rax_589, byte, 8) (alias)
	ax_594 = (word16) rax_589 (alias)
	al_595 = (byte) rax_589 (alias)
	SZO_596 = cond(r14_583 & r14_583)
	Z_597 = SZO_596 (alias)
	C_598 = false
	r9_599 = rax_589
	r9d_600 = (word32) r9_599 (alias)
	branch (r14_583 & r14_583) != 0x0000000000000000 l000000000040C358
// DataOut: ebx fs r11 r11d r12 r13 r14 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:fp - 0x0000000000000060 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C358:
	r9_603 = r9_599 - r13_548
	SCZO_604 = cond(r9_603)
	rdx_605 = r13_548
	rsi_606 = r12_546
	rdi_607 = r9_603
	rax_608 = memcpy(rdi_607, rsi_606, rdx_605)
	r9_609 = rax_608
	r9d_610 = (word32) r9_609 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C3AC:
	r12_601 = rax_589
	r12d_602 = (word32) r12_601 (alias)
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C242:
	qwLoc98_200 = PHI(qwLoc98_499, qwLoc98_156)
	r10b_201 = PHI(r10b_543, r10b_157)
	r10d_202 = PHI(r10d_542, r10d_158)
	dil_203 = PHI(dil_539, dil_159)
	sil_204 = PHI(sil_538, sil_160)
	P_205 = PHI(P_536, P_161)
	CZP_206 = PHI(CZP_532, CZP_162)
	esi_207 = PHI(esi_530, esi_163)
	edi_208 = PHI(edi_526, edi_164)
	r10_209 = PHI(r10_525, r10_165)
	S_210 = PHI(S_523, S_166)
	r11_211 = PHI(r11_519, r11_167)
	fs_212 = PHI(fs_515, fs_73)
	r8_213 = PHI(r8_514, r8_168)
	r13_214 = PHI(r13_548, r13_136)
	r15_215 = PHI(r15_581, r15_169)
	r15d_216 = PHI(r15d_582, r15d_170)
	r9_217 = PHI(r9_599, r9_171)
	r9d_218 = PHI(r9d_600, r9d_172)
	r12_219 = PHI(r12_601, r12_173)
	r12d_220 = PHI(r12d_602, r12d_174)
	r14_221 = PHI(r14_583, r14_175)
	r14d_222 = PHI(r14d_584, r14d_176)
	CZ_223 = PHI(CZ_579, CZ_177)
	ebx_224 = PHI(ebx_524, ebx_178)
	ecx_225 = PHI(ecx_516, ecx_179)
	rcx_226 = PHI(rcx_512, rcx_180)
	cl_227 = PHI(cl_527, cl_181)
	rax_228 = PHI(rax_589, rax_182)
	eax_229 = PHI(eax_590, eax_183)
	ah_230 = PHI(ah_593, ah_184)
	ax_231 = PHI(ax_594, ax_185)
	al_232 = PHI(al_595, al_186)
	rdx_233 = PHI(rdx_586, rdx_187)
	edx_234 = PHI(edx_567, edx_188)
	rdx_rax_235 = PHI(rdx_rax_591, rdx_rax_189)
	edx_eax_236 = PHI(edx_eax_592, edx_eax_190)
	dl_237 = PHI(dl_571, dl_191)
	SCZO_238 = PHI(SCZO_578, SCZO_192)
	rbx_239 = PHI(rbx_511, rbx_193)
	rbp_240 = PHI(rbp_577, rbp_107)
	rsi_241 = PHI(rsi_587, rsi_194)
	rdi_242 = PHI(rdi_588, rdi_195)
	rsp_243 = PHI(rsp_500, rsp_58)
	SZO_244 = cond(bLocB0 & 0x80)
	Z_245 = SZO_244 (alias)
	C_246 = false
	branch (bLocB0 & 0x80) == 0x00 l000000000040C2BA
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C249:
	SCZO_379 = cond(ebx_224 - 0xFFFFFFFF)
	Z_380 = SCZO_379 (alias)
	branch ebx_224 == 0xFFFFFFFF l000000000040C618
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C618:
	rdx_448 = qwLocA8_40
	edx_449 = (word32) rdx_448 (alias)
	rdx_rax_450 = SEQ(rdx_448, rax_228) (alias)
	edx_eax_451 = rdx_448 (alias)
	dl_452 = (byte) rdx_448 (alias)
	SCZO_453 = cond(rdx_448 - 0x0000000000000001)
	CZ_454 = SCZO_453 (alias)
	branch rdx_448 <=u 0x0000000000000001 l000000000040C7A9
// DataOut: fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C7A9:
	rbx_483 = 0x0000000000000000
	ebx_484 = (word32) rbx_483 (alias)
	SZO_485 = cond(ebx_484)
	C_486 = false
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C627:
	r14_455 = (uint64) dwLocAC_56
	r14d_456 = (word32) r14_455 (alias)
	rbx_457 = 0x0000000000000001
	ebx_458 = (word32) rbx_457 (alias)
	rax_459 = 0x0000000000000001
	eax_460 = (word32) rax_459 (alias)
	rdx_rax_461 = SEQ(rdx_448, rax_459) (alias)
	edx_eax_462 = rax_459 (alias)
	ah_463 = SLICE(rax_459, byte, 8) (alias)
	ax_464 = (word16) rax_459 (alias)
	al_465 = (byte) rax_459 (alias)
// DataOut: ebx fs r11 r11d r12 r14 r14d r15 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C640:
	ebx_466 = PHI(ebx_458, ebx_480)
	Z_467 = PHI(Z_380, Z_482)
	rax_468 = PHI(rax_459, rax_470)
	rbx_469 = PHI(rbx_457, rbx_479)
	rax_470 = rax_468 *s r14_455
	eax_471 = (word32) rax_470 (alias)
	rdx_rax_472 = SEQ(rdx_448, rax_470) (alias)
	edx_eax_473 = rax_470 (alias)
	ah_474 = SLICE(rax_470, byte, 8) (alias)
	ax_475 = (word16) rax_470 (alias)
	al_476 = (byte) rax_470 (alias)
	SCZO_477 = cond(rdx_448 - rax_470)
	CZ_478 = SCZO_477 (alias)
	branch rdx_448 <=u rax_470 l000000000040C252
// DataOut: ebx fs r11 r11d r12 r14 r14d r15 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C64D:
	rbx_479 = (uint64) (ebx_466 + 0x00000001)
	ebx_480 = (word32) rbx_479 (alias)
	SCZO_481 = cond(ebx_480 - 0x00000008)
	Z_482 = SCZO_481 (alias)
	branch ebx_480 != 0x00000008 l000000000040C640
// DataOut: ebx fs r11 r11d r12 r14 r14d r15 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C655:
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C252:
	r14_381 = PHI(r14_221, r14_455, r14_455, r14_221)
	r14d_382 = PHI(r14d_222, r14d_456, r14d_456, r14d_222)
	CZ_383 = PHI(CZ_223, CZ_478, CZ_478, CZ_454)
	ebx_384 = PHI(ebx_224, ebx_466, ebx_480, ebx_484)
	rdx_385 = PHI(rdx_233, rdx_448, rdx_448, rdx_448)
	edx_386 = PHI(edx_234, edx_449, edx_449, edx_449)
	dl_387 = PHI(dl_237, dl_452, dl_452, dl_452)
	SCZO_388 = PHI(SCZO_379, SCZO_477, SCZO_481, SCZO_453)
	rbx_389 = PHI(rbx_239, rbx_469, rbx_479, rbx_483)
	rax_390 = (uint64) dwLocB0_38
	eax_391 = (word32) rax_390 (alias)
	rcx_392 = (uint64) ebx_384
	ecx_393 = (word32) rcx_392 (alias)
	rax_394 = (uint64) (eax_391 & 0x00000100)
	eax_395 = (word32) rax_394 (alias)
	rdx_rax_396 = SEQ(rdx_385, rax_394) (alias)
	edx_eax_397 = rax_394 (alias)
	ah_398 = SLICE(rax_394, byte, 8) (alias)
	ax_399 = (word16) rax_394 (alias)
	al_400 = (byte) rax_394 (alias)
	rcx_401 = (uint64) (ecx_393 | eax_395)
	ecx_402 = (word32) rcx_401 (alias)
	SZO_403 = cond(ecx_402)
	Z_404 = SZO_403 (alias)
	C_405 = false
	branch ecx_402 == 0x00000000 l000000000040C2BA
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(0) Local -00B8(64)

l000000000040C261:
	SZO_406 = cond(bLocB0 & 0x40)
	Z_407 = SZO_406 (alias)
	C_408 = false
	branch (bLocB0 & 0x40) != 0x00 l000000000040C3E8
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B8(64)

l000000000040C3E8:
	rcx_444 = qwLocA0_35
	rsi_445 = rcx_444 + 0x0000000000000289
	Mem446[rcx_444 + 0x0000000000000288:byte] = 0x20
	qwLocB8_447 = rsi_445
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C26C:
	rcx_409 = PHI(rcx_401, rcx_444)
	qwLocB8_410 = PHI(qwLocB8_143, qwLocB8_447)
	rsi_411 = PHI(rsi_241, rsi_445)
	SZO_412 = cond(ebx_384 & ebx_384)
	Z_413 = SZO_412 (alias)
	C_414 = false
	branch (ebx_384 & ebx_384) == 0x00000000 l000000000040C7EB
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C274:
	rcx_415 = qwLocB8_410
	rdx_416 = rcx_415 + 0x0000000000000001
	edx_417 = (word32) rdx_416 (alias)
	rdx_rax_418 = SEQ(rdx_416, rax_394) (alias)
	edx_eax_419 = rdx_416 (alias)
	dl_420 = (byte) rdx_416 (alias)
	rcx_421 = (uint64) dwLoc78_48
	ecx_422 = (word32) rcx_421 (alias)
	SZO_423 = cond(ecx_422 & ecx_422)
	Z_424 = SZO_423 (alias)
	C_425 = false
	branch (ecx_422 & ecx_422) == 0x00000000 l000000000040C3D0
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3D0:
	SCZO_439 = cond(ebx_384 - 0x00000001)
	Z_440 = SCZO_439 (alias)
	rcx_441 = 0x000000000000006B
	ecx_442 = (word32) rcx_441 (alias)
	cl_443 = (byte) rcx_441 (alias)
	branch ebx_384 != 0x00000001 l000000000040C289
// DataOut: cl eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:(uint64) eax r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3DE:
// DataOut: cl eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x000000000000006B r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:0x6B edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:0x0000006B dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C289:
	Z_433 = PHI(Z_424, Z_440)
	SCZO_434 = PHI(SCZO_388, SCZO_439)
	rcx_435 = (int64) ebx_384
	ecx_436 = (word32) Mem0[rcx_435 + 0x0000000000415F78:byte]
	rcx_437 = DPB(rcx_435, ecx_436, 0) (alias)
	cl_438 = (byte) ecx_436 (alias)
// DataOut: cl eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C293:
	ecx_426 = PHI(ecx_436, ecx_442)
	rcx_427 = PHI(rcx_437, rcx_441)
	cl_428 = PHI(cl_438, cl_443)
	Z_429 = PHI(Z_433, Z_440)
	SCZO_430 = PHI(SCZO_434, SCZO_439)
	rdi_431 = qwLocB8_410
	Mem432[rdi_431:byte] = cl_428
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> ecx:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C29A:
	r14_324 = PHI(r14_381, r14_247)
	r14d_325 = PHI(r14d_382, r14d_248)
	CZ_326 = PHI(CZ_383, CZ_249)
	ebx_327 = PHI(ebx_384, ebx_250)
	ecx_328 = PHI(ecx_426, ecx_251)
	rcx_329 = PHI(rcx_427, rcx_252)
	cl_330 = PHI(cl_428, cl_253)
	qwLocB8_331 = PHI(qwLocB8_410, qwLocB8_254)
	rax_332 = PHI(rax_394, rax_258)
	eax_333 = PHI(eax_395, eax_259)
	ah_334 = PHI(ah_398, ah_260)
	ax_335 = PHI(ax_399, ax_261)
	al_336 = PHI(al_400, al_262)
	rdx_337 = PHI(rdx_416, rdx_267)
	edx_338 = PHI(edx_417, edx_268)
	rdx_rax_339 = PHI(rdx_rax_418, rdx_rax_269)
	edx_eax_340 = PHI(edx_eax_419, edx_eax_270)
	dl_341 = PHI(dl_420, dl_271)
	SCZO_342 = PHI(SCZO_430, SCZO_263)
	rbx_343 = PHI(rbx_389, rbx_264)
	rsi_344 = PHI(rsi_411, rsi_265)
	rdi_345 = PHI(rdi_431, rdi_266)
	SZO_346 = cond(eax_333 & eax_333)
	Z_347 = SZO_346 (alias)
	C_348 = false
	branch (eax_333 & eax_333) == 0x00000000 l000000000040C7F5
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C7F5:
	qwLocB8_378 = rdx_337
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2A2:
	rax_349 = (uint64) dwLoc78_48
	eax_350 = (word32) rax_349 (alias)
	rdx_rax_351 = SEQ(rdx_337, rax_349) (alias)
	edx_eax_352 = rax_349 (alias)
	SZO_353 = cond(eax_350 & eax_350)
	Z_354 = SZO_353 (alias)
	C_355 = false
	branch (eax_350 & eax_350) != 0x00000000 l000000000040C3B8
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3B8:
	SZO_368 = cond(ebx_327 & ebx_327)
	Z_369 = SZO_368 (alias)
	C_370 = false
	branch (ebx_327 & ebx_327) == 0x00000000 l000000000040C2AE
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) eax r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3C0:
	Mem371[rdx_337:byte] = 0x69
	rdx_372 = rdx_337 + 0x0000000000000001
	edx_373 = (word32) rdx_372 (alias)
	rdx_rax_374 = SEQ(rdx_372, rax_349) (alias)
	edx_eax_375 = rdx_372 (alias)
	dl_376 = (byte) rdx_372 (alias)
	SCZO_377 = cond(rdx_372)
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) eax r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2AE:
	SZO_356 = PHI(SZO_353, SZO_368, SZO_368)
	Z_357 = PHI(Z_354, Z_369, Z_369)
	C_358 = PHI(C_355, C_370, C_370)
	rdx_359 = PHI(rdx_337, rdx_337, rdx_372)
	edx_360 = PHI(edx_338, edx_338, edx_373)
	rdx_rax_361 = PHI(rdx_rax_351, rdx_rax_351, rdx_rax_374)
	edx_eax_362 = PHI(edx_eax_352, edx_eax_352, edx_eax_375)
	dl_363 = PHI(dl_341, dl_341, dl_376)
	SCZO_364 = PHI(SCZO_342, SCZO_342, SCZO_377)
	rax_365 = rdx_359 + 0x0000000000000001
	Mem366[rdx_359:byte] = 0x42
	qwLocB8_367 = rax_365
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) eax r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2BA:
	r14_272 = PHI(r14_221, r14_381, r14_324, r14_324)
	r14d_273 = PHI(r14d_222, r14d_382, r14d_325, r14d_325)
	CZ_274 = PHI(CZ_223, CZ_383, CZ_326, CZ_326)
	ebx_275 = PHI(ebx_224, ebx_384, ebx_327, ebx_327)
	ecx_276 = PHI(ecx_225, ecx_402, ecx_328, ecx_328)
	rcx_277 = PHI(rcx_226, rcx_401, rcx_329, rcx_329)
	cl_278 = PHI(cl_227, cl_227, cl_330, cl_330)
	qwLocB8_279 = PHI(qwLocB8_143, qwLocB8_143, qwLocB8_367, qwLocB8_378)
	rdx_280 = PHI(rdx_233, rdx_385, rdx_359, rdx_337)
	edx_281 = PHI(edx_234, edx_386, edx_360, edx_338)
	dl_282 = PHI(dl_237, dl_387, dl_363, dl_341)
	SCZO_283 = PHI(SCZO_238, SCZO_388, SCZO_364, SCZO_342)
	rbx_284 = PHI(rbx_239, rbx_389, rbx_343, rbx_343)
	rsi_285 = PHI(rsi_241, rsi_241, rsi_344, rsi_344)
	rax_286 = qwLocB8_279
	rdi_287 = qwLoc28_44
	rdi_288 = rdi_287 ^ Mem0[fs_212:0x00000028:word64]
	SZO_289 = cond(rdi_288)
	Z_290 = SZO_289 (alias)
	C_291 = false
	Mem292[rax_286:byte] = 0x00
	rax_293 = r12_219
	eax_294 = (word32) rax_293 (alias)
	rdx_rax_295 = SEQ(rdx_280, rax_293) (alias)
	edx_eax_296 = rax_293 (alias)
	ah_297 = SLICE(rax_293, byte, 8) (alias)
	ax_298 = (word16) rax_293 (alias)
	al_299 = (byte) rax_293 (alias)
	branch rdi_288 != 0x0000000000000000 l000000000040C7E6
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7E6:
	__stack_chk_fail()
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7EB:
	r14_247 = PHI(r14_381, r14_272)
	r14d_248 = PHI(r14d_382, r14d_273)
	CZ_249 = PHI(CZ_383, CZ_274)
	ebx_250 = PHI(ebx_384, ebx_275)
	ecx_251 = PHI(ecx_402, ecx_276)
	rcx_252 = PHI(rcx_409, rcx_277)
	cl_253 = PHI(cl_227, cl_278)
	qwLocB8_254 = PHI(qwLocB8_410, qwLocB8_279)
	SZO_255 = PHI(SZO_412, SZO_289)
	Z_256 = PHI(Z_413, Z_290)
	C_257 = PHI(C_414, C_291)
	rax_258 = PHI(rax_394, rax_293)
	eax_259 = PHI(eax_395, eax_294)
	ah_260 = PHI(ah_398, ah_297)
	ax_261 = PHI(ax_399, ax_298)
	al_262 = PHI(al_400, al_299)
	SCZO_263 = PHI(SCZO_388, SCZO_283)
	rbx_264 = PHI(rbx_389, rbx_284)
	rsi_265 = PHI(rsi_411, rsi_285)
	rdi_266 = PHI(rdi_242, rdi_288)
	rdx_267 = qwLocB8_254
	edx_268 = (word32) rdx_267 (alias)
	rdx_rax_269 = SEQ(rdx_267, rax_258) (alias)
	edx_eax_270 = rdx_267 (alias)
	dl_271 = (byte) rdx_267 (alias)
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2DC:
	rsp_300 = fp - 0x0000000000000018
	SCZO_301 = cond(fp - 0x0000000000000018)
	rbx_303 = qwLoc18
	rsp_304 = fp - 0x0000000000000010
	rbp_306 = qwLoc10
	rsp_307 = fp - 0x0000000000000008
	rsp_309 = qwLoc08
	rsp_310 = rsp_309 + 0x0000000000000008
	rbp_311 = Mem292[rsp_310:word64]
	rsp_312 = rsp_310 + 0x0000000000000008
	rsi_313 = Mem292[rsp_312:word64]
	rsp_314 = rsp_312 + 0x0000000000000008
	rdi_315 = Mem292[rsp_314:word64]
	rsp_316 = rsp_314 + 0x0000000000000008
	return rax_293
// DataOut: fs r11 r11d r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040BD70_exit:
	use rsp_316 (=> rspOut)
	use rbp_311 (=> rbpOut)
	use r8_213 (=> r8Out)
	use r9_217 (=> r9Out)
	use r11_211 (=> r11Out)
	use r14d_273 (=> r14dOut)
	use r15_215 (=> r15Out)
// DataOut: r11 r11d r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 rax:<invalid> r14:<invalid> r12:<invalid> rbx:rbx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040C810(word64 rax, word64 rdx, word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rax rdi rdx
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040C810_entry:
// DataOut: r8 rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C810:
	word32 ebp_121
	word64 rbp_136
	word64 rdx_134
	word64 r12_11 = rdx
	word64 rbx_108 = rdi
	branch rdi == 0x0000000000000000 l000000000040C910
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C910:
	rax = getenv(0x00000000004138E4)
	rbx_108 = rax
	branch rax != 0x0000000000000000 l000000000040C82C
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:rdi -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C926:
	rax = getenv(0x0000000000415F24)
	rbx_108 = rax
	branch rax != 0x0000000000000000 l000000000040C82C
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C93C:
	word64 rdx_250 = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	Mem254[rdx:word64] = rdx_250 + 512
	rbp_136 = 0x0000000000000000
	ebp_121 = 0x00000000 (alias)
	rdx_134 = rdx_250 + 512
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:0x0000000000415F24 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C82C:
	branch Mem0[rbx_108:byte] == 0x27 l000000000040C8A0
// DataOut: r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8A0:
	rbx_108 = rbx_108 + 0x0000000000000001
// DataOut: r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rbp:0x0000000000000000 rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C833:
	word64 rsp_120
	word64 r14_123
	word64 rax_124 = fn0000000000409E50(rax, 0x0000000000000004, 0x0000000000415F50, 0x0000000000415F60, rbx_108, out rsp_120, out ebp_121, out r12_11, out r14_123)
	byte al_127 = (byte) rax_124
	branch (word32) rax_124 < 0x00000000 l000000000040C8B0
// DataOut: al ebp r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> bpl:0x04 rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8B0:
	word64 rsp_151
	word64 r8_153
	branch fn0000000000411360(0x00000000, rsp_120 + 0x0000000000000008, rbx_108, r8, out rsp_151, out rbp_136, out r8_153, out r12_11) != 0x00000000 l000000000040C968
// DataOut: ebp r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> r14:<invalid> ecx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C968:
	Mem217[rbp_136:word32] = 0x00000000
	rdx_134 = Mem217[r12_11:word64]
// DataOut: r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8D0:
	branch (byte) (uint64) ((word32) Mem0[rbx_108:byte] - 0x00000030) <=u 0x09 l000000000040C907
// DataOut: ebp r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8DA:
	word64 rdx_178 = Mem0[rsp_151 + 0x0000000000000008:word64]
	branch rbx_108 != rdx_178 l000000000040C8F9
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F9:
	rbx_108 = rbx_108 + 0x0000000000000001
	branch (byte) (uint64) ((word32) Mem0[rbx_108:byte] - 0x00000030) >u 0x09 l000000000040C8F0
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F0:
	branch rbx_108 == rdx_178 l000000000040C980
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8E4:
// DataOut: ebp r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C980:
	branch Mem0[rdx_178 - 0x0000000000000001:byte] == 0x42 l000000000040C998
// DataOut: ebp r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C998:
	rbp_136 = (uint64) (ebp_121 | 0x00000180)
	ebp_121 = (word32) rbp_136 (alias)
	branch Mem0[rdx_178 - 0x0000000000000002:byte] != 0x69 l000000000040C907
// DataOut: ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C9A8:
// DataOut: ebp r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C986:
	ebp_121 = DPB(ebp_121, 0x84, 0) (alias)
// DataOut: ebp r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C98A:
	rbp_136 = (uint64) (ebp_121 | 0x00000020)
	ebp_121 = (word32) rbp_136 (alias)
// DataOut: ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C907:
	rdx_134 = Mem0[r12_11:word64]
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C84E:
	Mem133[r12_11:word64] = 0x0000000000000001
	rbp_136 = (uint64) (ebp_121 | Mem133[DPB(rax_124, (int16) al_127, 0) * 0x0000000000000004 + 0x00415F50:word32])
	rdx_134 = 0x0000000000000001
	ebp_121 = (word32) rbp_136 (alias)
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> r14:<invalid> ecx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C864:
	Mem97[rbp_136:word32] = ebp_121
// DataOut: r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:(int16) al rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86A:
	branch rdx_134 != 0x0000000000000000 l000000000040C894
// DataOut: r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86F:
	Mem75[r12_11:word64] = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C894:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040C810_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040C9B0(word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rsi
// LiveOut: r12 rax rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040C9B0_entry:
	*r12Out = r12
	*rsiOut = rsi
// DataOut: edi fs r11 r11d r12 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C9B0:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_16 = Mem0[0x000000000061B1F8:word64]
	branch rbx_16 != 0x0000000000000000 l000000000040C9D1
// DataOut: ebp fs r11 r11d r12 r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C9D1:
	branch Mem0[rbx_16:word32] != ebp_10 l000000000040C9C8
// DataOut: ebp fs r11 r11d r12 r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C8:
	rbx_16 = Mem0[rbx_16 + 0x0000000000000008:word64]
	branch rbx_16 == 0x0000000000000000 l000000000040C9F0
// DataOut: ebp fs r11 r11d r12 r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C2:
// DataOut: ebp fs r11 r11d r12 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9F0:
	word64 rax_51 = getpwuid((uint64) ebp_10)
	word64 rdi_56 = 0x0000000000000011
	branch rax_51 == 0x0000000000000000 l000000000040CA16
// DataOut: ebp fs r11 r11d r12 r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA07:
	r12 = Mem0[r8:word64]
	*r12Out = r12
	rdi_56 = DPB(rax_51, strlen(r12), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA16:
	word64 rax_64 = fn0000000000410C40(rsi, rdi_56, out rsp_11)
	Mem66[rax_64:word32] = ebp_10
	strcpy(rax_64 + 0x0000000000000010, r12)
	word64 rax_70 = Mem66[0x000000000061B1F8:word64]
	Mem71[0x000000000061B1F8:word64] = rax_64
	Mem72[rax_64 + 0x0000000000000008:word64] = rax_70
	word64 rsi_67
	*rsiOut = r12
	rbx_16 = rax_64
// DataOut: fs r11 r11d r12 r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9D5:
	word64 rax_28 = 0x0000000000000000
	word64 rdx_32 = rbx_16 + 0x0000000000000010
	word64 rsp_38
	*rspOut = Mem0[rsp_11 + 0x0000000000000010:word64] + 0x0000000000000008
	branch Mem0[rbx_16 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
// DataOut: fs r11 r11d r12 r8 r9 rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:(uint64) edi rbx:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E3_1:
	rax_28 = rdx_32
// DataOut: fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:0x0000000000000000 rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E7:
	return rax_28
// DataOut: fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040C9B0_exit:
// DataOut: r12 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CB40(word64 rax, word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rax rsi
// LiveOut: r12 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040CB40_entry:
	*r12Out = r12
// DataOut: edi fs r11 r11d r12 r13d r14 r15 r15d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB40:
	word64 rbx_100
	word64 rbp_9 = (uint64) edi
	word32 ebp_10 = (word32) rbp_9
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_16 = Mem0[0x000000000061B1E8:word64]
	rbx_100 = rbx_16
	branch rbx_16 != 0x0000000000000000 l000000000040CB61
// DataOut: ebp fs r11 r11d r12 r13d r14 r15 r15d r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CB61:
	branch Mem0[rbx_100:word32] != ebp_10 l000000000040CB58
// DataOut: ebp fs r11 r11d r12 r13d r14 r15 r15d r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB58:
	rbx_100 = Mem0[rbx_100 + 0x0000000000000008:word64]
	branch rbx_100 == 0x0000000000000000 l000000000040CB80
// DataOut: ebp fs r11 r11d r12 r13d r14 r15 r15d r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB52:
// DataOut: ebp fs r11 r11d r12 r13d r14 r15 r15d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB80:
	word64 rsp_58
	word64 rbp_59
	word32 ebp_60
	word32 edi_61
	word64 rbx_62
	byte SZO_63
	byte C_64
	byte Z_65
	byte SCZO_66
	word32 eax_67
	word64 rax_68
	word64 rdx_69
	word64 rdi_70
	word32 esp_71
	word64 r8_73
	word64 rsi_74
	word64 r12_72
	call getgrgid (retsize: 8; depth: 8)
		uses: C_19,dwLoc04_4,dwLoc08_7,dwLoc0C_14,eax,ebp_10,edi,esp_12,r12,r8,rax,rbp_9,rbx_16,rdi_49,rdx,rsi,rsp_50,SCZO,SZO_17,Z_18
		defs: C_64,eax_67,ebp_60,edi_61,esp_71,r12_72,r8_73,rax_68,rbp_59,rbx_62,rdi_70,rdx_69,rsi_74,rsp_58,SCZO_66,SZO_63,Z_65
	word64 rdi_78 = 0x0000000000000011
	branch rax_68 == 0x0000000000000000 l000000000040CBA6
// DataOut: ebp fs r11 r11d r12 r13d r14 r15 r15d r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB97:
	r12_72 = Mem0[r8_73:word64]
	*r12Out = r12_72
	rdi_78 = DPB(rax_68, strlen(r12_72), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r13d r14 r15 r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CBA6:
	word64 rax_84 = fn0000000000410C40(rsi_74, rdi_78, out rsp_11)
	Mem86[rax_84:word32] = ebp_60
	strcpy(rax_84 + 0x0000000000000010, r12_72)
	word64 rax_90 = Mem86[0x000000000061B1E8:word64]
	Mem91[0x000000000061B1E8:word64] = rax_84
	Mem92[rax_84 + 0x0000000000000008:word64] = rax_90
	rbx_100 = rax_84
// DataOut: fs r11 r11d r12 r13d r14 r15 r15d r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB65:
	word64 rsp_35 = rsp_11 + 0x0000000000000008
	word64 rax_29 = 0x0000000000000000
	word64 rdx_33 = rbx_100 + 0x0000000000000010
	word64 rbp_36
	*rbpOut = Mem0[rsp_35:word64]
	word64 rsp_40
	*rspOut = Mem0[rsp_35 + 0x0000000000000008:word64] + 0x0000000000000008
	branch Mem0[rbx_100 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
// DataOut: fs r11 r11d r12 r13d r14 r15 r15d r8 r9 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB73_1:
	rax_29 = rdx_33
// DataOut: fs r11 r11d r12 r13d r14 r15 r15d r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:0x0000000000000000 rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB77:
	return rax_29
// DataOut: fs r11 r11d r12 r13d r14 r15 r15d r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040CB40_exit:
// DataOut: r12 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CCD0(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CCD0_entry:
// DataOut: dil fs r11 r11d r12 r13 r15 r15b rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CCD0:
	Mem8[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_26 = rsi + 0x0000000000000014
	word64 r14_9
	*r14Out = 0x0000000066666667
	branch rdi < 0x0000000000000000 l000000000040CD28
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD28:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CD30:
	word64 rdx_68 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem79[rcx_26:byte] = (byte) (uint64) (rdx_68 * 0x0000000000000005 * 0x0000000000000002 + 0x0000000000000030 - edi)
	rdi = rdx_68
	edi = (word32) rdx_68 (alias)
	branch rdx_68 != 0x0000000000000000 l000000000040CD30
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi rsi:0x0000000000000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CD5B:
	Mem83[rcx_26 - 0x0000000000000001:byte] = 0x2D
	return rcx_26 - 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi rsi:0x0000000000000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CCE7:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CCF0:
	word64 rdx_35 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem45[rcx_26:byte] = (byte) (uint64) ((word32) (rdi - (rdx_35 * 0x0000000000000005) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_35
	branch rdx_35 != 0x0000000000000000 l000000000040CCF0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CD20:
	return rcx_26
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CCD0_exit:
// DataOut: r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> r8:rsi rsi:0x0000000000000030 eax:<invalid>



word64 fn000000000040CD70(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: eax r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx r14 r14b r14d r14w rax rcx rdi rdx
// Preserved: rsp
fn000000000040CD70_entry:
// DataOut: dil fs r11 r11d r12 r13 r13d r15 r15b rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD70:
	Mem4[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_10 = rsi + 0x0000000000000014
	word64 r14_5
	*r14Out = 0x00000000CCCCCCCD
// DataOut: dil fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD88:
	word64 rdx_rax_11 = rsi *u rdi
	rcx_10 = rcx_10 - 0x0000000000000001
	Mem23[rcx_10:byte] = (byte) (uint64) ((word32) (rdi - ((rdx_rax_11 >>u 0x0000000000000003) + (rdx_rax_11 >>u 0x0000000000000003) * 0x0000000000000004) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_rax_11 >>u 0x0000000000000003
	branch rdx_rax_11 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040CD88
// DataOut: dil fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CDAE:
	return rcx_10
// DataOut: eax fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CD70_exit:
// DataOut: eax r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>



void fn000000000040CDC0(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8d r9b r9d rax rcx rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040CDC0_entry:
// DataOut: r8d r9b r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CDC0:
	word64 r15_392
	word64 qwLoc40_106
	word64 rbp_127
	word64 rax_372
	word64 rcx_123
	word32 eax_294
	word32 ecx_288
	word64 r12_124
	word64 rbx_24 = (uint64) r9d
	word64 rax_34 = DPB(rax, strlen(rdi), 0)
	word64 r13_11 = rsi
	word64 r12_16 = rcx
	word32 ebx_112 = (word32) rbx_24
	byte bl_113 = (byte) rbx_24
	word64 qwLoc48_105 = rdi
	word64 r14_110 = rax_34
	word64 rbp_42 = rax_34
	branch (bl_113 & 0x02) == 0x00 l000000000040CF60
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CF60:
	word64 rsp_546
	word64 rdi_547
	word64 rsi_548
	word64 rcx_552
	word64 rbx_553
	word32 r9d_555
	byte SCZO_556
	word64 rdx_557
	word32 r8d_558
	word64 rax_559
	byte SZO_561
	byte C_562
	byte Z_564
	word64 r15_565
	word32 ebp_566
	byte CZ_567
	word32 ecx_568
	word32 eax_569
	word32 r12d_570
	word32 edx_571
	word32 edi_572
	word32 r15d_573
	word16 ax_574
	byte al_575
	call __ctype_get_mb_cur_max (retsize: 8; depth: 88)
		uses: al_37,ax_36,bl_26,bLoc21,C_40,CZ,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_35,ebp_43,ebx_25,ecx,edi,edx,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_30,qwLoc40,qwLoc48_28,r12_16,r12d_17,r13_11,r14_41,r15,r15d,r8d,r9d,rax_34,rbp_42,rbx_24,rcx,rdi,rdx,rsi,rsp_27,SCZO,SZO_38,Z_39
		defs: al_575,ax_574,bl_560,C_562,CZ_567,eax_569,ebp_566,ebx_554,ecx_568,edi_572,edx_571,r12_551,r12d_570,r13_550,r14_563,r15_565,r15d_573,r8d_558,r9d_555,rax_559,rbp_549,rbx_553,rcx_552,rdi_547,rdx_557,rsi_548,rsp_546,SCZO_556,SZO_561,Z_564
	branch rax_559 <=u 0x0000000000000001 l000000000040CDFA
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:DPB(rax, <invalid>, 0) r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CF6F:
	word64 rsp_584
	word64 rdi_585
	word64 rsi_586
	word64 rbp_587
	word64 rcx_590
	word64 rbx_591
	word32 r9d_593
	byte SCZO_594
	word64 rdx_595
	word32 r8d_596
	word64 rax_597
	byte SZO_599
	byte C_600
	byte Z_602
	word64 r15_603
	word32 ebp_604
	byte CZ_605
	word32 ecx_606
	word32 eax_607
	word32 r12d_608
	word32 edx_609
	word32 edi_610
	word32 r15d_611
	word16 ax_612
	byte al_613
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_575,ax_574,bl_560,bLoc21,C_583,CZ_577,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_569,ebp_566,ebx_554,ecx_568,edi_581,edx_571,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_30,qwLoc40,qwLoc48_28,r12_551,r12d_570,r13_550,r14_563,r15_565,r15d_573,r8d_558,r9d_555,rax_559,rbp_549,rbx_553,rcx_552,rdi_580,rdx_579,rsi_578,rsp_546,SCZO_576,SZO_582,Z_564
		defs: al_613,ax_612,bl_598,C_600,CZ_605,eax_607,ebp_604,ebx_592,ecx_606,edi_610,edx_609,r12_589,r12d_608,r13_588,r14_601,r15_603,r15d_611,r8d_596,r9d_593,rax_597,rbp_587,rbx_591,rcx_590,rdi_585,rdx_595,rsi_586,rsp_584,SCZO_594,SZO_599,Z_602
	branch rax_597 != 0xFFFFFFFFFFFFFFFF l000000000040CFA8
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CFA8:
	word64 r15_642 = (rax_597 + 0x0000000000000001) * 0x0000000000000004
	word64 rax_646 = malloc(r15_642)
	qwLoc40_106 = rax_646
	branch rax_646 == 0x0000000000000000 l000000000040D160
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D160:
	branch (bl_113 & 0x01) == 0x00 l000000000040CF8C
// DataOut: bl ebx r12 r13 r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D169:
	r15_392 = r14_110
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CFCF:
	word64 rsp_657
	word64 rdi_658
	word64 rsi_659
	word64 rcx_663
	word64 rbx_664
	word32 r9d_666
	byte SCZO_667
	word64 rdx_668
	word32 r8d_669
	word64 rax_670
	byte SZO_672
	byte C_673
	byte Z_675
	word64 r15_676
	word32 ebp_677
	byte CZ_678
	word32 ecx_679
	word32 eax_680
	word32 r12d_681
	word32 edx_682
	word32 edi_683
	word32 r15d_684
	word16 ax_685
	byte al_686
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_649,ax_648,bl_598,bLoc21,C_652,CZ_605,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_647,ebp_604,ebx_592,ecx_606,edi_610,edx_609,qwLoc08,qwLoc10,qwLoc18,qwLoc30_644,qwLoc38_30,qwLoc40_653,qwLoc48_28,r12_589,r12d_608,r13_588,r14_601,r15_642,r15d_643,r8d_596,r9d_593,rax_646,rbp_587,rbx_591,rcx_590,rdi_656,rdx_654,rsi_655,rsp_584,SCZO_614,SZO_650,Z_651
		defs: al_686,ax_685,bl_671,C_673,CZ_678,eax_680,ebp_677,ebx_665,ecx_679,edi_683,edx_682,r12_662,r12d_681,r13_661,r14_674,r15_676,r15d_684,r8d_669,r9d_666,rax_670,rbp_660,rbx_664,rcx_663,rdi_658,rdx_668,rsi_659,rsp_657,SCZO_667,SZO_672,Z_675
	branch rax_670 == 0x0000000000000000 l000000000040CE03
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CFEC:
	word64 rsi_723
	word64 qwLoc30_703
	Mem694[rax_646 - 0x0000000000000004 + r15_676:word32] = 0x00000000
	word64 rdi_695 = (uint64) Mem694[rax_646:word32]
	word32 edi_696 = (word32) rdi_695
	branch edi_696 == 0x00000000 l000000000040D106
// DataOut: bl eax ebx r12 r13 r14 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D106:
	word64 rax_921 = DPB(rax_646, wcswidth(rax_646, rax_597 + 0x0000000000000001), 0)
	r15_392 = (int64) wcswidth(rax_646, rax_597 + 0x0000000000000001)
// DataOut: bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D004:
	byte bLoc21_857 = 0x00
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D010:
	word64 rsp_859
	word64 rdi_860
	word64 rsi_861
	word64 rcx_865
	word64 rbx_866
	word32 r9d_868
	byte SCZO_869
	word64 rdx_870
	word32 r8d_871
	word64 rax_872
	byte SZO_874
	byte C_875
	byte Z_877
	word64 r15_878
	word32 ebp_879
	byte CZ_880
	word32 ecx_881
	word32 eax_882
	word32 r12d_883
	word32 edx_884
	word32 edi_885
	word32 r15d_886
	word16 ax_887
	byte al_888
	call iswprint (retsize: 8; depth: 88)
		uses: al_693,ax_692,bl_671,bLoc21_858,C_699,CZ_678,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_691,ebp_677,ebx_665,ecx_679,edi_696,edx_682,qwLoc08,qwLoc10,qwLoc18,qwLoc30_644,qwLoc38_30,qwLoc40_653,qwLoc48_28,r12_662,r12d_681,r13_661,r14_674,r15_855,r15d_856,r8d_669,r9d_666,rax_690,rbp_660,rbx_664,rcx_663,rdi_695,rdx_668,rsi_659,rsp_657,SCZO_667,SZO_697,Z_698
		defs: al_888,ax_887,bl_873,C_875,CZ_880,eax_882,ebp_879,ebx_867,ecx_881,edi_885,edx_884,r12_864,r12d_883,r13_863,r14_876,r15_878,r15d_886,r8d_871,r9d_868,rax_872,rbp_862,rbx_866,rcx_865,rdi_860,rdx_870,rsi_861,rsp_859,SCZO_869,SZO_874,Z_877
	branch eax_882 != 0x00000000 l000000000040D025
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D019:
	Mem917[rdi_860:word32] = 0x0000FFFD
	bLoc21_857 = 0x01
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D025:
	branch (word32) (uint64) Mem694[rdi_860:word32] != 0x00000000 l000000000040D010
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D030:
	word64 rax_902 = DPB(rax_872, wcswidth(rax_646, rax_597 + 0x0000000000000001), 0)
	r15_392 = (int64) wcswidth(rax_646, rax_597 + 0x0000000000000001)
	branch bLoc21_857 == 0x00 l000000000040D118
// DataOut: bl ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D118:
	rsi_723 = rax_597 + 0x0000000000000001
	rax_372 = Mem694[r12_16:word64]
	branch r15_392 <=u rax_372 l000000000040CF28
// DataOut: bl ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF28:
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D125:
	qwLoc30_703 = rbp_42 + 0x0000000000000001
// DataOut: bl ebx r12 r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D04D:
	rsi_723 = rax_646
	qwLoc30_703 = DPB(rax_872, wcstombs(0x0000000000000000, rax_646, 0x0000000000000000), 0) + 0x0000000000000001
// DataOut: bl ebx r12 r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D064:
	word64 rax_726 = malloc(qwLoc30_703)
	rbp_127 = rax_726
	branch rax_726 == 0x0000000000000000 l000000000040D138
// DataOut: bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D138:
	branch (bl_113 & 0x01) != 0x00 l000000000040CE08
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D141:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040D07A:
	word64 rdi_738 = (uint64) Mem694[rax_646:word32]
	word64 rax_732 = Mem694[r12_16:word64]
	word64 rax_734 = rax_646
	branch (word32) rdi_738 == 0x00000000 l000000000040D173
// DataOut: bl eax ebx r12 r13 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D173:
	r15_392 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D092:
	r15_392 = 0x0000000000000000
// DataOut: bl eax ebx r12 r13 r14 r15 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0BA:
	word64 rax_774 = DPB(rax_734, wcwidth(rdi_738), 0)
	word32 eax_775 = wcwidth(rdi_738)
	byte al_777 = (byte) wcwidth(rdi_738)
	branch eax_775 != 0xFFFFFFFF l000000000040D0A0
// DataOut: al bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0A0:
	rax_734 = DPB(rax_734, (int16) al_777, 0) + r15_392
	branch rax_732 <u rax_734 l000000000040D0E0
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0C4:
	Mem794[rsi_723:word32] = 0x0000FFFD
	rax_734 = r15_392 + 0x0000000000000001
	branch rax_732 >=u rax_734 l000000000040D0AC
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0AC:
	rdi_738 = (uint64) Mem694[rsi_723:word32]
	r15_392 = rax_734
	branch (word32) rdi_738 == 0x00000000 l000000000040D0E0
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0DA:
// DataOut: bl ebx r12 r13 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D0E0:
	Mem757[rax_646:word32] = 0x00000000
	qwLoc48_105 = rax_726
	r14_110 = DPB(rax_734, wcstombs(rax_726, rax_646, qwLoc30_703), 0)
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF83:
	branch (bl_113 & 0x01) != 0x00 l000000000040D14D
// DataOut: bl ebx r12 r13 r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040D14D:
	r15_392 = r14_110
	qwLoc40_106 = 0x0000000000000000
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF8C:
	qwLoc40_106 = 0x0000000000000000
	rbp_127 = 0x0000000000000000
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CDFA:
	qwLoc40_106 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE03:
	r15_392 = rbp_42
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE08:
	rax_372 = Mem0[r12_16:word64]
	branch r15_392 <=u rax_372 l000000000040CF2A
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF2A:
	branch r15_392 >=u rax_372 l000000000040D180
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D180:
	rax_372 = r15_392
// DataOut: bl ebx ecx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF33:
	Mem424[r12_16:word64] = r15_392
	word64 rax_420 = rax_372 - r15_392
	rcx_123 = rax_420
	ecx_288 = (word32) rax_420 (alias)
	eax_294 = (word32) (uint64) r8d (alias)
	branch eax_294 != 0x00000000 l000000000040CE2A
// DataOut: bl eax ebx ecx r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE15:
	r14_110 = rax_372
// DataOut: bl ebx ecx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE1A:
	Mem378[r12_16:word64] = rax_372
	ecx_288 = 0x00000000
	rcx_123 = 0x0000000000000000
	eax_294 = (word32) (uint64) r8d (alias)
	branch eax_294 == 0x00000000 l000000000040CF4C
// DataOut: bl eax ebx ecx r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:0x0000000000000000 rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF4C:
	r12_124 = rcx_123
	rcx_123 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:(uint64) r8d r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE2A:
	r12_124 = 0x0000000000000000
	branch eax_294 == 0x00000001 l000000000040CE3E
// DataOut: bl ebx ecx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:(uint64) r8d r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE32:
	r12_124 = rcx_123 >>u 0x0000000000000001
	rcx_123 = (uint64) (ecx_288 & 0x00000001) + r12_124
// DataOut: bl ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:0x0000000000000000 rbx:(uint64) r9d rax:(uint64) r8d r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE3E:
	branch (bl_113 & 0x04) == 0x00 l000000000040CE47
// DataOut: ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d rax:(uint64) r8d r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE43_1:
	rcx_123 = 0x0000000000000000
// DataOut: ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d rax:0x0000000000000000 r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE47:
	branch (word32) (uint64) (ebx_112 & 0x00000008) == 0x00000000 l000000000040CE4E
// DataOut: r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d rax:0x0000000000000000 r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE4A_1:
	r12_124 = 0x0000000000000000
// DataOut: r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) (ebx & 0x00000008) rax:0x0000000000000000 r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE4E:
	branch rdx == 0x0000000000000000 l000000000040CEF9
// DataOut: r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) (ebx & 0x00000008) rax:0x0000000000000000 r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64) Local -0048(64)

l000000000040CE5A:
	word64 rdx_173 = rcx_123 - 0x0000000000000001
	word64 rbx_175 = r13_11 - 0x0000000000000001 + rdx
	branch rcx_123 == 0x0000000000000000 l000000000040CE97
// DataOut: r12 r13 r14 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) (ebx & 0x00000008) rax:0x0000000000000000 r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64) Local -0048(64)

l000000000040CE6D:
	branch r13_11 >=u rbx_175 l000000000040CE97
// DataOut: r12 r13 r14 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:rdx r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64) Local -0048(64)

l000000000040CE72:
	word64 rax_249 = 0x0000000000000000
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:rdx r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64) Local -0048(64)

l000000000040CE89:
	Mem263[rbp_127 - 0x0000000000000001:byte] = 0x20
	r13_11 = r13_11 + 0x0000000000000001
	branch rdx_173 != rax_249 l000000000040CE80
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64) Local -0048(64)

l000000000040CE80:
	rax_249 = rax_249 + 0x0000000000000001
	branch r13_11 == rbx_175 l000000000040CE97
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64) Local -0048(64)

l000000000040CE97:
	Mem188[rbp_127:byte] = 0x00
	word64 rdx_189 = rbx_175 - r13_11
	branch rdx_189 <=u r14_110 l000000000040CEB6
// DataOut: r12 r14 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CEB2_1:
	rdx_189 = r14_110
// DataOut: r12 r14 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CEB6:
	word64 rax_197 = mempcpy(r13_11, qwLoc48_105, rdx_189)
	word64 rdx_204 = rax_197
	word64 rsi_206 = r12_124 - 0x0000000000000001
	branch r12_124 == 0x0000000000000000 l000000000040CEF6
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CECD:
	branch rbx_175 <=u rax_197 l000000000040CEF6
// DataOut: r12 r14 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CED2:
	word64 rax_223 = 0x0000000000000000
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEE9:
	rdx_204 = rdx_204 + 0x0000000000000001
	Mem238[rdx_204 - 0x0000000000000001:byte] = 0x20
	branch rsi_206 != rax_223 l000000000040CEE0
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEE0:
	rax_223 = rax_223 + 0x0000000000000001
	branch rdx_204 == rbx_175 l000000000040CEF6
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEF6:
	Mem220[rdx_204:byte] = 0x00
// DataOut: r12 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEF9:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEFF:
	free(qwLoc40_106)
	free(rbp_127)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040CDC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r13:<invalid> r12:<invalid> rbx:rbx rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040D240(word32 edx, word64 rsi, word64 rdi, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi rsi
// LiveOut: eax ebp ebx edi esp r12 r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D240_entry:
// DataOut: ebx edx fs r11 r11d r12 r14 r14b r14d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0034(64)

l000000000040D240:
	word64 rax_199
	word64 rsp_49
	word32 r15d_51
	word32 edx_52
	word64 r15_53
	word64 rsi_54
	word64 rbx_57
	byte SCZO_58
	word64 rax_59
	word32 eax_61
	byte SZO_62
	byte C_63
	byte CZ_64
	word32 r14d_65
	word64 r14_66
	word32 r12d_67
	word64 r12_68
	word32 esi_69
	word64 rcx_70
	byte al_71
	byte SO_72
	word64 rdx_73
	byte dh_74
	byte Z_75
	word32 edi_76
	word32 ebp_77
	byte S_78
	word32 ebx_79
	word64 r13_261
	word64 rbp_273
	word64 rdi_106
	call __ctype_get_mb_cur_max (retsize: 8; depth: 72)
		uses: al_46,C_48,dwLoc04_23,dwLoc08_27,dwLoc0C_29,dwLoc10_33,dwLoc14_35,dwLoc18_39,dwLoc44_12,dwLoc48_13,eax_45,ebp_37,edx_15,fs_11,qwLoc28_43,qwLoc30_10,qwLoc48_14,r13_30,r15_24,r15d_25,rax_44,rbp_36,rbx_16,rdi_19,rsi_18,rsp_40,SZO_47
		defs: al_71,C_63,CZ_64,dh_74,eax_61,ebp_77,ebx_79,edi_76,edx_52,esi_69,fs_60,r12_68,r12d_67,r13_56,r14_66,r14d_65,r15_53,r15d_51,rax_59,rbp_55,rbx_57,rcx_70,rdi_50,rdx_73,rsi_54,rsp_49,S_78,SCZO_58,SO_72,SZO_62,Z_75
	word64 rax_42 = Mem0[fs:0x00000028:word64]
	branch false l000000000040D370
// DataOut: ebx fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:(uint64) ebp rcx:<invalid> edx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D370:
	branch rbp_273 >=u r13_261 l000000000040D406
// DataOut: ebx fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D379:
	word64 rsp_577
	word32 r15d_579
	word32 edx_580
	word64 r15_581
	word64 rsi_582
	word64 r13_584
	word64 rbx_585
	byte SCZO_586
	word64 rax_587
	word32 eax_589
	byte SZO_590
	byte C_591
	byte CZ_592
	word32 r14d_593
	word64 r14_594
	word32 r12d_595
	word64 r12_596
	word32 esi_597
	word64 rcx_598
	byte al_599
	byte SO_600
	byte dh_602
	byte Z_603
	word32 edi_604
	word32 ebp_605
	byte S_606
	word32 ebx_607
	word64 rbp_583
	word64 rdx_601
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: al_71,C_576,CZ_81,dh_74,dwLoc04_23,dwLoc08_27,dwLoc0C_29,dwLoc10_33,dwLoc14_35,dwLoc18_39,dwLoc34,dwLoc44_12,dwLoc48_13,eax_61,ebp_77,ebx_79,edi_76,edx_52,esi_69,fs_60,qwLoc08,qwLoc10,qwLoc18,qwLoc28_43,qwLoc30_10,qwLoc40,qwLoc48_14,r12_68,r12d_67,r13_56,r14_66,r14d_65,r15_53,r15d_51,rax_59,rbp_55,rbx_57,rcx_70,rdi_50,rdx_73,rsi_54,rsp_49,S_78,SCZO_575,SO_72,SZO_62,Z_75
		defs: al_599,C_591,CZ_592,dh_602,eax_589,ebp_605,ebx_607,edi_604,edx_580,esi_597,fs_588,r12_596,r12d_595,r13_584,r14_594,r14d_593,r15_581,r15d_579,rax_587,rbp_583,rbx_585,rcx_598,rdi_578,rdx_601,rsi_582,rsp_577,S_606,SCZO_586,SO_600,SZO_590,Z_603
	word64 rcx_610 = Mem0[rax_587:word64]
	rax_199 = 0x0000000000000000
	word32 eax_612 = 0x00000000
	word32 esi_615 = (word32) (uint64) ((word32) (uint64) r15d_579 & 0x00000002)
// DataOut: eax ebx esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D398:
	rbp_583 = rbp_583 + 0x0000000000000001
	word32 edx_628 = (word32) Mem0[rcx_610 + DPB(rdx_601, (word32) Mem0[rbp_583 - 0x0000000000000001:byte], 0) * 0x0000000000000002:word16]
	rdx_601 = DPB(rdx_601, edx_628, 0) (alias)
	branch (SLICE(edx_628, byte, 8) & 0x40) != 0x00 l000000000040D3B2
// DataOut: eax ebx edx esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> rdi:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3A9:
	branch esi_615 != 0x00000000 l000000000040D369
// DataOut: eax ebx edx esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> rdi:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3AD:
	rdx_601 = (uint64) (edx_628 & 0x00000002)
	branch (word32) rdx_601 != 0x00000000 l000000000040D393
// DataOut: eax ebx esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> rdi:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3B2:
	branch eax_612 != 0x7FFFFFFF l000000000040D390
// DataOut: eax ebx esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> rdi:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D390:
	rax_199 = (uint64) (eax_612 + 0x00000001)
	eax_612 = (word32) rax_199 (alias)
// DataOut: eax ebx esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> rdi:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D393:
	branch rbp_583 == r13_584 l000000000040D3C5
// DataOut: eax ebx esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> rdi:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3B9:
// DataOut: ebx fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> rdi:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D277:
	branch rbp_273 >=u r13_261 l000000000040D406
// DataOut: ebx fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D406:
	rax_199 = 0x0000000000000000
// DataOut: eax ebx fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D280:
	word32 r12d_245 = 0x00000000
	word64 r15_246
	*r15Out = (uint64) (r15d_51 & 0x00000001)
	word64 r14_248
	*r14Out = (uint64) ((word32) (uint64) r15d_51 & 0x00000002)
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2AC:
	word32 eax_280 = (word32) Mem0[rbp_273:byte]
	byte al_282 = (byte) eax_280
	branch al_282 <= 0x3F l000000000040D290
// DataOut: al eax ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D290:
	branch al_282 >= 0x25 l000000000040D29B
// DataOut: al eax ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D294:
	branch (byte) (uint64) (eax_280 - 0x00000020) >u 0x03 l000000000040D2C3
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2B4:
	branch al_282 < 0x41 l000000000040D2C3
// DataOut: al eax ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2B8:
	branch al_282 <= 0x5F l000000000040D29B
// DataOut: al eax ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2BC:
	branch (byte) (uint64) (eax_280 - 0x00000061) <=u 0x1D l000000000040D29B
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2C3:
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2F4:
	word64 rsp_400
	word32 r15d_402
	word32 edx_403
	word64 r15_404
	word64 rsi_405
	word64 rbx_408
	byte SCZO_409
	word64 rax_410
	word32 eax_412
	byte SZO_413
	byte C_414
	byte CZ_415
	word32 r14d_416
	word64 r14_417
	word64 r12_419
	word32 esi_420
	word64 rcx_421
	byte al_422
	byte SO_423
	word64 rdx_424
	byte dh_425
	byte Z_426
	word32 edi_427
	word32 ebp_428
	byte S_429
	word32 ebx_430
	call mbrtowc (retsize: 8; depth: 72)
		uses: al_386,C_266,CZ_384,dh_270,dwLoc04_23,dwLoc08_27,dwLoc0C_29,dwLoc10_33,dwLoc14_35,dwLoc18_39,dwLoc44_12,dwLoc48_13,eax_385,ebp_274,ebx_272,edi_396,edx_269,esi_276,fs_260,qwLoc08,qwLoc10,qwLoc18,qwLoc28_43,qwLoc30_390,qwLoc40,qwLoc48_14,r12_256,r12d_257,r13_391,r14_258,r14d_259,r15_262,r15d_263,rax_388,rbp_392,rbx_271,rcx_394,rdi_395,rdx_397,rsi_399,rsp_279,S_253,SCZO_398,SO_383,SZO_387,Z_265
		defs: al_422,C_414,CZ_415,dh_425,eax_412,ebp_428,ebx_430,edi_427,edx_403,esi_420,fs_411,r12_419,r12d_418,r13_407,r14_417,r14d_416,r15_404,r15d_402,rax_410,rbp_406,rbx_408,rcx_421,rdi_401,rdx_424,rsi_405,rsp_400,S_429,SCZO_409,SO_423,SZO_413,Z_426
	branch rax_410 == 0xFFFFFFFFFFFFFFFF l000000000040D360
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D360:
	branch r15d_402 == 0x00000000 l000000000040D29B
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D29B:
	word64 r12_380 = (uint64) (r12d_245 + 0x00000001)
	*r12Out = r12_380
	rbp_273 = rbp_273 + 0x0000000000000001
	r12d_245 = (word32) r12_380 (alias)
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D315:
	branch rax_410 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3E8:
	branch r15d_402 != 0x00000000 l000000000040D369
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3F1:
	word64 r12_552 = (uint64) (r12d_245 + 0x00000001)
	*r12Out = r12_552
	rbp_273 = r13_261
	r12d_245 = (word32) r12_552 (alias)
	branch r13_261 >u r13_261 l000000000040D2AC
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D31F:
	rdi_106 = (uint64) dwLoc34
	branch rax_410 != 0x0000000000000000 l000000000040D32F
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D32B_1:
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D32F:
	branch true l000000000040D2D0
// DataOut: eax ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2D0:
	branch 0x00000001 > (word32) ((uint64) (0x7FFFFFFF - r12d_245)) l000000000040D3C0
// DataOut: eax ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2E0:
// DataOut: eax ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D338:
	branch r14d_416 != 0x00000000 l000000000040D369
// DataOut: eax ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D369:
	rax_199 = 0x00000000FFFFFFFF
// DataOut: eax ebx fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D33D:
	word64 rsp_498
	word32 r15d_500
	word32 edx_501
	word64 r15_502
	word64 rsi_503
	word64 rbp_504
	word64 r13_505
	word64 rbx_506
	byte SCZO_507
	word64 rax_508
	word32 eax_510
	byte SZO_511
	byte C_512
	byte CZ_513
	word32 r14d_514
	word64 r14_515
	word32 r12d_516
	word64 r12_517
	word32 esi_518
	word64 rcx_519
	byte al_520
	byte SO_521
	word64 rdx_522
	byte dh_523
	byte Z_524
	word32 edi_525
	word32 ebp_526
	byte S_527
	word32 ebx_528
	call iswcntrl (retsize: 8; depth: 72)
		uses: al_448,C_495,CZ_415,dh_425,dwLoc04_23,dwLoc08_27,dwLoc0C_29,dwLoc10_33,dwLoc14_35,dwLoc18_39,dwLoc34,dwLoc44_12,dwLoc48_13,eax_447,ebp_428,ebx_445,edi_497,edx_403,esi_420,fs_411,qwLoc08,qwLoc10,qwLoc18,qwLoc28_43,qwLoc30_390,qwLoc40,qwLoc48_14,r12_419,r12d_418,r13_407,r14_417,r14d_416,r15_404,r15d_402,rax_446,rbp_406,rbx_444,rcx_421,rdi_496,rdx_424,rsi_405,rsp_400,S_450,SCZO_435,SO_423,SZO_493,Z_494
		defs: al_520,C_512,CZ_513,dh_523,eax_510,ebp_526,ebx_528,edi_525,edx_501,esi_518,fs_509,r12_517,r12d_516,r13_505,r14_515,r14d_514,r15_502,r15d_500,rax_508,rbp_504,rbx_506,rcx_519,rdi_499,rdx_522,rsi_503,rsp_498,S_527,SCZO_507,SO_521,SZO_511,Z_524
	branch true l000000000040D2E3
// DataOut: eax ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D34A:
	branch r12d_516 == 0x7FFFFFFF l000000000040D3C0
// DataOut: eax ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3C0:
	rax_199 = 0x000000007FFFFFFF
// DataOut: eax ebx fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> rdi:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D353:
// DataOut: eax ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2E3:
	word64 rsp_459
	word32 r15d_461
	word32 edx_462
	word64 r15_463
	word64 rsi_464
	word64 rbx_467
	byte SCZO_468
	word64 rax_469
	word32 eax_471
	byte SZO_472
	byte C_473
	byte CZ_474
	word32 r14d_475
	word64 r14_476
	word64 r12_478
	word32 esi_479
	word64 rcx_480
	byte al_481
	byte SO_482
	word64 rdx_483
	byte dh_484
	byte Z_485
	word32 edi_486
	word32 ebp_487
	byte S_488
	word32 ebx_489
	call mbsinit (retsize: 8; depth: 72)
		uses: al_448,C_451,CZ_415,dh_425,dwLoc04_23,dwLoc08_27,dwLoc0C_29,dwLoc10_33,dwLoc14_35,dwLoc18_39,dwLoc34,dwLoc44_12,dwLoc48_13,eax_447,ebp_457,ebx_445,edi_455,edx_403,esi_420,fs_411,qwLoc08,qwLoc10,qwLoc18,qwLoc28_43,qwLoc30_390,qwLoc40,qwLoc48_14,r12_419,r12d_418,r13_407,r14_417,r14d_416,r15_404,r15d_402,rax_446,rbp_456,rbx_452,rcx_421,rdi_454,rdx_424,rsi_405,rsp_400,S_450,SCZO_458,SO_423,SZO_449,Z_441
		defs: al_481,C_473,CZ_474,dh_484,eax_471,ebp_487,ebx_489,edi_486,edx_462,esi_479,fs_470,r12_478,r12d_477,r13_466,r14_476,r14d_475,r15_463,r15d_461,rax_469,rbp_465,rbx_467,rcx_480,rdi_460,rdx_483,rsi_464,rsp_459,S_488,SCZO_468,SO_482,SZO_472,Z_485
	branch eax_471 != 0x00000000 l000000000040D2A3
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2A3:
	branch r13_261 <=u rbp_273 l000000000040D401
// DataOut: ebx fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D401:
	rax_199 = (uint64) r12d_245
// DataOut: eax ebx fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:<invalid> rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edx:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3C5:
	branch (rax_42 ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l000000000040D40A
// DataOut: eax ebx esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0034(64)

l000000000040D40A:
	__stack_chk_fail()
	word64 rax_154 = DPB(rax_199, strlen(rdi_106), 0)
// DataOut: ebx edx fs r11 r11d r12 r14 r14b r14d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>
// LocalsOut: fp(64) Local -0034(64)

l000000000040D3D5:
	word32 ebx_119
	*ebxOut = (word32) qwLoc18
	word64 rbp_127
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_130
	*rsiOut = Mem0[qwLoc08 + 0x0000000000000010:word64]
	word64 rdi_133
	*rdiOut = Mem0[qwLoc08 + 0x0000000000000018:word64]
	word64 rsp_135
	*rspOut = qwLoc08 + 0x0000000000000020
	return rax_199
// DataOut: eax ebp ebx edi esp fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>

fn000000000040D240_exit:
// DataOut: eax ebp ebx edi esp r12 r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> -72(fp):<invalid> -68(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):fp - 0x000000000000000C -12(fp):<invalid> -8(fp):<invalid> -4(fp):<invalid>



word64 fn000000000040D420(word64 rax, word32 esi, word64 rdi, selector fs, word64 qwArg00, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rax rdi
// LiveOut: eax ebx edi r12 r13 r13d r14 r15 r15b r15d rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn000000000040D420_entry:
// DataOut: esi fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D420:
	word64 rax_17 = DPB(rax, strlen(rdi), 0)
	word32 edi_21
	*ediOut = (word32) rdi
	word32 edx_23 = (word32) (uint64) (word32) (uint64) esi
// DataOut: edx fs r11 r11d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D43E_thunk_fn000000000040D240:
	word32 ebx_32
	word64 rsp_33
	word64 rbp_34
	word64 rsi_35
	word64 rdi_36
	word64 r12_37
	word64 r13_38
	word64 r14_39
	word64 r15_40
	return fn000000000040D240(edx_23, rax_17, rdi, fs, out ebx_32, out rsp_33, out rbp_34, out rsi_35, out rdi_36, out r12_37, out r13_38, out r14_39, out r15_40)
// DataOut: eax ebx edi fs r11 r11d r12 r13 r13d r14 r15 r15b r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rax:DPB(rax, <invalid>, 0) rdi:rdi rdx:(uint64) ebp rsi:DPB(rax, <invalid>, 0) -8(fp):rbx -4(fp):rbp

fn000000000040D420_exit:
// DataOut: eax ebx edi r12 r13 r13d r14 r15 r15b r15d rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp



word32 fn000000000040D450(word32 eax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & rspOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r11 r15 r8 rdi rsi
// LiveOut: eax r13 r14 r15 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D450_entry:
// DataOut: eax r11 r13 r14 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D450:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rbp = rcx
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000050
	SCZO = cond(rsi - 0x0000000000000002)
	Z = SCZO (alias)
	SZO = SCZO (alias)
	CZ = SCZO (alias)
	C = SCZO (alias)
	qwLoc50 = rsi
	qwLoc38 = rdx
	branch Test(UGT,CZ) l000000000040D490
// DataOut: eax r11 r13 r14 r15 r8 rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0050(64)

l000000000040D490:
	rsi = qwLoc50
	rdx = qwLoc38
	rax = rsi
	rax = rax >>u 0x0000000000000001
	r15 = rax
	qwLoc48 = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	qwLoc28 = rax
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
// DataOut: r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D570:
	r12 = Mem0[r11:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[r8:word64] = r12
// DataOut: r11 r12 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[r11:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D53B:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
// DataOut: eax r11 r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D547:
	v25 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v25
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
// DataOut: eax r11 r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
// DataOut: r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[r8:word64]
// DataOut: r11 r12 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	rdi = 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[r8:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B7:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = 0x00000000 + r15 * 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = memcpy(rdi, rsi, rdx)
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5C3:
	v26 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v26
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
// DataOut: eax r11 r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D660:
	r13 = Mem0[r15 + 0x0000000000000008:word64]
	r12 = Mem0[r15:word64]
	rsi = r13
	rdi = r12
	call ecx (retsize: 4; depth: 84)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
// DataOut: eax r11 r12 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D677:
	Mem0[r11:word64] = r13
	Mem0[r11 + 0x0000000000000008:word64] = r12
	rsp = fp - 0x0000000000000018
	SCZO = cond(fp - 0x0000000000000018)
	rbx = qwLoc18
	rsp = fp - 0x0000000000000010
	rbp = qwLoc10
	rsp = fp - 0x0000000000000008
	rsp = qwLoc08
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D450_exit:
	use rsp (=> rspOut)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r13 r14 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040D690(word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r11 r15 r8 rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040D690_entry:
// DataOut: edi r11 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D690:
	word32 eax_5 = (word32) (rdi + rsi * 0x0000000000000008)
// DataOut: eax r11 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D697_thunk_fn000000000040D450:
	word64 rsp_12
	word64 r13_13
	word64 r14_14
	word64 r15_15
	fn000000000040D450(eax_5, rsi, rdi, r8, r11, r15, out rsp_12, out r13_13, out r14_14, out r15_15)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:rdi + rsi * 0x0000000000000008 rcx:rdx rdx:rdi + rsi * 0x0000000000000008

fn000000000040D690_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> r15:<invalid> r14:<invalid>



void fn000000000040D6A0(word64 rax, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D6A0_entry:
// DataOut: rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D6A0:
	word64 rbx_119 = rdi
	branch rdi == 0x0000000000000000 l000000000040D713
// DataOut: rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D713:
	word64 rax_158 = DPB(rax, fwrite(0x0000000000415FA0, 0x0000000000000001, 0x0000000000000037, Mem0[0x000000000061A650:word64]), 0)
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l000000000040D6A9:
	word64 rax_11 = strrchr(rdi, 0x000000000000002F)
	branch rax_11 == 0x0000000000000000 l000000000040D703
// DataOut: rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6B8:
	word64 rcx_49 = rax_11 + 0x0000000000000001 - rdi
	byte SCZO_50 = cond(rcx_49 - 0x0000000000000006)
	byte C_110 = SCZO_50
	byte Z_143 = SCZO_50
	byte CZ_112 = SCZO_50
	branch rcx_49 <= 0x0000000000000006 l000000000040D703
// DataOut: rax rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:0x000000000000002F rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6C8:
	word64 rsi_145 = rax_11 - 0x0000000000000006
	word64 rdi_148 = 0x0000000000415FD8
	word64 rcx_150 = 0x0000000000000007
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:0x000000000000002F rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D6:
	branch rcx_150 == 0x0000000000000000 l000000000040D6D8
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D6_1:
	byte SCZO_140 = cond(Mem0[rsi_159:byte] - Mem0[rdi_160:byte])
	C_110 = SCZO_140 (alias)
	Z_143 = SCZO_140 (alias)
	CZ_112 = SCZO_140 (alias)
	rsi_145 = rsi_159 + 0x0000000000000001
	rdi_148 = rdi_160 + 0x0000000000000001
	rcx_150 = rcx_150 - 0x0000000000000001
	word64 rsi_159 = rsi_145
	word64 rdi_160 = rdi_148
	branch Mem0[rsi_159:byte] != Mem0[rdi_160:byte] l000000000040D6D6
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D8:
	branch Z_143 l000000000040D703
// DataOut: rax rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6DA:
	word64 rcx_104 = 0x0000000000000003
	word64 rsi_100 = rax_11 + 0x0000000000000001
	word64 rdi_102 = 0x0000000000415FE0
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E7:
	branch rcx_104 == 0x0000000000000000 l000000000040D6E9
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E7_2:
	byte SCZO_127 = cond(Mem0[rsi_161:byte] - Mem0[rdi_162:byte])
	C_110 = SCZO_127 (alias)
	CZ_112 = SCZO_127 (alias)
	rsi_100 = rsi_161 + 0x0000000000000001
	rdi_102 = rdi_162 + 0x0000000000000001
	rcx_104 = rcx_104 - 0x0000000000000001
	word64 rsi_161 = rsi_100
	word64 rdi_162 = rdi_102
	branch Mem0[rsi_161:byte] != Mem0[rdi_162:byte] l000000000040D6E7
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E9:
	rbx_119 = rax_11 + 0x0000000000000001
	branch CZ_112 != C_110 l000000000040D703
// DataOut: rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6F8:
	Mem125[0x000000000061A600:word64] = rax_11 + 0x0000000000000004
	rbx_119 = rax_11 + 0x0000000000000004
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D703:
	Mem41[0x000000000061B200:word64] = rbx_119
	Mem42[0x000000000061A648:word64] = rbx_119
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx

fn000000000040D6A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx



void fn000000000040D740(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx rax rcx rdi rdx
// Preserved: rsp
fn000000000040D740_entry:
// DataOut: ebp ebx esi fs r11 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D740:
	word64 rcx_15 = 0x0000000000000007
	word64 rdi_14 = fp - 0x0000000000000048
// DataOut: ebp ebx esi fs r11 rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D754:
	branch rcx_15 == 0x0000000000000000 l000000000040D757
// DataOut: ebp ebx esi fs r11 rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:0x0000000000000000 rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D757:
	branch esi == 0x00000008 l000000000040D7A1
// DataOut: ebp ebx esi fs r11 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:0x0000000000000000 rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D7A1:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:0x0000000000000000 rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000

l000000000040D759:
	Mem25[rdi:word64] = DPB(qwLoc48, esi, 0)
	Mem28[rdi + 0x0000000000000008:word64] = qwLoc40
	Mem31[rdi + 0x0000000000000010:word64] = qwLoc38
	Mem34[rdi + 0x0000000000000018:word64] = qwLoc30
	Mem37[rdi + 0x0000000000000020:word64] = qwLoc28
	Mem40[rdi + 0x0000000000000028:word64] = qwLoc20
	Mem43[rdi + 0x0000000000000030:word64] = qwLoc18
	return
// DataOut: ebp ebx fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:0x0000000000000000 rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000

fn000000000040D740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):esi

l000000000040D754_1:
	Mem17[rdi_14:word64] = 0x0000000000000000
	rdi_14 = rdi_14 + 0x0000000000000008
	rcx_15 = rcx_15 - 0x0000000000000001
// DataOut: ebp ebx esi fs r11 rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:0x0000000000000000 rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)



word64 fn000000000040D7B0(word32 esi, word64 rdi, word64 r8, word64 r13, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r13 r15 r8 rdi
// LiveOut: ebx r12 r12b r12d r13 r15 r15b r8 rax rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D7B0_entry:
	*r8Out = r8
	*r15Out = r15
	*r13Out = r13
// DataOut: esi fs r13 r15 r15b r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D7B0:
	word64 r12_10 = (uint64) esi
	*r12Out = r12_10
	word64 rax_23 = dcgettext(0x0000000000000000, rdi, 0x0000000000000005)
	word32 r12d_11 = (word32) r12_10
	word64 rsp_22 = fp - 0x0000000000000018
	word64 rbx_109 = rax_23
	branch rax_23 == rdi l000000000040D7E8
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D7E8:
	word64 rbp_65
	word64 r8_66
	word64 r12_67
	word64 r13_68
	word64 r15_69
	word64 rax_70 = fn0000000000411900(rdi, r8, r12_10, r13, r15, fs, out rsp_22, out rbp_65, out r8_66, out r12_67, out r13_68, out r15_69)
	byte dl_75 = (byte) (uint64) ((word32) Mem0[rax_70:byte] & 0xFFFFFFDF)
	branch dl_75 != 0x55 l000000000040D850
// DataOut: dl fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 r12:(uint64) esi rsi:rdi rbp:rdi rdi:0x0000000000000000 rax:<invalid> rbx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D850:
	branch dl_75 != 0x47 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D855:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x42 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D861:
	branch Mem0[rax_70 + 0x0000000000000002:byte] != 0x31 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D867:
	branch Mem0[rax_70 + 0x0000000000000003:byte] != 0x38 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D86D:
	branch Mem0[rax_70 + 0x0000000000000004:byte] != 0x30 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D873:
	branch Mem0[rax_70 + 0x0000000000000005:byte] != 0x33 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D879:
	branch Mem0[rax_70 + 0x0000000000000006:byte] != 0x30 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D87F:
	branch Mem0[rax_70 + 0x0000000000000007:byte] != 0x00 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D885:
	word64 r13_134
	*r13Out = rax_23
	rbx_109 = 0x0000000000415FED
	branch Mem0[rbp_65:byte] == 0x60 l000000000040D89B
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D897_1:
	rbx_109 = 0x0000000000415FE8
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FE8 rbx:0x0000000000415FED edx:<invalid> r13:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r8:<invalid> edi:<invalid> eax:0x00415FE8 r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D89B:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FE8 rbx:<invalid> edx:<invalid> r13:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r8:<invalid> edi:<invalid> eax:0x00415FE8 r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7F8:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x54 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D804:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000002:byte] & 0xFFFFFFDF) != 0x46 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D810:
	branch Mem0[rax_70 + 0x0000000000000003:byte] != 0x2D l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D816:
	branch Mem0[rax_70 + 0x0000000000000004:byte] != 0x38 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D81C:
	branch Mem0[rax_70 + 0x0000000000000005:byte] != 0x00 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D838:
	rbx_109 = 0x0000000000415FEB
	branch r12d_11 == 0x00000007 l000000000040D84A
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D846_1:
	rbx_109 = 0x0000000000416DEA
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000416DEA rbx:0x0000000000415FEB edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:0x00416DEA r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D84A:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000416DEA rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:0x00416DEA r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D822:
	rbx_109 = 0x0000000000415FE4
	branch Mem0[rax_23:byte] != 0x60 l000000000040D833
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D82F_1:
	rbx_109 = 0x0000000000415FF1
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FF1 rbx:0x0000000000415FE4 edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:0x00415FF1 r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D833:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FF1 rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:0x00415FF1 r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7D7:
	word64 rsp_43 = rsp_22 + 0x0000000000000008
	word32 ebx_49
	*ebxOut = (word32) Mem0[rsp_43:word64]
	word64 rsp_56
	*rspOut = Mem0[rsp_43 + 0x0000000000000010:word64] + 0x0000000000000010
	return rbx_109
// DataOut: ebx fs r12 r12b r12d r13 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040D7B0_exit:
// DataOut: ebx r12 r12b r12d r13 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040D8A0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word32 r9d, selector fs, word64 qwArg20, word64 qwArg28, word64 qwArg30, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8 r8d r9b r9d rcx rdi rdx rsi
// LiveOut: ebp r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040D8A0_entry:
// DataOut: fs r12 r12b r12d r8 r8d r9b rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D8A0:
	word64 rdi_53
	word64 rcx_55
	word32 r14d_57
	word32 r8d_58
	word64 rbp_60
	word64 rdx_62
	word64 rbx_63
	word32 ebx_64
	word32 r9d_65
	byte SCZO_66
	word64 rax_67
	word32 eax_69
	byte SZO_70
	byte C_71
	byte al_72
	byte CZ_73
	word64 r11_74
	word32 esi_75
	byte Z_76
	word32 edi_77
	word64 r9_78
	word32 ebp_79
	word64 r8_80
	byte cl_81
	word32 r12d_83
	byte r12b_84
	word32 edx_85
	byte dl_86
	byte r11b_87
	word32 esp_88
	word32 r11d_89
	word16 dx_90
	word64 r10_92
	byte dil_93
	byte sil_94
	selector fs_1011
	word64 r14_1026
	word64 r12_1024
	word64 r13_1333
	word64 r15_1027
	word64 rsi_1041
	word64 rsp_1043
	word32 ecx_1054
	call __ctype_get_mb_cur_max (retsize: 8; depth: 232)
		uses: C_51,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_35,eax_49,ebx_28,esp_30,fs,qwLoc28_47,qwLoc70_40,qwLoc78_43,qwLoc88_37,qwLocB8_33,qwLocC0_34,r13_17,r14_11,r14d_12,r15_6,r8d,r9d,rax_48,rbp,rbx_27,rcx,rdi,rdx,rsi,rsp_29,SZO_50
		defs: al_72,C_71,cl_81,CZ_73,dil_93,dl_86,dx_90,eax_69,ebp_79,ebx_64,ecx_82,edi_77,edx_85,esi_75,esp_88,fs_68,r10_92,r11_74,r11b_87,r11d_89,r12_91,r12b_84,r12d_83,r13_61,r14_59,r14d_57,r15_54,r8_80,r8d_58,r9_78,r9d_65,rax_67,rbp_60,rbx_63,rcx_55,rdi_53,rdx_62,rsi_56,rsp_52,SCZO_66,sil_94,SZO_70,Z_76
	byte al_101 = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) ebx_64 >>u 0x00000001) & 0x00000001)
	branch r14d_57 >u 0x00000008 l000000000040E280
// DataOut: fs r12 r12b r12d r13 r14 r14d r15 r15b r8 rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32) Local -00AD(0) Local -00B8(64) Local -00C0(64)

l000000000040E280:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) (eax & 0x00000001) -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D92D:
	word64 rbx_1038
	word64 rax_108 = (uint64) r14d_57
	word64 r11_111 = rsi
	byte r11b_1017 = (byte) rsi
	word32 r11d_1018 = (word32) rsi
	switch (r14d_57) { l000000000040D940 l000000000040E070 l000000000040DF10 l000000000040DF50 l000000000040DFB0 l000000000040DF90 l000000000040DFE0 l000000000040DFE0 l000000000040DFE0 }
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b r8 rax rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) (eax & 0x00000001) -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32) Local -00AD(0) Local -00B8(64)

l000000000040DFE0:
	branch r14d_57 == 0x00000008 l000000000040E012
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32)

l000000000040DFE2:
	word32 ebx_1970
	word64 rsp_1971
	word64 r8_1972
	word64 r12_1973
	word64 r13_1974
	word64 r15_1975
	word64 rax_1976 = fn000000000040D7B0((word32) (uint64) (word32) (uint64) r8d, 0x0000000000415FF5, r8_80, r13_1333, r15_1027, fs_1011, out ebx_1970, out rsp_1971, out r8_1972, out r12_1973, out r13_1974, out r15_1975)
	Mem1980[rsp_1971 + 0x0000000000000070:word64] = rax_1976
	rsi_1041 = (uint64) ebx_1970
	word32 ebx_1981
	word64 r8_1983
	rax_108 = fn000000000040D7B0((word32) rsi_1041, 0x0000000000416DEA, r8_1972, r13_1974, r15_1975, fs_1011, out ebx_1981, out rsp_1043, out r8_1983, out r12_1024, out r13_1333, out r15_1027)
	r11_111 = Mem1980[rsp_1043 + 0x0000000000000020:word64]
	Mem1993[rsp_1043 + 0x0000000000000068:word64] = rax_108
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E012:
	rbx_1038 = 0x0000000000000000
	branch Mem0[rsp_1043 + 0x0000000000000033:byte] != 0x00 l000000000040E044
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E01B:
	word64 rdx_1933 = Mem0[rsp_1043 + 0x0000000000000070:word64]
	word32 eax_1937 = (word32) Mem0[rdx_1933:byte]
	rax_108 = DPB(rax_108, eax_1937, 0) (alias)
	byte al_1939 = (byte) eax_1937
	branch al_1939 == 0x00 l000000000040E044
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rax rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:0x0000000000000000 rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E027:
	word64 rcx_1943 = Mem0[rsp_1043 + 0x0000000000000028:word64]
	ecx_1054 = (word32) rcx_1943 (alias)
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:0x0000000000000000 rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E030:
	branch rbx_1038 >=u r11_111 l000000000040E038
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E035:
	Mem1963[rcx_1943 + rbx_1038:byte] = al_1939
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E038:
	rbx_1038 = rbx_1038 + 0x0000000000000001
	word32 eax_1957 = (word32) Mem0[rdx_1933 + rbx_1038:byte]
	rax_108 = DPB(rax_108, eax_1957, 0) (alias)
	al_1939 = (byte) eax_1957 (alias)
	branch al_1939 != 0x00 l000000000040E030
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E044:
	word64 rbp_1922 = Mem0[rsp_1043 + 0x0000000000000068:word64]
	Mem1923[rsp_1043 + 0x0000000000000038:word64] = r11_111
	word64 rax_1925 = DPB(rax_108, strlen(rbp_1922), 0)
	Mem1926[rsp_1043 + 0x0000000000000060:word64] = rbp_1922
	Mem1929[rsp_1043 + 0x0000000000000020:byte] = 0x01
	r11_111 = Mem1929[rsp_1043 + 0x0000000000000038:word64]
	r14_1026 = rax_1925
	r11b_1017 = (byte) r11_111 (alias)
	r11d_1018 = (word32) r11_111 (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF90:
	r14_1026 = 0x0000000000000000
	rbx_1038 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DFB0:
	rsi_1041 = 0x0000000000000001
	rbx_1038 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF50:
	branch al_101 != 0x00 l000000000040E428
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040DF5B:
	branch rsi == 0x0000000000000000 l000000000040E2B3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2B3:
	rsi_1041 = 0x0000000000000001
	rbx_1038 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF64:
	Mem1863[rdi:byte] = 0x22
	rsi_1041 = 0x0000000000000001
	rbx_1038 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF10:
	branch al_101 != 0x00 l000000000040E408
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E408:
	rsi_1041 = 0x0000000000000001
	rbx_1038 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF1B:
	branch rsi == 0x0000000000000000 l000000000040E2D1
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2D1:
	rsi_1041 = 0x0000000000000001
	rbx_1038 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF24:
	Mem1837[rdi:byte] = 0x27
	rsi_1041 = 0x0000000000000001
	rbx_1038 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E070:
	rsi_1041 = 0x0000000000000001
	rbx_1038 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D940:
	r14_1026 = 0x0000000000000000
	rbx_1038 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D960:
	Mem211[rsp_1043 + 0x0000000000000038:byte] = (byte) (uint64) ((word32) Mem0[rsp_1043 + 0x0000000000000033:byte] ^ 0x00000001)
	word64 rax_1033 = (uint64) ((word32) Mem211[rsp_1043 + 0x0000000000000020:byte] ^ 0x00000001)
	Mem218[rsp_1043 + 0x0000000000000095:byte] = (byte) rax_1033
	word64 r9_1022
	*r9Out = r14_1026
	word64 rbp_1005 = 0x0000000000000000
	*r14Out = r11_111
	word64 r8_1021
	*r8Out = r13_1333
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D986:
	word64 rax_294
	byte al_1795 = rbp_1005 != r15_1027
	word64 rax_1720 = DPB(rax_1033, al_1795, 0)
	branch r15_1027 == 0xFFFFFFFFFFFFFFFF l000000000040DB76
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D996:
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A0:
	branch al_1795 == 0x00 l000000000040DB86
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A8:
	word64 r13_1725
	byte cl_587 = r9_1022 != 0x0000000000000000
	ecx_1054 = DPB(ecx_1054, cl_587, 0) (alias)
	branch r9_1022 == 0x0000000000000000 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9B4:
	branch Mem218[rsp_1043 + 0x0000000000000020:byte] == 0x00 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9BF:
	rax_1720 = rbp_1005 + r9_1022
	branch r15_1027 <u rax_1720 l000000000040E0A0
// DataOut: eax ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0A0:
	r13_1725 = r8_1021 + rbp_1005
	r11b_1017 = 0x00 (alias)
	r11d_1018 = 0x00000000 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9CD:
	rsi_1041 = Mem218[rsp_1043 + 0x0000000000000060:word64]
	Mem1741[rsp_1043 + 0x0000000000000050:word32] = ecx_1054
	Mem1742[rsp_1043 + 0x0000000000000048:word64] = r8_1021
	Mem1744[rsp_1043 + 0x0000000000000040:word64] = r9_1022
	r13_1725 = r8_1021 + rbp_1005
	rax_1720 = DPB(rax_1720, memcmp(r13_1725, rsi_1041, r9_1022), 0)
	word32 eax_1746 = memcmp(r13_1725, rsi_1041, r9_1022)
	*r9Out = Mem1744[rsp_1043 + 0x0000000000000040:word64]
	r8_1021 = Mem1744[rsp_1043 + 0x0000000000000048:word64]
	*r8Out = r8_1021
	branch eax_1746 != 0x00000000 l000000000040E0B0
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0B0:
	r11b_1017 = 0x00 (alias)
	r11d_1018 = 0x00000000 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA05:
	branch Mem1744[rsp_1043 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA10:
	rbx_1038 = 0x0000000000000001
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA20:
	word32 r12d_1014 = (word32) Mem218[r13_1725:byte]
	byte r12b_1015 = (byte) r12d_1014
	r12_1024 = DPB(r12_1024, r12d_1014, 0) (alias)
	*r12Out = r12_1024
	branch r12b_1015 >u 0x7E l000000000040DE18
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE18:
	byte dl_1183
	word32 esi_1016
	byte dl_1030
	branch Mem218[rsp_1043 + 0x0000000000000078:word64] != 0x0000000000000001 l000000000040E0C0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0C0:
	Mem1278[rsp_1043 + 0x00000000000000B0:word64] = 0x0000000000000000
	branch r15_1027 == 0xFFFFFFFFFFFFFFFF l000000000040E285
// DataOut: fs r11b r11d r12b r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E285:
	Mem1708[rsp_1043 + 0x0000000000000050:word64] = r9_1022
	Mem1709[rsp_1043 + 0x0000000000000048:word32] = r11d_1018
	Mem1710[rsp_1043 + 0x0000000000000040:word64] = r8_1021
	word64 rax_1711 = DPB(rax_1720, strlen(r8_1021), 0)
	r9_1022 = Mem1710[rsp_1043 + 0x0000000000000050:word64]
	r15_1027 = rax_1711
	r11b_1017 = (byte) (uint64) Mem1710[rsp_1043 + 0x0000000000000048:word32] (alias)
// DataOut: fs r11b r12b r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0D6:
	Mem1292[rsp_1043 + 0x0000000000000080:word64] = rbx_1038
	Mem1293[rsp_1043 + 0x0000000000000096:byte] = r12b_1015
	Mem1294[rsp_1043 + 0x0000000000000098:word64] = r13_1725
	Mem1297[rsp_1043 + 0x0000000000000048:word64] = rbp_1005
	Mem1298[rsp_1043 + 0x0000000000000088:word64] = r9_1022
	Mem1302[rsp_1043 + 0x0000000000000097:byte] = r11b_1017
	Mem1303[rsp_1043 + 0x0000000000000050:word64] = r14_1026
	Mem1305[rsp_1043 + 0x0000000000000040:word64] = r15_1027
// DataOut: fs r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E11D:
	word64 r15_1326
	word64 rcx_1327
	word32 r14d_1329
	word32 r8d_1330
	word64 r14_1331
	word64 rbp_1332
	word64 rdx_1334
	word64 rbx_1335
	word32 ebx_1336
	word32 r9d_1337
	byte SCZO_1338
	word64 rax_1339
	word32 eax_1341
	byte SZO_1342
	byte C_1343
	byte al_1344
	byte CZ_1345
	word64 r11_1346
	byte Z_1348
	word32 edi_1349
	word64 r9_1350
	word32 ebp_1351
	word64 r8_1352
	byte cl_1353
	word32 r12d_1355
	byte r12b_1356
	word32 edx_1357
	byte dl_1358
	byte r11b_1359
	word32 esp_1360
	word32 r11d_1361
	word16 dx_1362
	word64 r12_1363
	word64 r10_1364
	byte dil_1365
	byte sil_1366
	word64 rdi_1325
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_1311,bLocAD_166,bLocC0_167,C_1291,cl_587,CZ_657,dil_553,dl_1320,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_165,dx_1321,eax_1310,ebp_579,ebx_1296,ecx_589,edi_552,edx_1319,esi_551,esp_583,fs_546,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_168,qwLoc88_37,qwLocB8_33,qwLocC0_164,r10_545,r11_1285,r11b_1279,r11d_1280,r12_1299,r12b_1301,r12d_1300,r13_1306,r14_1315,r14d_1316,r15_1317,r8_1283,r8d_1281,r9_1284,r9d_1282,rax_1309,rbp_578,rbx_1307,rcx_1313,rdi_1314,rdx_1318,rsi_1323,rsp_1308,SCZO_1322,sil_548,SZO_1290,Z_1277
		defs: al_1344,C_1343,cl_1353,CZ_1345,dil_1365,dl_1358,dx_1362,eax_1341,ebp_1351,ebx_1336,ecx_1354,edi_1349,edx_1357,esi_1347,esp_1360,fs_1340,r10_1364,r11_1346,r11b_1359,r11d_1361,r12_1363,r12b_1356,r12d_1355,r13_1333,r14_1331,r14d_1329,r15_1326,r8_1352,r8d_1330,r9_1350,r9d_1337,rax_1339,rbp_1332,rbx_1335,rcx_1327,rdi_1325,rdx_1334,rsi_1328,rsp_1324,SCZO_1338,sil_1366,SZO_1342,Z_1348
	branch rax_1339 == 0x0000000000000000 l000000000040E30E
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E30E:
	r11d_1018 = (word32) Mem1305[rsp_1043 + 0x0000000000000097:byte]
	r12d_1014 = (word32) Mem1305[rsp_1043 + 0x0000000000000096:byte]
	rax_1033 = rbx_1335
	rbp_1005 = Mem1305[rsp_1043 + 0x0000000000000048:word64]
	*r9Out = Mem1305[rsp_1043 + 0x0000000000000088:word64]
	r11b_1017 = (byte) r11d_1018 (alias)
	*r8Out = r13_1333
	rbx_1038 = Mem1305[rsp_1043 + 0x0000000000000080:word64]
	r12b_1015 = (byte) r12d_1014 (alias)
	*r12Out = DPB(r12_1363, r12d_1014, 0)
	dl_1183 = (byte) (uint64) ((word32) (uint64) r12d_1355 ^ 0x00000001) (alias)
	*r14Out = Mem1305[rsp_1043 + 0x0000000000000050:word64]
	*r15Out = Mem1305[rsp_1043 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E157:
	branch rax_1339 == 0xFFFFFFFFFFFFFFFF l000000000040E350
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E350:
	r12d_1014 = (word32) Mem1305[rsp_1043 + 0x0000000000000096:byte]
	r11d_1018 = (word32) Mem1305[rsp_1043 + 0x0000000000000097:byte]
	rax_1033 = rbx_1335
	rbp_1005 = Mem1305[rsp_1043 + 0x0000000000000048:word64]
	*r9Out = Mem1305[rsp_1043 + 0x0000000000000088:word64]
	r12b_1015 = (byte) r12d_1014 (alias)
	*r12Out = DPB(r12_1363, r12d_1014, 0)
	r11b_1017 = (byte) r11d_1018 (alias)
	*r8Out = r13_1333
	rbx_1038 = Mem1305[rsp_1043 + 0x0000000000000080:word64]
	*r14Out = Mem1305[rsp_1043 + 0x0000000000000050:word64]
	dl_1183 = 0x01 (alias)
	*r15Out = Mem1305[rsp_1043 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E161:
	branch rax_1339 == 0xFFFFFFFFFFFFFFFE l000000000040E391
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E391:
	r12d_1014 = (word32) Mem1305[rsp_1043 + 0x0000000000000096:byte]
	r11d_1018 = (word32) Mem1305[rsp_1043 + 0x0000000000000097:byte]
	r15_1027 = Mem1305[rsp_1043 + 0x0000000000000040:word64]
	*r15Out = r15_1027
	rsi_1041 = r14_1331
	rax_1033 = rbx_1335
	*r8Out = r13_1333
	rbp_1005 = Mem1305[rsp_1043 + 0x0000000000000048:word64]
	*r9Out = Mem1305[rsp_1043 + 0x0000000000000088:word64]
	r12b_1015 = (byte) r12d_1014 (alias)
	*r12Out = DPB(r12_1363, r12d_1014, 0)
	r11b_1017 = (byte) r11d_1018 (alias)
	rbx_1038 = Mem1305[rsp_1043 + 0x0000000000000080:word64]
	*r14Out = Mem1305[rsp_1043 + 0x0000000000000050:word64]
	word64 r13_1632 = Mem1305[rsp_1043 + 0x0000000000000098:word64]
	branch r15_1027 <=u r14_1331 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3DB:
	branch Mem1305[rdx_1334:byte] != 0x00 l000000000040E3F0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3F0:
	rax_1033 = rax_1033 + 0x0000000000000001
	branch r15_1027 >u rbp_1005 + rax_1033 l000000000040E3E8
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E8:
	branch Mem1305[r13_1632 + rax_1033:byte] == 0x00 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E1:
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3FE:
	dl_1183 = 0x01 (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E16B:
	branch Mem1305[rsp_1043 + 0x0000000000000033:byte] == 0x00 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E172:
	branch Mem1305[rsp_1043 + 0x0000000000000034:word32] != 0x00000002 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E179:
	branch rax_1339 == 0x0000000000000001 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E17F:
	word64 rdx_1562 = 0x0000000000000001
	r15_1569 = r15_1326
// DataOut: eax fs r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E190:
	word64 r15_1569
	rdi_1325 = DPB(rdi_1325, (word32) Mem1305[r15_1569 + rdx_1562:byte], 0) (alias)
	ecx_1054 = rdi_1325 - 0x000000000000005B
	byte cl_1584 = (byte) (rdi_1325 - 0x000000000000005B)
	branch cl_1584 >u 0x21 l000000000040E1B6
// DataOut: cl eax fs r12d r13 r15 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E19D:
	r15_1569 = 0x000000000000002B
	branch (0x0000000000000001 << cl_1584 & rdi_1325) != 0x0000000000000000 l000000000040E260
// DataOut: eax fs r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E260:
	r11_111 = Mem1305[rsp_1043 + 0x0000000000000050:word64]
	r11b_1017 = (byte) r11_111 (alias)
	r11d_1018 = (word32) r11_111 (alias)
	r15_1027 = Mem1305[rsp_1043 + 0x0000000000000040:word64]
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:0x000000000000002B r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1B6:
	rdx_1562 = rdx_1562 + 0x0000000000000001
	branch rdx_1562 != rax_1339 l000000000040E190
// DataOut: eax fs r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1BF:
	word64 rsp_1428
	word64 rdi_1429
	word64 r15_1430
	word64 rcx_1431
	word64 rsi_1432
	word32 r14d_1433
	word32 r8d_1434
	word64 r14_1435
	word64 rbp_1436
	word64 r13_1437
	word64 rdx_1438
	word64 rbx_1439
	word32 ebx_1440
	word32 r9d_1441
	byte SCZO_1442
	word64 rax_1443
	selector fs_1444
	word32 eax_1445
	byte SZO_1446
	byte C_1447
	byte al_1448
	byte CZ_1449
	word64 r11_1450
	word32 esi_1451
	byte Z_1452
	word32 edi_1453
	word64 r9_1454
	word32 ebp_1455
	word64 r8_1456
	byte cl_1457
	word32 ecx_1458
	word32 r12d_1459
	byte r12b_1460
	word32 edx_1461
	byte dl_1462
	byte r11b_1463
	word32 esp_1464
	word32 r11d_1465
	word16 dx_1466
	word64 r12_1467
	word64 r10_1468
	byte dil_1469
	byte sil_1470
	call iswprint (retsize: 8; depth: 8)
		uses: al_1344,bLocAD_166,bLocC0_167,C_1369,cl_1353,CZ_1345,dil_1365,dl_1358,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_165,dx_1362,eax_1341,ebp_1371,ebx_1336,ecx_1354,edi_1349,edx_1357,esi_1347,esp_1360,fs_1340,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_168,qwLoc88_37,qwLocB8_33,qwLocC0_164,r10_1364,r11_1346,r11b_1359,r11d_1361,r12_1363,r12b_1356,r12d_1355,r13_1333,r14_1331,r14d_1329,r15_1326,r8_1352,r8d_1330,r9_1350,r9d_1337,rax_1339,rbp_1370,rbx_1335,rcx_1327,rdi_1427,rdx_1334,rsi_1328,rsp_1324,SCZO_1425,sil_1366,SZO_1367,Z_1426
		defs: al_1448,C_1447,cl_1457,CZ_1449,dil_1469,dl_1462,dx_1466,eax_1445,ebp_1455,ebx_1440,ecx_1458,edi_1453,edx_1461,esi_1451,esp_1464,fs_1444,r10_1468,r11_1450,r11b_1463,r11d_1465,r12_1467,r12b_1460,r12d_1459,r13_1437,r14_1435,r14d_1433,r15_1430,r8_1456,r8d_1434,r9_1454,r9d_1441,rax_1443,rbp_1436,rbx_1439,rcx_1431,rdi_1429,rdx_1438,rsi_1432,rsp_1428,SCZO_1442,sil_1470,SZO_1446,Z_1452
	branch eax_1445 != 0x00000000 l000000000040E1DE
// DataOut: fs r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DA_1:
// DataOut: fs r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000000 r11:<invalid> rsi:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DE:
	word64 rdi_1480
	word64 r15_1481
	word64 rcx_1482
	word64 rsi_1483
	word32 r14d_1484
	word32 r8d_1485
	word64 r14_1486
	word64 rbp_1487
	word64 r13_1488
	word64 rdx_1489
	word64 rbx_1490
	word32 ebx_1491
	word32 r9d_1492
	byte SCZO_1493
	word64 rax_1494
	word32 eax_1496
	byte SZO_1497
	byte C_1498
	byte al_1499
	byte CZ_1500
	word64 r11_1501
	word32 esi_1502
	byte Z_1503
	word32 edi_1504
	word64 r9_1505
	word32 ebp_1506
	word64 r8_1507
	byte cl_1508
	word32 r12d_1510
	byte r12b_1511
	word32 edx_1512
	byte dl_1513
	byte r11b_1514
	word32 esp_1515
	word32 r11d_1516
	word16 dx_1517
	word64 r12_1518
	word64 r10_1519
	byte dil_1520
	byte sil_1521
	call mbsinit (retsize: 8; depth: 8)
		uses: al_1448,bLocAD_166,bLocC0_167,C_1474,cl_1457,CZ_1449,dil_1469,dl_1462,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_165,dx_1466,eax_1445,ebp_1455,ebx_1477,ecx_1458,edi_1453,edx_1461,esi_1451,esp_1464,fs_1444,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_168,qwLoc88_37,qwLocB8_33,qwLocC0_164,r10_1468,r11_1450,r11b_1463,r11d_1465,r12_1467,r12b_1460,r12d_1459,r13_1437,r14_1435,r14d_1433,r15_1430,r8_1456,r8d_1434,r9_1454,r9d_1441,rax_1475,rbp_1436,rbx_1476,rcx_1431,rdi_1471,rdx_1438,rsi_1432,rsp_1428,SCZO_1478,sil_1470,SZO_1472,Z_1473
		defs: al_1499,C_1498,cl_1508,CZ_1500,dil_1520,dl_1513,dx_1517,eax_1496,ebp_1506,ebx_1491,ecx_1509,edi_1504,edx_1512,esi_1502,esp_1515,fs_1495,r10_1519,r11_1501,r11b_1514,r11d_1516,r12_1518,r12b_1511,r12d_1510,r13_1488,r14_1486,r14d_1484,r15_1481,r8_1507,r8d_1485,r9_1505,r9d_1492,rax_1494,rbp_1487,rbx_1490,rcx_1482,rdi_1480,rdx_1489,rsi_1483,rsp_1479,SCZO_1493,sil_1521,SZO_1497,Z_1503
	branch 0x00000000 == 0x00000000 l000000000040E11D
// DataOut: fs r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000000 r11:<invalid> rsi:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1EE:
	rsi_1041 = (uint64) r12d_1510
	r11d_1018 = (word32) Mem1305[rsp_1043 + 0x0000000000000097:byte]
	r12d_1014 = (word32) Mem1305[rsp_1043 + 0x0000000000000096:byte]
	esi_1016 = (word32) rsi_1041 (alias)
	r11b_1017 = (byte) r11d_1018 (alias)
	r12b_1015 = (byte) r12d_1014 (alias)
	*r12Out = DPB(r12_1518, r12d_1014, 0)
	rax_1033 = rbx_1490
	rbp_1005 = Mem1305[rsp_1043 + 0x0000000000000048:word64]
	*r9Out = Mem1305[rsp_1043 + 0x0000000000000088:word64]
	rbx_1038 = Mem1305[rsp_1043 + 0x0000000000000080:word64]
	*r14Out = Mem1305[rsp_1043 + 0x0000000000000050:word64]
	*r15Out = Mem1305[rsp_1043 + 0x0000000000000040:word64]
	*r8Out = r13_1488
	dl_1183 = (byte) (uint64) ((word32) (uint64) esi_1016 ^ 0x00000001) (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E22D:
	branch rax_1033 <=u 0x0000000000000001 l000000000040DE61
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E237:
	dl_1030 = dl_1183 & Mem1305[rsp_1043 + 0x0000000000000020:byte]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE24:
	Mem1205[rsp_1043 + 0x0000000000000050:word64] = r8_1021
	Mem1206[rsp_1043 + 0x0000000000000048:word64] = r9_1022
	Mem1207[rsp_1043 + 0x0000000000000040:word32] = r11d_1018
	word64 rdi_1209
	word64 rcx_1211
	word32 r14d_1213
	word32 r8d_1214
	word64 r13_1217
	word64 rdx_1218
	word32 ebx_1220
	word32 r9d_1221
	byte SCZO_1222
	word64 rax_1223
	word32 eax_1225
	byte SZO_1226
	byte C_1227
	byte al_1228
	byte CZ_1229
	word64 r11_1230
	byte Z_1232
	word32 edi_1233
	word64 r9_1234
	word32 ebp_1235
	word64 r8_1236
	byte cl_1237
	word32 edx_1241
	byte dl_1242
	byte r11b_1243
	word32 esp_1244
	word32 r11d_1245
	word16 dx_1246
	word64 r10_1248
	byte dil_1249
	byte sil_1250
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_645,bLocAD_166,bLocC0_167,C_649,cl_587,CZ_657,dil_553,dl_569,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_165,dx_570,eax_644,ebp_579,ebx_647,ecx_589,edi_552,edx_568,esi_551,esp_583,fs_546,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_168,qwLoc88_37,qwLocB8_33,qwLocC0_164,r10_545,r11_639,r11b_633,r11d_634,r12_655,r12b_654,r12d_653,r13_640,r14_563,r14d_547,r15_564,r8_637,r8d_635,r9_638,r9d_636,rax_643,rbp_578,rbx_650,rcx_641,rdi_652,rdx_642,rsi_651,rsp_582,SCZO_1008,sil_548,SZO_648,Z_1009
		defs: al_1228,C_1227,cl_1237,CZ_1229,dil_1249,dl_1242,dx_1246,eax_1225,ebp_1235,ebx_1220,ecx_1238,edi_1233,edx_1241,esi_1231,esp_1244,fs_1224,r10_1248,r11_1230,r11b_1243,r11d_1245,r12_1247,r12b_1240,r12d_1239,r13_1217,r14_1215,r14d_1213,r15_1210,r8_1236,r8d_1214,r9_1234,r9d_1221,rax_1223,rbp_1216,rbx_1219,rcx_1211,rdi_1209,rdx_1218,rsi_1212,rsp_1208,SCZO_1222,sil_1250,SZO_1226,Z_1232
	word64 r11_1254 = (uint64) Mem1207[rsp_1043 + 0x0000000000000040:word32]
	word32 edx_1261 = (word32) Mem1207[Mem1207[rax_1223:word64] + DPB(rdx_1218, (word32) r12b_1015, 0) * 0x0000000000000002:word16]
	r11b_1017 = (byte) r11_1254 (alias)
	r11d_1018 = (word32) r11_1254 (alias)
	*r9Out = Mem1207[rsp_1043 + 0x0000000000000048:word64]
	*r8Out = Mem1207[rsp_1043 + 0x0000000000000050:word64]
	rax_1033 = 0x0000000000000001
	dl_1183 = (byte) (uint64) ((word32) (uint64) (DPB(edx_1261, (word16) edx_1261 >>u 0x000E, 0) ^ 0x00000001) & 0x00000001) (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE61:
	dl_1030 = dl_1183 & Mem218[rsp_1043 + 0x0000000000000020:byte]
	branch dl_1030 == 0x00 l000000000040DAF8
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE6B:
	word64 rcx_1052 = Mem218[rsp_1043 + 0x0000000000000028:word64]
	rax_1033 = rax_1033 + rbp_1005
	byte dil_1051 = (byte) (word32) Mem218[rsp_1043 + 0x0000000000000033:byte]
	ecx_1054 = (word32) rcx_1052 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF0:
	branch dl_1030 != 0x00 l000000000040DE80
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE80:
	branch dil_1051 != 0x00 l000000000040DC40
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE89:
	branch rbx_1038 >=u r14_1026 l000000000040DE92
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE8E:
	Mem1157[rcx_1052 + rbx_1038:byte] = 0x5C
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE92:
	branch r14_1026 <=u rbx_1038 + 0x0000000000000001 l000000000040DEAA
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE9B:
	word64 rsi_1152 = (uint64) (DPB(esi_1016, (byte) (uint64) r12d_1014 >>u 0x06, 0) + 0x00000030)
	Mem1156[rcx_1052 + 0x0000000000000001 + rbx_1038:byte] = (byte) rsi_1152
	esi_1016 = (word32) rsi_1152 (alias)
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEAA:
	rsi_1041 = rbx_1038 + 0x0000000000000002
	branch r14_1026 <=u rsi_1041 l000000000040DEC5
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEB3:
	rsi_1041 = (uint64) ((word32) (uint64) (DPB(esi_1016, (byte) (uint64) r12d_1014 >>u 0x03, 0) & 0x00000007) + 0x00000030)
	Mem1147[rcx_1052 + 0x0000000000000002 + rbx_1038:byte] = (byte) rsi_1041
	esi_1016 = (word32) rsi_1041 (alias)
// DataOut: dil dl fs r11b r11d r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEC5:
	r12_1024 = (uint64) ((word32) (uint64) (r12d_1014 & 0x00000007) + 0x00000030)
	*r12Out = r12_1024
	rbx_1038 = rbx_1038 + 0x0000000000000003
	r12b_1015 = (byte) r12_1024 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF4:
	branch r11b_1017 == 0x00 l000000000040DED1
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF9:
	branch rbx_1038 >=u r14_1026 l000000000040DF02
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEFE:
	Mem1112[rcx_1052 + rbx_1038:byte] = 0x5C
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF02:
	rbx_1038 = rbx_1038 + 0x0000000000000001
	r11b_1017 = 0x00 (alias)
	r11d_1018 = 0x00000000 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DED1:
	rbp_1005 = rbp_1005 + 0x0000000000000001
	branch rax_1033 <=u rbp_1005 l000000000040DB54
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEDE:
	branch rbx_1038 >=u r14_1026 l000000000040DEE7
// DataOut: dil dl fs r11b r11d r12b r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE3:
	Mem1099[rcx_1052 + rbx_1038:byte] = r12b_1015
// DataOut: dil dl fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE7:
	r12d_1014 = (word32) Mem218[r8_1021 + rbp_1005:byte]
	r12b_1015 = (byte) r12d_1014 (alias)
	*r12Out = DPB(r12_1024, r12d_1014, 0)
	rbx_1038 = rbx_1038 + 0x0000000000000001
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA2F:
	rax_1033 = DPB(rax_1720, (word32) r12b_1015, 0) (alias)
	switch (rax_1033) { l000000000040DD20 }
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD20:
	branch Mem218[rsp_1043 + 0x0000000000000020:byte] == 0x00 l000000000040E240
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E240:
	branch (Mem218[rsp_1043 + 0x0000000000000090:byte] & 0x01) == 0x00 l000000000040DAF8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAF8:
	branch Mem218[rsp_1043 + 0x0000000000000038:byte] == 0x00 l000000000040DB09
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAFF:
	branch Mem218[rsp_1043 + 0x0000000000000095:byte] != 0x00 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E24E:
	rbp_1005 = rbp_1005 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD2B:
	branch Mem218[rsp_1043 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD36:
	branch rbx_1038 >=u r14_1026 l000000000040DD44
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD3B:
	Mem1001[Mem218[rsp_1043 + 0x0000000000000028:word64] + rbx_1038:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD44:
	rax_1033 = rbx_1038 + 0x0000000000000001
	branch r15_1027 <=u rbp_1005 + 0x0000000000000001 l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD51:
	rsi_1041 = DPB(rsi_1041, (word32) Mem218[r8_1021 + 0x0000000000000001 + rbp_1005:byte], 0) (alias)
	branch (byte) (rsi_1041 - 0x0000000000000030) >u 0x09 l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD5F:
	branch r14_1026 >u rax_1033 l000000000040E300
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E300:
	rsi_1041 = Mem218[rsp_1043 + 0x0000000000000028:word64]
	Mem999[rsi_1041 + rax_1033:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD68:
	branch r14_1026 <=u rbx_1038 + 0x0000000000000002 l000000000040DD7B
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD71:
	Mem997[Mem218[rsp_1043 + 0x0000000000000028:word64] + 0x0000000000000002 + rbx_1038:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD7B:
	rax_1033 = rbx_1038 + 0x0000000000000003
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD80:
	rbx_1038 = rax_1033
	rsp_1043 = 0x0000000000000030
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB09:
	word64 rdi_888 = Mem218[rsp_1043 + 0x0000000000000058:word64]
	branch rdi_888 == 0x0000000000000000 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB13:
	ecx_1054 = (word32) (uint64) r12d_1014 (alias)
	word64 rdx_894 = (uint64) r12d_1014
	rax_1033 = (uint64) (0x00000001 << (byte) ((uint64) (ecx_1054 & 0x0000001F)))
	branch (Mem218[rdi_888 + DPB(rdx_894, (word32) ((byte) rdx_894 >>u 0x05), 0) * 0x0000000000000004:word32] & (word32) rax_1033) != 0x00000000 l000000000040DB33
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB2E:
	branch r11b_1017 == 0x00 l000000000040DB50
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB33:
	branch Mem218[rsp_1043 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC40:
	r11_111 = r14_1026
	r11b_1017 = (byte) r14_1026 (alias)
	r11d_1018 = (word32) r14_1026 (alias)
	r13_1333 = r8_1021
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12d:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB3E:
	branch rbx_1038 >=u r14_1026 l000000000040DB4C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB43:
	rax_1033 = Mem218[rsp_1043 + 0x0000000000000028:word64]
	Mem807[rax_1033 + rbx_1038:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB4C:
	rbx_1038 = rbx_1038 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB50:
	rbp_1005 = rbp_1005 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB54:
	branch rbx_1038 >=u r14_1026 l000000000040DB62
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB59:
	rax_1033 = Mem218[rsp_1043 + 0x0000000000000028:word64]
	Mem712[rax_1033 + rbx_1038:byte] = r12b_1015
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB62:
	al_1795 = rbp_1005 != r15_1027
	rbx_1038 = rbx_1038 + 0x0000000000000001
	rax_1720 = DPB(rax_1033, al_1795, 0) (alias)
	branch r15_1027 != 0xFFFFFFFFFFFFFFFF l000000000040D9A0
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB76:
	byte al_539 = Mem218[r8_1021 + rbp_1005:byte] != 0x00
	rax_1720 = DPB(rax_1720, al_539, 0) (alias)
	branch al_539 != 0x00 l000000000040D9A8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB86:
	r11_111 = r14_1026
	*r11Out = r11_111
	r11b_1017 = (byte) r14_1026 (alias)
	r11d_1018 = (word32) r14_1026 (alias)
	r13_1333 = r8_1021
	*r13Out = r13_1333
	branch rbx_1038 != 0x0000000000000000 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB91:
	branch Mem218[rsp_1043 + 0x0000000000000034:word32] != 0x00000002 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB98:
	branch Mem218[rsp_1043 + 0x0000000000000033:byte] != 0x00 l000000000040DC46
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC46:
	word64 rax_362 = Mem218[rsp_1043 + 0x0000000000000068:word64]
	word32 r9d_364 = (word32) (uint64) Mem218[rsp_1043 + 0x0000000000000090:word32]
	word64 r8_366 = (uint64) Mem218[rsp_1043 + 0x0000000000000034:word32]
	word64 rdi_368 = Mem218[rsp_1043 + 0x0000000000000028:word64]
	Mem370[rsp_1043:word64] = 0x0000000000000000
	Mem372[rsp_1043 + 0x0000000000000010:word64] = rax_362
	Mem378[rsp_1043 + 0x0000000000000008:word64] = Mem372[rsp_1043 + 0x0000000000000070:word64]
	word64 rbp_381
	word64 r8_382
	word64 r9_383
	rax_294 = fn000000000040D8A0(r15_1027, r13_1333, r11_111, rdi_368, r8_366, (word32) (uint64) (r9d_364 & 0xFFFFFFFD), fs_1011, qwArg18, qwArg20, qwArg28, out rsp_1043, out rbp_381, out r8_382, out r9_383, out r11_111, out r12_1024, out r13_1333, out r14_1026, out r15_1027)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBA3:
	branch Mem218[rsp_1043 + 0x0000000000000033:byte] != 0x00 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBAA:
	branch Mem218[rsp_1043 + 0x0000000000000060:word64] == 0x0000000000000000 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBB2:
	word64 rdx_458 = Mem218[rsp_1043 + 0x0000000000000060:word64]
	byte al_464 = (byte) (word32) Mem218[rdx_458:byte]
	branch al_464 == 0x00 l000000000040DBE4
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBBE:
	word64 rcx_468 = Mem218[rsp_1043 + 0x0000000000000028:word64]
	ecx_1054 = (word32) rcx_468 (alias)
	word64 rdx_471 = rdx_458 - rbx_1038
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD0:
	branch r14_1026 <=u rbx_1038 l000000000040DBD8
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD5:
	Mem494[rcx_468 + rbx_1038:byte] = al_464
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD8:
	rbx_1038 = rbx_1038 + 0x0000000000000001
	al_464 = (byte) (word32) Mem218[rdx_471 + rbx_1038:byte] (alias)
	branch al_464 != 0x00 l000000000040DBD0
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBE4:
	rax_294 = rbx_1038
	branch rbx_1038 >=u r14_1026 l000000000040DC86
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBF0:
	Mem455[Mem218[rsp_1043 + 0x0000000000000028:word64] + rbx_1038:byte] = 0x00
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC86:
	branch (Mem218[rsp_1043 + 0x00000000000000B8:word64] ^ Mem218[fs_1011:0x00000028:word64]) != 0x0000000000000000 l000000000040E423
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E423:
	__stack_chk_fail()
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E428:
	Mem157[rsp_1043 + 0x0000000000000020:byte] = 0x01
	Mem159[rsp_1043 + 0x0000000000000060:word64] = 0x0000000000415FEB
	rsi_1041 = 0x0000000000000001
	rbx_1038 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC9D:
	word64 rsp_316 = Mem218[rsp_1043 + 0x00000000000000D8:word64]
	word64 rbp_318
	*rbpOut = Mem218[rsp_316 + 0x0000000000000008:word64]
	word64 rsp_324
	*rspOut = rsp_316 + 0x0000000000000020
	return rax_294
// DataOut: ebp fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D8A0_exit:
// DataOut: ebp r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040E450(word64 rcx, word64 rdx, word32 ebx, word32 ebp, word64 rsi, word32 edi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi esi fs r11 rcx rdx rsi
// LiveOut: ebp ebx r11 r12 r12b r13 r14 r15 r15b rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040E450_entry:
// DataOut: ebp ebx edi esi fs r11 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l000000000040E450:
	Mem4[v3 - 0x0000000000000004:word32] = rdi
	Mem10[v3 - 0x0000000000000008:word32] = rsi
	Mem13[v3 - 0x000000000000000C:word32] = rbp
	Mem16[v3 - 0x0000000000000010:word32] = v3 - 0x000000000000000C
	Mem18[v3 - 0x0000000000000014:word32] = rbp
	Mem21[v3 - 0x0000000000000018:word32] = rbx
	Mem26[v3 - 0x0000000000000040:word64] = rsi
	Mem28[v3 - 0x0000000000000038:word64] = rdx
	word32 eax_32 = (word32) (uint64) Mem28[__errno_location():word32]
	word64 r12_184 = Mem28[0x000000000061A5D8:word64]
	Mem37[v3 - 0x000000000000002C:word32] = eax_32
	word64 r15_6 = (int64) edi
	word32 r15d_7 = (word32) r15_6
	word64 rsp_186 = v3 - 0x0000000000000060
	branch r15d_7 < 0x00000000 l000000000040E5F7
// DataOut: edi fs r11 r12 r15 r15d rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E5F7:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid>

l000000000040E48C:
	branch r15d_7 <u Mem37[0x000000000061A5F0:word32] l000000000040E4FA
// DataOut: edi fs r11 r12 r15 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid>

l000000000040E495:
	word64 r14_174 = (uint64) (rdi + 0x0000000000000001)
	branch r12_184 != 0x000000000061A5E0 l000000000040E5E0
// DataOut: ebp fs r11 r12 r14 r15 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid>

l000000000040E5E0:
	word32 ebx_212
	word64 r8_214
	word64 rax_215 = fn0000000000410C90(rdx, r14_174 << 0x0000000000000004, r12_184, out ebx_212, out rsp_186, out r8_214)
	Mem217[0x000000000061A5D8:word64] = rax_215
	r12_184 = rax_215
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:(uint64) (rdi + 0x0000000000000001) rsi:(uint64) (rdi + 0x0000000000000001) << 0x0000000000000004

l000000000040E4B0:
	word32 ebx_201
	word64 r8_203
	word64 rax_204 = fn0000000000410C90(rdx, r14_174 << 0x0000000000000004, 0x0000000000000000, out ebx_201, out rsp_186, out r8_203)
	word64 rsi_205 = Mem37[0x000000000061A5E0:word64]
	word64 rdi_206 = Mem37[0x000000000061A5E8:word64]
	Mem208[0x000000000061A5D8:word64] = rax_204
	Mem209[rax_204:word64] = rsi_205
	Mem210[rax_204 + 0x0000000000000008:word64] = rdi_206
	r12_184 = rax_204
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:(uint64) (rdi + 0x0000000000000001) rsi:(uint64) (rdi + 0x0000000000000001) << 0x0000000000000004

l000000000040E4D6:
	word64 rdi_187 = (uint64) Mem37[0x000000000061A5F0:word32]
	memset((rdi_187 << 0x0000000000000004) + r12_184, 0x0000000000000000, r14_174 - rdi_187 << 0x0000000000000004)
	Mem196[0x000000000061A5F0:word32] = rdi + 0x0000000000000001
// DataOut: fs r11 r12 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:(uint64) (rdi + 0x0000000000000001) rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9

l000000000040E4FA:
	word64 r12_52 = r12_184 + (r15_6 << 0x0000000000000004)
	word32 ebp_51 = (word32) (uint64) Mem37[rcx + 0x0000000000000004:word32]
	word64 r8_54 = (uint64) Mem37[r11:word32]
	word64 r11_57 = Mem37[r12_52:word64]
	word64 r14_58 = Mem37[r12_52 + 0x0000000000000008:word64]
	Mem59[rsp_186 + 0x0000000000000010:word64] = Mem37[rcx + 0x0000000000000030:word64]
	word64 rax_60 = Mem59[rcx + 0x0000000000000028:word64]
	word64 rcx_65 = Mem59[rsp_186 + 0x0000000000000028:word64]
	word64 rdx_66 = Mem59[rsp_186 + 0x0000000000000020:word64]
	Mem70[rsp_186:word64] = r11 + 0x0000000000000008
	Mem72[rsp_186 + 0x0000000000000008:word64] = rax_60
	Mem73[rsp_186 + 0x0000000000000038:word64] = r11_57
	word32 ebp_62 = (word32) (uint64) (ebp_51 | 0x00000001)
	word64 r8_80
	word64 r9_81
	word64 r11_82
	word64 r12_83
	word64 r13_84
	word64 r14_85
	word64 r15_86
	word64 rbp_104
	word64 rsp_105
	word64 rax_87 = fn000000000040D8A0(rcx_65, rdx_66, r11_57, r14_58, r8_54, (word32) (uint64) ebp_62, fs, qwArg18, qwArg20, qwArg28, out rsp_105, out rbp_104, out r8_80, out r9_81, out r11_82, out r12_83, out r13_84, out r14_85, out r15_86)
	word64 r11_89 = Mem73[rsp_105 + 0x0000000000000038:word64]
	*r11Out = r11_89
	branch r11_89 >u rax_87 l000000000040E5BF
// DataOut: ebp fs r11 r12 r12b r13 r14 r15 r15b rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:(uint64) (rdi + 0x0000000000000001) rsi:0x0000000000000000 rdi:<invalid> rdx:(uint64) (rdi + 0x0000000000000001) - (uint64) Mem0[0x000000000061A5F0:word32] << 0x0000000000000004 rcx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9

l000000000040E554:
	Mem137[r12_83:word64] = rax_87 + 0x0000000000000001
	word64 rsi_133 = rax_87 + 0x0000000000000001
	branch r14_85 == 0x000000000061B220 l000000000040E577
// DataOut: ebp fs r11 r12 r14 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>

l000000000040E565:
	Mem169[rsp_105 + 0x0000000000000038:word64] = rax_87 + 0x0000000000000001
	free(r14_85)
	rsi_133 = Mem169[rsp_105 + 0x0000000000000038:word64]
// DataOut: ebp fs r11 r12 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>

l000000000040E577:
	Mem141[rsp_105 + 0x0000000000000038:word64] = rsi_133
	word64 rsp_142
	word64 rax_143 = fn0000000000410C40(rsi_133, rsi_133, out rsp_142)
	Mem144[r12_83 + 0x0000000000000008:word64] = rax_143
	word64 r8_147 = (uint64) Mem144[r11_89:word32]
	word64 rcx_148 = Mem144[rsp_142 + 0x0000000000000028:word64]
	word64 rdx_151 = Mem144[rsp_142 + 0x0000000000000020:word64]
	word64 rsi_152 = Mem144[rsp_142 + 0x0000000000000038:word64]
	Mem154[rsp_142 + 0x0000000000000010:word64] = Mem144[rcx + 0x0000000000000030:word64]
	word64 rax_155 = Mem154[rcx + 0x0000000000000028:word64]
	Mem156[rsp_142:word64] = r15_86
	Mem157[rsp_142 + 0x0000000000000008:word64] = rax_155
	word64 r8_160
	word64 r9_161
	word64 r11_162
	word64 r12_163
	word64 r13_164
	word64 r14_165
	word64 r15_166
	fn000000000040D8A0(rcx_148, rdx_151, rsi_152, rax_143, r8_147, (word32) (uint64) ebp_62, fs, qwArg18, qwArg20, qwArg28, out rsp_105, out rbp_104, out r8_160, out r9_161, out r11_162, out r12_163, out r13_164, out r14_165, out r15_166)
// DataOut: fs r11 r12 r12b r13 r14 r15 r15b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>

l000000000040E5BF:
	Mem108[rbp_104:word32] = (word32) (uint64) Mem73[rsp_105 + 0x0000000000000034:word32]
	word64 rsp_109 = rsp_105 + 0x0000000000000048
	word64 rsp_117 = Mem108[rsp_109 + 0x0000000000000010:word64]
	word64 rbp_119
	*rbpOut = Mem108[rsp_117 + 0x0000000000000008:word64]
	word64 rsp_125
	*rspOut = rsp_117 + 0x0000000000000020
	return Mem108[rsp_109:word64]
// DataOut: ebp ebx fs r11 r12 r12b r13 r14 r15 r15b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>

fn000000000040E450_exit:
// DataOut: ebp ebx r11 r12 r12b r13 r14 r15 r15b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



void fn000000000040E600(word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040E600_entry:
// DataOut: r11 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E600:
	__errno_location()
	word32 r12d_17 = (word32) (uint64) Mem0[r8:word32]
	word64 rdi_21 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E61E
// DataOut: r11 r12d rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E61A_1:
	rdi_21 = rdi
// DataOut: r11 r12d rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:(uint64) Mem0[r8:word32] rdi:0x000000000061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040E61E:
	word64 rsp_27
	word64 rbp_28
	word64 rdi_29
	fn0000000000410E00(0x0000000000000038, rdi_21, out rsp_27, out rbp_28, out rdi_29)
	Mem31[r11:word32] = r12d_17
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:(uint64) Mem0[r8:word32] rdi:0x000000000061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040E600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r12:(uint64) Mem0[r8:word32] rdi:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



void fn000000000040E630(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E630_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E630:
	branch rdi == 0x0000000000000000 l000000000040E63C
// DataOut: rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E638_1:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E63C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040E640(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E640_entry:
// DataOut: esi rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E640:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E64C
// DataOut: esi rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E648_1:
	rax_12 = rdi
// DataOut: esi rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E64C:
	Mem11[rax_12:word32] = esi
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040E650(word32 edx, word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi rdi sil
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E650_entry:
// DataOut: edx esi rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E650:
	word64 rax_12 = 0x000000000061B320
	word32 ecx_10 = (word32) (uint64) esi
	branch rdi == 0x0000000000000000 l000000000040E65E
// DataOut: cl edx rax rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E65A_1:
	rax_12 = rdi
// DataOut: cl edx rax sil
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rcx:(uint64) esi

l000000000040E65E:
	word64 rsi_20 = rax_12 + DPB(rsi, (word32) (sil >>u 0x05), 0) * 0x0000000000000004
	word32 edi_23 = (word32) (uint64) Mem0[rsi_20 + 0x0000000000000008:word32]
	byte cl_16 = (byte) (uint64) (ecx_10 & 0x0000001F)
	Mem40[rsi_20 + 0x0000000000000008:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) (edx ^ (word32) ((uint64) ((word32) ((uint64) edi_23) >>u cl_16))) & 0x00000001) << cl_16) ^ edi_23)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:(uint64) esi

fn000000000040E650_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:(uint64) (eax & 0x00000001) rcx:(uint64) (ecx & 0x0000001F) sil:<invalid> esi:<invalid> rsi:<invalid> rdi:<invalid> rdx:(uint64) (edx ^ edi)



void fn000000000040E6B0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rsp
fn000000000040E6B0_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6B0:
	branch rdi != 0x0000000000000000 l000000000040E6C0
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6BC_1:
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6C0:
	Mem13[0x000000000061B320:word32] = 0x00000008
	branch rsi == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6CB:
	branch rdx == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6DD:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6D0:
	Mem21[0x000000000061B348:word64] = rsi
	Mem22[0x000000000061B350:word64] = rdx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

fn000000000040E6B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rdi:0x000000000061B320



word64 fn000000000040E6F0(word64 rcx, word64 rdx, word32 ebx, word32 ebp, word64 rsi, word64 rdi, word64 r8, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi fs r11 r8 rcx rdi rdx rsi
// LiveOut: ebp esp r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040E6F0_entry:
// DataOut: ebp ebx fs r11 r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6F0:
	branch r8 != 0x0000000000000000 l000000000040E716
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E712_1:
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E716:
	__errno_location()
	word32 r12d_38 = (word32) (uint64) Mem0[r8:word32]
	word64 rsp_58
	word64 rbp_59
	word64 r8_60
	word64 r9_61
	word64 r11_62
	word64 r12_63
	word64 r13_64
	word64 r14_65
	word64 r15_66
	word64 rax_67 = fn000000000040D8A0(rcx, rdx, rsi, rdi, (uint64) Mem0[r11:word32], (word32) (uint64) Mem0[r11 + 0x0000000000000004:word32], fs, rdi, qwLoc20, qwLoc18, out rsp_58, out rbp_59, out r8_60, out r9_61, out r11_62, out r12_63, out r13_64, out r14_65, out r15_66)
	Mem69[r13_64:word32] = r12d_38
	word64 rsp_76 = Mem69[rsp_58 + 0x0000000000000038:word64]
	word64 rbp_78
	*rbpOut = Mem69[rsp_76 + 0x0000000000000008:word64]
	word64 rsi_81
	*rsiOut = Mem69[rsp_76 + 0x0000000000000010:word64]
	word64 rdi_83
	*rdiOut = Mem69[rsp_76 + 0x0000000000000018:word64]
	word64 rsp_84
	*rspOut = rsp_76 + 0x0000000000000020
	return rax_67
// DataOut: ebp esp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040E6F0_exit:
// DataOut: ebp esp r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040E930(word32 ebx, word32 ebp, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx fs r11 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040E930_entry:
// DataOut: ebp ebx fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E930:
// DataOut: ebp ebx edi esi fs r11 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E941_thunk_fn000000000040E450:
	word64 rsp_15
	word64 rbp_16
	word64 r11_17
	word64 r12_18
	word64 r13_19
	word64 r14_20
	word64 r15_21
	fn000000000040E450(0x000000000061B320, 0xFFFFFFFFFFFFFFFF, ebx, ebp, rdi, 0x00000000, r11, fs, out rsp_15, out rbp_16, out r11_17, out r12_18, out r13_19, out r14_20, out r15_21)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061B320 rdx:0xFFFFFFFFFFFFFFFF rdi:0x0000000000000000

fn000000000040E930_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040E970(word64 rdx, word32 esi, word32 edi, word64 r11, selector fs, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 rdx
// LiveOut: r11 r15 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040E970_entry:
// DataOut: edi esi fs r11 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E970:
	fn000000000040D740(esi, fp - 0x0000000000000050)
	word32 ebx_13 = (word32) (uint64) edi
	word64 rsp_25
	word64 rbp_26
	word64 r11_27
	word64 r12_28
	word64 r13_29
	word64 r14_30
	word64 r15_31
	fn000000000040E450(fp - 0x0000000000000050, 0xFFFFFFFFFFFFFFFF, ebx_13, (word32) rdx, rdx, (word32) (uint64) ebx_13, r11, fs, out rsp_25, out rbp_26, out r11_27, out r12_28, out r13_29, out r14_30, out r15_31)
	return rsp_25 + 0x0000000000000058
// DataOut: fs r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040E970_exit:
// DataOut: r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040EAB0(word32 ebx, word32 ebp, word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx fs r11 rdi
// LiveOut: r12 r12b r14 r15b rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EAB0_entry:
	*r15bOut = r15b
// DataOut: ebp ebx fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EAB0:
// DataOut: dl ebp ebx fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EA00:
	word64 r8_8 = (uint64) edx
	word64 r8_15 = DPB(r8_8, (word32) ((byte) r8_8 >>u 0x05), 0)
	word32 r9d_33 = (word32) (uint64) Mem0[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32]
	byte cl_17 = (byte) (uint64) ((word32) (uint64) edx & 0x0000001F)
	Mem52[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) r9d_33 >>u cl_17) ^ 0x00000001) & 0x00000001) << cl_17) ^ r9d_33)
	word64 rsp_57
	word64 rbp_58
	word64 r11_59
	word64 r12_60
	word64 r13_61
	word64 r14_62
	word64 r15_63
	return fn000000000040E450(fp - 0x0000000000000048, 0xFFFFFFFFFFFFFFFF, ebx, ebp, rdi, 0x00000000, r11, fs, out rsp_57, out rbp_58, out r11_59, out r12_60, out r13_61, out r14_62, out r15_63)
// DataOut: fs r12 r12b r14 r15b rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:0x000000000000003A rsi:0xFFFFFFFFFFFFFFFF

fn000000000040EAB0_exit:
// DataOut: r12 r12b r14 r15b rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r8b:<invalid> rcx:<invalid> r8d:(word32) (r8b >>u 0x0A) rdi:<invalid> r9:<invalid> r15:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):<invalid>



word64 fn000000000040EBF0(word32 ebx, word32 ebp, word64 rsi, word32 edi, word64 r11, selector fs, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi esi fs r11 rsi
// LiveOut: r11 rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EBF0_entry:
// DataOut: ebp ebx edi esi fs r11 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBF0:
// DataOut: ebp ebx edi esi fs r11 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBFC_thunk_fn000000000040E450:
	word64 rsp_11
	word64 rbp_12
	word64 r11_13
	word64 r12_14
	word64 r13_15
	word64 r14_16
	word64 r15_17
	return fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, ebx, ebp, rsi, edi, r11, fs, out rsp_11, out rbp_12, out r11_13, out r12_14, out r13_15, out r14_16, out r15_17)
// DataOut: fs r11 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF

fn000000000040EBF0_exit:
// DataOut: r11 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040EC10(word32 ebx, word32 ebp, word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx fs r11 rdi
// LiveOut: ebp ebx r11 r13 r14 r15 rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EC10_entry:
// DataOut: ebp ebx fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC10:
// DataOut: ebp ebx edi esi fs r11 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC1F_thunk_fn000000000040E450:
	word64 rsp_16
	word64 rbp_17
	word64 r11_18
	word64 r12_19
	word64 r13_20
	word64 r14_21
	word64 r15_22
	return fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, ebx, ebp, rdi, 0x00000000, r11, fs, out rsp_16, out rbp_17, out r11_18, out r12_19, out r13_20, out r14_21, out r15_22)
// DataOut: ebp ebx fs r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF rdi:0x0000000000000000

fn000000000040EC10_exit:
// DataOut: ebp ebx r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040EC30(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC30_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC30:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040EC69
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC40:
	word64 rsp_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 r12_62
	word64 rsi_63
	word32 ecx_64
	word64 rax_65
	word32 edx_66
	byte dl_68
	byte SCZO_69
	word32 ebp_70
	word64 rcx_67
	word64 rbx_60
	call __ctype_tolower_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc0C,r12_52,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_68,ebp_70,ecx_64,edx_66,r12_62,rax_65,rbp_58,rbx_60,rcx_67,rdi_59,rdx_55,rsi_63,rsp_54,SCZO_69,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC50:
	rcx_67 = DPB(rcx_67, (word32) Mem0[r12_62 + rbx_60:byte], 0) (alias)
	Mem79[rbp_13 + rbx_60:byte] = (byte) (uint64) Mem0[Mem0[rax_65:word64] + rcx_67 * 0x0000000000000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040EC50
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC69:
	word32 ebp_44
	*ebpOut = (word32) fp
	word64 rsp_48
	*rspOut = qwArg04 + 0x0000000000000008
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC30_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040EC80(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC80_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC80:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040ECB9
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC90:
	word64 rsp_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 r12_62
	word64 rsi_63
	word32 ecx_64
	word64 rax_65
	word32 edx_66
	byte dl_68
	byte SCZO_69
	word32 ebp_70
	word64 rcx_67
	word64 rbx_60
	call __ctype_toupper_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc0C,r12_52,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_68,ebp_70,ecx_64,edx_66,r12_62,rax_65,rbp_58,rbx_60,rcx_67,rdi_59,rdx_55,rsi_63,rsp_54,SCZO_69,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECA0:
	rcx_67 = DPB(rcx_67, (word32) Mem0[r12_62 + rbx_60:byte], 0) (alias)
	Mem79[rbp_13 + rbx_60:byte] = (byte) (uint64) Mem0[Mem0[rax_65:word64] + rcx_67 * 0x0000000000000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040ECA0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECB9:
	word32 ebp_44
	*ebpOut = (word32) fp
	word64 rsp_48
	*rspOut = qwArg04 + 0x0000000000000008
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC80_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040ECD0(word64 rax, word64 rcx, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r9d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl cl ebp fs r11d r14 r15b r9d rax rcx rdi rdx rsi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdx
fn000000000040ECD0_entry:
	*r8Out = r8
	*r15Out = r15
	*r14Out = r14
	*r9Out = r9
	*r11Out = r11
// DataOut: bpl cl ebp fs r11 r11d r14 r14d r15 r15b r8 r9 r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ECD0:
	word64 rax_1036 = Mem0[rax + 0x0000000000000030:word64]
	word64 r10_456 = rdx
	word64 r12_1020 = rsi
	*r12Out = r12_1020
	word64 rbx_139 = rcx
	word64 rsp_138 = fp - 0x00000000000004F0
	word32 esi_33 = (word32) (uint64) Mem0[rax_1036 + 0x0000000000000008:word32]
	branch esi_33 <= 0x0000000C l000000000040EEE0
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(0) Local -0008(0) Local -04B0(32)

l000000000040EEE0:
	rax_1036 = 0x000000000000000C
	branch (word32) (uint64) esi_33 == 0x00000000 l000000000040EEEE
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEB_1:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:0x000000000000000C rsi:(uint64) esi -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEE:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:(uint64) esi eax:esi -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED26:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED2B:
	word64 r14_1029
	word64 rax_108
	word32 eax_49 = (word32) Mem0[rcx:byte]
	word64 rax_215 = DPB(rax_1036, eax_49, 0)
	byte al_308 = (byte) eax_49
	word64 r13_1021 = 0x0000000000000000
	*r13Out = r13_1021
	branch al_308 == 0x00 l000000000040F053
// DataOut: al bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED39:
	*r14Out = rdx
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:(word32) Mem0[rcx:byte] r13:0x0000000000000000 -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED85:
	branch al_308 != 0x25 l000000000040ED50
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED50:
	branch r14_1029 - r13_1021 <=u 0x0000000000000001 l000000000040EE98
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED60:
	branch r12_1020 == 0x0000000000000000 l000000000040ED6D
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED65:
	Mem1025[r12_1020:byte] = al_308
	*r12Out = r12_1020 + 0x0000000000000001
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED6D:
	*r13Out = r13_1021 + 0x0000000000000001
	word64 r8_1024
	*r8Out = rbx_139
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED89:
	r9d = (word32) Mem0[rsp_138 + 0x000000000000000F:byte]
	r9 = DPB(r9, r9d, 0) (alias)
	*r9Out = r9
	byte r9b_629 = (byte) r9d
	word64 r11_1012
	*r11Out = 0x0000000000000000
	r11d = 0x00000000 (alias)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED94:
	rbx_139 = rbx_139 + 0x0000000000000001
	byte dil_643 = (byte) (word32) Mem0[rbx_139:byte]
	byte SZO_646 = cond(dil_643 - 0x30)
	branch dil_643 == 0x30 l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA1:
	branch SZO_646 l000000000040EDD0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDD0:
	branch dil_643 != 0x5E l000000000040EE70
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE70:
	branch dil_643 != 0x5F l000000000040EDEE
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE7A:
	r11d = (int32) dil_643
	*r11Out = DPB(r11_1012, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDDA:
	rcx = 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA3:
	branch dil_643 != 0x23 l000000000040EDE8
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDE8:
	branch dil_643 == 0x2D l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDEE:
	word64 rdx_679 = (uint64) ((int32) dil_643 - 0x00000030)
	word32 ebp_678 = 0xFFFFFFFF
	branch (word32) rdx_679 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDFF:
	word64 rbp_940 = 0x0000000000000000
	ebp_678 = 0x00000000 (alias)
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:0x00000000FFFFFFFF rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ebp:0xFFFFFFFF -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE28:
	branch ebp_678 <= 0x0CCCCCCC l000000000040EE08
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE08:
	word32 edx_978 = (int32) Mem0[rbx_139:byte]
	word64 rdx_979 = DPB(rdx_679, edx_978, 0)
	byte dl_980 = (byte) edx_978
	branch ebp_678 == 0x0CCCCCCC l000000000040EE88
// DataOut: dl ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE88:
	branch dl_980 <= 0x37 l000000000040EE0D
// DataOut: ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE8D:
	rbp_940 = 0x000000007FFFFFFF
	ebp_678 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE0D:
	rcx = DPB(rcx, rbp_940 * 0x0000000000000005, 0) (alias)
	ebp_678 = rdx_979 - 0x0000000000000030 + rcx * 0x0000000000000002
	rbp_940 = DPB(rbp_940, ebp_678, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE30:
	rbp_940 = 0x000000007FFFFFFF
	ebp_678 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE15:
	rbx_139 = rbx_139 + 0x0000000000000001
	dil_643 = (byte) (word32) Mem0[rbx_139:byte] (alias)
	rdx_679 = (uint64) ((int32) dil_643 - 0x00000030)
	branch (word32) rdx_679 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> ecx:<invalid> ebp:<invalid> r11d:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE40:
	branch dil_643 == 0x45 l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE4A:
	branch dil_643 == 0x4F l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEC8:
	rbx_139 = rbx_139 + 0x0000000000000001
	dil_643 = (byte) (word32) Mem0[rbx_139:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) rcx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE52:
	word64 r8_712
	branch dil_643 >u 0x7A l000000000040FF4D
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) rcx:<invalid> ecx:<invalid> r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FF4D:
	r8_712 = rbx_139
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE60:
	switch (DPB(rdx_679, (word32) dil_643, 0)) { l000000000040FEFB }
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FEFB:
	r8_712 = r11_1012 - 0x0000000000000001
	dil_643 = (byte) (word32) Mem0[rbx_139 - 0x0000000000000001:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:(word32) dil rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F39F:
	word64 r15_719
	branch dil_643 != 0x25 l000000000040F0B2
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0B2:
	word64 rax_898 = r8_712 - 0x0000000000000001
	word32 ecx_903 = 0x00000001
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0C1:
	*r15Out = rax_898
	rax_898 = rax_898 - 0x0000000000000001
	ecx_903 = (word32) (uint64) (ecx_903 + 0x00000001) (alias)
	branch Mem0[rax_898 + 0x0000000000000001:byte] != 0x25 l000000000040F0C1
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D1:
	rcx = (int64) ecx_903
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F3A9:
	*r15Out = r8_712
	rcx = 0x0000000000000001
	cl = 0x01 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D7:
	word64 r8_720 = r8_712
	*r8Out = r8_720
	word64 rax_727 = 0x0000000000000000
	byte al_729 = 0x00
	branch ebp_678 < 0x00000000 l000000000040F0E1
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0DE_1:
	rax_727 = (uint64) ebp_678 (alias)
	al_729 = (byte) ebp_678 (alias)
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E1:
	rax_215 = DPB(rax_727, (int16) al_729, 0) (alias)
	rbx_139 = rax_215
	branch rcx <u rax_215 l000000000040F0ED
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E9_1:
	rbx_139 = rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0ED:
	branch rbx_139 >=u r14_1029 - r13_1021 l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0F9:
	branch r12_1020 == 0x0000000000000000 l000000000040F16E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0FE:
	branch rax_215 <=u rcx l000000000040F144
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F103:
	Mem847[rsp_138 + 0x0000000000000030:word64] = rcx
	Mem848[rsp_138 + 0x0000000000000028:word32] = r9d
	Mem853[rsp_138 + 0x0000000000000018:word64] = r8_712
	word64 rbp_849 = (int64) ebp_678 - rcx
	branch r11d == 0x00000030 l000000000040F1C1
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1C1:
	rax_215 = memset(r12_1020, 0x0000000000000030, rbp_849)
	r9 = (uint64) Mem853[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1020 = r12_1020 + rbp_849
	r8_720 = Mem853[rsp_138 + 0x0000000000000018:word64]
	r9d = (word32) r9 (alias)
	r9b_629 = (byte) r9 (alias)
	rcx = Mem853[rsp_138 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F125:
	rax_215 = memset(r12_1020, 0x0000000000000020, rbp_849)
	r9 = (uint64) Mem853[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1020 = r12_1020 + rbp_849
	rcx = Mem853[rsp_138 + 0x0000000000000030:word64]
	r9d = (word32) r9 (alias)
	r9b_629 = (byte) r9 (alias)
	r8_720 = Mem853[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F144:
	Mem804[rsp_138 + 0x0000000000000028:word64] = r8_720
	Mem808[rsp_138 + 0x0000000000000018:word64] = rcx
	branch r9b_629 == 0x00 l000000000040F180
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F180:
	rax_215 = memcpy(r12_1020, r15_719, rcx)
	rcx = Mem808[rsp_138 + 0x0000000000000018:word64]
	word64 r8_842
	*r8Out = Mem808[rsp_138 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F15C:
	word32 ebp_828
	rax_215 = fn000000000040EC80(rax_215, rcx, r15_719, r12_1020, qwLoc04, out rsp_138, out ebp_828, out r12_1020)
	rcx = Mem808[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
	word64 r8_837
	*r8Out = Mem808[rsp_138 + 0x0000000000000028:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16B:
	*r12Out = r12_1020 + rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16E:
	*r13Out = r13_1021 + rbx_139
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> ebp:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED74:
	word32 eax_579 = (word32) Mem0[rax_215 + 0x0000000000000001:byte]
	rax_215 = DPB(rax_215, eax_579, 0) (alias)
	al_308 = (byte) eax_579 (alias)
	rbx_139 = rax_215 + 0x0000000000000001
	branch al_308 == 0x00 l000000000040F050
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F050:
	r10_456 = r14_1029
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F053:
	branch r12_1020 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F05C:
	branch r10_456 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F191:
	rax_108 = r13_1021
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F065:
	Mem501[r12_1020:byte] = 0x00
	rax_108 = r13_1021
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE9A:
	word64 rsi_150 = Mem0[rsp_138 + 0x00000000000004C8:word64] ^ Mem0[fs:0x00000028:word64]
	word32 esi_151 = (word32) rsi_150
	branch rsi_150 != 0x0000000000000000 l00000000004105EA
// DataOut: bpl cl ebp esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004105EA:
	__stack_chk_fail()
	Mem184[rsp_138 + 0x0000000000000018:word32] = 0x00000000
// DataOut: bpl cl ebp esi fs r11d r12 r13 r14 r14d r15 r15b r9d rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F25D:
	Mem185[rsp_138 + 0x00000000000000B2:byte] = cl
	byte dil_187 = (byte) (uint64) esi_151
	word64 rax_190 = rsp_138 + 0x00000000000000B3
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r14d r15 r15b r8 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF37:
	Mem197[rax_190:byte] = dil_187
	Mem200[rax_190 + 0x0000000000000001:byte] = 0x00
	Mem202[rsp_138 + 0x0000000000000038:word32] = r9d
	Mem203[rsp_138 + 0x0000000000000030:word32] = r11d
	Mem204[rsp_138 + 0x0000000000000028:word64] = rbx_139
	word64 rdi_206
	word64 r10_207
	word64 rdx_208
	word64 rsi_209
	word64 rbp_210
	word64 rbx_212
	byte SCZO_214
	word32 esi_217
	byte SZO_218
	byte C_219
	word64 r8_220
	word32 r9d_221
	byte dil_222
	word32 eax_223
	word32 r13d_224
	byte al_226
	byte Z_227
	word32 r11d_229
	word64 r11_230
	word32 edi_231
	word32 edx_232
	word32 ebp_233
	byte CZ_234
	word32 ecx_235
	word64 r9_237
	byte S_238
	word16 ax_239
	byte dl_240
	word64 r15_241
	byte r15b_242
	byte r9b_243
	call strftime (retsize: 8; depth: 8)
		uses: al_192,ax_193,bLoc04E1_39,C_154,cl_196,CZ_145,dil_187,dl_125,dwLoc04_4,dwLoc04AC_37,dwLoc04B0_44,dwLoc08_9,dwLoc0C_12,dwLoc10_15,dwLoc14_18,dwLoc18_21,eax_191,ebp_137,ecx_195,edi_188,edx_124,esi_151,fs_118,qwLoc04A8_40,qwLoc04D0_114,qwLoc04E0_35,qwLoc28_30,r10_119,r11_148,r11d_147,r12_130,r13_134,r13d_135,r14_117,r15_116,r15b_115,r8_189,r9_120,r9b_122,r9d_121,rax_190,rbp_136,rbx_139,rcx_194,rdi_199,rdx_198,rsi_201,rsp_138,S_146,SCZO_144,SZO_152,Z_153
		defs: al_226,ax_239,C_219,cl_236,CZ_234,dil_222,dl_240,eax_223,ebp_233,ecx_235,edi_231,edx_232,esi_217,fs_216,r10_207,r11_230,r11d_229,r12_211,r13_225,r13d_224,r14_228,r15_241,r15b_242,r8_220,r9_237,r9b_243,r9d_221,rax_215,rbp_210,rbx_212,rcx_213,rdi_206,rdx_208,rsi_209,rsp_205,S_238,SCZO_214,SZO_218,Z_227
	word64 r11_248 = (uint64) Mem204[rsp_138 + 0x0000000000000030:word32]
	*r11Out = r11_248
	r9 = (uint64) Mem204[rsp_138 + 0x0000000000000038:word32]
	*r9Out = r9
	word64 r8_247 = Mem204[rsp_138 + 0x0000000000000028:word64]
	*r8Out = r8_247
	r11d = (word32) r11_248 (alias)
	r9d = (word32) r9 (alias)
	byte r9b_252 = (byte) r9
	branch rax_215 == 0x0000000000000000 l000000000040ED74
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> r14:rdx rdx:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF84:
	rbx_139 = rax_215 - 0x0000000000000001
	word64 rax_254 = 0x0000000000000000
	byte al_256 = 0x00
	branch ebp_233 < 0x00000000 l000000000040EF8F
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8C_1:
	rax_254 = (uint64) ebp_233 (alias)
	al_256 = (byte) ebp_233 (alias)
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8F:
	word16 ax_267 = (int16) al_256
	word64 rax_269 = DPB(rax_254, ax_267, 0)
	rcx = rax_215 - 0x0000000000000001
	cl = (byte) (rax_215 - 0x0000000000000001) (alias)
	branch rax_269 <u rax_215 - 0x0000000000000001 l000000000040EF9E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9A_1:
	rcx = rax_269
	cl = (byte) ax_267 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9E:
	branch rcx >=u r14_1029 - r13_1021 l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE98:
	rax_108 = 0x0000000000000000
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFAA:
	branch r12_1020 == 0x0000000000000000 l000000000040F03A
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB3:
	branch rax_215 - 0x0000000000000001 >=u rax_269 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB8:
	rax_269 = (uint64) Mem204[rsp_138 + 0x0000000000000018:word32]
	branch (word32) rax_269 != 0x00000000 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFC0:
	Mem404[rsp_138 + 0x0000000000000030:word64] = rcx
	Mem405[rsp_138 + 0x0000000000000028:word32] = r9d
	Mem410[rsp_138 + 0x0000000000000018:word64] = r8_247
	word64 rbp_406 = (int64) ebp_233 - (rax_215 - 0x0000000000000001)
	branch r11d == 0x00000030 l0000000000410239
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000410239:
	rax_269 = memset(r12_1020, 0x0000000000000030, rbp_406)
	r9 = (uint64) Mem410[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1020 = r12_1020 + rbp_406
	r8_247 = Mem410[rsp_138 + 0x0000000000000018:word64]
	r9d = (word32) r9 (alias)
	r9b_252 = (byte) r9 (alias)
	rcx = Mem410[rsp_138 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFE2:
	rax_269 = memset(r12_1020, 0x0000000000000020, rbp_406)
	r9 = (uint64) Mem410[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1020 = r12_1020 + rbp_406
	rcx = Mem410[rsp_138 + 0x0000000000000030:word64]
	r9d = (word32) r9 (alias)
	r9b_252 = (byte) r9 (alias)
	r8_247 = Mem410[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F001:
	Mem336[rsp_138 + 0x0000000000000028:word64] = rcx
	Mem337[rsp_138 + 0x0000000000000018:word64] = r8_247
	word64 rsi_341 = Mem337[rsp_138 + 0x0000000000000020:word64]
	branch r15b_242 != 0x00 l000000000040F1AD
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1AD:
	word32 ebp_386
	rax_269 = fn000000000040EC30(rax_269, rax_215 - 0x0000000000000001, rsi_341, r12_1020, qwLoc04, out rsp_138, out ebp_386, out r12_1020)
	rcx = Mem337[rsp_138 + 0x0000000000000028:word64]
	word64 r8_392
	*r8Out = Mem337[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F01F:
	branch r9b_252 == 0x00 l000000000040F199
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F199:
	rax_269 = memcpy(r12_1020, rsi_341, rax_215 - 0x0000000000000001)
	rcx = Mem337[rsp_138 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
	word64 r8_384
	*r8Out = Mem337[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F028:
	word32 ebp_367
	rax_269 = fn000000000040EC80(rax_269, rax_215 - 0x0000000000000001, rsi_341, r12_1020, qwLoc04, out rsp_138, out ebp_367, out r12_1020)
	rcx = Mem337[rsp_138 + 0x0000000000000028:word64]
	word64 r8_373
	*r8Out = Mem337[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F037:
	*r12Out = r12_1020 + (rax_215 - 0x0000000000000001)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F03A:
	word32 eax_306 = (word32) Mem204[rax_269 + 0x0000000000000001:byte]
	rax_215 = DPB(rax_269, eax_306, 0) (alias)
	al_308 = (byte) eax_306 (alias)
	*r13Out = r13_1021 + rcx
	rbx_139 = rax_215 + 0x0000000000000001
	branch al_308 != 0x00 l000000000040ED85
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F04E:
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEB1:
	word64 rsp_161 = Mem0[rsp_138 + 0x00000000000004E8:word64]
	word64 rbp_163
	*rbpOut = Mem0[rsp_161 + 0x0000000000000008:word64]
	word64 rsi_166
	*rsiOut = Mem0[rsp_161 + 0x0000000000000010:word64]
	word64 rdi_169
	*rdiOut = Mem0[rsp_161 + 0x0000000000000018:word64]
	word64 rsp_172
	*rspOut = rsp_161 + 0x0000000000000020
	return rax_108
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040ECD0_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> rdi:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040EDA9:
	rbx_139 = rbx_139 + 0x0000000000000001
	dil_643 = (byte) (word32) Mem0[rbx_139:byte] (alias)
	SZO_646 = cond(dil_643 - 0x30) (alias)
	branch dil_643 != 0x30 l000000000040EDA1
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDBB:
// DataOut: dil fs r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:0x0000000000000001 rsi:<invalid> eax:0x00000001 r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:0x0001 rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDC0:
	r11d = (int32) dil_643
	*r11Out = DPB(r11_1012, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)



word64 fn0000000000410600(word64 rax, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r8d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410600_entry:
// DataOut: bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410600:
	word64 rsp_27
	word64 rbp_28
	word64 rsi_29
	word64 rdi_30
	word64 r8_31
	word64 r9_32
	word64 r11_33
	word64 r12_34
	word64 r13_35
	word64 r14_36
	word64 r15_37
	return fn000000000040ECD0(rax, rdx, rsi, ebp, rdi, 0x0000000000000000, (word32) (uint64) r8d, r11d, r14, r15b, fs, out rsp_27, out rbp_28, out rsi_29, out rdi_30, out r8_31, out r9_32, out r11_33, out r12_34, out r13_35, out r14_36, out r15_37)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410600_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r10:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> r14:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> rbx:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):r9d



word64 fn0000000000410630(word64 rsi, word64 rdi, word64 r8, word64 r9, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 r9 rdi rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000410630_entry:
// DataOut: r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410630:
	branch rsi == 0x0000000000000000 l0000000000410A30
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A30:
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410650:
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041066A:
	dcgettext(0x0000000000000000, 0x00000000004168D3, 0x0000000000000005)
	word64 rax_47 = dcgettext(0x0000000000000000, 0x0000000000416930, 0x0000000000000005)
	word64 rax_50 = DPB(rax_47, fputs_unlocked(rax_47, rdi), 0)
	branch r9 >u 0x0000000000000009 l0000000000410A50
// DataOut: r11 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rax:0x0000000000000000 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A50:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:0x0000000000000000 rax:<invalid> rdi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004107A1:
	dcgettext(0x0000000000000000, 0x0000000000416B08, 0x0000000000000005)
	return qwLoc08 + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:<invalid> rbp:rdi rbx:<invalid> r9:<invalid> r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:0x0000000000416B08 rax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004106BE:
	word64 rsp_107
	word64 rdi_108
	word64 rsi_109
	word64 rbp_110
	word64 r12_111
	word64 r9_112
	word64 rbx_113
	word64 r8_114
	byte SCZO_115
	byte SZO_116
	byte C_117
	byte Z_118
	word64 rcx_119
	word64 rdx_120
	word32 edx_121
	word32 esi_122
	word32 eax_123
	word64 rax_124
	word32 edi_125
	byte CZ_126
	word64 r10_127
	word64 r11_128
	word64 r13_129
	word64 r15_130
	word64 r14_131
	call Mem0[0x00416B48:word32] (retsize: 4; depth: 116)
		uses: C_29,CZ_52,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_17,dwLoc18_21,eax_28,edi,edx,esi,qwLoc28,qwLoc30,qwLoc38,qwLoc40,qwLoc48,qwLoc50,qwLoc58,qwLoc60,qwLoc68,qwLoc70,r10,r11,r12_15,r13,r14,r15,r8_31,r9_32,rax_50,rbp_18,rbx_23,rcx_38,rdi_49,rdx_45,rsi_48,rsp_24,SCZO_51,SZO_30,Z_26
		defs: C_117,CZ_126,eax_123,edi_125,edx_121,esi_122,r10_127,r11_128,r12_111,r13_129,r14_131,r15_130,r8_114,r9_112,rax_124,rbp_110,rbx_113,rcx_119,rdi_108,rdx_120,rsi_109,rsp_107,SCZO_115,SZO_116,Z_118
	return rsp_107
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:0x0000000000000000 rax:<invalid> rdi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410630_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000410AC0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410AC0_entry:
// DataOut: r11 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AC0:
	word64 r9_13 = 0x0000000000000000
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AF3:
	word32 eax_18 = (word32) (uint64) Mem0[rax:word32]
	branch eax_18 <u 0x00000030 l0000000000410AD0
// DataOut: eax r11 r8 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>
// LocalsOut: fp(64)

l0000000000410AD0:
	word64 rax_58 = (uint64) (eax_18 + 0x00000008)
	Mem60[rax_58:word32] = (word32) rax_58
	rax = Mem60[rdx:word64]
	Mem66[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax == 0x0000000000000000 l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>
// LocalsOut: fp(64)

l0000000000410AFB:
	Mem49[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	rax = Mem49[rdx:word64]
	Mem55[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax != 0x0000000000000000 l0000000000410AE9
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>
// LocalsOut: fp(64)

l0000000000410AE9:
	r9_13 = r9_13 + 0x0000000000000001
	branch r9_13 == 0x000000000000000A l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>
// LocalsOut: fp(64)

l0000000000410B13:
// DataOut: r11 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>
// LocalsOut: fp(64)

l0000000000410B18:
	fn0000000000410630(rsi, rdi, fp - 0x0000000000000058, r9_13, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>

fn0000000000410AC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> rax:<invalid> r10:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -88(fp):<invalid>



word64 fn0000000000410C40(word64 rsi, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esp rax rdi rdx rsp sp spl
// Preserved: rbx
fn0000000000410C40_entry:
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C40:
	word64 rax_13 = malloc(rdi)
	branch rax_13 == 0x0000000000000000 l0000000000410C50
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:(uint64) (rdx_rax % rsi) rax:(uint64) (rdx_rax /u rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C50:
	branch rdi == 0x0000000000000000 l0000000000410C4E
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C55:
	fn0000000000410E50()
	word64 rax_34 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi)
	branch rax_34 <u rdi l0000000000410C7A
// DataOut: eax ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C7A:
	Mem40[fp - 0x0000000000000008:word32] = rax_34
	fn0000000000410E50()
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rdx:(uint64) (rdx_rax % rsi) rax:(uint64) (rdx_rax /u rsi) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C71:
	rdi = rdi *s rsi
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rdx:(uint64) (rdx_rax % rsi) rax:(uint64) (rdx_rax /u rsi) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C4E:
	word64 rsp_23
	*rspOut = fp + 0x0000000000000004
	return rax_13
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx

fn0000000000410C40_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx



word64 fn0000000000410C90(word64 rdx, word64 rsi, word64 rdi, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: al ebx r8 rax rsp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp r10 r10b r10d r10w r8 r8b r8d r8w rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000410C90_entry:
	*r8Out = r8
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C90:
	branch rsi == 0x0000000000000000 l0000000000410CB0
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l0000000000410CB0:
	branch rdi == 0x0000000000000000 l0000000000410C99
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l0000000000410CB5:
	free(rdi)
	word32 ebx_226
	*ebxOut = (word32) qwLoc04
	word64 rsp_227
	*rspOut = fp + 0x0000000000000004
	return 0x0000000000000000
// DataOut: al ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

l0000000000410C99:
	word64 rax_66 = realloc(rdi, rsi)
	branch rax_66 == 0x0000000000000000 l0000000000410CBE
// DataOut: al ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l0000000000410CBE:
	branch rsi == 0x0000000000000000 l0000000000410CA6
// DataOut: al ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l0000000000410CC3:
	fn0000000000410E50()
	rdx = (uint64) (0xFFFFFFFFFFFFFFFF % rdx)
	word64 rax_91 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdx)
	branch rax_91 <u rsi l0000000000410CED
// DataOut: eax ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rbp rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410CED:
	Mem100[fp - 0x0000000000000008:word32] = rax_91
	fn0000000000410E50()
	word64 r8_104
	*r8Out = rdx
	word64 rcx_105 = Mem100[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410D40
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rbp rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:(uint64) (rdx_rax /u rdx) rdx:(uint64) (rdx_rax % 0x0000000000000000) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410D40:
	branch rcx_105 != 0x0000000000000000 l0000000000410D29
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D45:
	word64 rax_207 = (uint64) (0x0000000000000080 /u rdx)
	rdx = (uint64) (0x0000000000000080 % rdx)
	rcx_105 = (uint64) (rax_207 == 0x0000000000000000) + rax_207
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D0B:
	word128 rdx_rax_126 = (uint128) (uint64) rax_91
	r8_104 = 0x00000000AAAAAAAA
	*r8Out = r8_104
	rdx = (uint64) (rdx_rax_126 % 0x00000000AAAAAAAA)
	word64 rax_131 = (uint64) (rdx_rax_126 /u 0x00000000AAAAAAAA)
	branch rcx_105 >=u rax_131 l0000000000410D5C
// DataOut: eax ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D5C:
	Mem144[fp - 0x000000000000000C:word32] = rax_131
	fn0000000000410E50()
	word64 rax_148 = Mem144[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410DA0
// DataOut: eax ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> rdx:(uint64) (rdx_rax % 0x00000000AAAAAAAA) rax:(uint64) (rdx_rax /u 0x00000000AAAAAAAA) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410DA0:
	rdx = 0x0000000000000080
	branch rax_148 != 0x0000000000000000 l0000000000410DAC
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DA8_1:
	rax_148 = 0x0000000000000080
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DAC:
	Mem191[rsi:word64] = rax_148
	rsi = rax_148
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D78:
	branch rax_148 >u rdx l0000000000410DB7
// DataOut: eax ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DB7:
	Mem164[fp - 0x0000000000000010:word32] = rax_148
	fn0000000000410E50()
	Mem166[fp - 0x0000000000000014:word32] = rsi
	word64 rsp_168
	word64 rax_169 = fn0000000000410C40(rsi, rdi, out rsp_168)
	word32 ebx_177
	*ebxOut = (word32) Mem166[rsp_168:word64]
	word64 rsp_178
	*rspOut = rsp_168 + 0x0000000000000008
	return memset(rax_169, 0x0000000000000000, rdi)
// DataOut: al ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// Terminates process

l0000000000410D87:
	rdx = rax_148 + 0x0000000000000001 >>u 0x0000000000000001
	word64 rax_157 = rax_148 + rdx
	Mem160[rsi:word64] = rax_157
	rsi = rax_157
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D1F:
	rcx_105 = rcx_105 + (rcx_105 + 0x0000000000000001 >>u 0x0000000000000001)
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> rdx:(uint64) (rdx_rax % 0x00000000AAAAAAAA) rax:(uint64) (rdx_rax /u 0x00000000AAAAAAAA) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D29:
	Mem120[rsi:word64] = rcx_105
	rsi = rcx_105 *s r8_104
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CE4:
	rsi = rsi *s rdx
// DataOut: ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:(uint64) (rdx_rax /u rdx) rdx:(uint64) (rdx_rax % 0x0000000000000000) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CA6:
	word32 ebx_77
	*ebxOut = (word32) qwLoc04
	word64 rsp_78
	*rspOut = fp + 0x0000000000000004
	return rax_66
// DataOut: al ebp ebx fs r11 r12 r12b r13 r13d r14 r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

fn0000000000410C90_exit:
// DataOut: al ebx r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx



word64 fn0000000000410E00(word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax rax rbp rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000410E00_entry:
// DataOut: fs r11 r12 r12d r13 r13b r14 r14d r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E00:
	word64 rsp_15
	word64 rax_16 = fn0000000000410C40(rsi, rsi, out rsp_15)
	word64 rbp_24
	*rbpOut = Mem0[rsp_15 + 0x0000000000000010:word64]
	word64 rsp_25
	*rspOut = rsp_15 + 0x0000000000000018
	word64 rdi_26
	*rdiOut = rax_16
	return memcpy(rax_16, rdi, rsi)
// DataOut: eax fs r11 r12 r12d r13 r13b r14 r14d r15 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410E00_exit:
// DataOut: eax rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rdi:<invalid> rbx:<invalid> rdx:rsi rsi:<invalid> rax:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000410E30(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: eax rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E30_entry:
// DataOut: fs r11 r12 r13 r13b r14 r14d r15 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E30:
	word64 rax_10 = DPB(rax, strlen(rdi), 0)
	word64 rsi_12
	*rsiOut = rax_10 + 0x0000000000000001
// DataOut: fs r11 r12 r13 r13b r14 r14d r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000410E40_thunk_fn0000000000410E00:
	word64 rsp_15
	word64 rbp_16
	word64 rdi_17
	return fn0000000000410E00(rax_10 + 0x0000000000000001, rdi, out rsp_15, out rbp_16, out rdi_17)
// DataOut: eax fs r11 r12 r13 r13b r14 r14d r15 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:DPB(rax, <invalid>, 0) rdi:rdi rsi:DPB(rax, <invalid>, 0) + 0x0000000000000001 -4(fp):rbx

fn0000000000410E30_exit:
// DataOut: eax rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> -4(fp):rbx



void fn0000000000410E50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000410E50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000410E50_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E50:
	dcgettext(0x0000000000000000, 0x0000000000416BCF, 0x0000000000000005)
	word64 rsp_16
	byte SCZO_17
	word32 edx_18
	word64 rdx_19
	word32 esi_20
	word64 rsi_21
	word32 edi_22
	word64 rdi_23
	byte SZO_24
	byte C_25
	word64 rax_26
	word64 rcx_27
	word32 eax_28
	call error (retsize: 8; depth: 16)
		uses: C_15,eax_13,rax_12,rcx_9,rdi_8,rdx_10,rsi_11,rsp_2,SZO_14
		defs: C_25,eax_28,edi_22,edx_18,esi_20,rax_26,rcx_27,rdi_23,rdx_19,rsi_21,rsp_16,SCZO_17,SZO_24
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000410E90(word32 edx, word64 rsi, word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 r8d rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E90_entry:
// DataOut: edx r8 r8d rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64)

l0000000000410E90:
	branch edx >u 0x00000024 l00000000004112B0
// DataOut: r14d r8 r8d rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l00000000004112B0:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416DC8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EAA:
	branch rsi != 0x0000000000000000 l0000000000410EC2
// DataOut: r12 r14d r15 r8d rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000410EBE_1:
// DataOut: r12 r14d r15 r8d rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000410EC2:
	word64 rsp_40
	word64 rdi_41
	word64 rsi_42
	word32 r14d_43
	word32 edx_44
	word64 r14_45
	word64 rbp_46
	word64 rbx_47
	byte SCZO_48
	byte CZ_49
	word64 rax_50
	word64 r15_51
	byte SZO_52
	byte C_53
	word64 r13_54
	word64 rcx_55
	word64 r12_56
	word64 r8_57
	byte Z_58
	word32 ecx_59
	word64 rdx_60
	word32 esi_61
	word32 edi_62
	word32 ebx_63
	word32 r9d_64
	word32 eax_67
	word32 ebp_68
	byte dl_69
	byte al_70
	byte S_71
	byte cl_73
	word64 r9_66
	byte bl_65
	word32 r8d_396
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: bl_39,C_31,CZ_24,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_18,dwLoc18_21,ebp_27,ebx_37,edx,r12_35,r13_33,r14_9,r14d_10,r15_28,r8,rax_25,rbp_26,rbx_38,rcx,rdi,rsi,rsp_22,SCZO_23,SZO_29,Z_30
		defs: al_70,bl_65,C_53,cl_73,CZ_49,dl_69,eax_67,ebp_68,ebx_63,ecx_59,edi_62,edx_44,esi_61,r12_56,r13_54,r14_45,r14d_43,r15_51,r8_57,r8d_72,r9_66,r9d_64,rax_50,rbp_46,rbx_47,rcx_55,rdi_41,rdx_60,rsi_42,rsp_40,S_71,SCZO_48,SZO_52,Z_58
	word64 rax_78 = rbp_46
// DataOut: bl r12 r14d r15 r8d rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EDF:
	r9_66 = DPB(r9_66, (word32) bl_65, 0) (alias)
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_66 * 0x0000000000000002:byte] & 0x20) != 0x00 l0000000000410ED8
// DataOut: bl r12 r14d r15 r8d rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410ED8:
	rax_78 = rax_78 + 0x0000000000000001
	bl_65 = (byte) (word32) Mem0[rax_78:byte] (alias)
// DataOut: bl r12 r14d r15 r8d rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EEB:
	branch bl_65 != 0x2D l0000000000410F08
// DataOut: r12 r14d r15 r8d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F08:
	word64 rbp_239
	word32 ebp_288
	word32 edx_285
	word64 rax_197 = __errno_location()
	Mem199[rax_197:word32] = 0x00000000
	word64 rax_204 = DPB(rax_197, strtoul(rbp_46, r15_51, (uint64) r14d_43), 0)
	word64 r14_205 = Mem199[r15_51:word64]
	word64 rbx_207 = rax_204
	branch r14_205 == rbp_46 l0000000000410FE7
// DataOut: r12 r14 r15 r8d rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FE7:
	branch r12_56 == 0x0000000000000000 l0000000000410EF0
// DataOut: r12 r14 r15 r8d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FF0:
	word32 edx_966 = (word32) Mem199[rbp_46:byte]
	byte dl_969 = (byte) edx_966
	branch dl_969 == 0x00 l0000000000410EF0
// DataOut: dl edx r12 r14 r15 r8d
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FFC:
	rbp_239 = 0x0000000000000000
	ebp_288 = 0x00000000 (alias)
	rbx_207 = 0x0000000000000001
	edx_285 = (word32) (uint64) edx_966 (alias)
	branch strchr(r12_56, DPB(r15_51, (int32) dl_969, 0)) != 0x0000000000000000 l0000000000410F94
// DataOut: dl ebp edx r12 r14 r15 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041101F:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000000 r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:(uint64) (word32) Mem0[rdi + 0x0000000000000000:byte] r9d:(word32) bl rsi:<invalid> rdi:r8 rbx:0x0000000000000001 rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):(word32) Mem0[rdi + 0x0000000000000000:byte] -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F3A:
	word32 eax_925 = (word32) (uint64) Mem199[rax_197:word32]
	branch eax_925 != 0x00000000 l0000000000410F68
// DataOut: eax r12 r14 r15 r8d rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F68:
	rbp_239 = 0x0000000000000001
	ebp_288 = 0x00000001 (alias)
	branch eax_925 != 0x00000022 l0000000000410EF0
// DataOut: ebp r12 r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F76:
// DataOut: ebp r12 r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F40:
	rbp_239 = 0x0000000000000000
	ebp_288 = 0x00000000 (alias)
// DataOut: ebp r12 r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F42:
	branch r12_56 == 0x0000000000000000 l0000000000410F4F
// DataOut: ebp r12 r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F47:
	word32 edx_936 = (word32) Mem199[r15_51:byte]
	byte dl_939 = (byte) edx_936
	branch dl_939 != 0x00 l0000000000410F78
// DataOut: dl ebp edx r12 r14 r15 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F78:
	edx_285 = (word32) (uint64) edx_936 (alias)
	branch strchr(r12_56, DPB(r15_51, (int32) dl_939, 0)) == 0x0000000000000000 l0000000000411028
// DataOut: dl ebp edx r12 r14 r15 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F94:
	word64 rax_310
	word32 eax_307
	word32 ecx_304
	word64 rsi_292 = 0x0000000000000030
	word32 edx_301 = (word32) (uint64) edx_285
	branch strchr(r12_56, 0x0000000000000030) == 0x0000000000000000 l0000000000410FCB
// DataOut: dl ebp r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FAE:
	byte al_895 = (byte) (word32) Mem199[0x0000000000000031:byte]
	branch al_895 == 0x44 l0000000000411262
// DataOut: al dl ebp r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FBB:
	branch al_895 == 0x69 l000000000041124A
// DataOut: al dl ebp r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041124A:
	word64 rcx_919 = (uint64) (Mem199[0x0000000000000032:byte] == 0x42)
	rax_310 = 0x0000000000000400
	eax_307 = 0x00000400 (alias)
	ecx_304 = rcx_919 + 0x0000000000000001 + rcx_919
// DataOut: dl eax ebp ecx r14 r15 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FC3:
	branch al_895 == 0x42 l0000000000411262
// DataOut: dl ebp r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411262:
	ecx_304 = 0x00000002 (alias)
	rax_310 = 0x00000000000003E8
	eax_307 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx r14 r15 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FCB:
	ecx_304 = 0x00000001 (alias)
	rax_310 = 0x0000000000000400
	eax_307 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx r14 r15 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FD5:
	word64 rdx_311 = (uint64) (edx_301 - 0x00000042)
	byte dl_314 = (byte) rdx_311
	branch dl_314 >u 0x35 l0000000000411028
// DataOut: dl eax ebp ecx r14 r15 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FDD:
	word32 edx_329
	word64 rdi_523
	switch (DPB(rdx_311, (word32) dl_314, 0)) { l0000000000411201 l0000000000411028 l0000000000411028 l00000000004111C2 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l000000000041112C l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110BA l000000000041107F l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411064 l0000000000411036 l0000000000411028 l0000000000411028 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411054 }
// DataOut: eax ebp ecx r14 r15 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411054:
	branch rbx_207 < 0x0000000000000000 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041105D:
	rbx_207 = rbx_207 * 0x0000000000000002
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411036:
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411064:
	branch rbx_207 >u rax_310 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411077:
	rbx_207 = rbx_207 << 0x0000000000000009
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041107F:
	word64 rdi_785 = (int64) eax_307
	word64 rax_792 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_785)
	word32 esi_796 = 0x00000007
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110A6:
	branch rax_792 >=u rbx_207 l0000000000411097
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411097:
	rbx_207 = rbx_207 *s rdi_785
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110AB:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_792 = 0x0000000000000001
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041109E:
	rsi_292 = (uint64) (esi_796 - 0x00000001)
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	esi_796 = (word32) rsi_292 (alias)
	branch esi_796 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110BA:
	word64 rdi_717 = (int64) eax_307
	word64 rax_724 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_717)
	word32 esi_728 = 0x00000008
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110E5:
	branch rax_724 >=u rbx_207 l00000000004110D2
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110D2:
	rbx_207 = rbx_207 *s rdi_717
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110EA:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_724 = 0x0000000000000001
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110D9:
	rsi_292 = (uint64) (esi_728 - 0x00000001)
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	esi_728 = (word32) rsi_292 (alias)
	branch esi_728 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110F9:
	rsi_292 = (int64) eax_307
	word64 rax_656 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_292)
	word32 edi_660 = 0x00000004
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041110F:
	branch rax_656 <u rbx_207 l0000000000411271
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411271:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_656 = 0x0000000000000001
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411118:
	rbx_207 = rbx_207 *s rsi_292
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041111F:
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	edi_660 = (word32) (uint64) (edi_660 - 0x00000001) (alias)
	branch edi_660 != 0x00000000 l000000000041110F
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411127:
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:(uint64) (edi - 0x00000001) rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041112C:
	rsi_292 = (int64) eax_307
	word64 rax_588 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_292)
	word32 edi_592 = 0x00000005
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411157:
	branch rax_588 >=u rbx_207 l0000000000411144
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411144:
	rbx_207 = rbx_207 *s rsi_292
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041115C:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_588 = 0x0000000000000001
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041114B:
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	edi_592 = (word32) (uint64) (edi_592 - 0x00000001) (alias)
	branch edi_592 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041116B:
	rdi_523 = (int64) eax_307
	rsi_292 = 0xFFFFFFFFFFFFFFFF
	word64 rax_561 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_523)
	branch rbx_207 >u rax_561 l00000000004112A3
// DataOut: ebp ecx r14 r15 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411186:
	rbx_207 = rbx_207 *s rdi_523
	branch rax_561 <u rbx_207 l00000000004112A3
// DataOut: ebp ecx r14 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004112A3:
	edx_329 = 0x00000001 (alias)
	rbx_207 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041119E:
	rdi_523 = (int64) eax_307
	rsi_292 = 0xFFFFFFFFFFFFFFFF
	branch rbx_207 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_523) l0000000000411193
// DataOut: ebp ecx r14 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411193:
	rsi_292 = 0xFFFFFFFFFFFFFFFF
	rbx_207 = rbx_207 *s rdi_523
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111B5:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	edx_329 = 0x00000001 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041121B:
	rsi_292 = (int64) eax_307
	word64 rax_453 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_292)
	word32 edi_457 = 0x00000003
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411231:
	branch rax_453 <u rbx_207 l0000000000411294
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411294:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_453 = 0x0000000000000001
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411236:
	rbx_207 = rbx_207 *s rsi_292
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041123D:
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	edi_457 = (word32) (uint64) (edi_457 - 0x00000001) (alias)
	branch edi_457 != 0x00000000 l0000000000411231
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411245:
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:(uint64) (edi - 0x00000001) rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111C2:
	word64 rdi_378 = (int64) eax_307
	word64 rax_385 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_378)
	word32 esi_389 = 0x00000006
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111ED:
	branch rax_385 >=u rbx_207 l00000000004111DA
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111DA:
	rbx_207 = rbx_207 *s rdi_378
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111F2:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_385 = 0x0000000000000001
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111E1:
	rsi_292 = (uint64) (esi_389 - 0x00000001)
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	esi_389 = (word32) rsi_292 (alias)
	branch esi_389 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411028:
	Mem278[rbp_239:word64] = rbx_207
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411201:
	branch rbx_207 >u rax_310 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411283:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	edx_329 = 0x00000001 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411210:
	rbx_207 = rbx_207 << 0x000000000000000A
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411038:
	Mem346[r15_51:word64] = r14_205 + (int64) ecx_304
	rbp_239 = (uint64) (ebp_288 | edx_329)
	word32 eax_344 = (word32) (uint64) ((word32) (uint64) (word32) rbp_239 | 0x00000002)
	branch Mem346[rsi_292:byte] == 0x00 l000000000041104F
// DataOut: eax ebp rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041104C_1:
	rbp_239 = DPB(rbp_239, eax_344, 0) (alias)
// DataOut: ebp rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041104F:
// DataOut: ebp rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F4F:
	Mem240[rbp_239:word64] = rbx_207
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EF0:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EF5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410E90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rbx:rbx rsi:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn00000000004112D0(word64 rcx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi rcx
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004112D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004112D0_entry:
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004112D0:
	word64 rsi_129
	word64 r10_6 = (int64) esi
	word32 r10d_7 = (word32) r10_6
	branch edi >u 0x00000003 l000000000041133B
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000041133B:
	rsi_129 = 0x0000000000416DD1
	branch edi == 0x00000004 l00000000004112FA
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411345:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rsi:0x0000000000416DD1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l00000000004112EB:
	branch edi >=u 0x00000002 l0000000000411334
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411334:
	rsi_129 = 0x0000000000416E10
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004112F0:
	rsi_129 = 0x0000000000416DEC
	branch (word32) (uint64) (edi - 0x00000001) != 0x00000000 l000000000041132F
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004112FA:
	branch r10d_7 < 0x00000000 l0000000000411347
// DataOut: ebp r10 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rsi:<invalid> rdi:(uint64) (edi - 0x00000001) -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411347:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rsi:<invalid> rdi:(uint64) (edi - 0x00000001) -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l00000000004112FF:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rsi:<invalid> rdi:(uint64) (edi - 0x00000001) -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000041130C:
	dcgettext(0x0000000000000000, rsi_129, 0x0000000000000005)
	word64 rsp_83
	word64 rbp_84
	word64 r10_85
	word32 esi_86
	word64 r12_87
	word64 r8_88
	word64 rbx_89
	byte SCZO_90
	word32 edi_91
	word32 ebp_92
	byte CZ_93
	byte C_94
	word64 rdi_95
	word64 rsi_96
	byte Z_97
	word32 r10d_98
	byte SZO_99
	byte S_100
	word32 ebx_101
	word64 r13_102
	word64 rcx_103
	word32 edx_104
	word64 rdx_105
	word64 rax_106
	word64 r9_107
	word32 eax_108
	byte dl_109
	call error (retsize: 8; depth: 48)
		uses: bLoc27_64,bLoc28_63,C_79,CZ_21,dl,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_17,eax_77,ebp_24,ebx,edi_57,edx,esi_59,r10_6,r10d_7,r12_12,r13_65,r8_72,r9_70,rax_76,rbp_23,rbx_66,rcx_73,rdi_75,rdx_71,rsi_74,rsp_18,S_61,SCZO_58,SZO_78,Z_54
		defs: C_94,CZ_93,dl_109,eax_108,ebp_92,ebx_101,edi_91,edx_104,esi_86,r10_85,r10d_98,r12_87,r13_102,r8_88,r9_107,rax_106,rbp_84,rbx_89,rcx_103,rdi_95,rdx_105,rsi_96,rsp_83,S_100,SCZO_90,SZO_99,Z_97
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rsi:<invalid> rdi:(uint64) (edi - 0x00000001) rbx:<invalid> r13:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000041132F:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rdi:<invalid> rsi:<invalid> rbx:<invalid> r13:<invalid> rdx:<invalid> rax:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word32 fn0000000000411360(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebp r12 r8 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411360_entry:
// DataOut: edx r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64)

l0000000000411360:
	branch edx >u 0x00000024 l0000000000411788
// DataOut: r14d r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000411788:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416FE8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041137A:
	branch rsi != 0x0000000000000000 l0000000000411392
// DataOut: r12 r14d r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l000000000041138E_1:
// DataOut: r12 r14d r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000411392:
	word64 rsp_40
	word64 rdi_41
	word64 rsi_42
	word32 r14d_43
	word32 edx_44
	word64 r14_45
	word64 rbp_46
	word64 rbx_47
	byte SCZO_48
	byte CZ_49
	word64 rax_50
	word64 r15_51
	byte SZO_52
	byte C_53
	word64 r13_54
	word64 rcx_55
	word64 r12_56
	word64 r8_57
	byte Z_58
	word32 ecx_59
	word64 rdx_60
	word32 esi_61
	word32 edi_62
	word32 ebx_63
	word32 r9d_64
	word32 eax_67
	word32 ebp_68
	byte dl_69
	byte al_70
	byte S_71
	word32 r8d_72
	byte cl_73
	word64 r9_66
	byte bl_1069
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: bl_39,C_31,CZ_24,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_18,dwLoc18_21,ebp_27,ebx_37,edx,r12_35,r13_33,r14_9,r14d_10,r15_28,r8,rax_25,rbp_26,rbx_38,rcx,rdi,rsi,rsp_22,SCZO_23,SZO_29,Z_30
		defs: al_70,bl_65,C_53,cl_73,CZ_49,dl_69,eax_67,ebp_68,ebx_63,ecx_59,edi_62,edx_44,esi_61,r12_56,r13_54,r14_45,r14d_43,r15_51,r8_57,r8d_72,r9_66,r9d_64,rax_50,rbp_46,rbx_47,rcx_55,rdi_41,rdx_60,rsi_42,rsp_40,S_71,SCZO_48,SZO_52,Z_58
	word64 rax_1062 = rbp_46
// DataOut: bl r12 r14d r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113AF:
	word32 r9d_91 = (word32) bl_1069
	r9_66 = DPB(r9_66, r9d_91, 0) (alias)
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_66 * 0x0000000000000002:byte] & 0x20) != 0x00 l00000000004113A8
// DataOut: bl r12 r14d r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113A8:
	rax_1062 = rax_1062 + 0x0000000000000001
	bl_1069 = (byte) (word32) Mem0[rax_1062:byte] (alias)
// DataOut: bl r12 r14d r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113BB:
	word32 eax_169
	branch bl_1069 != 0x2D l00000000004113D8
// DataOut: r12 r14d r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113D8:
	word32 ebp_1004
	word64 rbp_1003
	word32 edx_1024
	word64 rax_226 = __errno_location()
	Mem235[rax_226:word32] = 0x00000000
	word64 rsp_240
	word64 rdi_241
	word64 rsi_242
	word32 r14d_243
	word32 edx_244
	word64 r14_245
	word64 rbp_246
	word64 rbx_247
	byte SCZO_248
	byte CZ_249
	word64 rax_250
	word64 r15_251
	byte SZO_252
	byte C_253
	word64 r13_254
	word64 rcx_255
	word64 r12_256
	word64 r8_257
	byte Z_258
	word32 ecx_259
	word64 rdx_260
	word32 esi_261
	word32 edi_262
	word32 ebx_263
	word32 r9d_264
	byte bl_265
	word64 r9_266
	word32 eax_267
	word32 ebp_268
	byte dl_269
	byte al_270
	byte S_271
	word32 r8d_272
	byte cl_273
	call __strtoul_internal (retsize: 8; depth: 72)
		uses: al_228,bl_84,C_232,cl_73,CZ_49,dl_77,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_18,dwLoc18_21,dwLoc38,eax_227,ebp_68,ebx_83,ecx_230,edi_62,edx_76,esi_237,qwLoc08,qwLoc10,qwLoc18,qwLoc28,qwLoc38_239,r12_56,r13_54,r14_45,r14d_43,r15_51,r8_57,r8d_72,r9_92,r9d_91,rax_226,rbp_46,rbx_90,rcx_229,rdi_238,rdx_233,rsi_236,rsp_40,S_71,SCZO_96,SZO_231,Z_97
		defs: al_270,bl_265,C_253,cl_273,CZ_249,dl_269,eax_267,ebp_268,ebx_263,ecx_259,edi_262,edx_244,esi_261,r12_256,r13_254,r14_245,r14d_243,r15_251,r8_257,r8d_272,r9_266,r9d_264,rax_250,rbp_246,rbx_247,rcx_255,rdi_241,rdx_260,rsi_242,rsp_240,S_271,SCZO_248,SZO_252,Z_258
	word64 r14_274 = Mem235[r15_251:word64]
	word64 rbx_1051 = rax_250
	word64 r8_279 = rax_226
	*r8Out = r8_279
	word32 r8d_280 = (word32) rax_226
	branch r14_274 == rbp_246 l00000000004114BF
// DataOut: r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114BF:
	branch r12_256 == 0x0000000000000000 l00000000004113C0
// DataOut: r12 r14 r15 r8 r8d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114C8:
	word32 edx_1038 = (word32) Mem235[rbp_246:byte]
	byte dl_1041 = (byte) edx_1038
	branch dl_1041 == 0x00 l00000000004113C0
// DataOut: dl edx r12 r14 r15 r8 r8d
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114D4:
	rbp_1003 = 0x0000000000000000
	ebp_1004 = 0x00000000 (alias)
	rbx_1051 = 0x0000000000000001
	edx_1024 = (word32) (uint64) edx_1038 (alias)
	branch strchr(r12_256, DPB(rsi_242, (int32) dl_1041, 0)) != 0x0000000000000000 l000000000041146C
// DataOut: dl ebp edx r12 r14 r15 r8 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114F7:
// DataOut: r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000000 r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:(uint64) (word32) Mem0[rdi + 0x0000000000000000:byte] r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:0x0000000000000001 r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):(word32) Mem0[rdi + 0x0000000000000000:byte] -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041140C:
	word32 eax_997 = (word32) (uint64) Mem235[rax_250:word32]
	branch eax_997 != 0x00000000 l0000000000411440
// DataOut: eax r12 r14 r15 r8 r8d rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411440:
	rbp_1003 = 0x0000000000000001
	ebp_1004 = 0x00000001 (alias)
	branch eax_997 != 0x00000022 l00000000004113C0
// DataOut: ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041144E:
// DataOut: ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411413:
	rbp_1003 = 0x0000000000000000
	ebp_1004 = 0x00000000 (alias)
// DataOut: ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411415:
	branch r12_256 == 0x0000000000000000 l0000000000411422
// DataOut: ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041141A:
	word32 edx_1008 = (word32) Mem235[rsi_242:byte]
	byte dl_1011 = (byte) edx_1008
	branch dl_1011 != 0x00 l0000000000411450
// DataOut: dl ebp edx r12 r14 r15 r8 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411450:
	edx_1024 = (word32) (uint64) edx_1008 (alias)
	branch strchr(r12_256, DPB(rsi_242, (int32) dl_1011, 0)) == 0x0000000000000000 l0000000000411500
// DataOut: dl ebp edx r12 r14 r15 r8 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041146C:
	word32 eax_378
	word64 rax_377
	word32 ecx_373
	word64 rsi_361 = 0x0000000000000030
	word32 edx_370 = (word32) (uint64) edx_1024
	branch strchr(r12_256, 0x0000000000000030) == 0x0000000000000000 l00000000004114A3
// DataOut: dl ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411486:
	byte al_967 = (byte) (word32) Mem235[0x0000000000000031:byte]
	branch al_967 == 0x44 l000000000041173A
// DataOut: al dl ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411493:
	branch al_967 == 0x69 l0000000000411722
// DataOut: al dl ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411722:
	word64 rcx_991 = (uint64) (Mem235[0x0000000000000032:byte] == 0x42)
	rax_377 = 0x0000000000000400
	eax_378 = 0x00000400 (alias)
	ecx_373 = rcx_991 + 0x0000000000000001 + rcx_991
// DataOut: dl eax ebp ecx r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041149B:
	branch al_967 == 0x42 l000000000041173A
// DataOut: dl ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041173A:
	ecx_373 = 0x00000002 (alias)
	rax_377 = 0x00000000000003E8
	eax_378 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114A3:
	ecx_373 = 0x00000001 (alias)
	rax_377 = 0x0000000000000400
	eax_378 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114AD:
	word64 rdx_380 = (uint64) (edx_370 - 0x00000042)
	byte dl_383 = (byte) rdx_380
	branch dl_383 >u 0x35 l0000000000411500
// DataOut: dl eax ebp ecx r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114B5:
	word32 edx_398
	word64 rdi_594
	switch (DPB(rdx_380, (word32) dl_383, 0)) { l00000000004116D9 l0000000000411500 l0000000000411500 l000000000041169A l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411604 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411592 l0000000000411557 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l000000000041153C l000000000041150E l0000000000411500 l0000000000411500 l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l000000000041152C }
// DataOut: eax ebp ecx r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041152C:
	branch rbx_1051 < 0x0000000000000000 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411535:
	rbx_1051 = rbx_1051 * 0x0000000000000002
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041150E:
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041153C:
	word64 r8_924 = 0x00000000FFFFFFFF
	*r8Out = r8_924
	branch rbx_1051 >u rax_377 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041154F:
	rbx_1051 = rbx_1051 << 0x0000000000000009
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:0x00000000FFFFFFFF edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411557:
	word64 rdi_856 = (int64) eax_378
	word64 rax_863 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_856)
	word32 esi_867 = 0x00000007
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041157E:
	branch rax_863 >=u rbx_1051 l000000000041156F
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041156F:
	rbx_1051 = rbx_1051 *s rdi_856
	word64 r8_920
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411583:
	rbx_1051 = 0xFFFFFFFFFFFFFFFF
	rax_863 = 0x0000000000000001
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411576:
	rsi_361 = (uint64) (esi_867 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	esi_867 = (word32) rsi_361 (alias)
	branch esi_867 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411592:
	word64 rdi_788 = (int64) eax_378
	word64 rax_795 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_788)
	word32 esi_799 = 0x00000008
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115BD:
	branch rax_795 >=u rbx_1051 l00000000004115AA
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115AA:
	rbx_1051 = rbx_1051 *s rdi_788
	word64 r8_852
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115C2:
	rbx_1051 = 0xFFFFFFFFFFFFFFFF
	rax_795 = 0x0000000000000001
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115B1:
	rsi_361 = (uint64) (esi_799 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	esi_799 = (word32) rsi_361 (alias)
	branch esi_799 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115D1:
	rsi_361 = (int64) eax_378
	word64 rax_727 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_361)
	word32 edi_731 = 0x00000004
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115E7:
	branch rax_727 <u rbx_1051 l0000000000411749
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411749:
	rbx_1051 = 0xFFFFFFFFFFFFFFFF
	rax_727 = 0x0000000000000001
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F0:
	rbx_1051 = rbx_1051 *s rsi_361
	word64 r8_777
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F7:
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	edi_731 = (word32) (uint64) (edi_731 - 0x00000001) (alias)
	branch edi_731 != 0x00000000 l00000000004115E7
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115FF:
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:(uint64) (edi - 0x00000001) rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411604:
	rsi_361 = (int64) eax_378
	word64 rax_659 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_361)
	word32 edi_663 = 0x00000005
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041162F:
	branch rax_659 >=u rbx_1051 l000000000041161C
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041161C:
	rbx_1051 = rbx_1051 *s rsi_361
	word64 r8_716
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411634:
	rbx_1051 = 0xFFFFFFFFFFFFFFFF
	rax_659 = 0x0000000000000001
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411623:
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	edi_663 = (word32) (uint64) (edi_663 - 0x00000001) (alias)
	branch edi_663 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411643:
	rdi_594 = (int64) eax_378
	rsi_361 = 0xFFFFFFFFFFFFFFFF
	word64 rax_632 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_594)
	branch rbx_1051 >u rax_632 l000000000041177B
// DataOut: ebp ecx r12 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041165E:
	rbx_1051 = rbx_1051 *s rdi_594
	branch rax_632 <u rbx_1051 l000000000041177B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041177B:
	edx_398 = 0x00000001 (alias)
	rbx_1051 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411676:
	rdi_594 = (int64) eax_378
	rsi_361 = 0xFFFFFFFFFFFFFFFF
	branch rbx_1051 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_594) l000000000041166B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041166B:
	rsi_361 = 0xFFFFFFFFFFFFFFFF
	rbx_1051 = rbx_1051 *s rdi_594
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041168D:
	rbx_1051 = 0xFFFFFFFFFFFFFFFF
	edx_398 = 0x00000001 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116F3:
	rsi_361 = (int64) eax_378
	word64 rax_524 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_361)
	word32 edi_528 = 0x00000003
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411709:
	branch rax_524 <u rbx_1051 l000000000041176C
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041176C:
	rbx_1051 = 0xFFFFFFFFFFFFFFFF
	rax_524 = 0x0000000000000001
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041170E:
	rbx_1051 = rbx_1051 *s rsi_361
	word64 r8_574
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411715:
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	edi_528 = (word32) (uint64) (edi_528 - 0x00000001) (alias)
	branch edi_528 != 0x00000000 l0000000000411709
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041171D:
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:(uint64) (edi - 0x00000001) rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041169A:
	word64 rdi_449 = (int64) eax_378
	word64 rax_456 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_449)
	word32 esi_460 = 0x00000006
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116C5:
	branch rax_456 >=u rbx_1051 l00000000004116B2
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B2:
	rbx_1051 = rbx_1051 *s rdi_449
	word64 r8_513
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116CA:
	rbx_1051 = 0xFFFFFFFFFFFFFFFF
	rax_456 = 0x0000000000000001
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B9:
	rsi_361 = (uint64) (esi_460 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	esi_460 = (word32) rsi_361 (alias)
	branch esi_460 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411500:
	Mem345[rbp_1003:word64] = rbx_1051
	eax_169 = (word32) (uint64) ((word32) (uint64) ebp_1004 | 0x00000002) (alias)
// DataOut: eax r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116D9:
	word64 r8_436 = 0x00000000FFFFFFFF
	*r8Out = r8_436
	branch rbx_1051 >u rax_377 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041175B:
	rbx_1051 = 0xFFFFFFFFFFFFFFFF
	edx_398 = 0x00000001 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116E8:
	rbx_1051 = rbx_1051 << 0x000000000000000A
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:0x00000000FFFFFFFF edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411510:
	rbp_1003 = (uint64) (ebp_1004 | edx_398)
	Mem415[r15_251:word64] = r14_274 + (int64) ecx_373
	ebp_1004 = (word32) rbp_1003 (alias)
	word32 eax_413 = (word32) (uint64) ((word32) (uint64) ebp_1004 | 0x00000002)
	branch Mem415[rsi_361:byte] == 0x00 l0000000000411527
// DataOut: eax ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411524_1:
	ebp_1004 = eax_413
	rbp_1003 = DPB(rbp_1003, eax_413, 0) (alias)
// DataOut: ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411527:
// DataOut: ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411422:
	Mem305[rbp_1003:word64] = rbx_1051
	word64 rbp_318
	*rbpOut = Mem305[qwLoc08 + 0x0000000000000008:word64]
	return (word32) (uint64) ebp_1004
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004113C0:
	eax_169 = 0x00000004 (alias)
// DataOut: eax r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113C5:
	word64 rbp_182
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return eax_169
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411360_exit:
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn00000000004117B0(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004117B0_entry:
// DataOut: ebp ebx edi fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l00000000004117B0:
	word32 eax_16
	branch edi == 0x00000000 l0000000000411800
// DataOut: ebp ebx edi fs r11 r12 r14 r15 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411800:
	Mem78[__errno_location():word32] = 0x0000005F
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117B8:
	word64 rax_24 = (uint64) edi
	byte Z_22 = cond(edi - 0x0000000A)
	eax_16 = (word32) rax_24 (alias)
	branch edi == 0x0000000A l00000000004117C8
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117C8:
	word64 rdx_31 = Mem0[rsi:word64]
	word64 rdi_32 = 0x00000000004137B1
	word64 rcx_34 = 0x000000000000000A
	word64 rsi_35 = rdx_31
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi

l00000000004117D8:
	branch rcx_34 == 0x0000000000000000 l00000000004117DA
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117D8_1:
	Z_22 = cond(Mem0[rsi_82:byte] - Mem0[rdi_81:byte]) (alias)
	rsi_35 = rsi_82 + 0x0000000000000001
	rdi_32 = rdi_81 + 0x0000000000000001
	rcx_34 = rcx_34 - 0x0000000000000001
	word64 rdi_81 = rdi_32
	word64 rsi_82 = rsi_35
	branch Mem0[rsi_82:byte] != Mem0[rdi_81:byte] l00000000004117D8
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DA:
	branch Z_22 l00000000004117BF
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DC:
	word64 rsp_53
	byte SCZO_54
	word32 edi_55
	byte SZO_56
	byte C_57
	byte Z_58
	word64 rax_59
	word64 rsi_60
	word64 rdx_61
	word64 rdi_62
	word64 rcx_63
	word32 eax_64
	call freecon (retsize: 8; depth: 8)
		uses: C_48,eax_25,edi_50,rax_24,rcx_44,rdi_52,rdx_31,rsi_46,rsp_2,SCZO_51,SZO_49,Z_47
		defs: C_57,eax_64,edi_55,rax_59,rcx_63,rdi_62,rdx_61,rsi_60,rsp_53,SCZO_54,SZO_56,Z_58
	Mem66[__errno_location():word32] = 0x0000003D
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117BF:
	return eax_16
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

fn00000000004117B0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:v3 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>



word32 fn0000000000411820(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411820_entry:
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411820:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	word64 rdi_14
	call getfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: eax_13,edi_12,rbx_10,rdi_14,rsi_11,rsp_9
	word32 edi_17 = (word32) (uint64) eax_13
// DataOut: ebp ebx edi fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041182F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_10, edi_17)
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi rdi:(uint64) eax -4(fp):rbx

fn0000000000411820_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx



word32 fn0000000000411840(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411840_entry:
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411840:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	word64 rdi_14
	byte SCZO_15
	byte SZO_16
	byte C_17
	byte Z_18
	word64 rax_19
	word64 rdx_20
	word32 ecx_21
	word64 rcx_22
	call lgetfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: C_17,eax_13,ecx_21,edi_12,rax_19,rbx_10,rcx_22,rdi_14,rdx_20,rsi_11,rsp_9,SCZO_15,SZO_16,Z_18
	word32 edi_25 = (word32) (uint64) eax_13
// DataOut: ebp ebx edi fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041184E_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_10, edi_25)
// DataOut: eax ebp ebx fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi rdi:(uint64) eax -4(fp):rbx

fn0000000000411840_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx



void fn0000000000411880(word64 rax, word64 rdi, word64 r8, word64 r13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r13 r8 rax rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411880_entry:
// DataOut: eax r13 r8 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411880:
	word64 rsp_13
	word64 rbp_14
	word64 rdi_15
	word64 rbx_16
	word32 ebx_17
	word64 r12_18
	word64 rax_19
	byte SZO_20
	byte C_21
	word32 eax_22
	byte dl_23
	byte Z_24
	byte SCZO_25
	byte bl_26
	word64 r8_27
	word64 r13_28
	word64 rsi_29
	call __fpending (retsize: 8; depth: 20)
		uses: dwLoc04_4,dwLoc08_7,dwLoc0C_12,rbp_9,rbx,rdi,rsp_10
		defs: bl_26,C_21,dl_23,eax_22,ebx_17,r12_18,r13_28,r8_27,rax_19,rbp_14,rbx_16,rdi_15,rsi_29,rsp_13,SCZO_25,SZO_20,Z_24
	word32 ebx_35
	word64 rsp_36
	word64 rbp_37
	word64 rsi_38
	word64 r12_39
	word32 eax_41 = (word32) fn0000000000411D30(rax_19, rbp_14, r8_27, r13_28, out ebx_35, out rsp_36, out rbp_37, out rsi_38, out r12_39)
	branch (word32) (uint64) (ebx_35 & 0x00000020) != 0x00000000 l00000000004118C0
// DataOut: dl ebx r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004118C0:
	branch eax_41 != 0x00000000 != 0x00 l00000000004118B4
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) (ebx & 0x00000020) rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118C9:
	Mem106[__errno_location():word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118A6:
	branch eax_41 != 0x00000000 == 0x00 l00000000004118B4
// DataOut: ebx r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) (ebx & 0x00000020) rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118AA:
	branch r12_39 == 0x0000000000000000 l00000000004118E0
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) (ebx & 0x00000020) rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118E0:
	__errno_location()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118B4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:(uint64) ebx bl:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000411900(word64 rsi, word64 r8, word64 r12, word64 r13, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r12 r13 r15 r8 rsi
// LiveOut: r12 r12b r12d r13 r15 r15b r8 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411900_entry:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411900:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rdi = 0x000000000000000E
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v7 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rsp = fp - 0x00000000000000C0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	rax = 0x0000000000000000
	SZO = cond(eax)
	C = false
	call nl_langinfo (retsize: 8; depth: 200)
	r14 = Mem0[0x000000000061B358:word64]
	SZO = cond(0x0000000000000000)
	C = false
	rbx = 0x0000000000000000
	rax = 0x0000000000416919
	branch Test(NE,Z) l0000000000411944
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411940_1:
	rbx = 0x0000000000416919
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411944:
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000041196A
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411949:
// DataOut: fs r12 r12b r12d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119D4:
	rdi = 0x0000000000417002
	rax = getenv(0x0000000000417002)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l00000000004119EF
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C52:
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C62:
	rax = rax - 0x0000000000000001
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119EF:
	rax = 0x0000000000000007
	rsp = 0x0000000000000008
	rdi = 0x0000000000416FF3
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	rbp = 0x0000000000000001
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C42:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000000
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> rbp:0x0000000000000001 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A19:
	r13 = 0x0000000000000000 + r12
	rdi = 0x000000000000000F
	rax = malloc(0x000000000000000F)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:0x0000000000000001 r12:<invalid> r13:0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CF2:
	rsi = 0x0000000000416919
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:0x000000000000000F rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	rdx = (uint64) Mem0[rsp + 0x0000000000000008:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
// DataOut: fs r13 r14 r15 r15b rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:0x000000000000000F rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
// DataOut: fs r13 r14 r15 r15b rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A4D:
	r13 = r13 + rbp
	r8 = 0x0000000072616863
	rsi = 0x0000000000020000
	Mem0[rbp + 0x0000000000000000:word64] = rax
	rax = 0x0000000000000073
	Mem0[rbp + 0x0000000000000008:word32] = 0x61696C61
	Mem0[rbp + 0x000000000000000C:word16] = ax
	rdi = rbp
	rax = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	r12 = (uint64) eax
	branch Test(SG,S) l0000000000411C28
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A8A:
	rsi = 0x0000000000413A21
	rdi = (uint64) eax
	rax = fdopen(rdi, 0x0000000000413A21)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:(uint64) eax r13:<invalid> rdx:<invalid> rsi:0x0000000000020000 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C20:
	rdi = (uint64) r12d
	rax = DPB(rax, close(rdi), 0)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:(uint64) eax rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:(uint64) eax r13:<invalid> rdx:<invalid> rsi:0x0000000000413A21 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AA2:
	r12 = rsp + 0x0000000000000020
	Mem0[rsp + 0x0000000000000008:word64] = 0x0000000000000000
// DataOut: fs r12 r13 r14 r15 r15b r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:(uint64) eax rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:(uint64) eax r13:<invalid> rdx:<invalid> rsi:0x0000000000413A21 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AB0:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
// DataOut: fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C75:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D1D:
	rdi = r15
	call __uflow (retsize: 8; depth: 8)
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ADF:
	rsi = r15
	rax = DPB(rax, ungetc(rdi, rsi), 0)
	rcx = rsp + 0x0000000000000060
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = r12
	rsi = 0x0000000000417012
	rdi = r15
	call fscanf (retsize: 8; depth: 8)
	SCZO = cond(0xFFFFFFFF)
	branch Test(LE,SZO) l0000000000411C9C
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B07:
	rdx = r12
// DataOut: fs r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B0A:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
// DataOut: al eax fs r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B21:
	rcx = (uint64) eax
	r10 = rsp + 0x0000000000000060
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
// DataOut: al cl fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) ~ecx r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B30_1:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) (ecx >>u 0x00000010) r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
// DataOut: al fs r10 r12 r14 r15 r15b r8 rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) (ecx >>u 0x00000010) r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B37_1:
	rdx = rcx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = rdx - r12
	SCZO = cond(rdx)
// DataOut: fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B44:
	rcx = (uint64) Mem0[rdx:word32]
	r10 = r10 + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
// DataOut: al eax fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B5C:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
// DataOut: al cl fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) ~ecx r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B66_1:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) (ecx >>u 0x00000010) r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B69:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
// DataOut: al fs r10 r12 r14 r15 r15b r8 rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) (ecx >>u 0x00000010) r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B6D_1:
	r10 = rcx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = rsp + 0x0000000000000060
	r10 = r10 - 0x03 - C
	r10 = r10 - rax
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
// DataOut: fs r10 r12 r14 r15 r15b r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CBC:
	rax = rax + Mem0[rsp + 0x0000000000000008:word64]
	SCZO = cond(rax)
	rdi = r14
	Mem0[rsp + 0x0000000000000018:word64] = r10
	Mem0[rsp + 0x0000000000000010:word64] = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = realloc(rdi, rsi)
	r10 = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
	rdx = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: eax fs r10 r12 r13 r14 r15 r15b r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000018:word64] = rdx
	Mem0[rsp + 0x0000000000000010:word64] = r10
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = malloc(rdi)
	r10 = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
// DataOut: eax fs r10 r12 r13 r14 r15 r15b r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
// DataOut: eax fs r10 r12 r13 r14 r15 r15b r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BC1:
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = r12
	rdi = 0xFFFFFFFFFFFFFFFE - rdx
	r14 = r14 - r10
	rdi = rdi + r14
	rdi = rdi + r13
	rax = strcpy(rdi, rsi)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = rsp + 0x0000000000000060
	r14 = r13
	rax = strcpy(rdi, rsi)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C01:
	rdi = r15
	call __uflow (retsize: 8; depth: 8)
	SCZO = cond(eax - 0xFFFFFFFF)
	rdi = (uint64) eax
	branch Test(EQ,Z) l0000000000411C9C
// DataOut: eax edi fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C9C:
	rdi = r15
	rax = fn0000000000411D30(rax, rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C28:
	rsi = 0x0000000000416919
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C2E:
	rdi = rbp
	free(rdi)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rsi:<invalid> ebp:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041196A:
	ebp = (word32) Mem0[rsi:byte]
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000041199C
// DataOut: bpl eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411973:
	rsi = r14
	rdi = rbx
	rax = DPB(rax, strcmp(rdi, rsi), 0)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
// DataOut: bpl fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411988:
	SCZO = cond(Mem0[rsi + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411950:
	rdi = r14
	rax = DPB(rax, strlen(rdi), 0)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	rax = DPB(rax, strlen(rdi), 0)
	r14 = rbp + 0x0000000000000001 + rax
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041198F:
	rdi = r14
	rax = DPB(rax, strlen(rdi), 0)
	rbx = r14 + 0x0000000000000001 + rax
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	rax = 0x0000000000416FFC
	branch Test(NE,Z) l00000000004119A8
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A4_1:
	rbx = 0x0000000000416FFC
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:0x00416FFC r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A8:
	rcx = Mem0[rsp + 0x0000000000000098:word64]
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:0x00416FFC r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CFD:
	__stack_chk_fail()
// DataOut: eax fs r13 r14 r15 r15b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D02:
	rdi = r14
	rsi = 0x0000000000416919
	free(rdi)
	rdi = r15
	rax = fn0000000000411D30(rax, rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119C2:
	rsp = rsp + 168
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411900_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r8 (=> r8Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r15 (=> r15Out)
// DataOut: r12 r12b r12d r13 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C14:
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000411D30(word64 rax, word64 rdi, word64 r8, word64 r13, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r13 r8 rax rdi
// LiveOut: eax ebx r12 r12b r12d rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411D30_entry:
	*rsiOut = rsi
	*r12Out = r12
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411D30:
	word64 rax_122 = DPB(rax, fileno(rdi), 0)
	word64 rsp_127 = fp - 0x000000000000000C
	word32 eax_16 = fileno(rdi)
	word64 rdi_128 = rdi
	branch eax_16 < 0x00000000 l0000000000411D9F
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411D43:
	word64 rsp_85
	word64 rbp_86
	word64 rdi_88
	word32 eax_90
	byte SZO_91
	byte C_92
	byte S_93
	byte Z_94
	word32 r12d_95
	word64 r12_97
	word32 esi_99
	word64 rsi_100
	word32 edx_101
	word64 rdx_102
	word32 edi_103
	byte SCZO_104
	word32 ebx_105
	word64 r13_133
	word64 r8_134
	word64 rbx_124
	call __freading (retsize: 8; depth: 20)
		uses: C_19,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_16,ebx_13,edi_21,edx,esi,r12,r12d,r13,r8,rax_15,rbp,rbx_12,rdi_20,rdx,rsi,rsp_8,S_18,SCZO,SZO_17,Z
		defs: C_92,eax_90,ebx_105,edi_103,edx_101,esi_99,r12_97,r12d_95,r13_98,r8_96,rax_89,rbp_86,rbx_87,rdi_88,rdx_102,rsi_100,rsp_85,S_93,SCZO_104,SZO_91,Z_94
	branch eax_90 != 0x00000000 l0000000000411D80
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:DPB(rax, <invalid>, 0) rdi:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D80:
	word64 rax_175 = DPB(rax_122, fileno(rbx_124), 0)
	word64 rbp_184
	word64 rdi_186
	word32 eax_188
	byte SZO_189
	byte C_190
	byte S_191
	byte Z_192
	word32 r12d_193
	word64 r12_195
	word32 esi_197
	word64 rsi_198
	word32 edx_199
	word64 rdx_200
	word32 edi_201
	byte SCZO_202
	word32 ebx_203
	call lseek (retsize: 8; depth: 20)
		uses: C_180,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_176,ebx_105,edi_103,edx_101,esi_178,r12_97,r12d_95,r13_98,r8_96,rax_175,rbp_86,rbx_87,rdi_182,rdx_181,rsi_177,rsp_85,S_93,SCZO_104,SZO_179,Z_107
		defs: C_190,eax_188,ebx_203,edi_201,edx_199,esi_197,r12_195,r12d_193,r13_196,r8_194,rax_187,rbp_184,rbx_185,rdi_186,rdx_200,rsi_198,rsp_183,S_191,SCZO_202,SZO_189,Z_192
	branch rax_122 != 0xFFFFFFFFFFFFFFFF l0000000000411D4C
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D4C:
	word64 rsi_146
	rax_122 = fn0000000000411DB0(rax_122, rbx_124, out rsp_127, out rsi_146)
	branch (word32) rax_122 == 0x00000000 l0000000000411D9C
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9C:
	rdi_128 = rbx_124
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9F:
	word64 rsp_78 = rsp_127 + 0x0000000000000008
	word32 ebx_77
	*ebxOut = (word32) Mem0[rsp_127:word64]
	word64 rbp_79
	*rbpOut = Mem0[rsp_78:word64]
	word64 rsp_82
	*rspOut = Mem0[rsp_78 + 0x0000000000000008:word64] + 0x0000000000000008
	return DPB(rax_122, fclose(rdi_128), 0)
// DataOut: eax ebx fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D58:
	word64 rax_152 = __errno_location()
	word64 r12_153 = (uint64) Mem0[r8_134:word32]
	*r12Out = r12_153
	word32 r12d_154 = (word32) r12_153
	word64 rax_157 = DPB(rax_152, fclose(rbx_124), 0)
	branch r12d_154 == 0x00000000 l0000000000411D79
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D70:
	Mem171[r13_133:word32] = r12d_154
	rax_157 = 0x00000000FFFFFFFF
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r12:(uint64) Mem0[r8:word32] rbp:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D79:
	word32 ebx_165
	*ebxOut = (word32) Mem0[rsp_127:word64]
	word64 rbp_167
	*rbpOut = Mem0[rsp_127 + 0x0000000000000008:word64]
	word64 rsp_170
	*rspOut = Mem0[rsp_127 + 0x0000000000000010:word64] + 0x0000000000000008
	return rax_157
// DataOut: eax ebx fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r12:(uint64) Mem0[r8:word32] rbp:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411D30_exit:
// DataOut: eax ebx r12 r12b r12d rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rbp:<invalid> r12:(uint64) Mem0[r8:word32] rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000411DB0(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rax rdi
// LiveOut: eax rax rsi rsp
// Trashed: SCZO ah al ax bh bl bx dh dl dx eax ebx edx esi esp rax rbx rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411DB0_entry:
	*rsiOut = rsi
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB0:
	word64 rbx_36 = rdi
	branch rdi == 0x0000000000000000 l0000000000411DC2
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB9:
	word64 rsp_45
	word64 rdi_46
	byte SZO_47
	byte C_48
	byte Z_50
	word32 eax_51
	word32 edx_53
	word64 rdx_54
	word32 esi_55
	word64 rsi_56
	call __freading (retsize: 8; depth: 12)
		uses: C_5,dwLoc04_8,eax,edx,esi,qwLoc04,rax,rbx_9,rdi,rdx,rsi,rsp_6,SZO_3,Z_4
		defs: C_48,eax_51,edx_53,esi_55,rax_52,rbx_49,rdi_46,rdx_54,rsi_56,rsp_45,SZO_47,Z_50
	branch eax_51 != 0x00000000 l0000000000411DD0
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD0:
	branch (Mem0[rbx_36:word32] & 0x00000100) == 0x00000000 l0000000000411DC2
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD8:
	word64 rsp_76
	*rspOut = rsp_71 + 0x0000000000000008
	word64 rsp_71
	word64 rsi_72
	return DPB(fn0000000000411DF0(0x00000001, rbx_36, out rsp_71, out rsi_72), fflush(rbx_36), 0)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l0000000000411DC2:
	word64 rsp_41
	*rspOut = fp + 0x0000000000000004
	return DPB(rax, fflush(rbx_36), 0)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

fn0000000000411DB0_exit:
// DataOut: eax rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdi:rdi rax:<invalid> rdx:<invalid> rsi:<invalid> -4(fp):rbx



word64 fn0000000000411DF0(word32 edx, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx rdi
// LiveOut: eax rax rsi rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi esp rax rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411DF0_entry:
// DataOut: edx fs r12 r12b r12d r13 r14 r15 r15b r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DF0:
	word64 rax_9 = Mem0[rdi + 0x0000000000000008:word64]
	branch Mem0[rdi + 0x0000000000000010:word64] == rax_9 l0000000000411E10
// DataOut: eax edx fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411E10:
	word64 rax_57 = Mem0[rdi + 0x0000000000000020:word64]
	branch Mem0[rdi + 0x0000000000000028:word64] != rax_57 l0000000000411E02
// DataOut: eax edx fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E1A:
	branch Mem0[rdi + 0x0000000000000048:word64] != 0x0000000000000000 l0000000000411E02
// DataOut: eax edx fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E21:
	word64 rax_65 = DPB(rax_57, fileno(rdi), 0)
	word64 rsp_70
	word64 rbx_71
	word64 rdi_72
	byte SCZO_73
	byte Z_75
	word32 edx_76
	word64 rsi_77
	word64 rdx_78
	word32 edi_79
	word32 eax_80
	byte SZO_81
	byte C_82
	word64 rax_74
	call lseek (retsize: 8; depth: 28)
		uses: C,dwLoc04_4,dwLoc08_63,eax_66,edi,edx,qwLoc04,qwLoc14_64,rax_65,rbx_6,rdi_69,rdx_67,rsi_68,rsp_7,SCZO_61,SZO,Z_62
		defs: C_82,eax_80,edi_79,edx_76,rax_74,rbx_71,rdi_72,rdx_78,rsi_77,rsp_70,SCZO_73,SZO_81,Z_75
	branch rax_74 == 0xFFFFFFFFFFFFFFFF l0000000000411E4F
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E43:
	Mem94[rbx_71:word32] = Mem0[rbx_71:word32] & 0xFFFFFFEF
	Mem96[rbx_71 + 0x0000000000000090:word64] = rax_74
	rax_74 = 0x0000000000000000
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E4F:
	word64 rsp_92
	*rspOut = fp + 0x0000000000000004
	return rax_74
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx

l0000000000411E02:
	word64 rsp_44
	word64 rbx_45
	word64 rdi_46
	byte SCZO_47
	word64 rax_48
	byte Z_49
	word32 edx_50
	word64 rsi_51
	word64 rdx_52
	word32 edi_53
	word32 eax_54
	byte SZO_55
	byte C_56
	call fseeko (retsize: 8;)
		uses: C,dwLoc04_4,dwLoc08,eax_10,edi,edx,qwLoc04,qwLoc14,rax_9,rbx_34,rdi_32,rdx,rsi,rsp_35,SCZO_31,SZO,Z_12
		defs: C_56,eax_54,edi_53,edx_50,rax_48,rbx_45,rdi_46,rdx_52,rsi_51,rsp_44,SCZO_47,SZO_55,Z_49
	return rax_48
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx

fn0000000000411DF0_exit:
// DataOut: eax rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx



void fn0000000000411EE0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rsp
fn0000000000411EE0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EE0:
	branch 0x000000000061A3A8 == 0x0000000000000000 l0000000000411EF6
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EF6:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEF:
	word64 rsp_10
	word64 rax_11
	byte SZO_12
	byte C_13
	byte Z_14
	word64 rdx_15
	word32 esi_16
	word64 rsi_17
	word32 edx_18
	call __cxa_atexit (retsize: 8; depth: 8)
		uses: C_9,esi_7,rax_2,rsi_6,rsp_1,SZO_8,Z_4
		defs: C_13,edx_18,esi_16,rax_11,rdx_15,rsi_17,rsp_10,SZO_12,Z_14
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid>

fn0000000000411EE0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> rsi:<invalid>



void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
_fini_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411EFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

_fini_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



