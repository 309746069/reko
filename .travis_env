#!/bin/bash
##
## Copyright(C) 2018 Stefano Moioli <smxdev4@gmail.com>
## This file is part of Reko Decompiler
##
export PATH="$HOME/prefix/bin:$PATH"
export CC=$HOME/prefix/bin/gcc
export CXX=$HOME/prefix/bin/g++

APT_CACHE_DIR="$HOME/apt_cache"
REKO_PREFIX="$HOME/prefix"

REKO_PLATFORM="x64"
REKO_CONFIGURATION="UnixRelease"
VERBOSITY="minimal"

CAPSTONE_VERSION=3.0.4
CAPSTONE_EXT="tar.gz"
CAPSTONE_URL="https://github.com/aquynh/capstone/archive/${CAPSTONE_VERSION}.${CAPSTONE_EXT}"

export PKG_CONFIG_PATH="${REKO_PREFIX}/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"

function step_before_install(){
	set -x -e
	# Initialize cache if needed
	[ ! -d ${APT_CACHE_DIR}/cache ] && mkdir -p ${APT_CACHE_DIR}/cache
  	[ ! -d ${APT_CACHE_DIR}/lib ] && mkdir -p ${APT_CACHE_DIR}/lib

	# Initialize prefix
	mkdir -p ${REKO_PREFIX}/{bin,tmp}

	# Restore APT state from cache
	echo "Restoring APT Cache..."
	sudo cp -Rv ${APT_CACHE_DIR}/cache/. /var/cache/apt/
	sudo cp -Rv ${APT_CACHE_DIR}/lib/. /var/lib/apt/
	sudo chown -R root:root /var/lib/apt
	sudo chown -R root:root /var/cache/apt

	# Check for new versions of packages
	echo "Adding repositories..."

	sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
	sudo apt install apt-transport-https ca-certificates
	echo "deb https://download.mono-project.com/repo/ubuntu stable-xenial main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
	sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
	
	echo "Checking for package updates..."
	sudo apt-get update -qq
	sudo apt-get install -y \
		gcc-7-multilib \
		g++-7-multilib \
		mono-devel \
		nuget \
		msbuild \
		referenceassemblies-pcl
	sudo apt-get autoclean

	echo "Installing dotnet..."
	wget -q packages-microsoft-prod.deb https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb
	sudo dpkg -i packages-microsoft-prod.deb

	# Re-create APT cache from the current state
	echo "Rebuilding APT Cache..."
	rm -Rf ${APT_CACHE_DIR}
	mkdir -p ${APT_CACHE_DIR}
	sudo cp -Rv /var/lib/apt/. ${APT_CACHE_DIR}/lib/
	sudo cp -Rv /var/cache/apt/. ${APT_CACHE_DIR}/cache/
	sudo chown -R travis:travis ${APT_CACHE_DIR}

	# Prepare custom build prefix
	echo "Setting up build environment..."
	ln -s /usr/bin/gcc-7 ${REKO_PREFIX}/bin/gcc
	ln -s /usr/bin/g++-7 ${REKO_PREFIX}/bin/g++

	# Download and build capstone
	echo "Building capstone..."
	pushd ${REKO_PREFIX}/tmp
		wget ${CAPSTONE_URL}
		tar -xf "${CAPSTONE_VERSION}.${CAPSTONE_EXT}"
		cd capstone-${CAPSTONE_VERSION}

		# Install capstone to custom prefix
		echo "Installing capstone..."
		DESTDIR=${REKO_PREFIX} make install -j $(grep processor /proc/cpuinfo | wc -l)
	popd
	set +x +e
}

function step_install(){
	set -x -e
	nuget restore src/Reko-decompiler.sln -MSBuildVersion 14
	nuget install NUnit.Console -Version 3.9.0 -OutputDirectory testrunner
	set +x +e
}

function step_script(){
	set -x -e
	msbuild /version
	msbuild /p:Configuration=${REKO_CONFIGURATION} /p:Platform=${REKO_PLATFORM} /verbosity:${VERBOSITY} src/Reko-decompiler.sln
	mono ./testrunner/NUnit.ConsoleRunner.3.9.0/tools/nunit3-console.exe \
		./src/UnitTests/bin/${REKO_PLATFORM}/${REKO_CONFIGURATION}/Reko.UnitTests.dll \
		--where="cat != FailedTests && cat != UserInterface"
	python ./subjects/regressionTests.py --check-output --platform=${REKO_PLATFORM} --configuration=${REKO_CONFIGURATION}
	set +x +e
}